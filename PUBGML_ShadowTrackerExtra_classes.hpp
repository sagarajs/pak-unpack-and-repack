#pragma once

// SDK Generated By @Akshat_Mods For PUBG MOBILE LITE (0.27.0)
namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class ShadowTrackerExtra.ActivityActorBase
// 0x00B8 (0x0448 - 0x0390)
class AActivityActorBase : public AActor
{
public:
	struct FString                                     actorName;                                                // 0x0390(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bActived;                                                 // 0x03A0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bButtonShow;                                              // 0x03A1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03A2(0x0002) MISSED OFFSET
	TWeakObjectPtr<class ACharacter>                   ClientMainCharacter;                                      // 0x03A4(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ACharacter>                   CurActiveCharacter;                                       // 0x03AC(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	class UMeshComponent*                              Mesh;                                                     // 0x03B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UShapeComponent*                             ShapeCollision;                                           // 0x03C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bActivityEnable;                                          // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03C9(0x0007) MISSED OFFSET
	struct FString                                     ActivityName;                                             // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SkillIndex;                                               // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUTSkillEntry                                      SkillEntry;                                               // 0x03E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03E5(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData04[0x28];                                      // 0x03E5(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.ActivityActorBase.SoftAnimMontage
	int                                                ButtonShowTextID;                                         // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData06[0x28];                                      // 0x0414(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.ActivityActorBase.ButtonShowPic
	bool                                               bButtonShowWhenFinished;                                  // 0x0440(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsIgnoreShootHistoryLocusVerify;                         // 0x0441(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x6];                                       // 0x0442(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActivityActorBase");
		return pStaticClass;
	}


	void UpdateButtonInfo(class ACharacter* Character, bool bShow, bool bForce);
	void TriggerSkillEvent(class ACharacter* Character);
	void RPC_Client_ShowInteractiveButton(class ACharacter* Character, bool bAdd);
	void RPC_Client_RefreshButtonInfo(class ACharacter* Character, bool bShow);
	void RefreshButtonInfo(class ACharacter* Character);
	void OnEndOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnBeginOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	bool LocalStartActive(class ACharacter* Character);
	void LocalReset(class ACharacter* Character);
	bool LocalInterruptActive(class ACharacter* Character);
	bool LocalActiveFinished(class ACharacter* Character);
	class UMeshComponent* GetMesh();
	class ACharacter* GetMainCharacter();
	class ACharacter* GetActivedCharacter();
	bool ClientClickButton(class ACharacter* Character, int* OutReason);
	bool BPStartActive(class ACharacter* Character, bool bSuccess, bool bClient);
	void BPReset(class ACharacter* Character);
	void BPOnCharacterAttached(class ACharacter* InCharacter);
	bool BPInterruptActive(class ACharacter* Character, bool bSuccess, bool bClient);
	void BPGetSoftAnimMontage(class ACharacter* InCharacter);
	bool BPClientClickButtonFailed(class ACharacter* Character, int Reason);
	bool BPActiveFinished(class ACharacter* Character, bool bSuccess, bool bClient);
	bool AllowShowButton(class ACharacter* Character, int* Reason);
	bool AllowInteractive(class ACharacter* Character, int* Reason);
	bool AllowClickButton(class ACharacter* Character, int* Reason);
};


// Class ShadowTrackerExtra.ActivityActorInterface
// 0x0000 (0x0028 - 0x0028)
class UActivityActorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActivityActorInterface");
		return pStaticClass;
	}


	bool IsAllowInteractive();
	bool HasActivityActor(class AActivityActorBase* InActor);
	class AActivityActorBase* GetCurActivityActor();
	void DeleteActivityActor(class AActivityActorBase* InActor);
	void AddActivityActor(class AActivityActorBase* InActor);
};


// Class ShadowTrackerExtra.ActivityInteractiveActor
// 0x0000 (0x0448 - 0x0448)
class AActivityInteractiveActor : public AActivityActorBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActivityInteractiveActor");
		return pStaticClass;
	}


	void UpdateButtonInfo(class ACharacter* Character, bool bShow, bool bForce);
	void TriggerSkillEvent(class ACharacter* Character);
	void OnHandleSkillEndEvent(class ACharacter* Character, EUTSkillStopReason StopReason, int SkillID);
	bool LocalStartActive(class ACharacter* Character);
	bool LocalInterruptActive(class ACharacter* Character);
	bool LocalActiveFinished(class ACharacter* Character);
	class ACharacter* GetMainCharacter();
	bool BPUpdateButtonInfo(class ACharacter* Character, bool bShow);
	bool BPAllowShowButton(class ACharacter* Character, int* Reason);
	bool BPAllowInteractive(class ACharacter* Character);
	bool AllowShowButton(class ACharacter* Character, int* Reason);
	bool AllowInteractive(class ACharacter* Character, int* Reason);
	bool AllowClickButton(class ACharacter* Character, int* Reason);
};


// Class ShadowTrackerExtra.ActorAttachUIComp
// 0x0048 (0x0158 - 0x0110)
class UActorAttachUIComp : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0110(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.ActorAttachUIComp.UIClass
	bool                                               BShowMiniMapUI;                                           // 0x0138(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	int                                                MiniMapUIIcon;                                            // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarkDispatchRange                                 RangeType;                                                // 0x0140(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	float                                              SquredDistanceOfSwitchingVisibility;                      // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UActorPositionWidget*                        PositionWidget;                                           // 0x0148(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                AlertID;                                                  // 0x0150(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0154(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActorAttachUIComp");
		return pStaticClass;
	}


	void SetActorPositionWidgetClass();
	class UActorPositionWidget* GetPositionWidget();
};


// Class ShadowTrackerExtra.ActorAttributeComponent
// 0x0018 (0x0128 - 0x0110)
class UActorAttributeComponent : public UActorComponent
{
public:
	struct FString                                     tableName;                                                // 0x0110(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0120(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActorAttributeComponent");
		return pStaticClass;
	}


	void UpdateAttribute(int TemplateID);
	void InitializeFollow();
	void Initialize(class AActor* Actor);
};


// Class ShadowTrackerExtra.ActorCacheMgr
// 0x0050 (0x03E0 - 0x0390)
class AActorCacheMgr : public AActor
{
public:
	TMap<class UClass*, class UActorCachePool*>        DataMap;                                                  // 0x0390(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActorCacheMgr");
		return pStaticClass;
	}


	class AActor* GetActor(class UClass* Type);
	bool AddToPool(class UClass* Type, class AActor* Target);
};


// Class ShadowTrackerExtra.ActorCachePool
// 0x0028 (0x0050 - 0x0028)
class UActorCachePool : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActorCachePool");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ClassActorComponentPoolCollect
// 0x0050 (0x0078 - 0x0028)
class UClassActorComponentPoolCollect : public UObject
{
public:
	TMap<struct FString, class UActorComponentPool*>   PoolMaps;                                                 // 0x0028(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ClassActorComponentPoolCollect");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ClassAnimInstancePoolCollect
// 0x0050 (0x0078 - 0x0028)
class UClassAnimInstancePoolCollect : public UObject
{
public:
	TMap<struct FString, class UAnimInstancePool*>     PoolMaps;                                                 // 0x0028(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ClassAnimInstancePoolCollect");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ActorComponentPoolManager
// 0x01C8 (0x0558 - 0x0390)
class AActorComponentPoolManager : public AActor
{
public:
	TMap<class UClass*, class UClassActorComponentPoolCollect*> ActorComponentPoolCollectMaps;                            // 0x0390(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class UClass*, class UClassAnimInstancePoolCollect*> AnimInstancePoolCollectMaps;                              // 0x03E0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0430(0x00D0) MISSED OFFSET
	TMap<class UClass*, struct FPreloadComponentGroup> PreloadComponentGroups;                                   // 0x0500(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0550(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActorComponentPoolManager");
		return pStaticClass;
	}


	static class AActorComponentPoolManager* GetInstance();
	class UActorComponentPool* GetAutoComponentPool(class UClass* Class, const struct FString& ComponentName);
	class UAnimInstancePool* GetAutoAnimInstancePool(class UClass* Class, const struct FString& ComponentName, class UClass* AnimClass);
};


// Class ShadowTrackerExtra.ActorHiddenInterface
// 0x0000 (0x0028 - 0x0028)
class UActorHiddenInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActorHiddenInterface");
		return pStaticClass;
	}


	void SetActorHiddenInGameMask(bool bNewHidden, EActorHiddenMask HiddenMask);
};


// Class ShadowTrackerExtra.ActorPositionWidget
// 0x0088 (0x0430 - 0x03A8)
class UActorPositionWidget : public UUAEUserWidget
{
public:
	class UCanvasPanelSlot*                            MyCanvasPanelSlot;                                        // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                                  TextBlockDist;                                            // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                      AttachedActor;                                            // 0x03B8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector4                                    Limit;                                                    // 0x03C0(0x0010) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   UIOffset;                                                 // 0x03D0(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     LocOffset;                                                // 0x03D8(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaBegin;                                               // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaEnd;                                                 // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaStep;                                                // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaBeginDistance;                                       // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaEndDistance;                                         // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleBegin;                                               // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleEnd;                                                 // 0x03FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleStep;                                                // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleBeginDistance;                                       // 0x0404(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleEndDistance;                                         // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxShowDistance;                                          // 0x040C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                TargetDistance;                                           // 0x0410(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0414(0x000C) MISSED OFFSET
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0420(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0428(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActorPositionWidget");
		return pStaticClass;
	}


	void SetCurrentWidgetVisible(bool visible);
	void DetachFromActor(class AActor* InActor);
	void AttachToActor(class AActor* InActor);
};


// Class ShadowTrackerExtra.ActorBoundingBoxGetterInterface
// 0x0000 (0x0028 - 0x0028)
class UActorBoundingBoxGetterInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActorBoundingBoxGetterInterface");
		return pStaticClass;
	}


	struct FBox GetActorBoundingBox(class AActor* Actor);
};


// Class ShadowTrackerExtra.ActorLocationGetterInterface
// 0x0000 (0x0028 - 0x0028)
class UActorLocationGetterInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ActorLocationGetterInterface");
		return pStaticClass;
	}


	struct FVector GetActorLocation(class AActor* Actor);
};


// Class ShadowTrackerExtra.AdjustSmokeCirclePostMatComponent
// 0x0088 (0x0198 - 0x0110)
class UAdjustSmokeCirclePostMatComponent : public UActorComponent
{
public:
	float                                              CircleInRadius;                                           // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CircleOutRadius;                                          // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistanceForHideSmoke;                                     // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TickInternal;                                             // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          ParentMaterial;                                           // 0x0120(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ShaderUniformName;                                        // 0x0128(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     TagName;                                                  // 0x0130(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 AlphaCurve;                                               // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultSmokeTime;                                         // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FadeOutStartTime;                                         // 0x014C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RealFadeOutStartTime;                                     // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x44];                                      // 0x0154(0x0044) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AdjustSmokeCirclePostMatComponent");
		return pStaticClass;
	}


	void FadeOutParticle();
};


// Class ShadowTrackerExtra.AgentBoundComponent
// 0x0018 (0x0128 - 0x0110)
class UAgentBoundComponent : public UActorComponent
{
public:
	struct FVector                                     LocalCenter;                                              // 0x0110(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocalSize;                                                // 0x011C(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AgentBoundComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AIActingComponent
// 0x0248 (0x0358 - 0x0110)
class UAIActingComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0110(0x0018) MISSED OFFSET
	TArray<struct FAIActingCandidateData>              CandidateAIList;                                          // 0x0128(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0xA0];                                      // 0x0138(0x00A0) MISSED OFFSET
	int                                                MaxActiveAI;                                              // 0x01D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ActiveAI_n;                                               // 0x01DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                ActiveAI_m;                                               // 0x01E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AISpawnCircleOriginOffset;                                // 0x01E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              NoWhiteCirclesRadius;                                     // 0x01E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SelectActionPeriod;                                       // 0x01EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SpawnCheckHumanRadiusSquare;                              // 0x01F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                TryFindSpawnAILocNum;                                     // 0x01F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAIActingItem>                       AIActingItemList;                                         // 0x01F8(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAIBeginAttackEachOther>             AIAttackEachOtherRatingTimeConfig;                        // 0x0208(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int                                                FullFeedLimit;                                            // 0x0218(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	TArray<struct FDeliveryRatingConfig>               DeliveryWaveInterval;                                     // 0x0220(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                              DeliveryBeginTime;                                        // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DeliveryFreq;                                             // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                DeliveryAINumEachPeriod;                                  // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MinimumWarmScore;                                         // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAIDeliveryAreaLimit>                AIDeliveryAreaLimit;                                      // 0x0240(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAIRatingDamage>                     AIRatingDamageConfig;                                     // 0x0250(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAIAttackAIRatingDamage>             AIAttackAIRatingDamage;                                   // 0x0260(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDeliveryPlayerConfig>               AIDeliveryPlayerConfig;                                   // 0x0270(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class ACirleAreaVolume*                            CircleAreaVolume;                                         // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCircleMgrComponent*                         CircleMgrComponent;                                       // 0x0288(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData03[0xB0];                                      // 0x0290(0x00B0) MISSED OFFSET
	int                                                CircleIndexFakeAIPoisonDamage;                            // 0x0340(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData04[0x14];                                      // 0x0344(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AIActingComponent");
		return pStaticClass;
	}


	void BroadFinishLastBreathFunction(const struct FString& Killer, const struct FString& Killed, int WeaponID, const struct FString& KillerNation, const struct FString& KilledNation);
};


// Class ShadowTrackerExtra.AimOffsetViewComponent
// 0x0020 (0x0130 - 0x0110)
class UAimOffsetViewComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0110(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AimOffsetViewComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AIParachutePoint
// 0x0000 (0x0390 - 0x0390)
class AAIParachutePoint : public AActor
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AIParachutePoint");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AIPathNode
// 0x0010 (0x03A0 - 0x0390)
class AAIPathNode : public AActor
{
public:
	class AAIPathNode*                                 NextPathNode;                                             // 0x0390(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AIPathNode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AIPickupResouce
// 0x0028 (0x03B8 - 0x0390)
class AAIPickupResouce : public AActor
{
public:
	int                                                GroupID;                                                  // 0x0390(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x0398(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                         SignSprite;                                               // 0x03A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                         GoodSprite;                                               // 0x03A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                         BadSprite;                                                // 0x03B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AIPickupResouce");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeProbeComponent
// 0x0000 (0x0110 - 0x0110)
class UGameModeProbeComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeProbeComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AIProbeComponent
// 0x0038 (0x0148 - 0x0110)
class UAIProbeComponent : public UGameModeProbeComponent
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0110(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AIProbeComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AirAttackBombActor
// 0x0008 (0x03F8 - 0x03F0)
class AAirAttackBombActor : public APawn
{
public:
	float                                              LifeSpan;                                                 // 0x03F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirAttackBombActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TimerRegistComponent
// 0x0058 (0x0168 - 0x0110)
class UTimerRegistComponent : public UActorComponent
{
public:
	bool                                               bEnable;                                                  // 0x0110(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	TArray<struct FRegisterTimer>                      TimerRegister;                                            // 0x0118(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FString                                     TimerName;                                                // 0x0128(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0138(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TimerRegistComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AirAttackComponent
// 0x00B8 (0x0220 - 0x0168)
class UAirAttackComponent : public UTimerRegistComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0168(0x0008) MISSED OFFSET
	float                                              MapRadius;                                                // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FlightHeight;                                             // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SeaLevelHeight;                                           // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayTime;                                                // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                WaveCount;                                                // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAirAttackGenerateType                             DefaultAirAttackGenerateType;                             // 0x0184(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0185(0x0003) MISSED OFFSET
	TArray<EAirAttackGenerateType>                     AirAttackGenerateTypeList;                                // 0x0188(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                               bAirAttackUseModifier;                                    // 0x0198(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0199(0x0007) MISSED OFFSET
	class UCurveFloat*                                 AttackAreaSizeModifierCurve;                              // 0x01A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 BombCountModifierCurve;                                   // 0x01A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                WaveInternal;                                             // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAirAttackCfg                               AirAttackConfig;                                          // 0x01B4(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                              BroadcastClientDistance;                                  // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x50];                                      // 0x01D0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirAttackComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AirAttackCS
// 0x0008 (0x0170 - 0x0168)
class UAirAttackCS : public UTimerRegistComponent
{
public:
	class UClass*                                      ExplosionEffectTemplate;                                  // 0x0168(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirAttackCS");
		return pStaticClass;
	}


	void OnAirAttack(TEnumAsByte<EAirAttackInfo> airattacktype, int waveindex);
	void DoBombHarmAtLocation(struct FVector* bombLocation);
	void AirAttackThrowBomb(int Index);
};


// Class ShadowTrackerExtra.AirAttackLocatorCalledActor
// 0x0078 (0x0468 - 0x03F0)
class AAirAttackLocatorCalledActor : public APawn
{
public:
	float                                              DestoryTime;                                              // 0x03F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AirAttackDelayTime;                                       // 0x03F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                IconID;                                                   // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AttackAreaRadius;                                         // 0x03FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x68];                                      // 0x0400(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirAttackLocatorCalledActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AirAttackLocatorComponent
// 0x00B8 (0x01C8 - 0x0110)
class UAirAttackLocatorComponent : public UActorComponent
{
public:
	float                                              AALOpenMotionSensibility;                                 // 0x0110(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AALOpenSensibility;                                       // 0x0114(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OpenAALFOV;                                               // 0x0118(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDist;                                                  // 0x011C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                minDist;                                                  // 0x0120(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                DangerDist;                                               // 0x0124(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0128(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.AirAttackLocatorComponent.FreeArrowParticle
	unsigned char                                      UnknownData01[0x28];                                      // 0x0150(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.AirAttackLocatorComponent.AirAttackActorTemplate
	class AAirAttackLocatorCalledActor*                AirAttackLocatorCalledActor;                              // 0x0178(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    FreeArrowComp;                                            // 0x0180(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    FixedArrowComp;                                           // 0x0188(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0190(0x0004) MISSED OFFSET
	float                                              FixArrowScaleDistance;                                    // 0x0194(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ArrowScaleFactor1;                                        // 0x0198(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ArrowScalePlus1;                                          // 0x019C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ArrowScaleFactor2;                                        // 0x01A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ArrowScalePlus2;                                          // 0x01A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ShortDis;                                                 // 0x01A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TEnumAsByte<ECollisionChannel>                     ChannelType;                                              // 0x01AC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x3];                                       // 0x01AD(0x0003) MISSED OFFSET
	struct FVector                                     TargetLocation;                                           // 0x01B0(0x000C) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0xC];                                       // 0x01BC(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirAttackLocatorComponent");
		return pStaticClass;
	}


	void SetItemExsist(bool bExsist);
	void SetFinalLocation();
	void SetAALFov(bool bOpen);
	void ServerSetAirAttackLocation(const struct FVector& BeginLocation, const struct FVector& EndLocation);
	void OnFreeArrowLoadFinsh();
	void OnCalledActorLoadFinsh(const struct FVector& Location);
	float GetTargetDistance();
	bool GetAALAvaliable();
};


// Class ShadowTrackerExtra.AirAttackLocatorWidget
// 0x0018 (0x03C0 - 0x03A8)
class UAirAttackLocatorWidget : public UUAEUserWidget
{
public:
	class UTextBlock*                                  TextBlock_Distance1;                                      // 0x03A8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                      Image_DisableTips1;                                       // 0x03B0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirAttackLocatorWidget");
		return pStaticClass;
	}


	void SetAALOpen(bool bOpen);
};


// Class ShadowTrackerExtra.AirDropBoxActor
// 0x01F0 (0x0580 - 0x0390)
class AAirDropBoxActor : public AActor
{
public:
	float                                              DroppingSpeed;                                            // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsHitTheGround;                                          // 0x0394(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0395(0x0003) MISSED OFFSET
	float                                              HitGroundHeight;                                          // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SmokeStartScaleDistance;                                  // 0x039C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SmokeEndScaleDistance;                                    // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SmokeStartScaleValue;                                     // 0x03A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SmokeEndScaleValue;                                       // 0x03A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PrevSmokeCurrentDistanceScaler;                           // 0x03AC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsShowingSmoke;                                          // 0x03B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03B1(0x0003) MISSED OFFSET
	float                                              ForceUpdateLocInterval;                                   // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForceUpdateLocDissqThreshold;                             // 0x03B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	class UClass*                                      DeadInventoryBoxTemplate;                                 // 0x03C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       WrapperBoxName;                                           // 0x03C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AirdropboxID;                                             // 0x03D8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OBUIShowDistance;                                         // 0x03DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSuperAirdrop;                                          // 0x03E0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET
	struct FString                                     FestivalAirDropBoxMesh;                                   // 0x03E8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAirDropResource                            NormalAirdropBoxResource;                                 // 0x03F8(0x0020) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAirDropResource                            SuperAirdropBoxResource;                                  // 0x0418(0x0020) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0438(0x0001) MISSED OFFSET
	EAirDropType                                       DropType;                                                 // 0x0439(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x2];                                       // 0x043A(0x0002) MISSED OFFSET
	uint32_t                                           SummonerKey;                                              // 0x043C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsAirOpen;                                               // 0x0440(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0441(0x0003) MISSED OFFSET
	float                                              BoxSmokingBeginTime;                                      // 0x0444(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        TeamIDOpenedTheBox;                                       // 0x0448(0x0010) (BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	bool                                               bIsEmptyAirdrop;                                          // 0x0458(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsBoxHitTheGroundCpp;                                    // 0x0459(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x2];                                       // 0x045A(0x0002) MISSED OFFSET
	float                                              ServerDroppingSpeedCpp;                                   // 0x045C(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRecoverSpeedCpp;                                         // 0x0460(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x17];                                      // 0x0461(0x0017) MISSED OFFSET
	float                                              CheckWaterOverlapInterval;                                // 0x0478(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CheckWaterOverlapElapsedCpp;                              // 0x047C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData09[0xD0];                                      // 0x0480(0x00D0) MISSED OFFSET
	bool                                               IsNeedCheckFallGroundCpp;                                 // 0x0550(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData10[0xF];                                       // 0x0551(0x000F) MISSED OFFSET
	class UProjectileMovementComponent*                MoveComp;                                                 // 0x0560(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                        RootBoxComp;                                              // 0x0568(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0570(0x0008) MISSED OFFSET
	bool                                               bNeedForceUpdateLoc;                                      // 0x0578(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x7];                                       // 0x0579(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirDropBoxActor");
		return pStaticClass;
	}


	void SetBuoyancyUpdatedComponent(class USceneComponent* UpdatedComponent);
	void OnRep_TeamIDOpenedTheBox();
	void OnRep_ServerDroppingSpeedCpp();
	void OnRep_IsBoxHitTheGroundCpp();
	void OnRep_FestivalAirDropBoxMesh();
	void OnRep_bUseFestivalAirDropBox();
	void OnRep_BoxSmokingBeginTime();
	void OnRep_BoxId();
	void OnRep_AirdropTypeChange();
	void OnBoxTriggerSmoking(float SmokingEndTime);
	void OnBoxRemoveSmoking();
	void OnBoxOpened();
	void OnBoxHitGroundOrInWater();
	void OnBoxDropIntoWater();
	void OnAddAirdropBox();
	bool IsDropIntoWater(float SphereRadius);
	void GenerateWrappersBox(TArray<struct FAirDropBoxGenerateWrapperItemData> DataList, const struct FVector& BoxLoc);
	bool ForceUpdateAirdropLoc();
	void DistanceScalerChangedEvent(float Scale);
	void ChangeFestivalAirDropBoxMesh();
	void ChangeAirdropAppearance();
	void BP_OnRep_IsBoxHitTheGroundCpp();
	void BP_DropIntoWarter();
	void BoxReachGround();
	void AddToAIList();
};


// Class ShadowTrackerExtra.DropStuffStrategy
// 0x0000 (0x0028 - 0x0028)
class UDropStuffStrategy : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DropStuffStrategy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DropVehicleStrategy
// 0x0000 (0x0028 - 0x0028)
class UDropVehicleStrategy : public UDropStuffStrategy
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DropVehicleStrategy");
		return pStaticClass;
	}


	bool Apply(class AAirDropPlane* Plane);
};


// Class ShadowTrackerExtra.DropZombieStrategy
// 0x0000 (0x0028 - 0x0028)
class UDropZombieStrategy : public UDropStuffStrategy
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DropZombieStrategy");
		return pStaticClass;
	}


	bool Apply(class AAirDropPlane* Plane);
};


// Class ShadowTrackerExtra.DropBoxStrategy
// 0x0000 (0x0028 - 0x0028)
class UDropBoxStrategy : public UDropStuffStrategy
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DropBoxStrategy");
		return pStaticClass;
	}


	bool Apply(class AAirDropPlane* Plane);
};


// Class ShadowTrackerExtra.AirDropComponent
// 0x0258 (0x03C0 - 0x0168)
class UAirDropComponent : public UTimerRegistComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0168(0x0018) MISSED OFFSET
	struct FAirDropPlaneParams                         SuperAirDropPlaneParams;                                  // 0x0180(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAirDropPlaneParams                         VehicleAirDropPlaneParams;                                // 0x019C(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAirDropPlaneParams                         ZombieAirDropPlaneParams;                                 // 0x01B8(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	struct FBackupEnterAirDropPlaneParams              BackupEnterAirDropPlaneParams;                            // 0x01D8(0x0040) (Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FAirDropConfig>                      AirDropConfigs;                                           // 0x0218(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                               bCanUseDelayDrop;                                         // 0x0228(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0229(0x0007) MISSED OFFSET
	class UClass*                                      AirDropPlaneBluePrint;                                    // 0x0230(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AirDropBoxBlueprint;                                      // 0x0238(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFlareGunAirDropRandomParams                SuperAirDropRandomParams;                                 // 0x0240(0x000C) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFlareGunAirDropRandomParams                VehicleAirDropRandomParams;                               // 0x024C(0x000C) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFlareGunAirDropRandomParams                ZombieAirDropRandomParams;                                // 0x0258(0x000C) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0264(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<ESpotType>>                     SpotType;                                                 // 0x0268(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              StuffBoxToWorldBoundaryMinDis;                            // 0x0278(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x14];                                      // 0x027C(0x0014) MISSED OFFSET
	class UDataTable*                                  AirDropBoxDataTable;                                      // 0x0290(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSuperAirDropBoxDataItem>            FSuperAirDropBoxDataSet;                                  // 0x0298(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAirDropOrder                               AirDropOrder;                                             // 0x02A8(0x0058) (NativeAccessSpecifierPrivate)
	struct FAirDropOrder                               SuperAirDropOrder;                                        // 0x0300(0x0058) (NativeAccessSpecifierPrivate)
	struct FAirDropOrder                               ZombieAirDropOrder;                                       // 0x0358(0x0058) (NativeAccessSpecifierPrivate)
	TArray<struct FAirDropOrder>                       DelayOrder;                                               // 0x03B0(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirDropComponent");
		return pStaticClass;
	}


	void OnAirDropStart(const struct FAirDropOrder& Order, EAirDropType DropType);
	void CallZombieAirDrop(float X, float Y, int ZombieID, int FlowId);
	void CallSuperAirDrop(const struct FVector& DropLoc, uint32_t SummonerKey);
	void CallFlareGunAirDrop(const struct FVector& InDropLoc, EAirDropType DropType, uint32_t SummonerKey);
};


// Class ShadowTrackerExtra.PickUpWrapperActor
// 0x01C8 (0x0568 - 0x03A0)
class APickUpWrapperActor : public AUAENetActor
{
public:
	unsigned char                                      UnknownData00[0x1C];                                      // 0x03A0(0x001C) MISSED OFFSET
	float                                              NetCullDistanceSquaredRate;                               // 0x03BC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DestroyStaticMesh;                                        // 0x03C0(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03C1(0x0007) MISSED OFFSET
	struct FItemDefineID                               DefineID;                                                 // 0x03C8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                count;                                                    // 0x03E0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanBePickUp;                                             // 0x03E4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasBeenPickedUp;                                         // 0x03E5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsInBox;                                                 // 0x03E6(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x1];                                       // 0x03E7(0x0001) MISSED OFFSET
	TArray<struct FString>                             ForbitPickPlayerNameList;                                 // 0x03E8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bIsInAirDropBox;                                          // 0x03F8(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDropedByPlayer;                                          // 0x03F9(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x6];                                       // 0x03FA(0x0006) MISSED OFFSET
	struct FName                                       OwnerName;                                                // 0x0400(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           OwnerUniqueID;                                            // 0x0408(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     AttachedRelLoc;                                           // 0x040C(0x000C) (BlueprintVisible, Net, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      AttachedActor;                                            // 0x0418(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBattleItemAdditionalData>           SavedAdditionalDataList;                                  // 0x0420(0x0010) (BlueprintVisible, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bIsTrainingMode;                                          // 0x0430(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0431(0x0003) MISSED OFFSET
	float                                              TrainingModePickUpColdCD;                                 // 0x0434(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PickUpColdCountDown;                                      // 0x0438(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3C];                                      // 0x043C(0x003C) MISSED OFFSET
	float                                              TrainingModeDropLifeTime;                                 // 0x0478(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsTrainModeSingleCD;                                      // 0x047C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x047D(0x0003) MISSED OFFSET
	float                                              SingleTrainingModePickUpColdCD;                           // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	class UItemSpotSceneComponent*                     ItemSpotSceneComponent;                                   // 0x0488(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ItemValue;                                                // 0x0490(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ItemCategory;                                             // 0x04A0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRepeatGenerateItem;                                      // 0x04B0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceNotRespawn;                                         // 0x04B1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x6];                                       // 0x04B2(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWrapperPickedUp;                                        // 0x04B8(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x8];                                       // 0x04C8(0x0008) MISSED OFFSET
	class UStaticMeshComponent*                        PickupMesh;                                               // 0x04D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraBaseCharacter*                       TargetPlayer;                                             // 0x04D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                ObjectPoolSize;                                           // 0x04E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               ObjectPoolEnabled;                                        // 0x04E4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShowDropEffect;                                          // 0x04E5(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x2];                                       // 0x04E6(0x0002) MISSED OFFSET
	struct FString                                     EffectPath;                                               // 0x04E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     DurationTime;                                             // 0x04F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ItemID;                                                   // 0x0508(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                      DefaultColor;                                             // 0x050C(0x0004) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x28];                                      // 0x0510(0x0028) MISSED OFFSET
	class UParticleSystemComponent*                    EffectComponent;                                          // 0x0538(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             PickUpEffectPath;                                         // 0x0540(0x0018) (HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData12[0x10];                                      // 0x0558(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PickUpWrapperActor");
		return pStaticClass;
	}


	struct FString ToDetailString();
	void ShowMesh(bool bShow);
	void ShowActor();
	void SetDefineIDWhenDroped(const struct FItemDefineID& DID);
	void SetDefineID(const struct FItemDefineID& DID);
	void SetCountOnServerAfterSpawn(int _Count);
	void ServerResetShowActor();
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(TArray<struct FBattleItemAdditionalData> DataList);
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);
	void OnRep_PickUpColdCountDown();
	void OnRep_DefindID();
	void OnRep_AttachmentReplication();
	void OnRep_AttachedActor();
	void ModifyData(int _Count);
	void MarkIsDropedByPlayerOnServer(bool Ret, class AActor* AttachTarget);
	bool LoadDynamicMeshInst(class UStaticMesh* InStaticMesh);
	bool LoadDynamicMesh(const struct FString& MeshPath);
	bool LoadDynamicMaterialInst(class UMaterialInstance* InMaterialInst);
	bool LoadDynamicMaterial(const struct FString& MaterialPath);
	bool IsCanPickup(const struct FItemDefineID& InItemID, class ASTExtraBaseCharacter* InFirstPlayer);
	void InitData(class UItemSpotSceneComponent* Component, int ItemCount, const struct FString& Value, const struct FString& Category, bool RepeatGenerateItem);
	class UStaticMeshComponent* GetPickupMesh();
	int GetNetGUIDOffsetValue();
	TArray<struct FPickUpItemData> GetDataList();
	void ForceNetUpdate();
	void FinishPickedUp(class AActor* OwnerTarget, int AdditionalParam, int pickCount);
	void ColdTimeCountDown();
	void ClientResetShowActor();
	bool CheckPickUpDataIsWeapon();
	void BroadcastDataToAllClients(int Count_New);
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);
	void AddAdditionalDataListOnServerAfterSpawn(TArray<struct FBattleItemAdditionalData> DataList);
};


// Class ShadowTrackerExtra.PickUpListWrapperActor
// 0x0050 (0x05B8 - 0x0568)
class APickUpListWrapperActor : public APickUpWrapperActor
{
public:
	TArray<struct FPickUpItemData>                     PickUpDataList;                                           // 0x0568(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NativeAccessSpecifierPublic)
	EPickUpBoxType                                     BoxType;                                                  // 0x0578(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3F];                                      // 0x0579(0x003F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PickUpListWrapperActor");
		return pStaticClass;
	}


	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);
	void RPC_Broadcast_ForceSyncAllData(TArray<struct FPickUpItemData> DataList);
	void OnWrapperEmptyDelegate__DelegateSignature();
	void OnSomeonePickItemDelegate__DelegateSignature(uint32_t PlayerKey);
	void OnRep_PickUpDataList();
	void OnBoxEmptyDelegate__DelegateSignature(int BoxId);
	TArray<struct FPickUpItemData> GetDataList();
	void FinishPickedUp(class AActor* OwnerTarget, int AdditionalParam, int pickCount);
};


// Class ShadowTrackerExtra.AirDropListWrapperActor
// 0x0000 (0x05B8 - 0x05B8)
class AAirDropListWrapperActor : public APickUpListWrapperActor
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirDropListWrapperActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.FlightVehicle
// 0x0000 (0x0390 - 0x0390)
class AFlightVehicle : public AActor
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FlightVehicle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AirDropPlane
// 0x00A8 (0x0438 - 0x0390)
class AAirDropPlane : public AFlightVehicle
{
public:
	struct FFlyingParam                                FlyingParam;                                              // 0x0390(0x0014) (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     DroppingStuffLocation;                                    // 0x03A4(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DroppingSpeed;                                            // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LifeSpanAfterDrop;                                        // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x60];                                      // 0x03B8(0x0060) MISSED OFFSET
	TArray<class UDropStuffStrategy*>                  DropStrategyArray;                                        // 0x0418(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	class UDropStuffStrategy*                          DropStrategy;                                             // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UProjectileMovementComponent*                PMComp;                                                   // 0x0430(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirDropPlane");
		return pStaticClass;
	}


	void SetDropStrategy(class UDropStuffStrategy* Strategy);
	void OnRep_FlyingParams();
	TArray<class UDropStuffStrategy*> GetDropStrategyArray();
	class UDropStuffStrategy* GetDropStrategy();
	int GetDroppingIndex(float DeltaTime);
};


// Class ShadowTrackerExtra.AirplaneCharacter
// 0x0080 (0x0850 - 0x07D0)
class AAirplaneCharacter : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x07D0(0x0078) MISSED OFFSET
	bool                                               bStopAllowed;                                             // 0x0848(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bForceControllerRelevant;                                 // 0x0849(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x6];                                       // 0x084A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AirplaneCharacter");
		return pStaticClass;
	}


	void SetStopAllowed(bool InStop);
	bool IsStopAllowed();
	void CheckAirplanePos(float DeltaTime);
};


// Class ShadowTrackerExtra.AIWayPointActor
// 0x0028 (0x03B8 - 0x0390)
class AAIWayPointActor : public AActor
{
public:
	int                                                ID;                                                       // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	TArray<struct FTeamWayPointLink>                   TeamLinks;                                                // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x03A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                         ShowSprite;                                               // 0x03B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AIWayPointActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AIWorldSoundManagerComponent
// 0x0070 (0x0180 - 0x0110)
class UAIWorldSoundManagerComponent : public UActorComponent
{
public:
	TMap<ESoundType, struct FSoundConfig>              SoundConfig;                                              // 0x0110(0x0050) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EHearSoundCharacterType>                    HearSoundCharacterTypes;                                  // 0x0160(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AAIWorldVolume>               AIWorldVolume;                                            // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0178(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AIWorldSoundManagerComponent");
		return pStaticClass;
	}


	void OnProjectileExplode(class AActor* Projectile);
};


// Class ShadowTrackerExtra.AIWorldVolumeBase
// 0x0008 (0x03D0 - 0x03C8)
class AAIWorldVolumeBase : public AVolume
{
public:
	float                                              CellSize;                                                 // 0x03C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AIWorldVolumeBase");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AIWorldVolume
// 0x00E8 (0x04B8 - 0x03D0)
class AAIWorldVolume : public AAIWorldVolumeBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	struct FString                                     AIOcclusionFilePath;                                      // 0x03D8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     HousePathFilePath;                                        // 0x03E8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugOnClient;                                           // 0x03F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4F];                                      // 0x03F9(0x004F) MISSED OFFSET
	TMap<int, class AAIWayPointActor*>                 AllAIWayPointActors;                                      // 0x0448(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UItemSpotSceneComponent*                     LastRegisteredItemSpot;                                   // 0x0498(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x18];                                      // 0x04A0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AIWorldVolume");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AkComponentCollector
// 0x0018 (0x0040 - 0x0028)
class UAkComponentCollector : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<class UAkComponent*>                        Comps;                                                    // 0x0030(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AkComponentCollector");
		return pStaticClass;
	}


	void UnRegister(class UObject* Object);
	void Tick(float DeltaTime);
	void Register(class UObject* Object);
};


// Class ShadowTrackerExtra.AkSoundPlayerSceneComponent
// 0x0020 (0x02E0 - 0x02C0)
class UAkSoundPlayerSceneComponent : public USceneComponent
{
public:
	class UAkAudioEvent*                               AkSoundEvent;                                             // 0x02C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET
	class AActor*                                      BindActor;                                                // 0x02D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AkSoundPlayerSceneComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AnchorFlagWidget
// 0x00A8 (0x0450 - 0x03A8)
class UAnchorFlagWidget : public UUAEUserWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03A8(0x0018) MISSED OFFSET
	struct FVector4                                    Limit;                                                    // 0x03C0(0x0010) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocOffset;                                                // 0x03D0(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   UIOffset;                                                 // 0x03DC(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   UITeamOffset;                                             // 0x03E4(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AnchorShowDistLimit;                                      // 0x03EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CorpShowDistLimit;                                        // 0x03F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                rightPlus;                                                // 0x03F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              opacityFactor;                                            // 0x03F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class UCanvasPanelSlot*                            CanvasPanel;                                              // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       BaseCharacter;                                            // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0418(0x0004) MISSED OFFSET
	int                                                heightPlus;                                               // 0x041C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0420(0x0008) MISSED OFFSET
	class UGridPanel*                                  NameGridPanel;                                            // 0x0428(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                                AnchorCanvas;                                             // 0x0430(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                                CorpCanvas;                                               // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                      HideOrCollapsed;                                          // 0x0440(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                                  CorpName;                                                 // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AnchorFlagWidget");
		return pStaticClass;
	}


	void SetBaseCharacter(class ASTExtraBaseCharacter* BC);
};


// Class ShadowTrackerExtra.AnimationMotionCurveComponent
// 0x0008 (0x0118 - 0x0110)
class UAnimationMotionCurveComponent : public UActorComponent
{
public:
	class UAnimationMotionCurveDataAsset*              MotionCurveDataAsset;                                     // 0x0110(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AnimationMotionCurveComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AnimationMotionCurveDataAsset
// 0x0050 (0x0080 - 0x0030)
class UAnimationMotionCurveDataAsset : public UDataAsset
{
public:
	TMap<struct FString, struct FAnimationFloatCurveData> AnimationFloatCurves;                                     // 0x0030(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AnimationMotionCurveDataAsset");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AntiCheatConfig
// 0x0078 (0x00A0 - 0x0028)
class UAntiCheatConfig : public UObject
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0028(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AntiCheatConfig");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AntiCheatUtils
// 0x0000 (0x0028 - 0x0028)
class UAntiCheatUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AntiCheatUtils");
		return pStaticClass;
	}


	static struct FString GetSafeName(class UObject* InObj);
};


// Class ShadowTrackerExtra.AObjectPoolManager
// 0x0128 (0x04B8 - 0x0390)
class AAObjectPoolManager : public AActor
{
public:
	TMap<class UClass*, struct FPoolPreloadObjectItem> PreloadsMap;                                              // 0x0390(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xD8];                                      // 0x03E0(0x00D8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AObjectPoolManager");
		return pStaticClass;
	}


	void PreSpawnToPool(class UClass* ActorClass, const struct FPoolPreloadObjectItem& Item);
	void PreLoadObjectsFinish();
};


// Class ShadowTrackerExtra.AreaTrigger
// 0x0090 (0x0420 - 0x0390)
class AAreaTrigger : public AActor
{
public:
	class UBoxComponent*                               Area;                                                     // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AreaID;                                                   // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	struct FString                                     TriggerTag;                                               // 0x03A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TriggerTimes;                                             // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ExitTimes;                                                // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsExcuteOnlyInFightingState;                              // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsTimesDestroy;                                           // 0x03B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsIgnoreAi;                                               // 0x03BA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03BB(0x0001) MISSED OFFSET
	float                                              AfterFightingTime;                                        // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x60];                                      // 0x03C0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AreaTrigger");
		return pStaticClass;
	}


	void ResetTriggerTimes();
	void OnEndOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnBeginOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void FireExitEvent(class AActor* OtherActor);
	void FireEnterEvent(class AActor* OtherActor);
	void CheckRecord();
	bool CheckGameModeState();
};


// Class ShadowTrackerExtra.AreaTriggerGroup
// 0x0048 (0x03D8 - 0x0390)
class AAreaTriggerGroup : public AActor
{
public:
	int                                                AreaID;                                                   // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	struct FString                                     TriggerTag;                                               // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TriggerTimes;                                             // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ExitTimes;                                                // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsExcuteOnlyInFightingState;                              // 0x03B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03B1(0x0003) MISSED OFFSET
	float                                              AfterFightingTime;                                        // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x20];                                      // 0x03B8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AreaTriggerGroup");
		return pStaticClass;
	}


	void ResetTriggerTimes();
	void EndOverlapDelegate(int TriggerValues, int PlayerNum);
	void BeginOverlapDelegate(int TriggerValues, int PlayerNum);
};


// Class ShadowTrackerExtra.AreaTriggerSphere
// 0x0008 (0x0428 - 0x0420)
class AAreaTriggerSphere : public AAreaTrigger
{
public:
	class USphereComponent*                            SphereArea;                                               // 0x0420(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AreaTriggerSphere");
		return pStaticClass;
	}


	void OnEndOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnBeginOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class ShadowTrackerExtra.AreaTriggerWithPoints
// 0x0010 (0x0430 - 0x0420)
class AAreaTriggerWithPoints : public AAreaTrigger
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0420(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AreaTriggerWithPoints");
		return pStaticClass;
	}


	TArray<struct FVector> GetAttachPoints();
	void FireExitEvent(class AActor* OtherActor);
	void FireEnterEvent(class AActor* OtherActor);
};


// Class ShadowTrackerExtra.ASTExtraRangeActor
// 0x0010 (0x03A0 - 0x0390)
class AASTExtraRangeActor : public AActor
{
public:
	float                                              RangeRadius;                                              // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UseRangeActorAsCenter;                                    // 0x0394(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DrawDebugTraceLine;                                       // 0x0395(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xA];                                       // 0x0396(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ASTExtraRangeActor");
		return pStaticClass;
	}


	void MakeRange(const struct FVector& OriginPos);
	void MakeEffectToOverlappedActor(class AActor* OverlappedActor, const struct FRangeCheckRetParam& RangeRetParam);
	void MakeEffectToAllOverlappedActors(TMap<class AActor*, struct FRangeCheckRetParam> OverlapComponentMap);
};


// Class ShadowTrackerExtra.ASTExtraNoiseRangeActor
// 0x0028 (0x03C8 - 0x03A0)
class AASTExtraNoiseRangeActor : public AASTExtraRangeActor
{
public:
	struct FPropSkillNoiseRangeParam                   NoiseRangeParamCfg;                                       // 0x03A0(0x0020) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ASTExtraNoiseRangeActor");
		return pStaticClass;
	}


	void MakeEffectToAllOverlappedActors(TMap<class AActor*, struct FRangeCheckRetParam> OverlapComponentMap);
	void InitRangeParam(class AActor* Creator, const struct FPropSkillNoiseRangeParam& NoiseRangeParam);
};


// Class ShadowTrackerExtra.ASTExtraSmokeRangeActor
// 0x0048 (0x03E8 - 0x03A0)
class AASTExtraSmokeRangeActor : public AASTExtraRangeActor
{
public:
	struct FPropSkillSmokeDamageParam                  SmokeDamageParamCfg;                                      // 0x03A0(0x0034) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x14];                                      // 0x03D4(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ASTExtraSmokeRangeActor");
		return pStaticClass;
	}


	void MakeEffectToOverlappedActor(class AActor* OverlappedActor, const struct FRangeCheckRetParam& RangeRetParam);
	void InitRangeParam(class AActor* Creator, const struct FPropSkillSmokeDamageParam& SmokeDamageParam);
};


// Class ShadowTrackerExtra.AsyncCanvasPanel
// 0x0068 (0x0198 - 0x0130)
class UAsyncCanvasPanel : public UCanvasPanel
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0130(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.AsyncCanvasPanel.WidgetClass
	struct FScriptDelegate                             OnWidgetUpdate;                                           // 0x0158(0x0010) (ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FScriptDelegate                             OnWidgetCreated;                                          // 0x0168(0x0010) (ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	class UClass*                                      WidgetClass_Loaded;                                       // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                                 ChildWidget;                                              // 0x0180(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0188(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AsyncCanvasPanel");
		return pStaticClass;
	}


	void RequestSyncLoad();
	void RequestAsyncLoad();
	void OnWidgetUpdate__DelegateSignature(class UUserWidget* Widget);
	void OnLoadAsynFinished(const struct FSoftObjectPath& softObjPath);
	void NotifyUpdate();
};


// Class ShadowTrackerExtra.AttrModifyProbeComponent
// 0x0020 (0x0130 - 0x0110)
class UAttrModifyProbeComponent : public UGameModeProbeComponent
{
public:
	TArray<struct FAttrModifyItem>                     CharacterOverrideAttrConfigs;                             // 0x0110(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FAttrModifyItem>                     WeaponOverrideAttrConfigs;                                // 0x0120(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AttrModifyProbeComponent");
		return pStaticClass;
	}


	void SetCharacterOverrideAttrValue(const struct FString& AttrName, float AttrValue);
	void RemoveDynamicModifier(class ASTExtraBaseCharacter* STCharacter, const struct FString& AttrModifyItemName);
	void EnableGameModeOverrideAttrs(class ASTExtraBaseCharacter* STCharacter);
	void AddDynamicModifier(class ASTExtraBaseCharacter* STCharacter, const struct FString& AttrModifyItemName, float AttrValue);
};


// Class ShadowTrackerExtra.AutoRunComponent
// 0x0168 (0x0278 - 0x0110)
class UAutoRunComponent : public UActorComponent
{
public:
	bool                                               IsSimulateZombieBoom;                                     // 0x0110(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x167];                                     // 0x0111(0x0167) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AutoRunComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AutoRunPlayerTestActor
// 0x0028 (0x03B8 - 0x0390)
class AAutoRunPlayerTestActor : public AActor
{
public:
	float                                              Interval;                                                 // 0x0390(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	TArray<struct FVector>                             PortalLoctions;                                           // 0x0398(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x03A8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AutoRunPlayerTestActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AutoRunTest
// 0x01A8 (0x02B8 - 0x0110)
class UAutoRunTest : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0110(0x0040) MISSED OFFSET
	bool                                               IsSimulateZombieBoom;                                     // 0x0150(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x167];                                     // 0x0151(0x0167) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AutoRunTest");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AutoScrollBox
// 0x0020 (0x0A30 - 0x0A10)
class UAutoScrollBox : public UScrollBox
{
public:
	EAUTO_SCROLL_TYPE                                  AutoScrollType;                                           // 0x0A10(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0A11(0x0003) MISSED OFFSET
	float                                              RollSpeed;                                                // 0x0A14(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StayTimeWhenStart;                                        // 0x0A18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StayTimeWhenEnd;                                          // 0x0A1C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0A20(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AutoScrollBox");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AutoTestInterface
// 0x0048 (0x0158 - 0x0110)
class UAutoTestInterface : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0110(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AutoTestInterface");
		return pStaticClass;
	}


	void StarJumpPlane();
};


// Class ShadowTrackerExtra.AutoWeaponAutoAimingComponent
// 0x00C8 (0x01D8 - 0x0110)
class UAutoWeaponAutoAimingComponent : public UActorComponent
{
public:
	struct FVector2D                                   TargetScreenPos;                                          // 0x0110(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShowDebug;                                               // 0x0118(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseAimPoint;                                             // 0x0119(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x011A(0x0002) MISSED OFFSET
	float                                              TraceUpOffset;                                            // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DebugRectSize;                                            // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	struct FAutoAimInfo                                AutoAimInfo;                                              // 0x0128(0x0040) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<EAutoAimLockState>                     CurLockState;                                             // 0x0168(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EAutoAimLockState>                     PreLockState;                                             // 0x0169(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x016A(0x0002) MISSED OFFSET
	struct FVector                                     WorldLocToAim;                                            // 0x016C(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAutoAimInfoDelegate;                                    // 0x0178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAutoAimLockStateDelegate;                               // 0x0188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0198(0x0028) MISSED OFFSET
	bool                                               bHasInitCacheTargetList;                                  // 0x01C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bLostAutoAimTarget;                                       // 0x01C1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x2];                                       // 0x01C2(0x0002) MISSED OFFSET
	float                                              RotateBackSpeed;                                          // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SimulateRotateSpeed;                                      // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RpcRotationTime;                                          // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LastRpcRotationTime;                                      // 0x01D0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AutoWeaponAutoAimingComponent");
		return pStaticClass;
	}


	void TryDoAutoAim(float DeltaTime);
	void SetLockDelayTime(float NewDelayTime);
	void ResetLockDelayTime();
	void RemoveTarget(class AActor* Target);
	void OnLockTimerOver();
	void InitCacheTargetList();
	TArray<TWeakObjectPtr<class AActor>> GetCacheTargetList();
	void DrawDebugInfo();
	void ChangeLockState(TEnumAsByte<EAutoAimLockState> InState);
	void CalcLockActor(float Delta);
	void AddTarget(class AActor* Target);
};


// Class ShadowTrackerExtra.BaseInterface
// 0x0000 (0x0028 - 0x0028)
class UBaseInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BaseInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AvatarAssetInterface
// 0x0000 (0x0028 - 0x0028)
class UAvatarAssetInterface : public UBaseInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarAssetInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AvatarAssetUtils
// 0x0000 (0x0028 - 0x0028)
class UAvatarAssetUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarAssetUtils");
		return pStaticClass;
	}


	static bool SetParticleComponentParam(class UParticleSystemComponent* InParticleSystemComp, TArray<struct FParticleSysParam> InstanceParameters);
	static bool SetCustomMatParam(class UMaterialInterface* InMaterial, const struct FCustomMatConfig& InMatConfig, bool bSetTexture);
	static bool RequestLoadParticleAssetWithCallback(class UMeshComponent* InMeshComp, TArray<struct FParticleAsset> InParticleAsset, const struct FScriptDelegate& DelegateToCall, struct FParticleGroup* InParticleGroup);
	static bool RequestLoadParticleAsset(class UMeshComponent* InMeshComp, TArray<struct FParticleAsset> InParticleAsset, struct FParticleGroup* InParticleGroup);
	static bool RequestLoadMeshAssetWithCallback(class UMeshComponent* InMeshComp, TArray<struct FMeshAsset> InMeshAsset, const struct FScriptDelegate& DelegateToCall, struct FMeshGroup* InMeshGroup);
	static bool RequestLoadMeshAsset(class UMeshComponent* InMeshComp, TArray<struct FMeshAsset> InMeshAsset, struct FMeshGroup* InMeshGroup);
	static bool RemoveParticleComponent(class UMeshComponent* InMeshComp, struct FParticleGroup* InParticleGroup);
	static bool RemoveMeshComponent(class UMeshComponent* InMeshComp, struct FMeshGroup* InMeshGroup);
	static bool RefreshMeshComponentTransform(class UMeshComponent* InMeshComp, const struct FMeshGroup& InMeshGroup);
	static class UMaterialInstanceDynamic* GetOrCreateDynamicMaterial(class UMeshComponent* InMeshComp, const struct FName& SlotName);
	static class UAvatarAssetBPUtils* GetBPUtils();
	static bool CreateParticleComponent(class UMeshComponent* InMeshComp, struct FParticleGroup* InParticleGroup);
	static bool CreateMeshComponent(class UMeshComponent* InMeshComp, struct FMeshGroup* InMeshGroup);
};


// Class ShadowTrackerExtra.AvatarAssetBPUtils
// 0x0170 (0x0198 - 0x0028)
class UAvatarAssetBPUtils : public UObject
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0028(0x00D0) MISSED OFFSET
	TMap<int, struct FLoadMeshAssetRequest>            PendingMeshRequestList;                                   // 0x00F8(0x0050) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int, struct FLoadParticleAssetRequest>        PendingParticleRequestList;                               // 0x0148(0x0050) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarAssetBPUtils");
		return pStaticClass;
	}


	bool SetParticleComponentParam(class UParticleSystemComponent* InParticleSystemComp, TArray<struct FParticleSysParam> InstanceParameters);
	bool SetCustomMatParam(class UMaterialInterface* InMaterial, const struct FCustomMatConfig& InMatConfig, bool bSetTexture);
	bool RequestLoadParticleAsset(class UMeshComponent* InMeshComp, TArray<struct FParticleAsset> InParticleAsset, const struct FScriptDelegate& DelegateToCall, struct FParticleGroup* InParticleGroup);
	bool RequestLoadMeshAsset(class UMeshComponent* InMeshComp, TArray<struct FMeshAsset> InMeshAsset, const struct FScriptDelegate& DelegateToCall, struct FMeshGroup* InMeshGroup);
	bool RemoveParticleComponent(class UMeshComponent* InMeshComp, struct FParticleGroup* InParticleGroup);
	bool RemoveMeshComponent(class UMeshComponent* InMeshComp, struct FMeshGroup* InMeshGroup);
	bool RefreshMeshComponentTransform(class UMeshComponent* InMeshComp, const struct FMeshGroup& InMeshGroup);
	void OnAsynParticleAssetLoaded(int RequestID);
	void OnAsynMeshAssetLoaded(int RequestID);
	class UMaterialInstanceDynamic* GetOrCreateDynamicMaterial(class UMeshComponent* InMeshComp, const struct FName& SlotName);
	bool CreateParticleComponent(class UMeshComponent* InMeshComp, struct FParticleGroup* InParticleGroup);
	bool CreateMeshComponent(class UMeshComponent* InMeshComp, struct FMeshGroup* InMeshGroup);
};


// Class ShadowTrackerExtra.AvatarCapture
// 0x0160 (0x04F0 - 0x0390)
class AAvatarCapture : public AActor
{
public:
	class USkeletalMeshComponent*                      DisplayMesh;                                              // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                              WeaponMesh;                                               // 0x0398(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    ASTPC;                                                    // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int, struct FWeaponAnimAsset>                 WeaponAnimList;                                           // 0x03A8(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UClass*                                      animBP;                                                   // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponBlendAnim;                                        // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int                                                CurUseWeaponSkinID;                                       // 0x0410(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsNewViewTarget;                                         // 0x0414(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0415(0x0003) MISSED OFFSET
	TMap<int, struct FName>                            slotToSocket;                                             // 0x0418(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FName                                       OBPlayerName;                                             // 0x0468(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASTExtraCharacter*                           OBPlayerPawn;                                             // 0x0470(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterAvatarComponent2*                  OBAvatar;                                                 // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWeaponManagerComponent*                     OBWeaponMgr;                                              // 0x0480(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>                StMeshList;                                               // 0x0488(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USkeletalMeshComponent*>              SkMeshList;                                               // 0x0498(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FName>                               HideBoneNames;                                            // 0x04A8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class USkeletalMesh*>                       SkMeshResList;                                            // 0x04B8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UMeshComponent*>                      WeaponAttachmentList;                                     // 0x04C8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class USceneCaptureComponent2D*                    Capture2D;                                                // 0x04D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDirectionalLightComponent*                  DirectionalLight;                                         // 0x04E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               IsCaptureEnabled;                                         // 0x04E8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarCapture");
		return pStaticClass;
	}


	bool SetOBTarget(class ASTExtraCharacter* PlayerPawn, class UCharacterAvatarComponent2* AvatarComp, class UWeaponManagerComponent* WeaponMgr);
	void SetEnable(bool IsEnable);
	void RenderCaptureScene();
	void RefreshAvatar();
	void OnWeaponSystemDataChanged(struct FWeaponSystemDataOnSimulateClient* WeaponSystemData);
	void OnWeaponAvatarEquipped(int SlotID, const struct FItemDefineID& NewItemID);
	void OnSimulatedWeaponChanged();
	void OnAvatarEquipped(EAvatarSlotType slotType, bool isEquipped, int ItemID);
	void OnAvatarAllMeshLoaded();
	class USkeletalMesh* MergeMesh(class USkeletalMesh* RefMesh, TArray<class USkeletalMesh*>* SkMeshList);
	TArray<int> GetWeaponSkinIDs();
	class UCharacterAvatarComponent2* GetOBAvatarComponent();
	class UAnimSequenceBase* GetAnimSeqAsset(const struct FSoftObjectPath& AnimResRef);
	void EquipWeapon();
	void EquipPlayerAvatar(class UCharacterAvatarComponent2* AvatarComponent);
	void DisplayAvatar(bool IsEnable, class ASTExtraCharacter* PlayerPawn);
	void CreateWeapon(bool IsSkeletalMesh);
	void BluePrintSetEnable(bool IsEnable);
	void ApplyAnimation();
};


// Class ShadowTrackerExtra.AvatarCharacterEffect
// 0x0000 (0x0028 - 0x0028)
class UAvatarCharacterEffect : public UBaseInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarCharacterEffect");
		return pStaticClass;
	}


	void OnIsInvincibleChange(bool bInvincible);
	void OnAdapteGameMode();
	void DrawOutlineEffect(bool Enable, int SlotID);
	void DrawFresnelEffect(bool Enable, int SlotID);
};


// Class ShadowTrackerExtra.AvatarComponentBase
// 0x0058 (0x0168 - 0x0110)
class UAvatarComponentBase : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0110(0x0030) MISSED OFFSET
	class UMeshComponent*                              MasterBoneComponent;                                      // 0x0140(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsLobbyAvatar;                                           // 0x0148(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsLobbyActor;                                            // 0x0149(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceClientMode;                                         // 0x014A(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeedUpdateLightMat;                                      // 0x014B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	struct FName                                       LightVectorName;                                          // 0x0150(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADirectionalLight*                           DirectionalLight;                                         // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bSyncAvatar;                                              // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0161(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarComponentBase");
		return pStaticClass;
	}


	bool IsLobbyAvatar();
	bool IsLobbyActor();
	bool IsForceClientMode();
	class UGameInstance* GetGameInstance();
};


// Class ShadowTrackerExtra.AvatarComponent
// 0x03B8 (0x0520 - 0x0168)
class UAvatarComponent : public UAvatarComponentBase
{
public:
	TMap<int, struct FMeshData>                        avatarMeshList;                                           // 0x0168(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int, class UMeshComponent*>                   meshComponentList;                                        // 0x01B8(0x0050) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int, struct FName>                            slotToSocket;                                             // 0x0208(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EAvatarSlotType, struct FMeshData>            DefaultAvataConfig;                                       // 0x0258(0x0050) (BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMap<int, class UBattleItemHandleBase*>            loadedItemList;                                           // 0x02A8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int                                                gender;                                                   // 0x02F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               isNeedRefresh;                                            // 0x02FC(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               forceClientMode;                                          // 0x02FD(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               forceLodMode;                                             // 0x02FE(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x02FF(0x0001) MISSED OFFSET
	TMap<struct FSoftObjectPath, class UBattleItemHandleBase*> PendingLoadRes;                                           // 0x0300(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAvatarEquipped;                                         // 0x0350(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UBattleItemHandleBase*>               handleTickDispatcher;                                     // 0x0360(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0370(0x0020) MISSED OFFSET
	TMap<int, bool>                                    OutlineEnableList;                                        // 0x0390(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                MinLod;                                                   // 0x03E0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bResSyncLoad;                                             // 0x03E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0xE3];                                      // 0x03E5(0x00E3) MISSED OFFSET
	TMap<int, struct FAsyncLoadMeshResReq>             PendingLoadMeshRequestList;                               // 0x04C8(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int                                                AsyncLoadReqID;                                           // 0x0518(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x4];                                       // 0x051C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarComponent");
		return pStaticClass;
	}


	void ShowAttachmentByIndex(int Index, bool bIsVisible);
	bool SetMeshVisibleByID(int Slot, bool visible, bool ignoreDefault);
	void ResetComponentMaster();
	void ResetAllAvataSlot();
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);
	bool PutOnEquipmentByResID(int resID);
	bool PutOnEquipmentByItemHandle(class UBattleItemHandleBase* ItemHandle, class USkeletalMesh* skMesh, class UStaticMesh* stMesh, bool bAutonomous);
	bool PutOffEquimentByResID(int resID);
	bool PutOffEquiment(int Slot);
	void OnAsyncLoadMeshList(TArray<struct FSoftObjectPath> AssetRef, int AsyncLoadID);
	void OnAsyncLoadMesh(const struct FSoftObjectPath& AssetRef, bool isReplaced, bool bAutonomous);
	bool LoadMeshsAsync(class UBattleItemHandleBase* handleList, bool needDirectLoad, bool bAutonomous);
	bool LoadMeshListAsync(bool needDirectLoad, TArray<class UBattleItemHandleBase*>* handleList);
	bool IsTeammate();
	bool IsSlotHasEquipped(int Slot);
	bool IsNeedReplaced(class UBackpackAvatarHandle* doReplaceHandle);
	class UCustomWidgetComponent* InitWidgetComponent(class UClass* WidgetClass, const struct FName& WidgetName);
	void InitDefaultMesh(class UBattleItemHandleBase* Handle);
	void InitDefaultAvatar(class UBattleItemHandleBase* Handle);
	class UStaticMesh* GetStaticMesh(const struct FMeshPackage& meshPack, bool bAutonomous);
	struct FItemDefineID GetSlotDefinedID(int SlotID);
	class USkeletalMesh* GetSkeletalMesh(const struct FMeshPackage& meshPack, bool bAutonomous);
	class UMaterialInstance* GetMaterial(const struct FMeshPackage& meshPack);
	bool GetEquimentMeshBySlot(int Slot, struct FMeshData* meshPack);
	static EAvatarSlotType GetAvatarSlotTypeFromInt(int SlotTypeValue);
	EMeshType GetApplyMeshType(int Slot, int subSlotID, bool bForceSkeletalWithSocketType);
	void DrawOutlineEffect(bool Enable, int SlotID);
	void ClearMeshBySlot(int Slot, bool putDefault, bool bAutonomous);
	void ClearMeshByItemHandle(class UBattleItemHandleBase* ItemHandle);
	bool ApplyStaticMeshByID(int Slot, class UStaticMesh* pSM, class UMaterialInstance* Mat, class UBattleItemHandleBase* Handle, bool bAutonomous);
	bool ApplySkeletalMeshByID(int Slot, class USkeletalMesh* Mesh, class UMaterialInstance* Mat, class UBattleItemHandleBase* Handle, bool bAutonomous);
	void ApplyMesh(class UMeshComponent* Component, class USkeletalMesh* SkeletalMesh, class UStaticMesh* StaticMesh, bool bAutonomous);
	void ApplyMaterial(class UBattleItemHandleBase* ItemHandle, class UMeshComponent* meshComp, bool bAutonomous);
	void ApplyConfig();
};


// Class ShadowTrackerExtra.AvatarDisplayPoseComponent
// 0x0050 (0x0310 - 0x02C0)
class UAvatarDisplayPoseComponent : public USceneComponent
{
public:
	class UAnimMontage*                                AnimMontage;                                              // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PlayerName;                                               // 0x02C8(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                gender;                                                   // 0x02D8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02DC(0x0004) MISSED OFFSET
	TArray<int>                                        InitialAvatarItem;                                        // 0x02E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<int>                                        InitialWeaponItem;                                        // 0x02F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class ASTExtraLobbyCharacter*                      LobbyPawn;                                                // 0x0300(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCharacterAvatarComponent2*                  PlayerAvatar;                                             // 0x0308(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarDisplayPoseComponent");
		return pStaticClass;
	}


	void SpawnAvatar();
};


// Class ShadowTrackerExtra.AvatarDynamicAnimInstance
// 0x0010 (0x03D0 - 0x03C0)
class UAvatarDynamicAnimInstance : public UAnimInstance
{
public:
	EAnimPhysSimSpaceType                              CurrentSimulateSpace;                                     // 0x03C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03C1(0x0007) MISSED OFFSET
	class USkeletalMeshComponent*                      OwnerCharacterMesh;                                       // 0x03C8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarDynamicAnimInstance");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AvatarEntity
// 0x01C8 (0x01F0 - 0x0028)
class UAvatarEntity : public UObject
{
public:
	int                                                SlotID;                                                   // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                subSlotID;                                                // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBattleItemHandleBase*                       LoadedHandle;                                             // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBattleItemHandleBase*                       CachedLoadedHandle;                                       // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlotViewAvatarComponent*                    AvatarComponent;                                          // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                              MeshComponent;                                            // 0x0048(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshData                                   EntityMeshData;                                           // 0x0050(0x0080) (NativeAccessSpecifierPublic)
	struct FMeshData                                   CachedEntityMeshData;                                     // 0x00D0(0x0080) (NativeAccessSpecifierPublic)
	bool                                               RenderDirtyFlag;                                          // 0x0150(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               InnerVisibility;                                          // 0x0151(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               OuterVisibility;                                          // 0x0152(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsDrawOutline;                                            // 0x0153(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleSystemComponent*>            ParticleComponents;                                       // 0x0160(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             MeshAssetPath;                                            // 0x0170(0x0018) (Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDefineID                               ParentDefineID;                                           // 0x0188(0x0018) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FString, class UAvatarEntity*>         SubEntityList;                                            // 0x01A0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarEntity");
		return pStaticClass;
	}


	void UpdateVisibility();
	void UnRegisterTick();
	void TickEntity();
	void SetSocketName();
	void SetParentDefineID(const struct FItemDefineID& ParentID);
	void SetAvatarVisibility(bool visibie, bool IsForCE);
	void RevertEntityMeshData();
	void RenderEntity(struct FSoftObjectPath* SoftPath);
	void RegisterTick();
	bool PutOnEquipmentLogic(class UBattleItemHandleBase* ItemHandle);
	void PutOnDefaultEquipment(EAvatarSlotType slotType);
	void OnPostRender();
	bool IsEntityAvailable(EAvatarVisiblityType VisibilityType);
	class UCustomWidgetComponent* InitWidgetComponent(class UClass* WidgetClass, const struct FName& WidgetName);
	void Init(int SlotID, int subSlotID, class USlotViewAvatarComponent* AvatarComponent);
	EMeshType GetMeshType();
	struct FMeshData GetMeshData();
	class UBattleItemHandleBase* GetLoadedHandle();
	struct FItemDefineID GetDefineID();
	void EnterRenderPipeline();
	void EnterLogicPipeline();
	void DrawOutline(bool bEnable);
	bool CreateAndApplyResource(struct FSoftObjectPath* SoftPath);
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);
	void ClearEquipmentLogic(bool putDefault);
	void ClearEntity(bool ForceClear);
	void ApplyAnimation();
	void ApplaySocketRelativeTransform(class UBackpackAvatarHandle* AvatarHandle);
};


// Class ShadowTrackerExtra.AvatarEntityFactory
// 0x0000 (0x0028 - 0x0028)
class UAvatarEntityFactory : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarEntityFactory");
		return pStaticClass;
	}


	class UAvatarEntity* CreateEntity(int SlotID, int subSlotID);
};


// Class ShadowTrackerExtra.CharacterEntityFactory
// 0x0000 (0x0028 - 0x0028)
class UCharacterEntityFactory : public UAvatarEntityFactory
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CharacterEntityFactory");
		return pStaticClass;
	}


	class UAvatarEntity* CreateEntity(int SlotID, int subSlotID);
};


// Class ShadowTrackerExtra.AvatarHandleBase
// 0x0008 (0x00B0 - 0x00A8)
class UAvatarHandleBase : public UItemHandleBase
{
public:
	bool                                               bEnableBPModify;                                          // 0x00A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	int                                                SlotID;                                                   // 0x00AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarHandleBase");
		return pStaticClass;
	}


	bool HandlePreApplyResource(const struct FAvatarSlotDesc& InSlotDesc, class UObject* Outer);
	bool HandlePostApplyResource(class UMeshComponent* InMeshComp, class UObject* Outer);
};


// Class ShadowTrackerExtra.AvatarHelper
// 0x0000 (0x0028 - 0x0028)
class UAvatarHelper : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarHelper");
		return pStaticClass;
	}


	static bool IsSuperLowQuality();
};


// Class ShadowTrackerExtra.AvatarLightMatInterface
// 0x0000 (0x0028 - 0x0028)
class UAvatarLightMatInterface : public UBaseInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarLightMatInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AvatarPendantAnimInstance
// 0x0060 (0x0420 - 0x03C0)
class UAvatarPendantAnimInstance : public UAnimInstance
{
public:
	float                                              LocalJointOffsetUpdateInterval;                           // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ASTExtraVehicleBase>          CharacterVechicle;                                        // 0x03C4(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ASTExtraBaseCharacter>        AvatarCharacter;                                          // 0x03CC(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseDynamicAngularLimits;                                 // 0x03D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	struct FVector                                     Dynamic_AngularLimitsMin;                                 // 0x03D8(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     Dynamic_AngularLimitsMax;                                 // 0x03E4(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocalJointOffset;                                         // 0x03F0(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     HighSpeedLocalJointOffset;                                // 0x03FC(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LowSpeedLocalJointOffset;                                 // 0x0408(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HighSpeed;                                                // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0418(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarPendantAnimInstance");
		return pStaticClass;
	}


	void UpdateLocalJointOffset();
	void StopUpdateLocalJointOffset();
	void StartUpdateLocalJointOffset();
	void SetDynamicAngularLimits(const struct FVector& InAngularLimitsMin, const struct FVector& InAngularLimitsMax, class ASTExtraBaseCharacter* InTargetCharacter);
	void OnCharacterDetachedFromVehicle(class ASTExtraVehicleBase* InTargetVehicle);
	void OnCharacterAttachedToVehcicle(class ASTExtraVehicleBase* InTargetVehicle);
};


// Class ShadowTrackerExtra.AvatarPoolInterface
// 0x0000 (0x0028 - 0x0028)
class UAvatarPoolInterface : public UBaseInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarPoolInterface");
		return pStaticClass;
	}


	bool IsSameAvatarHandle(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2);
	class UItemHandleBase* GetAvatarHandleFromPool(const struct FItemDefineID& InItemID, class UObject* Outer, bool bDirectCreate);
	class UItemHandleBase* CreateAvatarHandle(const struct FItemDefineID& InItemID, class UObject* Outer);
	void ClearAvatarHandlerFromPool(const struct FItemDefineID& InItemID);
	void AddAvatarHandleToPool(class UItemHandleBase* InHandle);
};


// Class ShadowTrackerExtra.AvatarUtils
// 0x0000 (0x0028 - 0x0028)
class UAvatarUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarUtils");
		return pStaticClass;
	}


	static bool IsAvatarHandlePathExist(const struct FString& HandlePath);
	static void InitWeaponAttrBPTable();
	static void GetWeaponAvatarParentIDList(int InWeaponAvatarID, TArray<int>* OutParentIDList);
	static int GetWeaponAvatarParentID(int InWeaponAvatarID);
	static void GetWeaponAvatarDefaultAttachmentSkin(int InWeaponAvatarID, TMap<int, int>* OutAttachmentSkinIDList);
	static void GetWeaponAvatarDefaultAttachment(int InWeaponAvatarID, TArray<int>* OutAttachmentIDList);
	static class UClass* GetWeaponAvatarDeadInventoryBoxClass(int InWeaponAvatarID, class UObject* InOuter);
	static bool GetWeaponAvatarAttrRowByWeaponBPID(int InBPID, struct FWeaponAvatarAttrRow* OutWeaponAvatarAttrRow);
	static int GetWeaponAttachmentSkinParentID(int WeaponAttacementBPID);
	static int GetVehicleShapeBySkinID(int InVehicleSkinID);
	static bool GetVehicleDefaultStyleID(int InVehicleSkinID, TArray<int>* OutStyleIDList);
	static struct FString GetVehicleBPPathBySkinID(int InVehicleSkinID);
	static int GetVehicleAvatarTemplateID(const struct FItemDefineID& ItemDefineID);
	static void GetVehicleAvatarModifyEnterSocket(int InVehicleSkinID, TArray<struct FName>* OutSocketList);
	static int GetClothAvatarTemplateID(const struct FItemDefineID& ItemDefineID);
	static void GetClothAvatarSuits(int gender, const struct FItemDefineID& ItemDefineID, TArray<int>* OutClothSuits);
	static class UAvatarBPUtils* GetBPUtils();
	static int GetBPIDByResID(int resID);
	static void GetAvatarReplaceState(int SlotID, int ReplaceState, int MaxSlotNum, TArray<int>* OutReplaceSlotID);
	static void GetAvatarHideState(int SlotID, int HideState, int MaxSlotNum, TArray<int>* OutHideSlotID);
	static struct FString GetAvatarHandlePath(const struct FItemDefineID& DefineID);
	static void GetAvatarDataFromTable(int itemType, int TemplateID, struct FAvatarTableData* OutAvatarTableData);
	static void CreateAvatarHandleListAsync(TArray<struct FItemDefineID> DefineIDList, class UObject* Outer, const struct FScriptDelegate& Delegate);
	static bool CreateAvatarHandleAsync(const struct FItemDefineID& DefineID, class UObject* Outer, const struct FScriptDelegate& Delegate);
	static class UAvatarHandleBase* CreateAvatarHandle(const struct FItemDefineID& DefineID, class UObject* Outer);
};


// Class ShadowTrackerExtra.AvatarBPUtils
// 0x01D0 (0x01F8 - 0x0028)
class UAvatarBPUtils : public UObject
{
public:
	unsigned char                                      UnknownData00[0x120];                                     // 0x0028(0x0120) MISSED OFFSET
	TArray<struct FCreateAvatarHandleAsyncRequest>     PendingAsyncRequests;                                     // 0x0148(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int, struct FCreateAvatarHandleListAsyncRequest> PendingAsyncRequestList;                                  // 0x0158(0x0050) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x50];                                      // 0x01A8(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarBPUtils");
		return pStaticClass;
	}


	void StringToArrayString(const struct FString& str, const struct FString& Sign, TArray<struct FString>* OutArray);
	void StringToArrayName(const struct FString& str, TArray<struct FName>* OutArray);
	void StringToArray(const struct FString& str, TArray<int>* OutArray);
	void InitWeaponAttrBPTable();
	int GetVehicleShapeBySkinID(int InVehicleSkinID);
	bool GetVehicleDefaultStyleID(int InVehicleSkinID, TArray<int>* OutStyleIDList);
	struct FString GetVehicleBPPathBySkinID(int InVehicleSkinID);
	int GetVehicleAvatarTemplateID(const struct FItemDefineID& ItemDefineID);
	void GetVehicleAvatarModifyEnterSocket(int InVehicleSkinID, TArray<struct FName>* OutSocketList);
	int GetClothAvatarTemplateID(const struct FItemDefineID& ItemDefineID);
	void GetClothAvatarSuits(int gender, const struct FItemDefineID& ItemDefineID, TArray<int>* OutClothSuits);
	int GetBPIDByResID(int resID);
	struct FString GetAvatarHandlePath(const struct FItemDefineID& DefineID);
	void GetAvatarDataFromTable(int itemType, int TemplateID, struct FAvatarTableData* OutAvatarTableData);
	class UAvatarHandleBase* CreateAvatarHandle(const struct FItemDefineID& DefineID, class UObject* Outer);
	void ConstructAvatarDataFromTable(int itemType, int TemplateID, struct FAvatarTableData* OutAvatarTableData);
};


// Class ShadowTrackerExtra.AvatarVehicleEffect
// 0x0000 (0x0028 - 0x0028)
class UAvatarVehicleEffect : public UBaseInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarVehicleEffect");
		return pStaticClass;
	}


	void OnIsInvincibleChange(bool bInvincible);
	void DrawOutlineEffect(EOutlineType OutlineType, int SlotID);
};


// Class ShadowTrackerExtra.BackpackAvatarInterface
// 0x0000 (0x0028 - 0x0028)
class UBackpackAvatarInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackAvatarInterface");
		return pStaticClass;
	}


	bool IsVirtualAvatarHandle();
	bool IsForceIgnoreSlotSocket();
	int GetSubSlotID();
	int GetSlotID();
};


// Class ShadowTrackerExtra.BackpackAvatarHandle
// 0x06F8 (0x07C0 - 0x00C8)
class UBackpackAvatarHandle : public UBattleItemHandleBase
{
public:
	EAvatarSubSlot                                     subSlot;                                                  // 0x00C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAvatarSpecialType                                 specialType;                                              // 0x00C9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00CA(0x0006) MISSED OFFSET
	TMap<EAvatarSlotType, int>                         SuitConfig;                                               // 0x00D0(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMeshPackage                                meshPack;                                                 // 0x0120(0x01C8) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMeshPackage                                replacedMeshPack;                                         // 0x02E8(0x01C8) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMeshPackage>                        MutilReplacedMeshPack;                                    // 0x04B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAvatarSlotType>                            hiddenFlags;                                              // 0x04C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAvatarSubSlot>                             subHiddenFlags;                                           // 0x04D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EReplaceSlot>                               ReplaceFlags;                                             // 0x04E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAvatarSlotType>                            ignoreFlags;                                              // 0x04F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAvatarPostOperation>                postOperation;                                            // 0x0500(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UBackpackComponent*                          pBackpackComp;                                            // 0x0510(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                itemCapacity;                                             // 0x0518(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Durability;                                               // 0x051C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0520(0x0008) MISSED OFFSET
	struct FBodyAttachmentConfig                       BodyAttachmentConfig;                                     // 0x0528(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EAvatarSlotType                                    hideBoneSlot;                                             // 0x0560(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0561(0x0007) MISSED OFFSET
	struct FName                                       hideBoneName;                                             // 0x0568(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FName>                               hideBoneNameArray;                                        // 0x0570(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EHideBoneType                                      HideBoneType;                                             // 0x0580(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0581(0x0007) MISSED OFFSET
	TMap<int, struct FAvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;                                  // 0x0588(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAvatarPendantConfig>                PendantConfigList;                                        // 0x05D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                PendantConfigIndex;                                       // 0x05E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PendantScale;                                             // 0x05EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                DefaultExtendPendantID;                                   // 0x05F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x1CC];                                     // 0x05F4(0x01CC) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackAvatarHandle");
		return pStaticClass;
	}


	void OnCharacterAttrChangedWithDetailEvent(class AActor* Owner, const struct FString& AttrName, float deltaVal, float resultVal);
	bool HasCustomInfo();
	bool HandleUse(const struct FBattleItemUseTarget& Target, EBattleItemUseReason Reason);
	bool HandleRealShowMeshpack(const struct FAvatarSlotDesc& InSlotDesc, class UObject* Outer);
	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& pickupInfo, EBattleItemPickupReason Reason);
	bool HandleMutilReplaceMeshPack(int ReplaceState, class UObject* Outer, struct FMeshPackage* OutMeshPack);
	bool HandleMutilMeshPack(class UObject* Outer, struct FMeshPackage* OutMeshPack);
	bool HandleMeshpackPostProcess(class UObject* Outer);
	bool HandleMeshAttached(class UMeshComponent* SkeletalMeshComp, class UObject* Outer);
	bool HandleEnable(bool bEnable);
	bool HandleDrop(int InCount, EBattleItemDropReason Reason);
	bool HandleDisuse(EBattleItemDisuseReason Reason);
	class UBackpackComponent* GetBackpackComponent();
	bool CheckCanPickUp(class UCharacterAvatarComponent2* AvatarComp, int nowCapcity);
};


// Class ShadowTrackerExtra.CustomHandleBase
// 0x0008 (0x0030 - 0x0028)
class UCustomHandleBase : public UObject
{
public:
	TWeakObjectPtr<class UCharacterAvatarComponent2>   OwnerComponent;                                           // 0x0028(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomHandleBase");
		return pStaticClass;
	}


	void SetMaterialTexture(class UMaterialInterface* InMaterial, const struct FName& InName, class UTexture* InTexture);
	void SetMaterialScalar(class UMaterialInterface* InMaterial, const struct FName& InName, float InValue);
	void SetMaterialColor(class UMaterialInterface* InMaterial, const struct FName& InName, const struct FLinearColor& InColor);
	class UCharacterAvatarComponent2* GetOwnerComponent();
};


// Class ShadowTrackerExtra.BackpackAvatarItemColor
// 0x0010 (0x0040 - 0x0030)
class UBackpackAvatarItemColor : public UCustomHandleBase
{
public:
	TArray<struct FSlotToMatColor>                     SlotMatColorArray;                                        // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackAvatarItemColor");
		return pStaticClass;
	}


	void SetCustomColorDeffered(class UMaterialInterface* InMaterial, const struct FSlotToMatColor& InMatColor);
	void SetAvatarCustomInfo(EAvatarSlotType InSlotType, class UMaterialInterface* InMaterial);
};


// Class ShadowTrackerExtra.BackpackAvatarItemPattern
// 0x0048 (0x0078 - 0x0030)
class UBackpackAvatarItemPattern : public UCustomHandleBase
{
public:
	TArray<struct FSlotToMatPattern>                   SlotMatPatternArray;                                      // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             SoftRefPath1;                                             // 0x0040(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             SoftRefPath2;                                             // 0x0058(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackAvatarItemPattern");
		return pStaticClass;
	}


	void SetCustomPatternDeffered(class UMaterialInterface* InMaterial, const struct FSlotToMatPattern& InMatPattern);
	void SetAvatarCustomInfo(EAvatarSlotType InSlotType, class UMaterialInterface* InMaterial);
	bool IsPatternNumMode();
	void InitPatternNumID(int InNumID);
	void GetPatternNumTexturePath(int InNumID, struct FSoftObjectPath* OutTexture1, struct FSoftObjectPath* OutTexture2);
};


// Class ShadowTrackerExtra.BackpackCommonAvatarHandle
// 0x0088 (0x0150 - 0x00C8)
class UBackpackCommonAvatarHandle : public UBattleItemHandleBase
{
public:
	TArray<struct FItemAvatarData>                     ItemAvatarMats;                                           // 0x00C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x28];                                      // 0x00D8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackCommonAvatarHandle.ItemSkletalMesh
	unsigned char                                      UnknownData01[0x28];                                      // 0x0100(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackCommonAvatarHandle.ItemStaticMesh
	unsigned char                                      UnknownData02[0x28];                                      // 0x0128(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.BackpackCommonAvatarHandle.ItemAnimBPPath

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackCommonAvatarHandle");
		return pStaticClass;
	}


	bool HandleUse(const struct FBattleItemUseTarget& Target, EBattleItemUseReason Reason);
	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& pickupInfo, EBattleItemPickupReason Reason);
	bool HandleDrop(int InCount, EBattleItemDropReason Reason);
	bool HandleDisuse(EBattleItemDisuseReason Reason);
	class UBackpackComponent* GetBackpackComponent();
	bool CheckCanPickUp(class UCharacterAvatarComponent2* AvatarComp, int nowCapcity);
};


// Class ShadowTrackerExtra.BackpackDecalHandle
// 0x0040 (0x0108 - 0x00C8)
class UBackpackDecalHandle : public UBattleItemHandleBase
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x00C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                                    DecalTexure;                                              // 0x00D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                                    DecalAlpha;                                               // 0x00D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CoordX;                                                   // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CoordY;                                                   // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x20];                                      // 0x00E8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackDecalHandle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BackpackEmoteHandle
// 0x0088 (0x0150 - 0x00C8)
class UBackpackEmoteHandle : public UBattleItemHandleBase
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x00C8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackEmoteHandle.AnimAsset
	float                                              blendTime;                                                // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShowWeaponWhenPlay;                                       // 0x00F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData02[0x10];                                      // 0x00F5(0x0010) UNKNOWN PROPERTY: ArrayProperty ShadowTrackerExtra.BackpackEmoteHandle.LobbyEnterEmoteAnimAssetList
	unsigned char                                      UnknownData03[0x10];                                      // 0x0108(0x0010) UNKNOWN PROPERTY: ArrayProperty ShadowTrackerExtra.BackpackEmoteHandle.LobbyLeaveEmoteAnimAssetList
	class UAkAudioEvent*                               EmoteSoundStartEvent;                                     // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               EmoteSoundInterruptEvent;                                 // 0x0120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsGenderEnable;                                           // 0x0128(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0129(0x0007) MISSED OFFSET
	TArray<class UAkAudioEvent*>                       MaleEmoteSoundStartEventList;                             // 0x0130(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                       FemaleEmoteSoundStartEventList;                           // 0x0140(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackEmoteHandle");
		return pStaticClass;
	}


	bool HandleUse(const struct FBattleItemUseTarget& Target, EBattleItemUseReason Reason);
	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& pickupInfo, EBattleItemPickupReason Reason);
	bool HandleDrop(int InCount, EBattleItemDropReason Reason);
	bool HandleDisuse(EBattleItemDisuseReason Reason);
	class UBackpackComponent* GetBackpackComponent();
	bool CheckCanPickUp(class UCharacterAvatarComponent2* AvatarComp, int nowCapcity);
};


// Class ShadowTrackerExtra.BackpackGrenadeAvatarHandle
// 0x0060 (0x01B0 - 0x0150)
class UBackpackGrenadeAvatarHandle : public UBackpackCommonAvatarHandle
{
public:
	struct FItemDefineID                               ParentID;                                                 // 0x0150(0x0018) (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDefineID                               AvatarDefaultCfg;                                         // 0x0168(0x0018) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESTExtraVehicleShapeType>                   SupportChangeTypes;                                       // 0x0180(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGrenadeParticleSystemAsset>         GrenadeParticleSystemArray;                               // 0x0190(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGrenadeSoundAsset>                  GrenadeSoundArray;                                        // 0x01A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackGrenadeAvatarHandle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BackpackPlaneAvatarHandle
// 0x0080 (0x0148 - 0x00C8)
class UBackpackPlaneAvatarHandle : public UBattleItemHandleBase
{
public:
	TArray<struct FPlaneAvatarData>                    PlaneAvatarMats;                                          // 0x00C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x28];                                      // 0x00D8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackPlaneAvatarHandle.PlaneSkletalMesh
	unsigned char                                      UnknownData01[0x28];                                      // 0x0100(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackPlaneAvatarHandle.PlaneStaticMesh
	TArray<struct FName>                               NeedDestroyEffectNames;                                   // 0x0128(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlaneEffectData>                    PlaneEffectDataList;                                      // 0x0138(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackPlaneAvatarHandle");
		return pStaticClass;
	}


	bool HandleUse(const struct FBattleItemUseTarget& Target, EBattleItemUseReason Reason);
	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& pickupInfo, EBattleItemPickupReason Reason);
	bool HandleDrop(int InCount, EBattleItemDropReason Reason);
	bool HandleDisuse(EBattleItemDisuseReason Reason);
	class UBackpackComponent* GetBackpackComponent();
	bool CheckCanPickUp(class UCharacterAvatarComponent2* AvatarComp, int nowCapcity);
};


// Class ShadowTrackerExtra.BackpackSnowboardItemHandle
// 0x00C8 (0x0190 - 0x00C8)
class UBackpackSnowboardItemHandle : public UBattleItemHandleBase
{
public:
	class UBackpackComponent*                          BackpackComp;                                             // 0x00C8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x28];                                      // 0x00D0(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.BackpackSnowboardItemHandle.SpawnVehicle
	class ASTExtraVehicleBase*                         CreatedVehicle;                                           // 0x00F8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsEnabled;                                                // 0x0100(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0101(0x0007) MISSED OFFSET
	class UClass*                                      WrapperClass;                                             // 0x0108(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                                  WrapperPutdownTrans;                                      // 0x0110(0x0030) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0140(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackSnowboardItemHandle");
		return pStaticClass;
	}


	class APickUpWrapperActor* SpawnWrapperOnGround(class UClass* InWrapperClass, bool bUseRandomLoc);
	void SetDelayDestroy(float Time);
	void OnEnterVehicle(bool IsSucc);
	bool HandleUse(const struct FBattleItemUseTarget& Target, EBattleItemUseReason Reason);
	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& pickupInfo, EBattleItemPickupReason Reason);
	bool HandleEnable(bool bEnable);
	bool HandleDrop(int InCount, EBattleItemDropReason Reason);
	bool HandleDisuse(EBattleItemDisuseReason Reason);
	class UBackpackComponent* GetBackpackComponent();
	struct FBattleItemData ExtractItemData();
	void DelayDestroy();
	bool CheckDropPreHandle();
	bool CheckCanEnable();
};


// Class ShadowTrackerExtra.ReuseListForUI
// 0x0010 (0x0038 - 0x0028)
class UReuseListForUI : public UObject
{
public:
	TArray<int>                                        List;                                                     // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ReuseListForUI");
		return pStaticClass;
	}


	void ShiftRound(bool REVERT);
	void Reset(int Length);
	int Get(int Index);
};


// Class ShadowTrackerExtra.BackpackUtils
// 0x0000 (0x0028 - 0x0028)
class UBackpackUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackUtils");
		return pStaticClass;
	}


	static void UpdateAddtionData(const struct FBattleItemAdditionalData& InData, TArray<struct FBattleItemAdditionalData>* OutAddtionData);
	static TArray<struct FPickupItemDataSortingInfo> SortPickupItemDataList(TArray<struct FPickupItemDataSortingInfo> PickupList);
	static TArray<struct FItemDefineSortingInfo> SortDefineIDByWeight(TArray<struct FItemDefineSortingInfo> DefineIDList);
	static void SortBattleSearchItemList_CPP(TArray<struct FBattleSearchItemSortingInfo> ItemList, TArray<struct FBattleSearchItemSortingInfo>* OutData);
	static TArray<struct FBattleSearchItemSortingInfo> SortBattleSearchItemList(TArray<struct FBattleSearchItemSortingInfo> ItemList);
	static void SortBattleSearchBoxList_CPP(TArray<struct FBattleSearchBoxSortingInfo> BoxList, TArray<struct FBattleSearchBoxSortingInfo>* OutData);
	static TArray<struct FBattleSearchBoxSortingInfo> SortBattleSearchBoxList(TArray<struct FBattleSearchBoxSortingInfo> BoxList);
	static TArray<struct FBattleItemSortingInfo> SortBattleItemList(TArray<struct FBattleItemSortingInfo> ItemList);
	static bool ShouldReusePickupWrapperClass(const struct FItemDefineID& DefineID);
	static bool ShouldAutoPickItem(class UUAEUserWidget* UserWidget, class UBackpackComponent* BackpackComp, bool bAutoPickupSwitcher, bool bAutoPickupSwitcherPve, bool bHideforAim, bool bIsTrainingMode, bool bForbitAutoPickbyMode);
	static void SetWeaponPendantShow(bool bShow);
	static void SetIsNeedInitTable(bool IsNeedInit);
	static int ReturnIteratively(class UBackpackComponent* BackpackComp, const struct FItemDefineID& DefineID, int count, bool bCallHandlePickup);
	static bool PickUpListSearchTombCache(class UUAEUserWidget* UserWidget, TArray<struct FSearchedTombBoxAndWrapperListResult> TombBoxResultArray, int UsefulCount, int UsefulLimit);
	static bool PickUpListSearchPickupGroundCache(class UUAEUserWidget* UserWidget, TArray<struct FSearchedPickUpItemResult> ItemResultArray, int UsefulCount, int UsefulLimit);
	static void PickUpListItemMakeSureListEnough(int count, class UWrapBox* WrapBoxList, bool DivisionTick, bool* OutDivisionTick);
	static void PickUpListBoxCheckSum(TArray<struct FSearchedPickUpItemResult> ItemResultArray, int CheckSum, int* OutCheckSum);
	static void PickupFromGround(class UBackpackComponent* BackpackComp, class APickUpWrapperActor* Source, const struct FBattleItemUseTarget& AutoEquipTarget, bool bForceAutoEquip, int pickCount);
	static struct FBattleItemData ItemNet2Data(const struct FNetArrayUnit& netItem);
	static bool IsValidRevivalCard(class ASTExtraPlayerState* PlayerState);
	static bool IsTaskItemType(int itemType);
	static bool IsScoreItemType(int ItemID);
	static bool IsSameItem(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2);
	static bool IsSameInstance(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2);
	static bool IsRevivalCardID(int InID);
	static bool IsRevivalCard(const struct FBattleSearchBoxSortingInfo& BoxSortingInfo);
	static bool IsPatchItem(int ItemID);
	static bool IsPatchDefineItem(const struct FItemDefineID& InDefineItemID);
	static bool IsGunItemType(int itemType);
	static bool IsGlideItemType(int ItemID);
	static bool IsGhillieSuitItemType(int ItemID);
	static bool IsCharacterVirtualItem(class UBackpackComponent* BackpackComp, const struct FItemDefineID& DefineID);
	static bool IsBattleItemHandlePathExist(const struct FString& HandlePath);
	static bool IsBattleItemHandleExist(const struct FItemDefineID& DefineID, bool bUseCache);
	static bool IsBatteryChipItem(int TypeDefineID);
	static void InitialItemTable();
	static bool HasTagSub(int ItemID, const struct FName& TagName);
	static bool HasTag(int ItemID, const struct FName& TagName);
	static bool HasSkillPropsBySubTypeInBackpack(class UBackpackComponent* BackpackComp, int subType);
	static bool HasItemBySubType(int subType, class UBackpackComponent* BackpackComp);
	static struct FString GetWrapperActorPath(const struct FItemDefineID& DefineID);
	static class UClass* GetWrapperActorClass(const struct FItemDefineID& DefineID);
	static int GetWeaponSkinWeaponID(int InWeaponSkinID);
	static int GetWeaponSkinMappingID(int InWeaponSkinID);
	static TArray<struct FBattleItemData> GetWeaponsInBackpack(class UBackpackComponent* BackpackComp);
	static class UClass* GetWeaponClass(const struct FItemDefineID& DefineID);
	static void GetWeaponAttachmentsInBackpack(class UBackpackComponent* BackpackComp, TArray<struct FBattleItemData>* Out);
	static TArray<class UBattleItemHandleBase*> GetWeaponAttachmentHandles(class UBackpackComponent* BackpackComp);
	static TArray<struct FBattleSearchItemSortingInfo> GetUsefulPickupItemToItemSortingInfos(class UUAEUserWidget* Widget, TArray<struct FSearchedPickUpItemResult> PickUpItemResults);
	static TArray<struct FBattleSearchBoxSortingInfo> GetUsefulPickupItemToBoxSortingInfos(class UUAEUserWidget* Widget, TArray<struct FSearchedPickUpItemResult> PickUpItemResults);
	static EWeaponAttachmentSocketType getSocketByAttachResID(int resID);
	static int GetSkillPropsCountBySubType(class UBackpackComponent* BackpackComp, int InSubType);
	static TArray<struct FBattleItemData> GetSkillPropsBySubTypeInBackpack(class UBackpackComponent* BackpackComp, int InSubType);
	static float GetRevivalCardValidTime();
	static int GetRevivalCardID();
	static struct FString GetRawBattleTextByType(EBattleTextType Type);
	static struct FString GetRawBattleTextByRawTextID(int ID);
	static int GetPickupItemResultIndentify(const struct FSearchedPickUpItemResult& SearchItemResult);
	static int GetPendantIDByWeaponID(int WeaponID);
	static int GetOneSkillPropIDBySubTypeInBackpack(class UBackpackComponent* BackpackComp, int subType);
	static int GetItemUsefulByJudge(class UBackpackComponent* BackpackComp, class UWeaponManagerComponent* weaponComp, const struct FItemDefineID& DefineID, const struct FJudgePickupUsefulItem& JudgePickUseful);
	static int GetItemUseful2(class UUAEUserWidget* Widget, const struct FItemDefineID& ID, const struct FSearchedPickUpItemResult& pickUpItemResult);
	static int GetItemUseful(class UBackpackComponent* BackpackComp, class UWeaponManagerComponent* weaponComp, const struct FItemDefineID& DefineID, const struct FSearchedPickUpItemResult& SearchItemResult);
	static int GetItemSubType(int ItemDefineID);
	static struct FItemRecordData GetItemRecord(int ItemID);
	static bool GetItemOperationSoundAndBank(int ItemSoundID, EBattleItemOperationType ItemOperation, struct FString* OutBankName, struct FString* OutSoundName);
	static int GetItemCountByType(class UBackpackComponent* BackpackComp, int itemType);
	static int GetItemCountByDefineIDUnEquip(class UBackpackComponent* BackpackComp, const struct FItemDefineID& DefineID, bool bOnlyInstance);
	static int GetItemCountByDefineID(class UBackpackComponent* BackpackComp, const struct FItemDefineID& DefineID, bool bOnlyInstance);
	static void GetHelmetInBackpack(class UBackpackComponent* BackpackComp, TArray<struct FBattleItemData>* Out);
	static int GetGrenadePriorityByType(TEnumAsByte<EGrenadeType> Type);
	static int GetEquipmentLevel(int ItemID);
	static bool GetEquipmentBriefMapItem(int TypeDefineID, int* ItemID, int* ItemSubType, int* BPID);
	static int GetEquipmentBagLevel(int ItemID);
	static TArray<struct FBattleItemData> GetEmoteItemInBackpack(class UBackpackComponent* BackpackComp);
	static struct FString GetDynamicMeshPath(const struct FItemDefineID& DefineID);
	static struct FString GetDynamicMaterialPath(const struct FItemDefineID& DefineID);
	static TArray<struct FBattleItemData> GetDecalItemInBackpack(class UBackpackComponent* BackpackComp);
	static TArray<struct FBattleItemData> GetConsumablesInBackpack(class UBackpackComponent* BackpackComp);
	static void GetClothingAndArmorInBackpack(class UBackpackComponent* BackpackComp, TArray<struct FBattleItemData>* Out);
	static struct FBattleItemData GetCharacterVirtualItemInBackpack(class UBackpackComponent* BackpackComp);
	static class UBattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(class UBackpackComponent* BackpackComp);
	static class UBackpackBlueprintUtils* GetBPUtils();
	static struct FString GetBPTableNameByItemID(const struct FItemDefineID& DefineID);
	static int GetBPIDByResID(int resID);
	static struct FBattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(const struct FItemDefineID& DefineID);
	static struct FString GetBattleItemHandlePath(const struct FItemDefineID& DefineID);
	static void GetBattleItemFeatureDataByDefineID_CPP(const struct FItemDefineID& DefineID, struct FBattleItemFeatureData* OutData);
	static struct FBattleItemFeatureData GetBattleItemFeatureDataByDefineID(const struct FItemDefineID& DefineID);
	static int GetBatteryChipID();
	static void GetBagInBackpack(class UBackpackComponent* BackpackComp, TArray<struct FBattleItemData>* Out);
	static TEnumAsByte<EBackpackItemType> GetBackpackItemType(const struct FItemDefineID& ItemDefineID);
	static void GetAttackTipDataByDamageEventType(int DamageType, int subType, struct FString* OutAttackName, struct FString* OutAttackActionName);
	static int GetAssociationsUseful(class UBackpackComponent* BackpackComp, class UWeaponManagerComponent* weaponComp, const struct FItemDefineID& DefineID);
	static void GetArmorInBackpack(class UBackpackComponent* BackpackComp, TArray<struct FBattleItemData>* Out);
	static TArray<struct FBattleItemData> GetAllSkillPropsInBackpack(class UBackpackComponent* BackpackComp);
	static TArray<struct FBattleItemData> GetAllItemsInBackpackWithSubType(class UBackpackComponent* BackpackComp, TArray<int> SubTypes);
	static TArray<struct FBattleItemData> GetAllItemsInBackpack(class UBackpackComponent* BackpackComp, bool bIncludeVirtualItems);
	static struct FBattleItemAdditionalData GetAddtionalData(const struct FName& InName, TArray<struct FBattleItemAdditionalData> InAdditionData);
	static uint64_t GenerateRandomInstanceID();
	static struct FItemDefineID GenerateItemDefineIDWithRandomInstanceID(int Type, int TypeSpecificID);
	static struct FItemDefineID GenerateItemDefineIDByItemTableIDWithRandomInstanceID(int ItemTableID);
	static void ForceDropItems(class UBackpackComponent* BackpackComp, TArray<int> ItemTableList);
	static void ForceDropItemCannotCarryOnPlane(class UBackpackComponent* BackpackComp);
	static void ForceDropAll(class UBackpackComponent* BackpackComp);
	static TArray<struct FPickUpWrapperItem> ExtractPickupWrapperItems(class UBackpackComponent* BackpackComp);
	static void EnableItemBySubType(int subType, bool bEnable, class UBackpackComponent* BackpackComp);
	static void CreateBattleItemHandleListAsync(TArray<struct FItemDefineID> DefineIDLists, class UObject* Outer, const struct FScriptDelegate& Delegate);
	static bool CreateBattleItemHandleAsync(const struct FItemDefineID& DefineID, class UObject* Outer, const struct FScriptDelegate& Delegate);
	static class UBattleItemHandleBase* CreateBattleItemHandle(const struct FItemDefineID& DefineID, class UObject* Outer, bool bLobby);
	static struct FBattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);
	static struct FBattleItemData ConstructBattleItemDataByDefineID(const struct FItemDefineID& DefineID);
	static void ClearItemUsefulCacheByDefineID(const struct FItemDefineID& DefineID);
	static void ClearItemUsefulCache();
	static void ClearEquipmentBriefMap();
	static bool CheckItemUsefulByJudge(class UBackpackComponent* BackpackComp, class UWeaponManagerComponent* weaponComp, const struct FItemDefineID& DefineID, const struct FJudgePickupUsefulItem& JudgePickUseful);
	static bool CheckItemUseful(class UBackpackComponent* BackpackComp, class UWeaponManagerComponent* weaponComp, const struct FItemDefineID& DefineID, const struct FSearchedPickUpItemResult& SearchItemResult);
	static bool CheckItemSubType(int InItemID, int InSubType);
	static bool CheckCapacityForSwapOrDrop(class UBackpackComponent* BackpackComp, int OldCapacity, int NewCapacity);
	static bool CheckAssociationsEquipQualityHigher(class UBackpackComponent* BackpackComponent, bool CanSwap, int WeaponID, const struct FItemDefineID& CurrentDefineID, const struct FItemDefineID& NewDefineID);
	static bool CanSkillPropsItemBePickedUp(class UBackpackComponent* BackpackComp, const struct FItemDefineID& DefineID);
	static void AddEquipmentBriefMapItem(int TypeDefineID, int ItemID, int ItemSubType, int BPID);
	static void AddCharacterVirtualItemHandleToBackpack(class UBackpackComponent* BackpackComp, class ASTExtraBaseCharacter* Character);
};


// Class ShadowTrackerExtra.BackpackBlueprintUtils
// 0x09B8 (0x09E0 - 0x0028)
class UBackpackBlueprintUtils : public UObject
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0028(0x00D0) MISSED OFFSET
	TArray<struct FCreateBattleItemHandleAsyncRequest> PendingAsyncRequests;                                     // 0x00F8(0x0010) (ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<int, struct FCreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;                                  // 0x0108(0x0050) (ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<int, EClipsType>                              TClipTypeMap;                                             // 0x0158(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, struct FItemRecordData>                  mapItemRecord;                                            // 0x01A8(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, int>                                     mapPickupBullet;                                          // 0x01F8(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, EWeaponAttachmentSocketType>             mapAttachPos;                                             // 0x0248(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPickupSetting                              PickupSetting;                                            // 0x0298(0x00C4) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x035C(0x0004) MISSED OFFSET
	struct FPickupProposeData                          proposeData;                                              // 0x0360(0x00F0) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int, struct FName>                            ItemSubTypeNameMap;                                       // 0x0450(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FTagItemList>            ItemTag;                                                  // 0x04A0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, struct FItemTagList>                     ItemTagMap;                                               // 0x04F0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0540(0x0010) MISSED OFFSET
	EGameModeType                                      CurrentGameModeType;                                      // 0x0550(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0551(0x0007) MISSED OFFSET
	struct FString                                     ItemTableName;                                            // 0x0558(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ItemTagTableName;                                         // 0x0568(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     AttachTableName;                                          // 0x0578(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     SuitEmoteTableName;                                       // 0x0588(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     OccupationTableName;                                      // 0x0598(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShowWeaponPendant;                                       // 0x05A8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x7];                                       // 0x05A9(0x0007) MISSED OFFSET
	TMap<int, int>                                     itemGuid2Useful;                                          // 0x05B0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, int>                                     gunMainTypeUseful;                                        // 0x0600(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, int>                                     attachMainTypeUseful;                                     // 0x0650(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, int>                                     bulletMainTypeUseful;                                     // 0x06A0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, int>                                     medicineAndGrenadeMainTypeUseful;                         // 0x06F0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, int>                                     constructTypeUseful;                                      // 0x0740(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, float>                                   ItemWeight;                                               // 0x0790(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, int>                                     skillpropsTypeUseful;                                     // 0x07E0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, bool>                                    itemPathExist;                                            // 0x0830(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        ItemToDownload;                                           // 0x0880(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, struct FEquipmentBrief>                  EquipmentBriefMap;                                        // 0x0890(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bEnableTableOptimization;                                 // 0x08E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x08E1(0x0003) MISSED OFFSET
	int                                                CharacterVirtualItem_Type;                                // 0x08E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CharacterVirtualItem_TypeSpecificID;                      // 0x08E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x4];                                       // 0x08EC(0x0004) MISSED OFFSET
	TMap<int, struct FString>                          BPTableNameMap;                                           // 0x08F0(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, class UClass*>                           VirtualItemClassMap;                                      // 0x0940(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x50];                                      // 0x0990(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.BackpackBlueprintUtils.NoUseVirtualItemIDs

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackBlueprintUtils");
		return pStaticClass;
	}


	void ResetItemToDownload();
	void OnGameModeTypeChanged();
	bool IsVirtualItemData(const struct FBattleItemData& ItemData);
	bool IsPatchItem(int ItemID);
	bool IsParachuteItemType(int ItemID);
	bool IsOpenQuickSwitchSubWeapon();
	bool IsInPveMode();
	bool IsGlideItemType(int ItemID);
	bool IsGhillieSuitItemType(int ItemID);
	bool IsBattleItemHandlePathExist(const struct FString& HandlePath);
	bool IsBattleItemHandleExist(const struct FItemDefineID& DefineID, bool bUseCache);
	bool Is3BackpackID(int ID);
	void InitialItemTable();
	bool HasTagSub(int ItemID, const struct FName& TagName);
	bool HasTag(int ItemID, const struct FName& TagName);
	int GetWeaponSkinWeaponID(int InWeaponSkinID);
	int GetWeaponSkinMappingID(int InWeaponSkinID);
	struct FString GetRawBattleTextByType(EBattleTextType Type);
	struct FString GetRawBattleTextByRawTextID(int ID);
	int GetPendantIDByWeaponID(int WeaponID);
	int GetItemSubTypeID(int SpecificID);
	struct FItemRecordData GetItemRecord(int ItemID);
	bool GetItemOperationSoundAndBankCpp(int ItemSoundID, EBattleItemOperationType ItemOperation, struct FString* OutBankName, struct FString* OutSoundName);
	bool GetItemOperationSoundAndBank(int ItemSoundID, EBattleItemOperationType ItemOperation, struct FString* OutBankName, struct FString* OutSoundName);
	int GetEquipmentLevel(int ItemID);
	int GetEquipmentBagLevel(int ItemID);
	struct FBattleItemData GetCharacterVirtualItemInBackpack(class UBackpackComponent* BackpackComp);
	class UBattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(class UBackpackComponent* BackpackComp);
	struct FString GetBPTableNameInner(int Type, int TypeSpecificID);
	struct FString GetBPTableNameByItemID(const struct FItemDefineID& DefineID);
	int GetBPIDByResID(int resID);
	struct FBattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(const struct FItemDefineID& DefineID);
	struct FString GetBattleItemHandlePathInner(const struct FItemDefineID& DefineID);
	struct FString GetBattleItemHandlePath(const struct FItemDefineID& DefineID);
	void GetBattleItemFeatureDataByItemIDRef(int ItemID, struct FBattleItemFeatureData* OutData);
	void GetBattleItemFeatureDataByItemID(int ItemID, struct FBattleItemFeatureData* OutData);
	void GetBattleItemFeatureDataByDefineIDRef(const struct FItemDefineID& DefineID, struct FBattleItemFeatureData* OutData);
	void GetBattleItemFeatureDataByDefineID_CPP(const struct FItemDefineID& DefineID, struct FBattleItemFeatureData* OutData);
	struct FBattleItemFeatureData GetBattleItemFeatureDataByDefineID(const struct FItemDefineID& DefineID);
	TArray<int> GetAttachOfWeapon(int WeaponID);
	void GenerateItemDefineIDByItemTableID(int ItemTableID, int* Type, int* TypeSpecificID);
	struct FTagItemList FindItemTag(const struct FName& TagName);
	class UBattleItemHandleBase* CreateVirtualItemHandle(const struct FItemDefineID& DefineID, class UObject* Outer);
	class UBattleItemHandleBase* CreateBattleItemHandleInner(const struct FItemDefineID& DefineID, class UObject* Outer);
	class UBattleItemHandleBase* CreateBattleItemHandle(const struct FItemDefineID& DefineID, class UObject* Outer, bool bLobby);
	struct FBattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);
	struct FBattleItemData ConstructBattleItemDataByDefineID(const struct FItemDefineID& DefineID);
	void AddCharacterVirtualItemToBackpack(class UBackpackComponent* BackpackComp, class ASTExtraBaseCharacter* Character);
};


// Class ShadowTrackerExtra.ItemTraver
// 0x0018 (0x0040 - 0x0028)
class UItemTraver : public UTableTraver
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ItemTraver");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AttachTraver
// 0x0010 (0x0038 - 0x0028)
class UAttachTraver : public UTableTraver
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AttachTraver");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ItemTagTraver
// 0x0010 (0x0038 - 0x0028)
class UItemTagTraver : public UTableTraver
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ItemTagTraver");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BackpackUtilsEditorAgent
// 0x0000 (0x0028 - 0x0028)
class UBackpackUtilsEditorAgent : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackUtilsEditorAgent");
		return pStaticClass;
	}


	static void SetBackpackNeedInitTable(bool IsNeedInitTable);
	static void ReleaseBackpackUtils();
	static struct FItemDefineID CreateItemIDByTableID(int ItemTableID);
};


// Class ShadowTrackerExtra.BackpackVehicleAvatarHandle
// 0x00D0 (0x0220 - 0x0150)
class UBackpackVehicleAvatarHandle : public UBackpackCommonAvatarHandle
{
public:
	TArray<ESTExtraVehicleShapeType>                   SupportChangeTypes;                                       // 0x0150(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemAvatarData>                     BrokenMatData;                                            // 0x0160(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0170(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackVehicleAvatarHandle.FPPSkeletalMesh
	unsigned char                                      UnknownData01[0x28];                                      // 0x0198(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackVehicleAvatarHandle.FPPStaticMesh
	TArray<struct FItemAvatarData>                     FPPMatData;                                               // 0x01C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x28];                                      // 0x01D0(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.BackpackVehicleAvatarHandle.lobbyWheeledVehicle
	unsigned char                                      UnknownData03[0x28];                                      // 0x01F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackVehicleAvatarHandle.LightEffect

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackVehicleAvatarHandle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BackpackWeaponAttachHandle
// 0x0290 (0x0358 - 0x00C8)
class UBackpackWeaponAttachHandle : public UBattleItemHandleBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00C8(0x0018) MISSED OFFSET
	struct FWeaponAttachmentConfig                     WeaponAttachmentConfig;                                   // 0x00E0(0x0210) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UClass*                                      animBP;                                                   // 0x02F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x28];                                      // 0x02F8(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.BackpackWeaponAttachHandle.animBPClass
	TArray<struct FWeaponPendantSocket>                PendantConfigList;                                        // 0x0320(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponPendantMap>                   WeaponPendantMap;                                         // 0x0330(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UBackpackComponent*                          BackpackComp;                                             // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0348(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackWeaponAttachHandle");
		return pStaticClass;
	}


	void ReturnWeaponAdditionalBulletsToBackpack(class ASTExtraShootWeapon* Weapon, int BulletNum);
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();
	bool IsVirtualAvatarHandle();
	void HandleDisuseReplaceByNew(class UBackpackWeaponAttachHandle* NewHandle);
	void GetWidgetList(TArray<struct FUIWidgetRes>* UIList);
	int GetSubSlotID();
	int GetSlotID();
	struct FWeaponMeshCfg GetMeshPackCfgCopy();
	void GetMeshPackCfg(struct FWeaponMeshCfg* meshCfg);
	struct FWeaponAttachmentConfig GetAttachmentConfig();
	class UClass* GetAnimationBP();
	bool EquipOrUnEuipAttachment(class ASTExtraShootWeapon* InWeapon, bool IsEquip, EBattleItemDisuseReason Reason);
};


// Class ShadowTrackerExtra.BackpackWeaponHandle
// 0x0378 (0x0440 - 0x00C8)
class UBackpackWeaponHandle : public UBattleItemHandleBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00C8(0x0018) MISSED OFFSET
	class UBackpackComponent*                          BackpackComp;                                             // 0x00E0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponMeshCfg                              MeshPackage;                                              // 0x00E8(0x0148) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UClass*                                      animBP;                                                   // 0x0230(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0238(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.BackpackWeaponHandle.animBPClass
	TMap<struct FItemDefineID, struct FItemDefineID>   AttachmentAvatarList;                                     // 0x0260(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FItemDefineID>                       DefaultAvatarList;                                        // 0x02B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FItemDefineID                               ParentID;                                                 // 0x02C0(0x0018) (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemDefineID>                       ParentIDList;                                             // 0x02D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UClass*                                      lobbyWeapon;                                              // 0x02E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponAttachmentSocketType                        OverrideSocket;                                           // 0x02F0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x02F1(0x0007) MISSED OFFSET
	TArray<struct FBattleItemAdditionalData>           WeaponAttachmentAdditionalDataList;                       // 0x02F8(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class ASTExtraWeapon*                              CachedTargetWeapon;                                       // 0x0308(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattleItemPickupInfo                       CachedBattleItemPickupInfo;                               // 0x0310(0x0048) (BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FWeaponAttachItemUnit>               CachedWeaponAttachmentListBeforeDrop;                     // 0x0358(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FWeaponKillEffectCfg                        KillEffect;                                               // 0x0368(0x0008) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0370(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackWeaponHandle.LightEffect
	unsigned char                                      UnknownData04[0x28];                                      // 0x0398(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackWeaponHandle.ShootLightEffect
	unsigned char                                      UnknownData05[0x50];                                      // 0x03C0(0x0050) UNKNOWN PROPERTY: MapProperty ShadowTrackerExtra.BackpackWeaponHandle.HitSoundMap
	unsigned char                                      UnknownData06[0x28];                                      // 0x0410(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackWeaponHandle.SlashSound
	bool                                               IsInitUIWidget;                                           // 0x0438(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0439(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackWeaponHandle");
		return pStaticClass;
	}


	void SaveWeaponAttachmentListBeforeDrop();
	void PreLocalHandleDisuse();
	class APickUpWrapperActor* LocalSpawnWrapperOnGround(class UClass* InWrapperClass, class ASTExtraBaseCharacter* InOwningCharacter, const struct FItemDefineID& InDefineID);
	bool LocalHandleUse(const struct FBattleItemUseTarget& InTarget, EBattleItemUseReason InReason, class UWeaponManagerComponent* InWeaponMgr, const struct FName& InTargetLogicSocket, bool bInTargetAutoUse, const struct FName& InMainLogicSlot1Name, const struct FName& InMainLogicSlot2Name, const struct FName& InSubLogicSlotName, bool bInIsPistol, class ASTExtraPlayerController* InOwningPlayerController, class UBattleItemHandleBase* InCharacterItemHandle, class UBackpackComponent* InOwningBackpackComponnent, class ASTExtraBaseCharacter* InOwningCharacter, class UClass* InWeaponClass, bool bInResetInitBulletInBullet, class ASTExtraWeapon** OutTargetWeaponActor, struct FName* bOutSocket);
	struct FName LocalGetAvailableInstantLogicSocketName(class UWeaponManagerComponent* InWeaponMgr, const struct FName& InTargetLogicSocket, bool bInTargetAutoUse, const struct FName& InMainLogicSlot1Name, const struct FName& InMainLogicSlot2Name, const struct FName& InSubLogicSlotName, bool bInIsPistol, class ASTExtraPlayerController* InOwningPlayerController, bool* bOutNeedPutDownOldWeapon, bool* bOutAutoUse);
	void LocalAutoEquipAttachments();
	bool IsVirtualAvatarHandle();
	bool IsAvatarWeapon();
	void GetWidgetList(TArray<struct FUIWidgetRes>* UIList);
	int GetSubSlotID();
	int GetSlotID();
	struct FWeaponMeshCfg GetMeshPackCfgCopy();
	void GetMeshPackCfg(struct FWeaponMeshCfg* meshCfg);
	void GetDefaultAvatarList(TArray<struct FItemDefineID>* DefaultAvatarList);
	class UClass* GetAnimationBP();
};


// Class ShadowTrackerExtra.BackpackWeaponInterface
// 0x0000 (0x0028 - 0x0028)
class UBackpackWeaponInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BackpackWeaponInterface");
		return pStaticClass;
	}


	void GetWidgetList(TArray<struct FUIWidgetRes>* UIList);
	int GetSubSlotID();
	int GetSlotID();
	struct FWeaponMeshCfg GetMeshPackCfgCopy();
	void GetMeshPackCfg(struct FWeaponMeshCfg* meshCfg);
	void GetDefaultAvatarList(TArray<struct FItemDefineID>* DefaultAvatarList);
	struct FWeaponAttachmentConfig GetAttachmentConfig();
	void GetAttachmentAvatarList(TMap<struct FItemDefineID, struct FItemDefineID>* AttachmentList);
	class UClass* GetAnimationBP();
	void ApplyAttrModify(class ASTExtraShootWeapon* InWeapon, bool IsEquip);
};


// Class ShadowTrackerExtra.BaseAIController
// 0x0330 (0x07B8 - 0x0488)
class ABaseAIController : public AAIController
{
public:
	TArray<class UBehaviorTree*>                       BehaviorTree;                                             // 0x0488(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                              CheckPeriod;                                              // 0x0498(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              RandomDeviation;                                          // 0x049C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ProtectCountdownTime;                                     // 0x04A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SpawnEquipDelayTime;                                      // 0x04A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SpawnEquipFreezeRadius;                                   // 0x04A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   ProtectShootRadius;                                       // 0x04AC(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TurnVelocity;                                             // 0x04B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   DarkMaxAttackDistRange;                                   // 0x04B8(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EWeatherStatusType, EWeatherStatusType>       WeatherToAttackDist;                                      // 0x04C0(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x250];                                     // 0x0510(0x0250) MISSED OFFSET
	class UBehaviorTreeComponent*                      BehaviorComp;                                             // 0x0760(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlackboardComponent*                        BlackboardComp;                                           // 0x0768(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBackpackComponent*                          BackpackComponent;                                        // 0x0770(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIControllerCachedData                     AIControllerCachedData;                                   // 0x0778(0x0030) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x07A8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BaseAIController");
		return pStaticClass;
	}


	void Respawn();
};


// Class ShadowTrackerExtra.BaseCharacterEffectCom
// 0x0010 (0x0120 - 0x0110)
class UBaseCharacterEffectCom : public UActorComponent
{
public:
	class UParticleSystem*                             DeathFX;                                                  // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       OwningCharacter;                                          // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BaseCharacterEffectCom");
		return pStaticClass;
	}


	void HandleOwnerDeath(class ASTExtraBaseCharacter* DeadCharacter, class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType);
};


// Class ShadowTrackerExtra.PickupProxy
// 0x0008 (0x0030 - 0x0028)
class UPickupProxy : public UObject
{
public:
	class AActor*                                      ProxyOwner;                                               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PickupProxy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BaseCharacterPickupProxy
// 0x0008 (0x0038 - 0x0030)
class UBaseCharacterPickupProxy : public UPickupProxy
{
public:
	class ASTExtraBaseCharacter*                       ProxyOwnerCharacter;                                      // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BaseCharacterPickupProxy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BaseFPPComponent
// 0x01B8 (0x02C8 - 0x0110)
class UBaseFPPComponent : public UActorComponent
{
public:
	bool                                               bIsBoltAction;                                            // 0x0110(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0111(0x000F) MISSED OFFSET
	class ASTExtraPlayerCharacter*                     Pawn;                                                     // 0x0120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       ScopeAimCameraSocketName;                                 // 0x0128(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       FPPSocketName;                                            // 0x0130(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       BoltActionCurveName;                                      // 0x0138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScopeZoomSpringArmLength;                                 // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	float                                              BoltActionHoldTimeDefault;                                // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              BoltActionFov;                                            // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScopeZoomAlpha;                                           // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	TMap<struct FName, float>                          ScopeZoomBackupMap;                                       // 0x0158(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                              ScopeZoomSpeed;                                           // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	TMap<int, class UCurveFloat*>                      ScopeZoomFovCurveMap;                                     // 0x01B0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int                                                CurrentPlayAnimIndex;                                     // 0x0200(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x14];                                      // 0x0204(0x0014) MISSED OFFSET
	TMap<uint64_t, int>                                WeaponAngledSightState;                                   // 0x0218(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bIsAngledOpticalSight;                                    // 0x0268(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0269(0x0007) MISSED OFFSET
	TMap<struct FName, float>                          ScopeZoomMap;                                             // 0x0270(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x4];                                       // 0x02C0(0x0004) MISSED OFFSET
	bool                                               InScopeInProcess;                                         // 0x02C4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x3];                                       // 0x02C5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BaseFPPComponent");
		return pStaticClass;
	}


	bool UpdateScopeCameraOffsets(float* FOV, float* Offset);
	float SwitchSightConfigMaterial();
	void SwitchScopeMeshAnim(TEnumAsByte<EScopeMeshAnimType> Type);
	void SwitchCameraMode(TEnumAsByte<EPlayerCameraMode> Mode);
	float SwitchAngledSightConfigMaterial();
	void StopScopeIn();
	float ShowReflectorSightTPPMaterial();
	float ShowAngledSightTPPMaterial();
	void SetWeaponAngledSightState(class ASTExtraShootWeapon* Weapon, bool State);
	void SetTagCulling(bool IsUse);
	void SetScopeCVar();
	void ScopingChange(bool InValue);
	void Scoping(TEnumAsByte<ESTEScopeType> NewType);
	void ScopeZoomUpdate(float alpha);
	void ScopeZoomTick(float DeltaTime);
	void ScopeZoomCalculate(float* FOV, float* SpringArmScaleX);
	void ScopeTimelineUpdate(float alpha);
	void ScopeOutSpeedChange(class ASTExtraPlayerController* Controller, class UShootWeaponEntity* entity);
	void ScopeOutLogic();
	void ScopeOutEnd();
	void ScopeOut(TEnumAsByte<ESTEScopeType> NewType);
	void ScopeNotHandFold();
	void ScopeInterrupt(TEnumAsByte<ESTEScopeType> NewType);
	void ScopeInSpeedChange(class ASTExtraPlayerController* Controller, class UShootWeaponEntity* entity);
	void ScopeInLogic();
	void ScopeInEnd();
	void ScopeInContinue();
	void ScopeInAfterTimeline();
	void ScopeIn(TEnumAsByte<ESTEScopeType> NewType);
	void ScopeHandFold();
	void RevertScopeCVarOnDie(class ASTExtraBaseCharacter* DeadCharacter, class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType);
	void RevertScopeCVar();
	void PlayScopeInTimeline();
	bool IsUseZoomScope();
	bool IsRPGScopeIn();
	bool IsCurWeaponAttachedAngledSight();
	bool IsAngledSightBySlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	bool IsAngledSight();
	void InitScopeZoom(int WeaponID, int ScopeID);
	bool HaveAngledSight();
	TEnumAsByte<ESightType> GetSightType();
	float GetScopeZoomValue(int WeaponID, int ScopeID);
	struct FName GetScopeZoomKey(int WeaponID, int ScopeID);
	float GetScopeFov(class ASTExtraShootWeapon* ShootWeapon);
	float DetachSightLens();
	void BoltAction(float DeltaSeconds);
	void AttachToSight();
	float AttachSightLens();
	void ActiveComponentTickable();
};


// Class ShadowTrackerExtra.BaseTaskComponent
// 0x0078 (0x0188 - 0x0110)
class UBaseTaskComponent : public UActorComponent
{
public:
	class ASTExtraPlayerController*                    OwningPC;                                                 // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FString                                     OwningPlayerName;                                         // 0x0118(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UUAETriggerObject*>                   TaskTriggerObjects;                                       // 0x0128(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FString, class UTriggerEvent*>         TriggerEvents;                                            // 0x0138(0x0050) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BaseTaskComponent");
		return pStaticClass;
	}


	int RetrieveTaskAreaType(const struct FVector& PlayerLocation);
	TArray<int> RetrieveTaskAreaList(const struct FVector& PlayerLocation);
	int RetrieveLandLocType(const struct FString& TargetName);
	void ReportTaskAndSpecialCollection(TEnumAsByte<ETaskType> TaskType, int TaskID, int process);
	bool RegisterEvent(class UClass* RegisterEventClass, class UUAETriggerObject* TriggerListener, TEnumAsByte<ETaskEventType> TaskEventType);
	bool IsTriggerActive(int InTaskID);
	bool IsSpecialPickItem(int InItemID);
	bool IsInSpecifiedArea(const struct FVector& PlayerLocation, const struct FString& outAreaAnchorsStr, const struct FString& InMapName, const struct FString& InTargetName);
	void HandlePlayerPickupItem(int ItemID, int count, class ASTExtraPlayerController* PC);
	void HandlePlayerKilling();
	void HandlePlayerDropItem(int ItemID, int count, class ASTExtraPlayerController* PC);
	void HandlePlayerDoEmote(int EmoteIndex);
	void HandleInitTaskData(int TaskID, int process, const struct FString& ext_info);
	void HandleInitCollectionData(int ItemID, int CurrentCount, int TotalCount);
	void HandleDeathBoxSpawned(const struct FTransform& SpawnTransform);
	class UUAETriggerObject* GetTriggerObject(int InTaskID);
	int GetTaskSubTypeFromDataTable(int InTaskID);
	bool GetTaskParamsFromDataTable(int InTaskID, struct FString* outMainConditionParam, int* outTargetProcess);
	bool GetTaskParams(int InTaskID, struct FString* outMainConditionParamStr, int* outTaskProcess);
	struct FString GetTaskClassPath(TEnumAsByte<ETaskType> TaskType, int TaskUID);
	TArray<int> GetTaskAreaListFromDataTable(const struct FVector& InPlayerLocation);
	int GetTaskAreaIDFromDataTable(const struct FVector& InPlayerLocation);
	struct FString GetOwningPlayerName();
	struct FString GetMapName();
	int GetLandLocIDFromDataTable(const struct FString& InTargetName);
	void FireEvent(TEnumAsByte<ETaskEventType> TaskEventType, int Param, const struct FString& ExtMsg);
	void DeactiveCondition(TEnumAsByte<ETaskConditionType> InTaskConditionType, class UVariableSet* InDataSource);
	class UUAETriggerObject_Task* CreateTriggerObject(TEnumAsByte<ETaskType> TaskType, int TaskID);
	bool AddTrigger(TEnumAsByte<ETaskType> TaskType, int TaskID, int process, const struct FString& ext_info);
	void AddEventToTrigger(class UUAETriggerObject* TriggerObj, class UClass* Event, TEnumAsByte<ETaskEventType> TaskEventType);
	void ActiveCondition(TEnumAsByte<ETaskConditionType> InTaskConditionType, class UVariableSet* InDataSource);
};


// Class ShadowTrackerExtra.BasicGameMode
// 0x0270 (0x12B8 - 0x1048)
class ABasicGameMode : public AUAEGameMode
{
public:
	class UClass*                                      AIControllerClass;                                        // 0x1048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      NewAIControllerClass;                                     // 0x1050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Radius0;                                                  // 0x1058(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Radius1;                                                  // 0x105C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Radius2;                                                  // 0x1060(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Radius3;                                                  // 0x1064(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     MapCenter;                                                // 0x1068(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlaneSpeed;                                               // 0x1074(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlaneHeight;                                              // 0x1078(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CanOpenParachuteHeight;                                   // 0x107C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForceOpenParachuteHeight;                                 // 0x1080(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloseParachuteHeight;                                     // 0x1084(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlueCircleRadius;                                         // 0x1088(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                StartReadyCountDownPlayerNum;                             // 0x108C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PlayerNumPerTeam;                                         // 0x1090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitAudioVisual;                                       // 0x1094(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitAutoPick;                                          // 0x1095(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitHurtEffect;                                        // 0x1096(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGunSamePriority;                                         // 0x1097(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bServerOpenPassWallCheck;                                 // 0x1098(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1099(0x0003) MISSED OFFSET
	struct FVector                                     BornLocation;                                             // 0x109C(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BornRadius;                                               // 0x10A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      LastCircleCountToDestroyActorOnServer;                    // 0x10AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x10AD(0x0003) MISSED OFFSET
	int                                                MaxDynamicLoadingWorldPlayer;                             // 0x10B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x10B4(0x0004) MISSED OFFSET
	struct FString                                     GameModeDisplayName;                                      // 0x10B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                bIsAutoReloadWeaponGameMode;                              // 0x10C8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                bIsPickUpFillBulletGameMode;                              // 0x10CC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGamemodeAIDataAsset*                        GamemodeAIDataAsset;                                      // 0x10D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DragOnGroundDownTraceDistance;                            // 0x10D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DragOnGroundUpTraceDistance;                              // 0x10DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameModeDataAsset*                          GameModeDataAsset;                                        // 0x10E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OutBoundDamage;                                           // 0x10E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bCanJump;                                                 // 0x10EC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bInitGlobalConfig;                                        // 0x10ED(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      WorldLoadedType;                                          // 0x10EE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x1];                                       // 0x10EF(0x0001) MISSED OFFSET
	int                                                MaxNoConsiderActorNum;                                    // 0x10F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDestoryActorNumPerFrame;                               // 0x10F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EditorGuidMode;                                           // 0x10F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReplacePistolWhenPickUpMainWeapon;                       // 0x10F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      LastCircleCountToDestroyActorOnServerConfig;              // 0x10FA(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x1];                                       // 0x10FB(0x0001) MISSED OFFSET
	int                                                MaxDynamicLoadingWorldPlayerConfig;                       // 0x10FC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData05[0x4];                                       // 0x1100(0x0004) MISSED OFFSET
	int                                                bEnableAIPolicyDecisionLog;                               // 0x1104(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                bEnableAIPolicyDecisionLogShipping;                       // 0x1108(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AIPolicyDecisionTargetPlayerNum;                          // 0x110C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AIPolicyDecisionRelevantUpdateInterval;                   // 0x1110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;        // 0x1114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVisibleCheck;                                            // 0x1118(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeType                                      GameModeType;                                             // 0x1119(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x6];                                       // 0x111A(0x0006) MISSED OFFSET
	class UGameModeServiceBase*                        GameModeService;                                          // 0x1120(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUAEStateMachineComponent*                   SMComp;                                                   // 0x1128(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIActingComponent*                          AIActingComp;                                             // 0x1130(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCircleMgrComponent*                         CircleMgrComponent;                                       // 0x1138(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x178];                                     // 0x1140(0x0178) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BasicGameMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BattleRoyaleGameModeBase
// 0x0700 (0x1748 - 0x1048)
class ABattleRoyaleGameModeBase : public AUAEGameMode
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x1048(0x0008) MISSED OFFSET
	bool                                               bUseSpawnSpotAdjustPosition;                              // 0x1050(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseSpawnActorAdjustPosition;                             // 0x1051(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSpawnAdjustCollisionConsiderHeight;                      // 0x1052(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bConfigEnableLuaEnv;                                      // 0x1053(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeType                                      GameModeType;                                             // 0x1054(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x1055(0x0003) MISSED OFFSET
	class UAIActingComponent*                          AIActingComp;                                             // 0x1058(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                bEnableAIPolicyDecisionLog;                               // 0x1060(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                bEnableAIPolicyDecisionLogShipping;                       // 0x1064(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsDestroyNoActiveWorldActor;                              // 0x1068(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x1069(0x0003) MISSED OFFSET
	float                                              AIPolicyDecisionRelevantUpdateInterval;                   // 0x106C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;        // 0x1070(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AIPolicyDecisionTargetPlayerNum;                          // 0x1074(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVisibleCheck;                                            // 0x1078(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsMapRotateMode;                                          // 0x1079(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x2];                                       // 0x107A(0x0002) MISSED OFFSET
	float                                              MapRotation;                                              // 0x107C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemsBoxConfigDataAsset*                    PickupBoxConfigDataAsset;                                 // 0x1080(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AIControllerClass;                                        // 0x1088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      NewAIControllerClass;                                     // 0x1090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      LevelDirectorClass;                                       // 0x1098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AUAELevelDirector*                           LevelDirector;                                            // 0x10A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      WorldLoadedType;                                          // 0x10A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x10A9(0x0003) MISSED OFFSET
	int                                                MaxNoConsiderActorNum;                                    // 0x10AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDestoryActorNumPerFrame;                               // 0x10B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PlayerNumPerTeam;                                         // 0x10B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IgnoreWorldLevelProbeUpdate;                              // 0x10B8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsRefreshWorldActiveRange;                                // 0x10B9(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x6];                                       // 0x10BA(0x0006) MISSED OFFSET
	struct FString                                     GameModeDisplayName;                                      // 0x10C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CircleSpeedMultiplicator;                                 // 0x10D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbidAutoAimAt;                                         // 0x10D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbidAutoOpendoor;                                      // 0x10D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitAudioVisual;                                       // 0x10D6(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitAutoPick;                                          // 0x10D7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitHurtEffect;                                        // 0x10D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGunSamePriority;                                         // 0x10D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitInvalidTeammateHurt;                               // 0x10DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitFallingDamage;                                     // 0x10DB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseFootPrint;                                            // 0x10DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldDeferredExitGame;                                  // 0x10DD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDropDeadBoxWrappersToGround;                             // 0x10DE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x1];                                       // 0x10DF(0x0001) MISSED OFFSET
	TArray<int>                                        DropDeadBoxWrappersToGroundBlackList;                     // 0x10E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              DropDeadBoxWrappersToGroundGridStep;                      // 0x10F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableWeaponAttachmentBindDropToWeaponWrapper;           // 0x10F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x3];                                       // 0x10F5(0x0003) MISSED OFFSET
	struct FString                                     GameModeConfigPath;                                       // 0x10F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsAutoReloadWeaponGameMode;                              // 0x1108(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsPickUpFillBulletGameMode;                              // 0x1109(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShowSkullInOB;                                           // 0x110A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsSkipNearDeath;                                          // 0x110B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsWeaponFPPOffsetInTDMode;                                // 0x110C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x3];                                       // 0x110D(0x0003) MISSED OFFSET
	struct FGameModeParam                              CurPlaneRouteData;                                        // 0x1110(0x0058) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector                                     BornLocation;                                             // 0x1168(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     AIBornLocation;                                           // 0x1174(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BornRadius;                                               // 0x1180(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      LastCircleCountToDestroyActorOnServer;                    // 0x1184(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      LastCircleCountToDestroyActorOnServerConfig;              // 0x1185(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x2];                                       // 0x1186(0x0002) MISSED OFFSET
	int                                                MaxDynamicLoadingWorldPlayer;                             // 0x1188(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDynamicLoadingWorldPlayerConfig;                       // 0x118C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIWorldVolume*                              AIWorldVolume;                                            // 0x1190(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOpenWarModeSwitch;                                       // 0x1198(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x1F];                                      // 0x1199(0x001F) MISSED OFFSET
	float                                              MaxAIAllowJumpRadius;                                     // 0x11B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HorizontalFlyDistanceAfterOpenParachute;                  // 0x11BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EditorGuidMode;                                           // 0x11C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x7];                                       // 0x11C1(0x0007) MISSED OFFSET
	class UGameModeDataAsset*                          GameModeDataAsset;                                        // 0x11C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bImmediatelySpawnAI;                                      // 0x11D0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRespawnAIPosWithTeam;                                    // 0x11D1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x6];                                       // 0x11D2(0x0006) MISSED OFFSET
	class UMonsterProbeComponent*                      RegisterMonsterProbe;                                     // 0x11D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIWorldSoundManagerComponent*               AIWorldSoundManagerComp;                                  // 0x11E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASeasonStatueBase*                           StatueBaseActor;                                          // 0x11E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OverrideBackpackCapacity;                                 // 0x11F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOverrideBackpackCapacity;                                // 0x11F4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x3B];                                      // 0x11F5(0x003B) MISSED OFFSET
	bool                                               IsEnableLuaEnv;                                           // 0x1230(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x7];                                       // 0x1231(0x0007) MISSED OFFSET
	struct FString                                     GameScriptPath;                                           // 0x1238(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LuaFileEntryFile;                                         // 0x1248(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PreloadLuaFile;                                           // 0x1258(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LuaTriggersPath;                                          // 0x1268(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LuaModName;                                               // 0x1278(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LuaTriggersFile;                                          // 0x1288(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                             StepGCTimeLimit;                                          // 0x1298(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameModeLuaEnv*                             LuaEnv;                                                   // 0x12A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             CustomWidgets;                                            // 0x12A8(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FString                                     CustomUIName;                                             // 0x12B8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameModeState*                              CurrentState;                                             // 0x12C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UGameModeState*>                      AllGameModeStates;                                        // 0x12D0(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UGameModeState*                              GameModeStateActive;                                      // 0x12E0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameModeState*                              GameModeStateReady;                                       // 0x12E8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameModeState*                              GameModeStateFighting;                                    // 0x12F0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameModeState*                              GameModeStateFinished;                                    // 0x12F8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData15[0x18];                                      // 0x1300(0x0018) MISSED OFFSET
	bool                                               bInitGlobalConfig;                                        // 0x1318(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData16[0x7];                                       // 0x1319(0x0007) MISSED OFFSET
	class UCircleMgrComponent*                         CircleMgrComponent;                                       // 0x1320(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                      PlanePawn;                                                // 0x1328(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bCanJump;                                                 // 0x1330(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData17[0x7];                                       // 0x1331(0x0007) MISSED OFFSET
	TArray<class UGameModeProbeComponent*>             AllProbeComps;                                            // 0x1338(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UAIProbeComponent*                           RegisterAIProbe;                                          // 0x1348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorldLevelProbeComponent*                   RegisterWorldLevelProbe;                                  // 0x1350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              OutBoundDamage;                                           // 0x1358(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData18[0x9C];                                      // 0x135C(0x009C) MISSED OFFSET
	TMap<uint32_t, unsigned char>                      AISpawnTypeCache;                                         // 0x13F8(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	class UPlaneComponent*                             PlaneComp;                                                // 0x1448(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerRespawnComponent*                     PlayerRespawnComponent;                                   // 0x1450(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData19[0x110];                                     // 0x1458(0x0110) MISSED OFFSET
	TArray<struct FPlaneTypes>                         SeasonPlanes;                                             // 0x1568(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData20[0x5C];                                      // 0x1578(0x005C) MISSED OFFSET
	int                                                MatchGoal;                                                // 0x15D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsNight;                                                 // 0x15D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData21[0x2F];                                      // 0x15D9(0x002F) MISSED OFFSET
	struct FClientSettingBaseOnGameMode                ClientSettingBaseOnGameMode;                              // 0x1608(0x0050) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FItemAttach>                         ItemAttachListCfg;                                        // 0x1658(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bShouldGenerateItemWhenStart;                             // 0x1668(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData22[0x7];                                       // 0x1669(0x0007) MISSED OFFSET
	TArray<struct FRespawnItemConfigInst>              RespawnItemConfigList;                                    // 0x1670(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class URespawnItemConfig*                          RespawnItemConfig;                                        // 0x1680(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFakePlayerCustomComponent*                  FakePlayerCustomComponent;                                // 0x1688(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelaySpawnVehicleTime;                                    // 0x1690(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DelayDestroyVehicleTime;                                  // 0x1694(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxAllowSpawnVehicleCount;                                // 0x1698(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIgnorePlayerStartWithVehicle;                            // 0x169C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData23[0x3];                                       // 0x169D(0x0003) MISSED OFFSET
	TMap<uint32_t, class AActor*>                      PlayerVehicleInReady;                                     // 0x16A0(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<uint64_t, TWeakObjectPtr<class APlayerController>> PlayerMap;                                                // 0x16F0(0x0050) (ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                               bAliveOnNonePlayer;                                       // 0x1740(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData24[0x7];                                       // 0x1741(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyaleGameModeBase");
		return pStaticClass;
	}


	void UseRoomCustomCircleParams(class UCircleMgrComponent* CircleMgrComp, const struct FRoomCustomParams& RoomCustomParams);
	void UseFixedCircleParams(class UCircleMgrComponent* CircleMgrComp, const struct FRoomCustomParams& RoomCustomParams);
	void StopAllFakePlayerAIBehaviorTree();
	void SpawnAI(int Num);
	void SetStateLeftTime(int LeftTime);
	void SetGameModeType(EGameModeType NewGameModeType);
	void SetGameEndReportData();
	void SetAITypeCache(uint32_t PlayerKey, unsigned char AIType);
	void RestartPlayer(class AController* NewPlayer);
	void ResetGameMode();
	void OnPlayerControlDestroyEnd(uint32_t PlayerKey);
	void OnGameModeStateChange();
	void OnGameEnterFinish();
	void OnGameEnterFight();
	bool IsRevivalGameMode();
	bool IsCanJump(class APlayerController* PC);
	void InitlializeRespawnItemConfig();
	void InitialGameModeState();
	void HandleGameEnd();
	void GotoReadyState();
	void GotoFinishedState();
	void GotoFightingState();
	void GotoActiveState();
	unsigned char GetDefaultAIType(uint32_t PlayerKey);
	int GetCurWeatherPhaseIndex();
	struct FName GetCurGameModeState();
	class UAIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();
	unsigned char GetAITypeCache(uint32_t PlayerKey, bool bDeleteIfGet);
	void GenerateRespawnItemsForAllPlayers();
	class AFakePlayerAIController* FindAIControllerWithPlayerKey(uint32_t PlayerKey);
	class AActor* ChoosePlayerStartByTeamId(int TeamID);
	bool CheckNoHumanExist();
	bool CheckMatchGoalAchieved();
	bool CheckGameEnd();
	void ChangeStateGM(const struct FName& TargetGameModeState);
	void CalculateGameTerminatorInfo(class AController* Killer, class AController* VictimPlayer);
};


// Class ShadowTrackerExtra.BattleRoyaleGameMode
// 0x00A0 (0x17E8 - 0x1748)
class ABattleRoyaleGameMode : public ABattleRoyaleGameModeBase
{
public:
	struct FScriptMulticastDelegate                    OnGameModeEnterFlying;                                    // 0x1748(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnGameModeExitFlying;                                     // 0x1758(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xC];                                       // 0x1768(0x000C) MISSED OFFSET
	bool                                               bIsOpenEnemyMarkAbility;                                  // 0x1774(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsOpenShovelingAbility;                                  // 0x1775(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOpenVehicleAnti;                                         // 0x1776(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDoOpenRadarAbility;                                      // 0x1777(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                StartReadyCountDownPlayerNum;                             // 0x1778(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bServerOpenPassWallCheck;                                 // 0x177C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x177D(0x0003) MISSED OFFSET
	float                                              CharacterNetCullDistanceSquared;                          // 0x1780(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x1784(0x0004) MISSED OFFSET
	class UGamemodeAIDataAsset*                        GamemodeAIDataAsset;                                      // 0x1788(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DragOnGroundDownTraceDistance;                            // 0x1790(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DragOnGroundUpTraceDistance;                              // 0x1794(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableAIWorldVolume;                                      // 0x1798(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x1799(0x0007) MISSED OFFSET
	class UClass*                                      ChallengeLevelRulesClass;                                 // 0x17A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChallengeLevelRules*                        ChallengeLevelRules;                                      // 0x17A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCrowdManagerComponent*                      CrowdManager;                                             // 0x17B0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReplacePistolWhenPickUpMainWeapon;                       // 0x17B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x7];                                       // 0x17B9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGameModeEnterPlane;                                     // 0x17C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x18];                                      // 0x17D0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyaleGameMode");
		return pStaticClass;
	}


	class UChallengeLevelRules* GetChallengeLevelRules();
};


// Class ShadowTrackerExtra.BattleRoyalChallengeGameMode
// 0x0008 (0x17F0 - 0x17E8)
class ABattleRoyalChallengeGameMode : public ABattleRoyaleGameMode
{
public:
	class UMultipleBattleLogicManager*                 MultipleBattleLogicManager;                               // 0x17E8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyalChallengeGameMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraGameStateBase
// 0x05E0 (0x0A00 - 0x0420)
class ASTExtraGameStateBase : public AUAEGameState
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0420(0x000C) MISSED OFFSET
	struct FVector                                     AirplaneStartLoc;                                         // 0x042C(0x000C) (Net, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     AirplaneStopLoc;                                          // 0x0438(0x000C) (Net, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     AirplaneCanJumpLoc;                                       // 0x0444(0x000C) (Net, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     AirplaneForceJumpLoc;                                     // 0x0450(0x000C) (Net, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               IsTest;                                                   // 0x045C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x045D(0x0003) MISSED OFFSET
	struct FVector                                     BlueCircle;                                               // 0x0460(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     WhiteCircle;                                              // 0x046C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CirclePain;                                               // 0x0478(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x047C(0x0004) MISSED OFFSET
	struct FAirAttackOrder                             AirAttackOrder;                                           // 0x0480(0x0040) (NativeAccessSpecifierPublic)
	struct FVector                                     AirAttackArea;                                            // 0x04C0(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x04CC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSafeZoneTips;                                           // 0x04D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBlueCirclePreWarning;                                   // 0x04E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBlueCircleRun;                                          // 0x04F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBlueCircleSizeAndPosition;                              // 0x0500(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterCircleWaveOver;                                // 0x0510(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    VehiclePostInitComponentDelegate;                         // 0x0520(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    VehicleDestroyedDelegate;                                 // 0x0530(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0540(0x0010) MISSED OFFSET
	int                                                PlayerNum;                                                // 0x0550(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsUseGameStartCountDown;                                  // 0x0554(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0555(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerNumChange;                                        // 0x0558(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBeKilledNumChange;                                      // 0x0568(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnGameEnd;                                                // 0x0578(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bIsTrainingMode;                                          // 0x0588(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsShowDeadBox;                                            // 0x0589(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsWeaponFPPOffsetInTDMode;                                // 0x058A(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsInitBPItemTableEveryTime;                               // 0x058B(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReInitUIAfterReCreatePawn;                               // 0x058C(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbidAutoAimAt;                                         // 0x058D(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbidAutoOpendoor;                                      // 0x058E(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitAudioVisual;                                       // 0x058F(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitAutoPick;                                          // 0x0590(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForbitHurtEffect;                                        // 0x0591(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGunSamePriority;                                         // 0x0592(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldDeferredExitGame;                                  // 0x0593(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseFootPrint;                                            // 0x0594(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0595(0x0003) MISSED OFFSET
	TArray<int>                                        forbitPickItemTypeList;                                   // 0x0598(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                BornItemId;                                               // 0x05A8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BornItemCount;                                            // 0x05AC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TrainingCountdownTimer;                                   // 0x05B0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsWeaponAutoReloadMode;                                  // 0x05B4(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x3];                                       // 0x05B5(0x0003) MISSED OFFSET
	struct FString                                     GrenadeEffectPath;                                        // 0x05B8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAnniversarySignalGunEffect;                              // 0x05C8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGodzillaWarmUpSwitchOpened;                              // 0x05C9(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOpenNewbieGuideInDeathMatch;                             // 0x05CA(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsPickUpFillBulletMode;                                  // 0x05CB(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShowSkullInOB;                                           // 0x05CC(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableAutoAimTrainingMode;                               // 0x05CD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnablePickUpTrainingMode;                                // 0x05CE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x1];                                       // 0x05CF(0x0001) MISSED OFFSET
	float                                              TrainingModePickUpColdCD;                                 // 0x05D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PickUpColdCountDownToleranceTime;                         // 0x05D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PickUpColdCountDownMinTime;                               // 0x05D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TrainingModeDropLifeTime;                                 // 0x05DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugEnableDamageEffectInTrainingMode;                   // 0x05E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnabledReInitUI;                                         // 0x05E1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x6];                                       // 0x05E2(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAirAttack;                                              // 0x05E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnInfectedAreaWarn;                                       // 0x05F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSkillManagerInitFinishDelegate;                         // 0x0608(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               IsFPPGameMode;                                            // 0x0618(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bResetBulletNumToMaxBulletNum;                            // 0x0619(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x6];                                       // 0x061A(0x0006) MISSED OFFSET
	TArray<struct FName>                               EnableMapPackages;                                        // 0x0620(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FName>                               EnableMapLayers;                                          // 0x0630(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                PvePoliceOfficeTriggerCount;                              // 0x0640(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PveZombieGrenadeCount;                                    // 0x0644(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableVisualField;                                        // 0x0648(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0649(0x0007) MISSED OFFSET
	struct FVisualFieldFeatureParam                    VisualFieldFeatureParam;                                  // 0x0650(0x0030) (Net, NativeAccessSpecifierPublic)
	class UVisualFieldFeature*                         VisualFieldFeature;                                       // 0x0680(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReadyStateCountingDown;                                  // 0x0688(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0xF];                                       // 0x0689(0x000F) MISSED OFFSET
	int                                                ReadyStateTime;                                           // 0x0698(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x4];                                       // 0x069C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    ReConnectGameStateInfoNotify;                             // 0x06A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FString                                     GameModeDisplayName;                                      // 0x06B0(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurCircleWave;                                            // 0x06C0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameModeFeatureSetData                     GameModeFeatureSet;                                       // 0x06C4(0x0004) (Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FName                                       GameModeState;                                            // 0x06C8(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData14[0x54];                                      // 0x06D0(0x0054) MISSED OFFSET
	int                                                AlivePlayerNum;                                           // 0x0724(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AliveTeamNum;                                             // 0x0728(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PlayerNumOnPlane;                                         // 0x072C(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDynamicWeatherChangeDelegate;                           // 0x0730(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ForceStopDynamicWeatherDelegate;                          // 0x0740(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FWeatherChangeEvent                         CurWeatherTypeCach;                                       // 0x0750(0x0002) (BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x6];                                       // 0x0752(0x0006) MISSED OFFSET
	TArray<struct FGameModePlayerShowUpassInfo>        UpassInfoList;                                            // 0x0758(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	EGameModeType                                      GameModeType;                                             // 0x0768(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeType                                      GameModeConfigType;                                       // 0x0769(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0x2];                                       // 0x076A(0x0002) MISSED OFFSET
	int                                                PlayerNumPerTeam;                                         // 0x076C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             OpenTagCullingMaps;                                       // 0x0770(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                               bShouldUseCompletePB;                                     // 0x0780(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGameNeedReplay;                                          // 0x0781(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsDark;                                                   // 0x0782(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData17[0x15];                                      // 0x0783(0x0015) MISSED OFFSET
	float                                              FPVEWeatherPlaySpeed;                                     // 0x0798(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WeatherPhaseIndex;                                        // 0x079C(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EWeatherDayState>                           WeatherProcessArray;                                      // 0x07A0(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeatherStateChange;                                     // 0x07B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeatherSpeedChange;                                     // 0x07C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EWeatherDayState                                   CurDynamicWeatherState;                                   // 0x07D0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData18[0x7];                                       // 0x07D1(0x0007) MISSED OFFSET
	TMap<struct FString, float>                        BeInvitedPlayers;                                         // 0x07D8(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              InviteCountDownTime;                                      // 0x0828(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData19[0x4];                                       // 0x082C(0x0004) MISSED OFFSET
	TArray<struct FCircleDataMining>                   CircleDataMining;                                         // 0x0830(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameDataMining                             GameDataMining;                                           // 0x0840(0x0038) (NativeAccessSpecifierPublic)
	uint64_t                                           GameID;                                                   // 0x0878(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     GameModeID;                                               // 0x0880(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             ModeUIManagerArray;                                       // 0x0890(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData20[0x10];                                      // 0x08A0(0x0010) MISSED OFFSET
	class ULevelEventCenter*                           LevelEventCenter;                                         // 0x08B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                      StartedPlane;                                             // 0x08B8(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StartFlyTime;                                             // 0x08C0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData21[0x4];                                       // 0x08C4(0x0004) MISSED OFFSET
	int64_t                                            StartReadyUnixTimestamp;                                  // 0x08C8(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64_t                                            StartFightingUnixTimestamp;                               // 0x08D0(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64_t                                            StartFinishedUnixTimestamp;                               // 0x08D8(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData22[0x11];                                      // 0x08E0(0x0011) MISSED OFFSET
	bool                                               bIsOpenEnemyMarkAbility;                                  // 0x08F1(0x0001) (Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsOpenShovelingAbility;                                  // 0x08F2(0x0001) (Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDoOpenRadarAbility;                                      // 0x08F3(0x0001) (Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnableNewStateMachine;                                    // 0x08F4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData23[0x4];                                       // 0x08F8(0x0004) MISSED OFFSET
	float                                              PlayerInBlueCircleClipTime;                               // 0x08FC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BroadcastClientDistance;                                  // 0x0900(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData24[0x24];                                      // 0x0904(0x0024) MISSED OFFSET
	TArray<int>                                        FinalWinTeams;                                            // 0x0928(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<uint32_t>                                   FinalWinPlayers;                                          // 0x0938(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	uint32_t                                           GameTerminatorPlayerKey;                                  // 0x0948(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               CanForbitPickupTeammateBox;                               // 0x094C(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               CanImprisonmentTeammate;                                  // 0x094D(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsOpenHighPingTag;                                        // 0x094E(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData25[0x1];                                       // 0x094F(0x0001) MISSED OFFSET
	TArray<int>                                        ImprisonmentTeammateKillType;                             // 0x0950(0x0010) (Net, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<int>                                        ImprisonmentTeammateGameType;                             // 0x0960(0x0010) (Net, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                               bEnableCullDistance;                                      // 0x0970(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData26[0x7];                                       // 0x0971(0x0007) MISSED OFFSET
	struct FString                                     GuideImageName;                                           // 0x0978(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     GuideLuaTableName;                                        // 0x0988(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     GuideLuaFunctionName;                                     // 0x0998(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsCollectHitFlow;                                         // 0x09A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData27[0x7];                                       // 0x09A9(0x0007) MISSED OFFSET
	class AUAELevelDirector*                           UAELevelDirector;                                         // 0x09B0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarkDispatchManager*                        MarkDispatchManager;                                      // 0x09B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarkSyncData>                       SyncMarkDispatchData;                                     // 0x09C0(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FMarkSyncData>                       PrevSyncMarkDispatchData;                                 // 0x09D0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	class ADynamicWeatherMgr*                          DynamicWeatherMgr;                                        // 0x09E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseRecastBullet;                                         // 0x09E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableVehicleWeakTick;                                   // 0x09E9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData28[0x6];                                       // 0x09EA(0x0006) MISSED OFFSET
	class UXTriggerLuaRemoteComponent*                 LuaRemoteComponent;                                       // 0x09F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFieldOfViewNotificationComponentRegistry*   FieldOfViewNotificationComponentRegistry;                 // 0x09F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraGameStateBase");
		return pStaticClass;
	}


	void WeatherStateChangeDelegate__DelegateSignature();
	void WeatherSpeedChangeDelegate__DelegateSignature();
	void UISetWidgetVisibility(const struct FString& WidgetTag, ESlateVisibility IsVisibility);
	void UISetWidgetText(const struct FString& WidgetTag, const struct FString& SText, int TextId, const struct FString& Params);
	void UIOperateWidget(const struct FString& WidgetTag, const struct FString& SOperation, const struct FString& Params);
	void UICustomBehavior(const struct FString& BehaviorTag, const struct FString& BehaviorType, const struct FString& Params);
	void SyncAirplaneRoute(const struct FVector& StartLoc, const struct FVector& StopLoc, const struct FVector& CanJumpLoc, const struct FVector& ForceJumpLoc);
	void SimulateAirAttackOver();
	void SetTagCulling(bool IsUse);
	void SetReConnectGameStateInfo(const struct FReConnectGameStateInfo& ReConnectInfo);
	void SetCurAirAttackWave(int AirAttackWave);
	void SetCurAirAttackType(TEnumAsByte<EAirAttackInfo> airattacktype);
	void SetAirplaneStopLoc(const struct FVector& StopLoc);
	void SetAirplaneStartLoc(const struct FVector& StarLoc);
	void SetAirplaneForceJumpLoc(const struct FVector& ForceJumpLoc);
	void SetAirplaneCanJumpLoc(const struct FVector& CanJumpLoc);
	void ServerRemoteDestroyActor(int SingleId);
	int ServerRemoteCreateActor(int TTeamId, int resID, const struct FVector& Position, const struct FRotator& Rotation);
	void RPC_Client_RemoteDestroyActor(int SingleId);
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, const struct FVector& Position, const struct FRotator& Rotation);
	void OnRep_WeatherStateChanged();
	void OnRep_VisualFieldFeatureParam();
	void OnRep_UpassInfoList();
	void OnRep_StartedPlane();
	void OnRep_ResetWeatherPlaySpeed();
	void OnRep_ReadyStateTime();
	void OnRep_ReadyStateCountingDown();
	void OnRep_PlayerNumOnPlane();
	void OnRep_PlayerNumChange();
	void OnRep_ModeUIManagerArray();
	void OnRep_MarkSyncData();
	void OnRep_IsTrainingMode();
	void OnRep_IsShowDeadBox();
	void OnRep_IsFPPMode();
	void OnRep_IsDark();
	void OnRep_GameTerminatorPlayerKey();
	void OnRep_GameModeType();
	void OnRep_GameModeState();
	void OnRep_GameModeFeatureSet();
	void OnRep_FinalWinTeams();
	void OnRep_FinalWinPlayers();
	void OnRep_DynamicWeatherState();
	void OnRep_AliveTeamNum();
	void OnRep_AlivePlayerNum();
	void OnRep_AirplaneStopLoc();
	void OnRep_AirplaneStartLoc();
	void OnRep_AirplaneForceJumpLoc();
	void OnRep_AirplaneCanJumpLoc();
	void OnGameModeDisplayNameChange();
	void NotifyDynamicWeatherChange(class ADynamicWeatherMgr* Mgr, const struct FWeatherChangeEvent& Event);
	bool IsRevivalGame();
	bool IsPVEMode();
	bool IsPlaneValid();
	bool IsMapUseTeamPattern();
	bool IsInNight();
	bool IsFeatureSupported(ESubSystemType SubSystemType);
	float GetRepServerWorldTimeSeconds();
	struct FReConnectGameStateInfo GetReConnectGameStateInfo();
	int GetPVEWeatherPhaseIndex();
	class UXTriggerLuaRemoteComponent* GetLuaRemoteComponent();
	bool GetIsReadyStateReport();
	struct FName GetGameModeState();
	struct FVector GetForceJumpLoc();
	class UFieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();
	EWeatherDayState GetCurWeatherState();
	EWeatherDayState GetCurDynamicWeatherState();
	int GetCurCircleWave();
	TEnumAsByte<ECircleInfo> GetCurCircleState();
	struct FVector GetCanJumpLoc();
	TArray<struct FMarkSyncData> GetAllMarkSyncData(TEnumAsByte<EMarkGetAllType> _TYPE);
	int GetAlivePlayerNum();
	struct FVector GetAirplaneStopLoc();
	struct FVector GetAirplaneStartLoc();
	class UWidget* DeepFindWidgetInUserWidget(class UUserWidget* SourceWidget, const struct FName& WidgetName);
	void CheckInitLuaRemoteEvent();
	void ChangeWeatherStatus(const struct FWeatherChangeEvent& Event);
	void ChangeDynamicWeatherState(EWeatherDayState DayState);
	void BroadcastUISetWidgetVisibility(const struct FString& WidgetTag, ESlateVisibility IsVisibility);
	void BroadcastUISetWidgetText(const struct FString& WidgetTag, const struct FString& SText, int TextId, const struct FString& Params);
	void BroadcastUIOperateWidget(const struct FString& WidgetTag, const struct FString& SOperation, const struct FString& Params);
	void BroadcastUICustomBehavior(const struct FString& BehaviorTag, const struct FString& BehaviorType, const struct FString& Params);
	void BroadcastTemporaryMessage(const struct FString& Message);
	void BroadcastRoute(const struct FVector& StartLoc, const struct FVector& StopLoc);
	void BroadcastLuaTipsBehavior(const struct FString& BehaviorTag, int ID, const struct FString& Params1, const struct FString& Params2);
	void BroadcastCircleWaveOver(int Index);
	void BroadcastCircleSizeAndPosition(const struct FVector& BlueCircleSync, const struct FVector& WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain);
	void BroadcastCircleInfo(TEnumAsByte<ECircleInfo> circleInfo, float Time, const struct FVector& BlueCircleSync, const struct FVector& WhiteCircleSync, int CircleInvertedIndex);
	void BroadcastAirDrop();
	void BroadcastAirAttackWarning(const struct FVector& airAttackAreaSrc, int waveindex);
	void BroadcastAirAttackOrder(const struct FAirAttackOrder& airAttackOrderSrc, int waveindex);
	void AddUseEnhancerTimes(uint32_t PlayerKey, int Times);
	void AddPveZombieGrenadeCount(int Value);
	void AddPvePoliceOfficeTriggerCount(int Value);
};


// Class ShadowTrackerExtra.BattleRoyalCorpsWarGameState
// 0x0040 (0x0A40 - 0x0A00)
class ABattleRoyalCorpsWarGameState : public ASTExtraGameStateBase
{
public:
	TArray<struct FCorpsBaseInfo>                      CorpsInfoArray;                                           // 0x0A00(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FCorpsDetailInfo>                    CachedSortedCorpsDetailList;                              // 0x0A10(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FCorpsDetailInfo>                    OutGameCorpsDetailList;                                   // 0x0A20(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FCorpsToPlayerKeyInfo>               PlayerKeyToCorpsList;                                     // 0x0A30(0x0010) (Net, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyalCorpsWarGameState");
		return pStaticClass;
	}


	void ReCalculateCorpsDetailList(bool bForceOutGame);
	void OnRepOutGameCorpsDetailList();
	void OnRepCorpsInfoArray();
	void OnRepCachedSortedCorpsDetailList();
	void OnCorpsOutGame(int KillerCorpsID, int CorpsID);
	void OnCorpsJoinGame(int CorpsID);
	int GetTotalCorpsNums();
	TArray<struct FCorpsDetailInfo> GetSortedCorpsDetailList();
	float GetPlayerLiveTime(class ABattleRoyalCorpsWarPlayerState* State);
	struct FCorpsBaseInfo GetCorpsInfoByID(int ID);
	int GetActiveCorpsNum();
	void ForceFlushList();
};


// Class ShadowTrackerExtra.BattleRoyaleGameModeTeam
// 0x0130 (0x1918 - 0x17E8)
class ABattleRoyaleGameModeTeam : public ABattleRoyaleGameMode
{
public:
	class UTeamModeComponent*                          TeamModeComponent;                                        // 0x17E8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xF0];                                      // 0x17F0(0x00F0) MISSED OFFSET
	TArray<struct FPlayerStartObjets>                  PlayerStartObjs;                                          // 0x18E0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlayerStartObjets>                  PlayerStartNeedDestroyObjs;                               // 0x18F0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                              StartNeedDestroyActorArray;                               // 0x1900(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bConsiderCamp;                                            // 0x1910(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsGameEnded;                                             // 0x1911(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x1912(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyaleGameModeTeam");
		return pStaticClass;
	}


	bool ShouldSendTeamBattleResult(int TeamID);
	bool CheckTeamGameEnd();
};


// Class ShadowTrackerExtra.BattleRoyalCorpsWarMode
// 0x0100 (0x1A18 - 0x1918)
class ABattleRoyalCorpsWarMode : public ABattleRoyaleGameModeTeam
{
public:
	unsigned char                                      UnknownData00[0x100];                                     // 0x1918(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyalCorpsWarMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraPlayerState
// 0x0460 (0x10A8 - 0x0C48)
class ASTExtraPlayerState : public AUAEPlayerState
{
public:
	int                                                CommonRank;                                               // 0x0C48(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ExtraPlayerLiveState                               LiveState;                                                // 0x0C4C(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0C4D(0x0003) MISSED OFFSET
	struct FCharacterAutoFollowStruct                  AutoFollowInfo;                                           // 0x0C50(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       CharacterOwner;                                           // 0x0C60(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       SpectatingCharacterOwner;                                 // 0x0C68(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlayerHealth;                                             // 0x0C70(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlayerHealthMax;                                          // 0x0C74(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterLocAndRot                         SelfLocAndRot;                                            // 0x0C78(0x0018) (BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterLocAndRot                         UAVLocAndRot;                                             // 0x0C90(0x0018) (BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EUAVUseType                                        EUAVUseType;                                              // 0x0CA8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsRemoteControlling;                                     // 0x0CA9(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESTExtraVehicleType                                eCurVehicleType;                                          // 0x0CAA(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUAVCharacterMsgType                               EUAVCharacterMsgType;                                     // 0x0CAB(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     PlayerDeadLocation;                                       // 0x0CAC(0x000C) (BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     PlayerBoxLocation;                                        // 0x0CB8(0x000C) (BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     MapMark;                                                  // 0x0CC4(0x000C) (BlueprintVisible, Net, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsRestartAtPosition;                                      // 0x0CD0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0CD1(0x0003) MISSED OFFSET
	struct FVector                                     RestartLocation;                                          // 0x0CD4(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RestartRotate;                                            // 0x0CE0(0x000C) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0CEC(0x0004) MISSED OFFSET
	TMap<int, int>                                     UseQuickMsgMap;                                           // 0x0CF0(0x0050) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, int>                                     UseWheelMsgMap;                                           // 0x0D40(0x0050) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              TeammateMicrophoneTime;                                   // 0x0D90(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TeammateSpeakerTime;                                      // 0x0D94(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnemyMicrophoneTime;                                      // 0x0D98(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnemySpeakerTime;                                         // 0x0D9C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TeammateInterphoneTime;                                   // 0x0DA0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnemyInterphoneTime;                                      // 0x0DA4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      PlayerUseQuickSight;                                      // 0x0DA8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      PlayerUseShoulderCnt;                                     // 0x0DA9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x26];                                      // 0x0DAA(0x0026) MISSED OFFSET
	int                                                AirDropBoxFirstPickUpNum;                                 // 0x0DD0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0DD4(0x0004) MISSED OFFSET
	TArray<TWeakObjectPtr<class ASTExtraPlayerState>>  TeamMatePlayerStateList;                                  // 0x0DD8(0x0010) (Net, ZeroConstructor, RepNotify, UObjectWrapper, NativeAccessSpecifierPublic)
	int                                                TeamMatePlayerStateIndex;                                 // 0x0DE8(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PlayerLayerID;                                            // 0x0DEC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVisualFieldInfo                            VisualFieldInfo;                                          // 0x0DF0(0x0018) (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	int                                                Breath;                                                   // 0x0E08(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0E0C(0x0004) MISSED OFFSET
	struct FDriveCarNotify                             DriveCarNotify;                                           // 0x0E10(0x0018) (Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage1;                                          // 0x0E28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage2;                                          // 0x0E2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage3;                                          // 0x0E30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage4;                                          // 0x0E34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffReduceSpeedPerSec;                               // 0x0E38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurEnegyBuff;                                             // 0x0E3C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage1RecoverHealthTime;                         // 0x0E40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage1RecoverHealthVal;                          // 0x0E44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage2RecoverHealthTime;                         // 0x0E48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage2RecoverHealthVal;                          // 0x0E4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage3RecoverHealthTime;                         // 0x0E50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage3RecoverHealthVal;                          // 0x0E54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage4RecoverHealthTime;                         // 0x0E58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnegyBuffStage4RecoverHealthVal;                          // 0x0E5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLocalCharacterHPChangeDel;                              // 0x0E60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerKillsChangeDelegate;                              // 0x0E70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x1];                                       // 0x0E80(0x0001) MISSED OFFSET
	bool                                               IsShowingRescueingUI;                                     // 0x0E81(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0xA];                                       // 0x0E82(0x000A) MISSED OFFSET
	bool                                               isReconnected;                                            // 0x0E8C(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               isLostConnection;                                         // 0x0E8D(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x2];                                       // 0x0E8E(0x0002) MISSED OFFSET
	TArray<int>                                        TeamMatesExitState;                                       // 0x0E90(0x0010) (BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	bool                                               PlayerGameOver;                                           // 0x0EA0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGodSon;                                                  // 0x0EA1(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0xA];                                       // 0x0EA2(0x000A) MISSED OFFSET
	int                                                PlayersCountOnPlane;                                      // 0x0EAC(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameModePlayerAliasShowInfo>        playerAliasShowInfoList;                                  // 0x0EB0(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FMonsterTreasureBoxData>             MonsterTreasureBoxDatas;                                  // 0x0EC0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                MonsterTreasureBoxGetNum;                                 // 0x0ED0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MonsterTreasureBoxDefendNum;                              // 0x0ED4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                OpnedMosnterBoxNum;                                       // 0x0ED8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasSendBattleResult;                                     // 0x0EDC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0EDD(0x0003) MISSED OFFSET
	TArray<struct FBuildMaterialData>                  BuildMat_GetList;                                         // 0x0EE0(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBuildMaterialData>                  BuildMat_UseList;                                         // 0x0EF0(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData11[0x20];                                      // 0x0F00(0x0020) MISSED OFFSET
	int                                                MaxDecalCount;                                            // 0x0F20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0F24(0x0004) MISSED OFFSET
	TArray<class AIdeaDecalActor*>                     DecalActorList;                                           // 0x0F28(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x70];                                      // 0x0F38(0x0070) MISSED OFFSET
	TArray<struct FPlayerStaticInfoInOB>               KickListTotalPlayers;                                     // 0x0FA8(0x0010) (Net, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              SignalHP;                                                 // 0x0FB8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x4];                                       // 0x0FBC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSignalHPChange;                                         // 0x0FC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                              LeanOutL_AimAngle;                                        // 0x0FD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LeanOutR_AimAngle;                                        // 0x0FD4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitEnemyData                               HitedEnemyData;                                           // 0x0FD8(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0FEC(0x0004) MISSED OFFSET
	struct FTeammateConveyStatus                       TeammateConveyStatus;                                     // 0x0FF0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                              TeammateConveyStatusReceiveRange;                         // 0x1018(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsInSpectator;                                           // 0x101C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0x3];                                       // 0x101D(0x0003) MISSED OFFSET
	int                                                RemainingRevivalTime;                                     // 0x1020(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsIDCardCaptured;                                         // 0x1024(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsInWaittingRevivalState;                                 // 0x1025(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsInRevivingState;                                        // 0x1026(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsGiveUp;                                                 // 0x1027(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64_t                                            RevivalCardCreateTime;                                    // 0x1028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRevivalStateChangeDelegate;                             // 0x1030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRevivalRemainingTimeChangeDelegate;                     // 0x1040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FMarkSyncData>                       SyncMarkDispatchData;                                     // 0x1050(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	TArray<struct FMarkSyncData>                       PrevSyncMarkDispatchData;                                 // 0x1060(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMarkSyncData>                       LocalMarkDispatchData;                                    // 0x1070(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData17[0x10];                                      // 0x1080(0x0010) MISSED OFFSET
	struct FVector                                     LastVehicleLocation;                                      // 0x1090(0x000C) (Net, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData18[0xC];                                       // 0x109C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPlayerState");
		return pStaticClass;
	}


	void SetPlayerGiveUp(bool InGiveUp);
	void SetForceSyncTeammateData(bool IsForCE);
	void RespondToPawnRescueingStatusChange(class ACharacter* _helpWho, class ACharacter* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);
	void RespondToPawnCanRescueOtherStatusChange(class ASTExtraBaseCharacter* _helpWho, class ASTExtraBaseCharacter* _ownerPawn, bool IsTurningInto);
	void RespondToPawnBreathChange(float _health, TEnumAsByte<ECharacterHealthStatus> _healthStatus, class ASTExtraBaseCharacter* Param2);
	void RefreshRevivalState();
	void RefreshFollowMark();
	int PlayersCountOnMyPlane();
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);
	void OnRep_VisualFieldInfo();
	void OnRep_UpdateKillMonsterNum();
	void OnRep_TeamMatePlayerStateList();
	void OnRep_TeamMatePlayerStateIndex();
	void OnRep_SignalHP();
	void OnRep_RemainingRevivalTime();
	void OnRep_RankNotify();
	void OnRep_PlayersCountOnPlane();
	void OnRep_PlayerReconnectEvent();
	void OnRep_PlayerName();
	void OnRep_PlayerLostConnectionEvent();
	void OnRep_PlayerLiveState();
	void OnRep_PlayerKillsChange();
	void OnRep_PlayerIsFollowing();
	void OnRep_PlayerGiveUp();
	void OnRep_PlayerGameOver();
	void OnRep_PlayerExitGameEvent();
	void OnRep_PlayerAliasShowInfoList();
	void OnRep_MarkSyncData();
	void OnRep_MapMarkNotify();
	void OnRep_LastVehicleLocation();
	void OnRep_IsIDCardCaptured();
	void OnRep_HPChanged();
	void OnRep_ChangeRevivalState();
	void OnRep_ChangeInRevivingState();
	void OnRep_BreathChanged();
	void OnRep_BPS();
	void OnRep_bHitted();
	void OnPlayerQuickChat();
	void OnPlayerKillsChangeDelegate__DelegateSignature();
	void OnMemberVoice(int VoiceState);
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);
	void OnClientTakeDamage(float Damage, const struct FDamageEvent& DamageEvent, class AActor* Victim, class AActor* Attacker);
	void OnCharacterStartFire(class ASTExtraWeapon* Weapon);
	bool IsSinglePlayer();
	bool IsAlive();
	uint32_t GetUserIDByMemberID(int memberID);
	void GetTeamMatePlayerStateList(bool ExcludeMyself, TArray<class ASTExtraPlayerState*>* OutList);
	class ASTExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32_t InPlayerKey);
	class ASTExtraPlayerState* GetTeamMatePlayerStateByPlayerKey(int Teammatekey);
	int GetTeamMateIndex(class ASTExtraPlayerState* Teammate);
	class ASTExtraPlayerState* GetTeammateByName(const struct FString& TeammateName);
	int GetPlayerTeamIndex();
	float GetPlayerMaxHealth();
	float GetPlayerHealth();
	class ASTExtraBaseCharacter* GetPlayerCharacter();
	void GetPlayerAliasInfoList(TArray<struct FGameModePlayerAliasShowInfo>* OutList);
	float GetMaxEnegyBuff();
	struct FMarkSyncData GetMarkDataByInstanceID(int InInstanceID);
	void GetCampMatePlayerList(bool includeTeammate, TArray<class ASTExtraBaseCharacter*>* playerList);
	float GetBreathPercentage();
	void GetAllPlayerStates(TArray<class ASTExtraPlayerState*>* OutList);
	void GetAllPlayerStateList(bool ExcludeMyself, TArray<class ASTExtraPlayerState*>* OutList);
	void GetAllPlayerPawnList(bool ExcludeMyself, TArray<class ASTExtraPlayerCharacter*>* OutList);
	TArray<struct FMarkSyncData> GetAllMarkSyncData(TEnumAsByte<EMarkGetAllType> _TYPE);
	void GetAlertDataByIndex(int Index, int* IconID, int* AlertID, struct FVector* Location, EMarkStatus* Status);
	void ForceNotifyAlertUpdate();
	void ClientDisplayGameTipWithMsgID(int ID, const struct FString& Param1, const struct FString& Param2);
	void ChangeFadeMapMarkDist(float NewDist);
	bool CanRevivalTeammate();
	bool CanBeRevival();
	TEnumAsByte<EPlayerEnegyStage> CalculateEnegyStage();
	void AddInDamageAmount(class AActor* Causor, float FinalDamage);
	void AddEnegySafety(float AddVal);
	void AddDamageAmount(class ACharacter* VictimPawn, const struct FDamageEvent& DamageEvent, float FinalDamage, bool bHitHead);
};


// Class ShadowTrackerExtra.BattleRoyalCorpsWarPlayerState
// 0x0008 (0x10B0 - 0x10A8)
class ABattleRoyalCorpsWarPlayerState : public ASTExtraPlayerState
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x10A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyalCorpsWarPlayerState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BattleRoyaleGameModeGroup
// 0x00C0 (0x19D8 - 0x1918)
class ABattleRoyaleGameModeGroup : public ABattleRoyaleGameModeTeam
{
public:
	TArray<int>                                        GenerateGodSon;                                           // 0x1918(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, int>                                     TeamSpecialPlayerNum;                                     // 0x1928(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, int>                                     TeamLeftSpecialPlayerNum;                                 // 0x1978(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        LoseTeamId;                                               // 0x19C8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyaleGameModeGroup");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BattleRoyalTrainingGameMode
// 0x0050 (0x1838 - 0x17E8)
class ABattleRoyalTrainingGameMode : public ABattleRoyaleGameMode
{
public:
	TMap<class APlayerStart*, TWeakObjectPtr<class AUAEPlayerController>> PlayerStartToPCMap;                                       // 0x17E8(0x0050) (ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyalTrainingGameMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BattleSceneAvatarDisplayPoseComponent
// 0x0070 (0x0380 - 0x0310)
class UBattleSceneAvatarDisplayPoseComponent : public UAvatarDisplayPoseComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0310(0x0008) MISSED OFFSET
	TArray<EAvatarSlotType>                            DisplayAvatarItemFilterList;                              // 0x0318(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ASTExtraPlayerState>          TargetPlayerState;                                        // 0x0328(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBattleSceneAvatarDisplayInfo               AvatarDisplayInfo;                                        // 0x0330(0x0048) (BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0378(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BattleSceneAvatarDisplayPoseComponent");
		return pStaticClass;
	}


	void UnPossessPosePosition();
	void PossessPosePosition();
	void OnCharacterPlayEmote(int InPlayEmoteID);
	bool MatchCharacter(const struct FString& InPlayerName);
	bool IsValidDisplayInfo(const struct FBattleSceneAvatarDisplayInfo& InDisplayInfo);
	bool IsPosePositiontPossessed();
	void InitDisplayAvatar(const struct FBattleSceneAvatarDisplayInfo& BattleAvatarDisplayInfo);
	class UCharacterAvatarComponent2* GetDisplayAvatar();
	struct FBattleSceneAvatarDisplayInfo GetAvatarPoseDisplayInfo();
	int GetAvatarGender();
	void EquipWeaponForDisplayAvatar();
	void EquipClothingForDisplayAvatar();
	void ClearDisplayAvatar();
};


// Class ShadowTrackerExtra.BossContainer
// 0x0028 (0x03B8 - 0x0390)
class ABossContainer : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0390(0x0008) MISSED OFFSET
	class UStaticMeshComponent*                        InStaticMesh;                                             // 0x0398(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SocketHead;                                               // 0x03A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SocketTail;                                               // 0x03A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VerticalHalfHeight;                                       // 0x03B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BossContainer");
		return pStaticClass;
	}


	void ChangeNetCullDistance(float Distance);
};


// Class ShadowTrackerExtra.STExtraShootWeaponBulletBase
// 0x0230 (0x05C0 - 0x0390)
class ASTExtraShootWeaponBulletBase : public AActor
{
public:
	class UBulletMovementComponent*                    PMComp;                                                   // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLaunchWithGravity;                                       // 0x0398(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0399(0x0003) MISSED OFFSET
	int                                                MaxNoGravityRange;                                        // 0x039C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LaunchGravityScale;                                       // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PunctureTimes;                                            // 0x03A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ImpactActorTemplate;                                      // 0x03A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DamageType;                                               // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             NormalTailFX;                                             // 0x03B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShowNormalTailFXImpactInfo;                              // 0x03C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawImpactNormal;                                        // 0x03C1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03C2(0x0006) MISSED OFFSET
	class UParticleSystem*                             BeamTailFX;                                               // 0x03C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RootScale;                                                // 0x03D0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasFlyPastEarSound;                                      // 0x03DC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03DD(0x0003) MISSED OFFSET
	struct FVector                                     ShootDir;                                                 // 0x03E0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIgnoreCahracterRootCompImpact;                           // 0x03EC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0xF3];                                      // 0x03ED(0x00F3) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnResetBullet;                                            // 0x04E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FScriptMulticastDelegate                    OnBulletImpact;                                           // 0x04F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FScriptMulticastDelegate                    OnLaunchBullet;                                           // 0x0500(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    BeamTailFXComp;                                           // 0x0510(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                      WeaponOwnerPawn;                                          // 0x0518(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraShootWeapon*                         OwningShootWeapon;                                        // 0x0520(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x6C];                                      // 0x0528(0x006C) MISSED OFFSET
	float                                              WeaponFloorHeight;                                        // 0x0594(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     WeaponOwnerPos;                                           // 0x0598(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ENetRole>                              CachedOwnerRole;                                          // 0x05A4(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x05A5(0x0003) MISSED OFFSET
	uint32_t                                           OwnerPlayerKey;                                           // 0x05A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableClientBlockVerify;                                 // 0x05AC(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableUpdateBulletTrans;                                 // 0x05AD(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x2];                                       // 0x05AE(0x0002) MISSED OFFSET
	int                                                MaxTraceTimes;                                            // 0x05B0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableFillSPCShootData;                                  // 0x05B4(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0xB];                                       // 0x05B5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraShootWeaponBulletBase");
		return pStaticClass;
	}


	void ResetBulletDelegate__DelegateSignature();
	void ReloadNoEncodeAttr();
	void OnImpactEnd(const struct FHitResult& _ImpactResult);
	void OnImpactDelegate__DelegateSignature(const struct FHitResult& HitInfo);
	void OnImpact(const struct FHitResult& _ImpactResult);
	bool NeedCheckBulletFlySound();
	void LaunchBulletDelegate__DelegateSignature();
	float GetMaxBulletFlySpeed();
	bool ClientVerifyBlock(class AActor* Weapon, class AActor* ImpactActor, struct FVector* MuzzlePos, struct FVector* ImpactPoint);
};


// Class ShadowTrackerExtra.ProjectileBulletBase
// 0x0090 (0x0650 - 0x05C0)
class AProjectileBulletBase : public ASTExtraShootWeaponBulletBase
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x05C0(0x0004) MISSED OFFSET
	float                                              ServerShootTime;                                          // 0x05C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05C8(0x0008) MISSED OFFSET
	struct FProjectileBulletLaunchParams               ServerLaunchParams;                                       // 0x05D0(0x0060) (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x19];                                      // 0x0630(0x0019) MISSED OFFSET
	bool                                               bIsValidImpact;                                           // 0x0649(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x6];                                       // 0x064A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ProjectileBulletBase");
		return pStaticClass;
	}


	void RPC_Multicast_StartLaunch(float Speed, const struct FTransform& Trans, class AActor* InOwningWeapon, class AActor* InInstigator, uint32_t _ShootID);
	void ProjectileComponentHandleShootDamageCallback(class UNormalProjectileComponent* Comp);
	void OnRep_ServerLaunchParams(const struct FProjectileBulletLaunchParams& OldParam);
	void OnImpactEnd(const struct FHitResult& _ImpactResult);
	void OnImpact(const struct FHitResult& _ImpactResult);
	void HandleBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class ShadowTrackerExtra.ExplosionProjectileBullet
// 0x00F0 (0x0740 - 0x0650)
class AExplosionProjectileBullet : public AProjectileBulletBase
{
public:
	class UParticleSystem*                             ExplosionParticle;                                        // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               ExplosionSound;                                           // 0x0658(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FApplyRadialDamageParams                    RadialDamageParams;                                       // 0x0660(0x0080) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              DamageRadiusInner;                                        // 0x06E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageRadiusOuter;                                        // 0x06E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HealthDamageInner;                                        // 0x06E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HealthDamageOuter;                                        // 0x06EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExplosionMomentum;                                        // 0x06F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageFallOffParam;                                       // 0x06F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeBeforeExplosion;                                      // 0x06F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HealthDamageInnerForZombie;                               // 0x06FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HealthDamageOuterForZombie;                               // 0x0700(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SelfDamageReduce;                                         // 0x0704(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TeammateDamageReduce;                                     // 0x0708(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DoorDamageRate;                                           // 0x070C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VehicleDamageRate;                                        // 0x0710(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDamageCount;                                           // 0x0714(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VoiceCheckShowTime;                                       // 0x0718(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VoiceCheckDis;                                            // 0x071C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExplosionCenterOffset;                                    // 0x0720(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasExploded;                                             // 0x0724(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0725(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBulletExplosionDelegate;                                // 0x0728(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bNeedDisableTailFX;                                       // 0x0738(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeedOptimizeTailFX;                                      // 0x0739(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x073A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ExplosionProjectileBullet");
		return pStaticClass;
	}


	void RPC_Multicast_OnImpact(const struct FHitResult& _ImpactResult);
	void ReloadNoEncodeAttr();
	void OnImpact(const struct FHitResult& _ImpactResult);
	void OnBulletExplosionDelegate__DelegateSignature();
	void HandleOnImpactIml(const struct FHitResult& _ImpactResult);
	TEnumAsByte<ENetRole> GetBulletRole();
	void CheckOptimizeTailFX();
};


// Class ShadowTrackerExtra.BounceExplosionProjectileBullet
// 0x0020 (0x0760 - 0x0740)
class ABounceExplosionProjectileBullet : public AExplosionProjectileBullet
{
public:
	float                                              ExplosionTimeAfterFirstBounce;                            // 0x0740(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExplosionTimeAfterEnetrWater;                             // 0x0744(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               BounceSound;                                              // 0x0748(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasEnterWater;                                           // 0x0750(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0751(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BounceExplosionProjectileBullet");
		return pStaticClass;
	}


	void RPC_Multicast_StartLaunch(float Speed, const struct FTransform& Trans, class AActor* InOwningWeapon, class AActor* InInstigator, uint32_t _ShootID);
	void OnImpactEnd(const struct FHitResult& _ImpactResult);
	void OnImpact(const struct FHitResult& _ImpactResult);
	void OnBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
};


// Class ShadowTrackerExtra.GameModeState
// 0x0020 (0x0048 - 0x0028)
class UGameModeState : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	float                                              StateTime;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	class ABattleRoyaleGameMode*                       OwningGameMode;                                           // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeState");
		return pStaticClass;
	}


	void GotoNextState();
};


// Class ShadowTrackerExtra.GameModeStateActive
// 0x0008 (0x0050 - 0x0048)
class UGameModeStateActive : public UGameModeState
{
public:
	int                                                PlayerNumToNextState;                                     // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateActive");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BRGameModeStateActive_DeathMatch
// 0x0000 (0x0050 - 0x0050)
class UBRGameModeStateActive_DeathMatch : public UGameModeStateActive
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BRGameModeStateActive_DeathMatch");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeStateFighting
// 0x0010 (0x0058 - 0x0048)
class UGameModeStateFighting : public UGameModeState
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFighting");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeStateFightingTeam
// 0x0000 (0x0058 - 0x0058)
class UGameModeStateFightingTeam : public UGameModeStateFighting
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFightingTeam");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BRGameModeStateFighting_DeathMatch
// 0x0020 (0x0078 - 0x0058)
class UBRGameModeStateFighting_DeathMatch : public UGameModeStateFightingTeam
{
public:
	TArray<class UClass*>                              ClearResidueClassList;                                    // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                              StopJoin_RemainTime;                                      // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0xC];                                       // 0x006C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BRGameModeStateFighting_DeathMatch");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeStateFinished
// 0x0000 (0x0048 - 0x0048)
class UGameModeStateFinished : public UGameModeState
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFinished");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeStateFinishedTeam
// 0x0000 (0x0048 - 0x0048)
class UGameModeStateFinishedTeam : public UGameModeStateFinished
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFinishedTeam");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BRGameModeStateFinished_DeathMatch
// 0x0000 (0x0048 - 0x0048)
class UBRGameModeStateFinished_DeathMatch : public UGameModeStateFinishedTeam
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BRGameModeStateFinished_DeathMatch");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeStateReady
// 0x0040 (0x0088 - 0x0048)
class UGameModeStateReady : public UGameModeState
{
public:
	float                                              StopJoinTime;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForceStartCountDownTime;                                  // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanSendStopJoin;                                         // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	TArray<int>                                        GetItemArray;                                             // 0x0058(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0068(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateReady");
		return pStaticClass;
	}


	void StopJoin();
};


// Class ShadowTrackerExtra.BRGameModeStateReady_DeathMatch
// 0x0000 (0x0088 - 0x0088)
class UBRGameModeStateReady_DeathMatch : public UGameModeStateReady
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BRGameModeStateReady_DeathMatch");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BRGameModeTeam_DeathMatch
// 0x00C0 (0x19D8 - 0x1918)
class ABRGameModeTeam_DeathMatch : public ABattleRoyaleGameModeTeam
{
public:
	TMap<int, struct FHomeMapBaseRegion>               HomeMapBaseRegions;                                       // 0x1918(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                MapId;                                                    // 0x1968(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHomeMapBaseRegion                          CurMapBaseRegion;                                         // 0x196C(0x0048) (NoDestructor, NativeAccessSpecifierPublic)
	int                                                StopJoin_BestScore;                                       // 0x19B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                StopJoin_ScoreGap;                                        // 0x19B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                DeathMatchWinScore;                                       // 0x19BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Score_Kill;                                               // 0x19C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ContinuouKillNum;                                         // 0x19C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SuperGodKillNum;                                          // 0x19C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GameComingEndNotify_RemainKillNum;                        // 0x19CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GameComingEndNotify_RemainTime;                           // 0x19D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GameComingEndNotify_HalfTime;                             // 0x19D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BRGameModeTeam_DeathMatch");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BRGameStateTeam_DeathMatch
// 0x0080 (0x0A80 - 0x0A00)
class ABRGameStateTeam_DeathMatch : public ASTExtraGameStateBase
{
public:
	int                                                RemainMatchTime;                                          // 0x0A00(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeathMatchSubModeType                             DeathMatchSubModeType;                                    // 0x0A04(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0A05(0x0003) MISSED OFFSET
	int                                                DeathMatchWinScore;                                       // 0x0A08(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RespawnInvincibleTime;                                    // 0x0A0C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDeathMatchTeamScoreData>            DeathMatchTeamScoreDatas;                                 // 0x0A10(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0A20(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDeathMatchGlobalNotifyDelegate;                         // 0x0A28(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDeathMatchGlobalAudioDelegate;                          // 0x0A38(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDeathMatchGameEndDelegate;                              // 0x0A48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UDeathMatchMedalManagerComponent*            MedalManagerComponent;                                    // 0x0A58(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDeathMatchWWISEManagerComponent*            WWISEManagerComponent;                                    // 0x0A60(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0A68(0x0008) MISSED OFFSET
	uint64_t                                           FirstKillPlayer;                                          // 0x0A70(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64_t                                           LastKillPlayer;                                           // 0x0A78(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BRGameStateTeam_DeathMatch");
		return pStaticClass;
	}


	void ServerResetShowWrapperActor();
	void OnRep_DeathMatchTeamScoreDatas();
	void MulticastRPC_BroadcastDeathMatchGlobalNotify(const struct FDeathMatchPlayerStateData& KillerStateData, const struct FDeathMatchPlayerStateData& VictimerStateData, EDeathMatchGlobalNotifyReason GlobalNotifyReason);
	void MulticastRPC_BroadcastDeathMatchGlobalAudio(int KillerTeamID, int VictimerTeamID, EDeathMatchGlobalAudioType GlobalNotifyReason);
	void MulticastRPC_BroadcastDeathMatchGameEndNotify(int WinTeamID);
	struct FString GetFormatRemainTimeText();
	struct FDeathMatchPlayerStateData GetCurrentClientDeathMatchPlayerStateData();
	void BroadcastResetWrapperShowActor();
};


// Class ShadowTrackerExtra.BRPlayerStateTeam_DeathMatch
// 0x00E0 (0x1188 - 0x10A8)
class ABRPlayerStateTeam_DeathMatch : public ASTExtraPlayerState
{
public:
	int                                                DeathMatchScore;                                          // 0x10A8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Rank;                                                     // 0x10AC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x10B0(0x0004) MISSED OFFSET
	int                                                Deaths;                                                   // 0x10B4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ContinuousKills;                                          // 0x10B8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x74];                                      // 0x10BC(0x0074) MISSED OFFSET
	struct FScriptMulticastDelegate                    DeathMatchPersonalNotifyDelegate;                         // 0x1130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    DeathMatchTeammateContinueKillNotifyDelegate;             // 0x1140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    DeathMatchPersonalDieNotifyDelegate;                      // 0x1150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    DeathMatchMedalNotifyDelegate;                            // 0x1160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int                                                SelectedWeaponConfigIndex;                                // 0x1170(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x1174(0x0004) MISSED OFFSET
	TArray<struct FPlayerWeaponsConfig>                PlayerWeaponsConfigList;                                  // 0x1178(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BRPlayerStateTeam_DeathMatch");
		return pStaticClass;
	}


	void OnRep_SelectedWeaponConfigIndex();
	void OnRep_PlayerWeaponsConfigList();
	int GetPlayerContinuousKills();
	void ClientRPC_BroadcastTeammateContinueKillData(uint64_t KillerPlayerKey, int ContinuouKills);
	void ClientRPC_BroadcastDeathMatchPersonalNotify(const struct FDeathMatchPlayerStateData& KillerStateData, const struct FDeathMatchPlayerStateData& VictimerStateData, EDeathMatchPersonalNotifyReason PersonalNotifyReason);
	void ClientRPC_BroadcastDeathMatchPersonalDieNotify(const struct FDeathMatchPlayerDieData& PlayerDieData);
	void ClientRPC_BroadcastDeathMatchMedalNotify(TArray<int> MedalIDList);
};


// Class ShadowTrackerExtra.BTDecorator_AttrObserver
// 0x0010 (0x0070 - 0x0060)
class UBTDecorator_AttrObserver : public UBTDecorator
{
public:
	TArray<struct FAIAttrObserver>                     AttrObserverList;                                         // 0x0060(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_AttrObserver");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_IsMovementMode
// 0x0008 (0x0090 - 0x0088)
class UBTDecorator_IsMovementMode : public UBTDecorator_BlackboardBase
{
public:
	TEnumAsByte<EMovementMode>                         MovementMode;                                             // 0x0088(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_IsMovementMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Mob_CheckJump
// 0x0020 (0x00A8 - 0x0088)
class UBTDecorator_Mob_CheckJump : public UBTDecorator_BlackboardBase
{
public:
	int                                                RandomReachablePointRadius;                               // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   JumpHighRange;                                            // 0x008C(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   JumpLowRange;                                             // 0x0094(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                JumpStartOffsetZ;                                         // 0x009C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                JumpHighThreshold;                                        // 0x00A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Mob_CheckJump");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Mob_CheckJumpToLowDirect
// 0x0010 (0x0098 - 0x0088)
class UBTDecorator_Mob_CheckJumpToLowDirect : public UBTDecorator_BlackboardBase
{
public:
	float                                              JumpToLowThreshold;                                       // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckDistance;                                            // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpToLowSpeed;                                           // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Mob_CheckJumpToLowDirect");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Mob_CheckObstacle
// 0x0008 (0x0090 - 0x0088)
class UBTDecorator_Mob_CheckObstacle : public UBTDecorator_BlackboardBase
{
public:
	int                                                CheckDistance;                                            // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BackDistance;                                             // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Mob_CheckObstacle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Mob_CloseEnough
// 0x0008 (0x0090 - 0x0088)
class UBTDecorator_Mob_CloseEnough : public UBTDecorator_BlackboardBase
{
public:
	float                                              AcceptableDistance;                                       // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheckDistanceIn2D;                                       // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReachTestIncludesAgentRadius;                            // 0x008D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReachTestIncludesGoalRadius;                             // 0x008E(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x008F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Mob_CloseEnough");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Mob_HasAIState
// 0x0000 (0x0060 - 0x0060)
class UBTDecorator_Mob_HasAIState : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Mob_HasAIState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Mob_IsTargetAbove
// 0x0008 (0x0090 - 0x0088)
class UBTDecorator_Mob_IsTargetAbove : public UBTDecorator_BlackboardBase
{
public:
	float                                              AcceptableDistance;                                       // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Mob_IsTargetAbove");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Mob_LineTrace
// 0x0010 (0x0098 - 0x0088)
class UBTDecorator_Mob_LineTrace : public UBTDecorator_BlackboardBase
{
public:
	TArray<TEnumAsByte<ECollisionChannel>>             traceObjectTypes;                                         // 0x0088(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Mob_LineTrace");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Mob_LinkCheckJumpWall
// 0x0008 (0x0090 - 0x0088)
class UBTDecorator_Mob_LinkCheckJumpWall : public UBTDecorator_BlackboardBase
{
public:
	int                                                KeepDistance;                                             // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LineTraceHeightOffset;                                    // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Mob_LinkCheckJumpWall");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Mob_Once
// 0x0000 (0x0060 - 0x0060)
class UBTDecorator_Mob_Once : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Mob_Once");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_NearTargetLoc
// 0x0000 (0x0060 - 0x0060)
class UBTDecorator_NearTargetLoc : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_NearTargetLoc");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_NewSatisfyAttkDist
// 0x0008 (0x0068 - 0x0060)
class UBTDecorator_NewSatisfyAttkDist : public UBTDecorator
{
public:
	bool                                               bIsInversed;                                              // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              ExtraDistance;                                            // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_NewSatisfyAttkDist");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Probability
// 0x0058 (0x00B8 - 0x0060)
class UBTDecorator_Probability : public UBTDecorator
{
public:
	bool                                               bUseDifficultyLevel;                                      // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	TMap<int, float>                                   DifficultyProbabilityCfg;                                 // 0x0068(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Probability");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTDecorator_SatisfyAttkDist
// 0x0008 (0x0068 - 0x0060)
class UBTDecorator_SatisfyAttkDist : public UBTDecorator
{
public:
	bool                                               bIsInversed;                                              // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_SatisfyAttkDist");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTReuseList
// 0x00A8 (0x0450 - 0x03A8)
class UBTReuseList : public UUAEUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03A8(0x0010) MISSED OFFSET
	float                                              itemSizeX;                                                // 0x03B8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              itemSizeY;                                                // 0x03BC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                      itemSizeYList;                                            // 0x03C0(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                TotalNum;                                                 // 0x03D0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               misaligned;                                               // 0x03D4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	int                                                visibleNum;                                               // 0x03D8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                topEmptyNum;                                              // 0x03DC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                oldTopEmptyNum;                                           // 0x03E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET
	TArray<class USpacer*>                             spacerList;                                               // 0x03E8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UUAEUserWidget*>                      ItemList;                                                 // 0x03F8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              totalHeight;                                              // 0x0408(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              deltaTotalHeight;                                         // 0x040C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ItemClass;                                                // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x20];                                      // 0x0418(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    itemUpdateDelegate;                                       // 0x0438(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0448(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTReuseList");
		return pStaticClass;
	}


	void UpdateSingleHeight(int Index, float Height);
	void SetRowNumAsUnif(float itemX, float itemY, int Num, bool misalign, bool MultFrame);
	void RefreshListByOffset(float Offset);
	void DoInit();
};


// Class ShadowTrackerExtra.BTService_AdvancedShooting
// 0x0088 (0x00F0 - 0x0068)
class UBTService_AdvancedShooting : public UBTService
{
public:
	struct FVector2D                                   RandomShootFreqRange;                                     // 0x0068(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                      ReloadBlackBoardKey;                                      // 0x0070(0x0028) (Edit, NativeAccessSpecifierPublic)
	bool                                               bSetCanSeeTargetFlag;                                     // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseDifficultyLevel;                                      // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x009A(0x0006) MISSED OFFSET
	TMap<int, struct FDifficultyShootingConfig>        DifficultyShootingCfg;                                    // 0x00A0(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_AdvancedShooting");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_ChooseEnemy
// 0x00E8 (0x0150 - 0x0068)
class UBTService_ChooseEnemy : public UBTService
{
public:
	float                                              MaxRememberLastAttackedMeTimeInSeconds;                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxTraceLastAttackedMeDistance;                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTimeWhenCannotSeeTarget;                               // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTimeLockTarget;                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SensedRadius;                                             // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EquipWeaponSensedRadius;                                  // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EquipWeaponNightSensedRadius;                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmergencyRadius;                                          // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWeaponType2Range>                   WeaponType2Ranges;                                        // 0x0088(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponTypeToRange>                  DefaultWeaponTypeToRanges;                                // 0x0098(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EWeatherStatusType, struct FWeatherToRange>   WeatherToRange;                                           // 0x00A8(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EWeatherStatusType, EWeatherStatusType>       WeatherTypeToWeatherRange;                                // 0x00F8(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              PVESensedRadius;                                          // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x014C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_ChooseEnemy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_ChooseFightbackEnemy
// 0x0008 (0x0070 - 0x0068)
class UBTService_ChooseFightbackEnemy : public UBTService
{
public:
	float                                              EquipWeaponSensedRadius;                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmergencyRadius;                                          // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_ChooseFightbackEnemy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Cruising
// 0x0000 (0x0068 - 0x0068)
class UBTService_Cruising : public UBTService
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Cruising");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_DeliverControl
// 0x0010 (0x0078 - 0x0068)
class UBTService_DeliverControl : public UBTService
{
public:
	TArray<struct FDeliverControlRatingConfig>         RatingConfig;                                             // 0x0068(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_DeliverControl");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_DistantJudge
// 0x0040 (0x00A8 - 0x0068)
class UBTService_DistantJudge : public UBTService
{
public:
	struct FBlackboardKeySelector                      WatchTargetBlackBoardKey;                                 // 0x0068(0x0028) (Edit, NativeAccessSpecifierPublic)
	TArray<struct FAIDistantJudgeNoftify>              DistantJudges;                                            // 0x0090(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               ResetModifyBBData;                                        // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_DistantJudge");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_FightDecisionSystem
// 0x0000 (0x0068 - 0x0068)
class UBTService_FightDecisionSystem : public UBTService
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_FightDecisionSystem");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Focus
// 0x0000 (0x0098 - 0x0098)
class UBTService_Focus : public UBTService_DefaultFocus
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Focus");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_LookAround
// 0x0018 (0x0080 - 0x0068)
class UBTService_LookAround : public UBTService
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0068(0x0004) MISSED OFFSET
	struct FVector2D                                   RotationAngle;                                            // 0x006C(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   WaitTimeWhenStop;                                         // 0x0074(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AcceptToleranceInDegree;                                  // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_LookAround");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Mob_AddHp
// 0x0008 (0x0070 - 0x0068)
class UBTService_Mob_AddHp : public UBTService
{
public:
	EMobAddHPServiceType                               addHPType;                                                // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Mob_AddHp");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Mob_AdvancedMovementDetector
// 0x0000 (0x0068 - 0x0068)
class UBTService_Mob_AdvancedMovementDetector : public UBTService
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Mob_AdvancedMovementDetector");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Mob_AutoDestroy
// 0x0008 (0x0070 - 0x0068)
class UBTService_Mob_AutoDestroy : public UBTService
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Mob_AutoDestroy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Mob_CheckLocation
// 0x0000 (0x0068 - 0x0068)
class UBTService_Mob_CheckLocation : public UBTService
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Mob_CheckLocation");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Mob_CheckLoseTarget
// 0x0000 (0x0068 - 0x0068)
class UBTService_Mob_CheckLoseTarget : public UBTService
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Mob_CheckLoseTarget");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Mob_CheckPathExist
// 0x0000 (0x0068 - 0x0068)
class UBTService_Mob_CheckPathExist : public UBTService
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Mob_CheckPathExist");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Mob_ChooseEnemy
// 0x0040 (0x00A8 - 0x0068)
class UBTService_Mob_ChooseEnemy : public UBTService
{
public:
	float                                              MinTimeLockTarget;                                        // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTimeWhenCannotSeeTarget;                               // 0x006C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SensedRadius;                                             // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAISearchEnemyType                                 searchType;                                               // 0x0074(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	float                                              PreciseHatredDecreaseSpeed;                               // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               SensedRadiusAdvanceInNight;                               // 0x007C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              LoseSightRadius;                                          // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DontAttackWhenTargetInWater;                              // 0x0084(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	float                                              AttackVehicleInRadius;                                    // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AttackVehicleInRadiusEnabled;                             // 0x008C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAISearchEnemyType                                 searchVehicleType;                                        // 0x008D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x1A];                                      // 0x008E(0x001A) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Mob_ChooseEnemy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Mob_Hearing
// 0x0010 (0x0078 - 0x0068)
class UBTService_Mob_Hearing : public UBTService
{
public:
	float                                              MaxTimeLockWhenNoNextSound;                               // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoiseSearchType                                   searchType;                                               // 0x006C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	float                                              AcceptableDistance;                                       // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Mob_Hearing");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Mob_MoveBlockTimer
// 0x0000 (0x0068 - 0x0068)
class UBTService_Mob_MoveBlockTimer : public UBTService
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Mob_MoveBlockTimer");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Mob_OpenDoor
// 0x0008 (0x0070 - 0x0068)
class UBTService_Mob_OpenDoor : public UBTService
{
public:
	float                                              AutoOpenDoorInterval;                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Mob_OpenDoor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_SensedEnemy
// 0x0068 (0x00D0 - 0x0068)
class UBTService_SensedEnemy : public UBTService
{
public:
	float                                              SensedRadius;                                             // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EquipWeaponSensedRadius;                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EquipWeaponNightSensedRadius;                             // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EmergencyRadius;                                          // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int, float>                                   AISensedEnemyPoseRatio;                                   // 0x0078(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_SensedEnemy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_Shooting
// 0x0000 (0x0068 - 0x0068)
class UBTService_Shooting : public UBTService
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_Shooting");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_WalkingDeadChooseEnemy
// 0x0018 (0x0080 - 0x0068)
class UBTService_WalkingDeadChooseEnemy : public UBTService
{
public:
	float                                              MaxRememberLastAttackedMeTimeInSeconds;                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxTraceLastAttackedMeDistance;                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTimeWhenCannotSeeTarget;                               // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTimeLockTarget;                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SensedRadius;                                             // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EquipWeaponSensedRadius;                                  // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_WalkingDeadChooseEnemy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTService_WeatherTimeCount
// 0x0060 (0x00C8 - 0x0068)
class UBTService_WeatherTimeCount : public UBTService
{
public:
	struct FBlackboardKeySelector                      StartCurrentWeatherCountDownBlackboardKey;                // 0x0068(0x0028) (Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                      IsCurrentWeatherBlackboardKey;                            // 0x0090(0x0028) (Edit, NativeAccessSpecifierPublic)
	EWeatherStatusType                                 NewWeatherStatusType;                                     // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xF];                                       // 0x00B9(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTService_WeatherTimeCount");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_AdvancedWait
// 0x0050 (0x00C8 - 0x0078)
class UBTTask_AdvancedWait : public UBTTask_Wait
{
public:
	TMap<int, struct FDifficultyTimeConfig>            DifficultyTimeCfg;                                        // 0x0078(0x0050) (Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_AdvancedWait");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_ChangeWalkSpeed
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_ChangeWalkSpeed : public UBTTask_BlackboardBase
{
public:
	EMobWalkType                                       iWalkType;                                                // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_ChangeWalkSpeed");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_ClearDelivery
// 0x0000 (0x0070 - 0x0070)
class UBTTask_ClearDelivery : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_ClearDelivery");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_DealNextBuildingPathNode
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_DealNextBuildingPathNode : public UBTTask_BlackboardBase
{
public:
	float                                              findSpotXYOffset;                                         // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              findSpotZOffset;                                          // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_DealNextBuildingPathNode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_ShortDistanceMove
// 0x0048 (0x00E0 - 0x0098)
class UBTTask_ShortDistanceMove : public UBTTask_BlackboardBase
{
public:
	EAIMovePose                                        MoveType;                                                 // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIMoveType                                        MovePathType;                                             // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009A(0x0002) MISSED OFFSET
	int                                                SampleNumber;                                             // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ControllPoint1;                                           // 0x00A0(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ControllPoint2;                                           // 0x00A8(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   DirectionAngleRange;                                      // 0x00B0(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   MoveTargetDistRange;                                      // 0x00B8(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ExecutionDuration;                                        // 0x00C0(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RePlanTime;                                               // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AlwaysSuccess;                                            // 0x00CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	float                                              AcceptRadius;                                             // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               StopOnOverlap;                                            // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UsePathfinding;                                           // 0x00D5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AllowPartialPath;                                         // 0x00D6(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ProjectDestinationToNavigation;                           // 0x00D7(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExceptionRandomRadius;                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DebugDrawPath;                                            // 0x00DC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_ShortDistanceMove");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Escape
// 0x0040 (0x0120 - 0x00E0)
class UBTTask_Escape : public UBTTask_ShortDistanceMove
{
public:
	float                                              TryLineTestZOffset;                                       // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TryLineTestDistance;                                      // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxTrySampleTimes;                                        // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTrySampleDistance;                                     // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTryEscapeDistance;                                     // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EscapeStopDistance;                                       // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                      EnemyBlackboardKey;                                       // 0x00F8(0x0028) (Edit, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Escape");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_MagicMove
// 0x0010 (0x00C0 - 0x00B0)
class UBTTask_MagicMove : public UBTTask_MoveTo
{
public:
	float                                              AcceptRadius;                                             // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GenerateNavRadius;                                        // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeLimit;                                                // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ForceSuccess;                                             // 0x00BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               MoveWithOutPathFinding;                                   // 0x00BD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GotoExceptionWhenFailed;                                  // 0x00BE(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00BF(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_MagicMove");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_FindAndPickItem
// 0x0000 (0x00C0 - 0x00C0)
class UBTTask_FindAndPickItem : public UBTTask_MagicMove
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_FindAndPickItem");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_FindAndPickupEquip
// 0x0000 (0x00B0 - 0x00B0)
class UBTTask_FindAndPickupEquip : public UBTTask_MoveTo
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_FindAndPickupEquip");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_FindNearestTombBoxTask
// 0x0010 (0x00A8 - 0x0098)
class UBTTask_FindNearestTombBoxTask : public UBTTask_BlackboardBase
{
public:
	float                                              PlayerBackpackSearchRadius;                               // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirDropSearchRadius;                                      // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirDropBoxRadius;                                         // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxPainFindInBlueCircle;                                  // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_FindNearestTombBoxTask");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_FindOcclusionPoint
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_FindOcclusionPoint : public UBTTask_BlackboardBase
{
public:
	float                                              SearchRadius;                                             // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_FindOcclusionPoint");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_FindWayPoint
// 0x0010 (0x00A8 - 0x0098)
class UBTTask_FindWayPoint : public UBTTask_BlackboardBase
{
public:
	float                                              InPointRadius;                                            // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      MaxRandIterTimes;                                         // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRandUseNav;                                              // 0x009D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugDraw;                                               // 0x009E(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x009F(0x0001) MISSED OFFSET
	float                                              DebugDrawPointTime;                                       // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_FindWayPoint");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_ForceIdle
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_ForceIdle : public UBTTask_BlackboardBase
{
public:
	float                                              IdleTime;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_ForceIdle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_GetRandomAttackablePosition
// 0x0010 (0x00A8 - 0x0098)
class UBTTask_GetRandomAttackablePosition : public UBTTask_BlackboardBase
{
public:
	float                                              AttackableRadius;                                         // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              KeepDistanceFromTarget;                                   // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomMoveRadius;                                         // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RetryTimes;                                               // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_GetRandomAttackablePosition");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_CastSkill
// 0x0000 (0x0070 - 0x0070)
class UBTTask_Mob_CastSkill : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_CastSkill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_Explode
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_Mob_Explode : public UBTTask_BlackboardBase
{
public:
	int                                                ExplodeSkillIndex;                                        // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EUTSkillEventType>                     ExplodeSkillType;                                         // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_Explode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_FaceEnemy
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_Mob_FaceEnemy : public UBTTask_BlackboardBase
{
public:
	float                                              AcceptableAngle;                                          // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TurnSpeed;                                                // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_FaceEnemy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_FindNextPathPosition
// 0x0000 (0x0070 - 0x0070)
class UBTTask_Mob_FindNextPathPosition : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_FindNextPathPosition");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_FindNextPatrolPosition
// 0x0008 (0x0078 - 0x0070)
class UBTTask_Mob_FindNextPatrolPosition : public UBTTaskNode
{
public:
	bool                                               bEnableRaycastTest;                                       // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              MinSquaredDistanceFromSpawnPoint;                         // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_FindNextPatrolPosition");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_FindPosByTarget
// 0x0038 (0x00D0 - 0x0098)
class UBTTask_Mob_FindPosByTarget : public UBTTask_BlackboardBase
{
public:
	float                                              SearchRadius;                                             // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseNav;                                                  // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               NotInBossContainer;                                       // 0x009D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009E(0x0002) MISSED OFFSET
	TArray<struct FMobRandLocationRetryRule>           retryRules;                                               // 0x00A0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               StopWhenFindPos;                                          // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               KeepCloseToEnemy;                                         // 0x00B1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00B2(0x0002) MISSED OFFSET
	float                                              MinMoveDistance;                                          // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HeightTestOffset;                                         // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               SimulateMoveWithLineCheck;                                // 0x00BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	float                                              SimulateMoveDistance;                                     // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SimulateCapsuleRadius;                                    // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SimulateCapsuleHalfHeight;                                // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_FindPosByTarget");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_FindRandomAttackablePosition
// 0x0040 (0x00D8 - 0x0098)
class UBTTask_Mob_FindRandomAttackablePosition : public UBTTask_BlackboardBase
{
public:
	float                                              AttackableRadius;                                         // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              KeepDistanceFromTarget;                                   // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinMoveDistance;                                          // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               WithLineTrace;                                            // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMobFindAttackablePositionLineTraceType            lineTraceType;                                            // 0x00A5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00A6(0x0002) MISSED OFFSET
	float                                              CustomLineTraceHeightOffset;                              // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HeightTestOffset;                                         // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMobRandLocationRetryRule>           retryRules;                                               // 0x00B0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               ReachableTest;                                            // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	float                                              ReachableTestRadius;                                      // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableTriggerCastSkillBlockAfterFailed;                   // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	int                                                TriggerCastSkillBlockAfterFailedTimes;                    // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               NotInBossContainer;                                       // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_FindRandomAttackablePosition");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_GetNearDeathCharNearby
// 0x0030 (0x00C8 - 0x0098)
class UBTTask_Mob_GetNearDeathCharNearby : public UBTTask_BlackboardBase
{
public:
	struct FBlackboardKeySelector                      TargetChar;                                               // 0x0098(0x0028) (Edit, NativeAccessSpecifierPublic)
	float                                              SearchRadius;                                             // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckInterval;                                            // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_GetNearDeathCharNearby");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_GetRandomAttackTargetInRadius
// 0x0020 (0x00B8 - 0x0098)
class UBTTask_Mob_GetRandomAttackTargetInRadius : public UBTTask_BlackboardBase
{
public:
	int                                                TriggerMinTimes;                                          // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TriggerMaxTimes;                                          // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ChooseCurEnemyProbability;                                // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESearchType                                        searchType;                                               // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	float                                              SearchRadius;                                             // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     SpecificLocation;                                         // 0x00AC(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_GetRandomAttackTargetInRadius");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_GetRandomSkill
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_Mob_GetRandomSkill : public UBTTask_BlackboardBase
{
public:
	bool                                               DontChangeSkillWhenTargetNearBossContainer;               // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_GetRandomSkill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_GetTargetVehicle
// 0x0028 (0x00C0 - 0x0098)
class UBTTask_Mob_GetTargetVehicle : public UBTTask_BlackboardBase
{
public:
	struct FBlackboardKeySelector                      TargetVehicle;                                            // 0x0098(0x0028) (Edit, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_GetTargetVehicle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_GetVehicleNearby
// 0x0030 (0x00C8 - 0x0098)
class UBTTask_Mob_GetVehicleNearby : public UBTTask_BlackboardBase
{
public:
	struct FBlackboardKeySelector                      TargetVehicle;                                            // 0x0098(0x0028) (Edit, NativeAccessSpecifierPublic)
	float                                              SearchRadius;                                             // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckInterval;                                            // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_GetVehicleNearby");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_LeaveState
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_Mob_LeaveState : public UBTTask_BlackboardBase
{
public:
	EBPAIState                                         iState;                                                   // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_LeaveState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_LinkGetJumpVelocity
// 0x0010 (0x00A8 - 0x0098)
class UBTTask_Mob_LinkGetJumpVelocity : public UBTTask_BlackboardBase
{
public:
	float                                              JumpForwardOffset;                                        // 0x0098(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   JumpSpeedRange;                                           // 0x009C(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ESuggestProjVelocityTraceOption>       Stride_JumpProjTraceType;                                 // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               SetJumpFaceAngle;                                         // 0x00A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00A6(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_LinkGetJumpVelocity");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_MoveTo
// 0x0020 (0x00D0 - 0x00B0)
class UBTTask_Mob_MoveTo : public UBTTask_MoveTo
{
public:
	float                                              BlockTimeLimit;                                           // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlockVelocitySizeThreshold;                               // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               BlockDistCheck;                                           // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	float                                              BlockThresholdValidMoveDist;                              // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlockThresholdValidMoveTime;                              // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlockThresholdValidVelocitySize;                          // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ForceSuccess;                                             // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GotoExceptionWhenFailed;                                  // 0x00C9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x00CA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_MoveTo");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_SnakeMove
// 0x0020 (0x00B8 - 0x0098)
class UBTTask_Mob_SnakeMove : public UBTTask_BlackboardBase
{
public:
	float                                              NormalDis;                                                // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   DisOffset;                                                // 0x009C(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   AngleOffset;                                              // 0x00A4(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TaskMaxTime;                                              // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AcceptRadius;                                             // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               StopOnOverlap;                                            // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UsePathfinding;                                           // 0x00B5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AllowPartialPath;                                         // 0x00B6(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ProjectDestinationToNavigation;                           // 0x00B7(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_SnakeMove");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_Suicide
// 0x0000 (0x0098 - 0x0098)
class UBTTask_Mob_Suicide : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_Suicide");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Mob_SwimDirect
// 0x0010 (0x00A8 - 0x0098)
class UBTTask_Mob_SwimDirect : public UBTTask_BlackboardBase
{
public:
	float                                              SwimVelocitySize;                                         // 0x0098(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AcceptableRadius;                                         // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReachTestIncludesAgentRadius;                            // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReachTestIncludesGoalRadius;                             // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00A2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Mob_SwimDirect");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_ModifyBlackboardData
// 0x0018 (0x00B0 - 0x0098)
class UBTTask_ModifyBlackboardData : public UBTTask_BlackboardBase
{
public:
	EModifyBlackboardDataValueType                     ValueType;                                                // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	struct FString                                     SetValue;                                                 // 0x00A0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_ModifyBlackboardData");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_MoveAround
// 0x0060 (0x00F8 - 0x0098)
class UBTTask_MoveAround : public UBTTask_BlackboardBase
{
public:
	float                                              MoveRadius;                                               // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RotationSpeed;                                            // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIMovePose                                        MoveType;                                                 // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	struct FVector2D                                   WaitTimeRange;                                            // 0x00A4(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ExecutionDuration;                                        // 0x00AC(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AcceptRadius;                                             // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIncludeNeighborVerts;                                    // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSetFocus;                                                // 0x00B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanMoveWhenNoTarget;                                     // 0x00BA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1];                                       // 0x00BB(0x0001) MISSED OFFSET
	struct FVector2D                                   DirectionAngleRange;                                      // 0x00BC(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   MoveTargetDistRange;                                      // 0x00C4(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	struct FBlackboardKeySelector                      EnemyBlackboardKey;                                       // 0x00D0(0x0028) (Edit, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_MoveAround");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_MoveToOcclusion
// 0x0040 (0x0100 - 0x00C0)
class UBTTask_MoveToOcclusion : public UBTTask_MagicMove
{
public:
	float                                              SearchRadius;                                             // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UseLastPointRadius;                                       // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NearDistanceValue;                                        // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PointInNearDistanceValue;                                 // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bChoosePointByEnemy;                                      // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceStand;                                              // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00D2(0x0002) MISSED OFFSET
	float                                              CirclePainThreshold;                                      // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                      EnemyBlackboardKey;                                       // 0x00D8(0x0028) (Edit, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_MoveToOcclusion");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_MoveToSafeArea
// 0x0008 (0x00C8 - 0x00C0)
class UBTTask_MoveToSafeArea : public UBTTask_MagicMove
{
public:
	float                                              RadiusScale;                                              // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_MoveToSafeArea");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_Pet_SwimDirect
// 0x0000 (0x00B0 - 0x00B0)
class UBTTask_Pet_SwimDirect : public UBTTask_MoveDirectlyToward
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Pet_SwimDirect");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_PickUpItemAtTombBox
// 0x0008 (0x0078 - 0x0070)
class UBTTask_PickUpItemAtTombBox : public UBTTaskNode
{
public:
	int                                                MaxPickCount;                                             // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_PickUpItemAtTombBox");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_SpawnItem
// 0x0018 (0x00B0 - 0x0098)
class UBTTask_SpawnItem : public UBTTask_BlackboardBase
{
public:
	float                                              CheckNoPlayerRadiusSquare;                                // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	TArray<struct FAIEquipSpawnGroupDataBase>          SpawnEquipDataBase;                                       // 0x00A0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_SpawnItem");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_StrategyMove
// 0x0048 (0x00E0 - 0x0098)
class UBTTask_StrategyMove : public UBTTask_BlackboardBase
{
public:
	EAIMovePose                                        MoveType;                                                 // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIMoveType                                        MovePathType;                                             // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009A(0x0002) MISSED OFFSET
	int                                                SampleNumber;                                             // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ControllPoint1;                                           // 0x00A0(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ControllPoint2;                                           // 0x00A8(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   DirectionAngleRange;                                      // 0x00B0(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   MoveTargetDistRange;                                      // 0x00B8(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ExecutionDuration;                                        // 0x00C0(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RePlanTime;                                               // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AlwaysSuccess;                                            // 0x00CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	float                                              AcceptRadius;                                             // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               StopOnOverlap;                                            // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UsePathfinding;                                           // 0x00D5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AllowPartialPath;                                         // 0x00D6(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ProjectDestinationToNavigation;                           // 0x00D7(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExceptionRandomRadius;                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanMoveWhenNoTarget;                                     // 0x00DC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheckWallPass;                                           // 0x00DD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DebugDrawPath;                                            // 0x00DE(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x1];                                       // 0x00DF(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_StrategyMove");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_TeleportToSpecLoc
// 0x0020 (0x00B8 - 0x0098)
class UBTTask_TeleportToSpecLoc : public UBTTask_BlackboardBase
{
public:
	float                                              RangeMin;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RangeMax;                                                 // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               OnlyTeleportToLand;                                       // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	float                                              OriginCheckSquare;                                        // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DestCheckSquare;                                          // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TraceHeight;                                              // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bForceSuccess;                                            // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_TeleportToSpecLoc");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_TryFightback
// 0x0018 (0x00D8 - 0x00C0)
class UBTTask_TryFightback : public UBTTask_MagicMove
{
public:
	float                                              MaxTraceRadius;                                           // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxTraceTime;                                             // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckTargetVisableTimeIntervel;                           // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsCheckHasWeapon;                                        // 0x00CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	float                                              MinEnemyInSightTime;                                      // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_TryFightback");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTask_WayPointListMove
// 0x0010 (0x00A8 - 0x0098)
class UBTTask_WayPointListMove : public UBTTask_BlackboardBase
{
public:
	bool                                               bAllowPartialPath;                                        // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	float                                              AcceptableRadius;                                         // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAllowStrafe;                                             // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReachTestIncludesAgentRadius;                            // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReachTestIncludesGoalRadius;                             // 0x00A2(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bProjectGoalLocation;                                     // 0x00A3(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUsePathfinding;                                          // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTask_WayPointListMove");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_CastSkill
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_CastSkill : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_CastSkill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_CheckOcclusionSafe
// 0x0008 (0x00A0 - 0x0098)
class UBTTaskNode_CheckOcclusionSafe : public UBTTask_BlackboardBase
{
public:
	float                                              CheckRadius;                                              // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_CheckOcclusionSafe");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_ClearFocus
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_ClearFocus : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_ClearFocus");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_EmptyShot
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_EmptyShot : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_EmptyShot");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_EquipItemDirectly
// 0x0010 (0x0080 - 0x0070)
class UBTTaskNode_EquipItemDirectly : public UBTTaskNode
{
public:
	TArray<struct FAIEquipSpawnGroup>                  RandomSpawnEquipGroupSet;                                 // 0x0070(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_EquipItemDirectly");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_EquipOrUnWeapon
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_EquipOrUnWeapon : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_EquipOrUnWeapon");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_FindBuilding
// 0x0028 (0x00C0 - 0x0098)
class UBTTaskNode_FindBuilding : public UBTTask_BlackboardBase
{
public:
	TArray<struct FFindBuildingRatingConfig>           RatingConfig;                                             // 0x0098(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               OnlySafeBuildings;                                        // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	float                                              MaxMoveSpeed;                                             // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              findSpotXYOffset;                                         // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              findSpotZOffset;                                          // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GoBackThreshold;                                          // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_FindBuilding");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_FindItemSpot
// 0x0000 (0x0098 - 0x0098)
class UBTTaskNode_FindItemSpot : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_FindItemSpot");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_FindPosByTarget
// 0x0008 (0x00A0 - 0x0098)
class UBTTaskNode_FindPosByTarget : public UBTTask_BlackboardBase
{
public:
	float                                              SearchRadius;                                             // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseNav;                                                  // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_FindPosByTarget");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_ForceSuccess
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_ForceSuccess : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_ForceSuccess");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_HumanAction
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_HumanAction : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_HumanAction");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_MeleeAttack
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_MeleeAttack : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_MeleeAttack");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_MonsterCastSkill
// 0x0008 (0x00A0 - 0x0098)
class UBTTaskNode_MonsterCastSkill : public UBTTask_BlackboardBase
{
public:
	int                                                SkillIndex;                                               // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EUTSkillEventType>                     SkillType;                                                // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanCastWithoutTarget;                                    // 0x009D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIgnoreSkillCastDistanceCheck;                            // 0x009E(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x009F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_MonsterCastSkill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_MonsterJumpToPos
// 0x0000 (0x0098 - 0x0098)
class UBTTaskNode_MonsterJumpToPos : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_MonsterJumpToPos");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_NewParachuteJump
// 0x0028 (0x0098 - 0x0070)
class UBTTaskNode_NewParachuteJump : public UBTTaskNode
{
public:
	float                                              RandomEndJumpTime;                                        // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpRadius;                                               // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpHeight;                                               // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomAccelerateStart;                                    // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomAccelerateEnd;                                      // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OpenParachuteHeight;                                      // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckOpenParachuteFreq;                                   // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloseParachuteHeight;                                     // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckCloseParachuteFreq;                                  // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_NewParachuteJump");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_ParachuteJump
// 0x0010 (0x0080 - 0x0070)
class UBTTaskNode_ParachuteJump : public UBTTaskNode
{
public:
	float                                              RandomRadius;                                             // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpStartTime;                                            // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpEndTime;                                              // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_ParachuteJump");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_ParachuteJumpV3
// 0x0028 (0x0098 - 0x0070)
class UBTTaskNode_ParachuteJumpV3 : public UBTTaskNode
{
public:
	float                                              RandomEndJumpTime;                                        // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpRadius;                                               // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpHeight;                                               // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomAccelerateStart;                                    // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomAccelerateEnd;                                      // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OpenParachuteHeight;                                      // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckOpenParachuteFreq;                                   // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloseParachuteHeight;                                     // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckCloseParachuteFreq;                                  // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_ParachuteJumpV3");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_PickItemsAtSpot
// 0x0008 (0x0078 - 0x0070)
class UBTTaskNode_PickItemsAtSpot : public UBTTaskNode
{
public:
	int                                                MaxPickCount;                                             // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_PickItemsAtSpot");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_RefreshWeaponBBD
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_RefreshWeaponBBD : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_RefreshWeaponBBD");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_StopShooting
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_StopShooting : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_StopShooting");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_TakeMedicine
// 0x0010 (0x0080 - 0x0070)
class UBTTaskNode_TakeMedicine : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0070(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_TakeMedicine");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WeaponLogicBaseComponent
// 0x0028 (0x0138 - 0x0110)
class UWeaponLogicBaseComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0110(0x0010) MISSED OFFSET
	class ASTExtraWeapon*                              OwnerWeapon;                                              // 0x0120(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	class ASTExtraPlayerController*                    GlobalController;                                         // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponLogicBaseComponent");
		return pStaticClass;
	}


	void UpdateComponentTick();
	class ASTExtraWeapon* TryGetOwnerWeapon();
	class ASTExtraShootWeapon* TryGetOwnerShootWeapon();
	void MarkWeaponLogicComponentTickRoleEnable(TEnumAsByte<ENetRole> Role, bool bTickEnable);
	bool IsWeaponOwnerOBTarget();
	bool IsWeaponLogicComponentTickRoleEnabled(TEnumAsByte<ENetRole> Role);
	bool IsWeaponLogicComponentTickEnabled();
	bool IsLocalOrSpectorPlayer();
	TEnumAsByte<ENetRole> GetOwnerPawnRole();
};


// Class ShadowTrackerExtra.BulletHitInfoUploadComponent
// 0x00F8 (0x0230 - 0x0138)
class UBulletHitInfoUploadComponent : public UWeaponLogicBaseComponent
{
public:
	float                                              UploadInterval;                                           // 0x0138(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableTssSdkAntiData;                                    // 0x013C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableTssSdkAntiDataFilter;                              // 0x013D(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableTssSdkAntiDataFilterNew;                           // 0x013E(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableDsTick;                                           // 0x013F(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableDsAntiDataReport;                                 // 0x0140(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableAddSPCShootData;                                   // 0x0141(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0142(0x0006) MISSED OFFSET
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x78];                                      // 0x0150(0x0078) MISSED OFFSET
	class ASTExtraPlayerController*                    OwnerPlayerController;                                    // 0x01C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               NeedSendSimpleCharacterHitData;                           // 0x01D0(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x5F];                                      // 0x01D1(0x005F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BulletHitInfoUploadComponent");
		return pStaticClass;
	}


	void HandleOnWeaponStopFire();
	void HandleOnWeaponStartFire();
	bool CheckCloseDSTick();
	void AddHitData(const struct FBulletHitInfoUploadData& Data, const struct FLocalShootHitData& ShootData);
};


// Class ShadowTrackerExtra.BulletMovementComponent
// 0x0020 (0x01D8 - 0x01B8)
class UBulletMovementComponent : public UProjectileMovementComponent
{
public:
	bool                                               bNeedStopWhenImpact;                                      // 0x01B8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01B9(0x0007) MISSED OFFSET
	class USceneComponent*                             LastUpdateComponentBeforeStop;                            // 0x01C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x01C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BulletMovementComponent");
		return pStaticClass;
	}


	void ResumeMoveAfterImpactWithNoLost();
	void ResetTickDelay();
	void IgnoreBounceReflectOnce();
	void ForceStop();
};


// Class ShadowTrackerExtra.BulletPredictLine
// 0x0020 (0x03B0 - 0x0390)
class ABulletPredictLine : public AActor
{
public:
	bool                                               IsShowing;                                                // 0x0390(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0391(0x0007) MISSED OFFSET
	class ASTExtraPlayerCharacter*                     PlayerCharacter;                                          // 0x0398(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraShootWeapon*                         CurShootWeapon;                                           // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraShootWeapon*                         OwnerWeapon;                                              // 0x03A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BulletPredictLine");
		return pStaticClass;
	}


	void ShowLine();
	void HideLine();
};


// Class ShadowTrackerExtra.BulletTrackComponent
// 0x02A0 (0x03D8 - 0x0138)
class UBulletTrackComponent : public UWeaponLogicBaseComponent
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraBaseCharacter*                       OwnerCharacter;                                           // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraPlayerController*                    OwnerPlayerController;                                    // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x60];                                      // 0x0150(0x0060) MISSED OFFSET
	int                                                UseTss;                                                   // 0x01B0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	bool                                               IsAutonomousOrSpectorWeapon;                              // 0x01B8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x21F];                                     // 0x01B9(0x021F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.BulletTrackComponent");
		return pStaticClass;
	}


	void OnWeaponStopFire();
	void OnWeaponStartFire();
	void OnWeaponShoot();
	void GetDataFromWeaponEntity();
	struct FVector GetCurRecoilInfo();
	float GetCurDeviation();
	void CheckComponentTick();
};


// Class ShadowTrackerExtra.CameraSettingComponentFromBP
// 0x0018 (0x0128 - 0x0110)
class UCameraSettingComponentFromBP : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0110(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CameraSettingComponentFromBP");
		return pStaticClass;
	}


	void SaveCurCameraSetting(class USpringArmComponent* SpringArm);
	void LerpCameraSettings(float LerpAlpha, class USpringArmComponent* SpringArm, struct FCameraSettings* CameraSetting);
};


// Class ShadowTrackerExtra.CaveStoneActor
// 0x0020 (0x03C0 - 0x03A0)
class ACaveStoneActor : public AUAENetActor
{
public:
	float                                              BrokenVelocity;                                           // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03A4(0x0004) MISSED OFFSET
	class USceneComponent*                             DefaultRoot;                                              // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TotalHP;                                                  // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CurHP;                                                    // 0x03B4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              bBroken;                                                  // 0x03B8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CaveStoneActor");
		return pStaticClass;
	}


	void PlayStoneExplsion();
	void OnRep_CurHP();
	void OnRep_bBroken();
	void BroadcastClientCaveStoneExplsion();
};


// Class ShadowTrackerExtra.ChallengeLevelRules
// 0x0008 (0x0030 - 0x0028)
class UChallengeLevelRules : public UObject
{
public:
	class AUAELevelDirector*                           LevelDirector;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ChallengeLevelRules");
		return pStaticClass;
	}


	void SpawnLevelDirector(class UClass* LevelDirectorClass);
	void OnReceiveTriggerMsg(class UTriggerAction* TriggerAction, const struct FString& Msg);
	void InitLevel();
};


// Class ShadowTrackerExtra.ChangeWearingComponent
// 0x0040 (0x0150 - 0x0110)
class UChangeWearingComponent : public UActorComponent
{
public:
	int                                                WillChangeWearIndex;                                      // 0x0110(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CoolDownTime;                                             // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LastChangeWearTime;                                       // 0x0118(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x34];                                      // 0x011C(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ChangeWearingComponent");
		return pStaticClass;
	}


	void ServerRequestChangeWear(int Index);
	bool RequestChangeWearInBattle(int Index);
	bool RequestChangeWear(int Index);
	void RealChangeWearInBattle(int Index);
	bool IsInCoolDownTime(bool bWithLog);
	bool IsInBattleState(bool bWithLog);
	bool IsChangeWearingOpend();
	bool IsAllowChangeWearingState(bool bWithLog);
	float GetCoolDownTime();
	void ClientChangeWearDone(int Index, float ChangeWearTime, TArray<struct FGameModePlayerRolewearInfo> AllWearData);
	bool CheckCanChangeWearing(bool bWithLog);
};


// Class ShadowTrackerExtra.SlotAvatarComponent
// 0x0200 (0x0368 - 0x0168)
class USlotAvatarComponent : public UAvatarComponentBase
{
public:
	TMap<int, struct FAvatarSlotDesc>                  LogicSlotDesc;                                            // 0x0168(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, struct FAvatarSlotDesc>                  ViewSlotDesc;                                             // 0x01B8(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FNetAvatarSyncData                          NetAvatarData;                                            // 0x0208(0x0020) (BlueprintVisible, Net, Transient, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FAvatarSlotDesc>                     PendingEquipItemLogic;                                    // 0x0228(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAvatarSlotDesc>                     PendingUnEquipItemLogic;                                  // 0x0238(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAvatarEquippedEvent;                                    // 0x0248(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAvatarUnequippedEvent;                                  // 0x0258(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAvatarEquippedFailedEvent;                              // 0x0268(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int                                                itemType;                                                 // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAvatarCustomType                                  CustomType;                                               // 0x027C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               forceClientMode;                                          // 0x027D(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x027E(0x0006) MISSED OFFSET
	bool                                               bEnableRelation;                                          // 0x0284(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnableBPModifyRelation;                                  // 0x0285(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnableBPModifySlotType;                                  // 0x0286(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnableBPModifySlotName;                                  // 0x0287(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                SubSlotStartNum;                                          // 0x0288(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                SubSlotIntervalNum;                                       // 0x028C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0290(0x00B0) MISSED OFFSET
	TArray<int>                                        AlawysHideResetOperation;                                 // 0x0340(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                               bEnableConflictRule;                                      // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0351(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAvatarConflictProcess;                                  // 0x0358(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SlotAvatarComponent");
		return pStaticClass;
	}


	void RemoveAllEquippedItem();
	void OnRep_BodySlotStateChanged();
	void OnLoadAvatarSlotDesc(const struct FAvatarSlotDesc& InSlotDesc);
	void OnHandleUnequipSlot(int InSlotID);
	void OnHandleUnequipItem(const struct FAvatarSyncData& InSyncData);
	void OnHandleEquipItem(const struct FAvatarSyncData& InSyncData);
	void OnDeleteAvatarSlotDesc(const struct FAvatarSlotDesc& InSlotDesc, bool bDelayDelete);
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, const struct FItemDefineID& OldItemID);
	void OnAvatarLogicUnequippedEvent(int InSlotID, const struct FItemDefineID& OldItemID);
	void OnAvatarLogicEquippedEvent(int InSlotID, const struct FItemDefineID& NewItemID, const struct FItemDefineID& OldItemID);
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, const struct FItemDefineID& NewItemID);
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, const struct FItemDefineID& NewItemID, const struct FItemDefineID& OldItemID);
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, const struct FItemDefineID& NewItemID, TArray<int> ConflictSlotID);
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);
	int MakeStateInfo(TArray<int> InSlotDesc);
	struct FAvatarTableData MakeAvatarTableData(const struct FItemDefineID& InItemID);
	bool IsSameAvatarItem(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2);
	bool IsItemHasMutilReplaceMesh(int InSlotID, const struct FItemDefineID& InItemID);
	bool IsItemBlueprintExist(int InSlotID, const struct FItemDefineID& InItemID, bool bWithLog);
	bool IsDefautlAvatarID(const struct FItemDefineID& InItemID);
	bool HasLogicEquipped(const struct FItemDefineID& InItemID);
	bool HandleUnequipSlot(int InSlotID);
	bool HandleUnequipItem(const struct FItemDefineID& InItemID);
	void HandleItemSlotState(TMap<int, int>* OutHideMap, TMap<int, int>* OutReplaceMap);
	void HandleItemResetOrderDesc();
	void HandleItemResetOperation();
	void HandleItemReplaceRelation();
	void HandleItemHideRelation();
	bool HandleEquipItem(const struct FItemDefineID& InItemID, const struct FAvatarCustom& InCustomInfo);
	void GetViewDataStateFor(int InSlotID, TArray<int>* OutHideSlotID, TArray<int>* OutReplaceSlotID);
	void GetViewDataStateBy(int InSlotID, TArray<int>* OutHideSlotID, TArray<int>* OutReplaceSlotID);
	bool GetViewDataItemID(int InSlotID, struct FItemDefineID* OutItemDefineID);
	bool GetViewDataBySlot(int InSlotID, struct FAvatarSlotDesc* OutSlotDesc);
	void GetSyncDataStateFor(int InSlotID, TArray<int>* OutHideSlotID, TArray<int>* OutReplaceSlotID);
	void GetSyncDataStateBy(int InSlotID, TArray<int>* OutHideSlotID, TArray<int>* OutReplaceSlotID);
	bool GetSyncDataItemID(int InSlotID, struct FItemDefineID* OutItemDefineID);
	bool GetSyncDataBySlot(int InSlotID, struct FAvatarSyncData* OutSlotDesc);
	int GetLogicEquippedSlot(const struct FItemDefineID& InItemID);
	int GetItemTemplateID(const struct FItemDefineID& InItemID);
	struct FItemDefineID GetEquippedItemDefineID(int InSlotID);
	int GetAvatarSlotID(int InSubSlotID);
	void ClientPostProcessViewDataMiddle();
	void ClientPostProcessViewDataBefore();
	void ClientPostProcessViewDataAfter();
	void ClientBodySlotStateChanged();
	bool CheckItemConflictRule(const struct FItemDefineID& InItemID, const struct FAvatarTableData& InAvatarData);
	void BuildAvatarItemMap(TMap<int, int>* OutHideMap, TMap<int, int>* OutReplaceMap);
	bool BPClientPostProcessViewDataMiddle();
	bool BPClientPostProcessViewDataBefore();
	bool BPClientPostProcessViewDataAfter();
};


// Class ShadowTrackerExtra.SlotViewAvatarComponent
// 0x02E0 (0x0648 - 0x0368)
class USlotViewAvatarComponent : public USlotAvatarComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0368(0x0010) MISSED OFFSET
	TMap<int, struct FName>                            slotToSocket;                                             // 0x0378(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int, struct FItemDefineID>                    DefaultAvataConfig;                                       // 0x03C8(0x0050) (BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMap<int, struct FSlotMeshDesc>                    LoadedMeshComps;                                          // 0x0418(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int, struct FSlotHandleDesc>                  LoadedHandleDescs;                                        // 0x0468(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAvatarAllMeshLoaded;                                    // 0x04B8(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAvatarMeshEquipped;                                     // 0x04C8(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               EnableMaterialOptimize;                                   // 0x04D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04D9(0x0007) MISSED OFFSET
	TArray<class UItemHandleBase*>                     LoadedAvatarHandlerPool;                                  // 0x04E0(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0xD0];                                      // 0x04F0(0x00D0) MISSED OFFSET
	int                                                AsyncLoadReqID;                                           // 0x05C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                LastAsyncLoadReqID;                                       // 0x05C4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x10];                                      // 0x05C8(0x0010) MISSED OFFSET
	bool                                               bAutonomousLoadRes;                                       // 0x05D8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x7];                                       // 0x05D9(0x0007) MISSED OFFSET
	TArray<class UAvatarEntity*>                       EntityTickList;                                           // 0x05E0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, class UAvatarEntity*>                    AvatarEntityList;                                         // 0x05F0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	class UAvatarEntityFactory*                        EntityFactory;                                            // 0x0640(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SlotViewAvatarComponent");
		return pStaticClass;
	}


	void Streamable_RequestAsyncLoadMeshes(TArray<struct FSoftObjectPath>* InAssetPathList);
	void Streamable_RequestAsyncLoadHandles(TArray<struct FItemDefineID>* InHandleList);
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);
	void SetDefaultEquip(struct FAvatarSyncData* Data);
	void ResetSlotSyncData();
	void RequestSyncLoadMeshes();
	void RequestAsyncLoadMeshes();
	void RequestAsyncLoadHandles();
	void RemoveEquippedAvatar(int InSlotID);
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);
	void ReloadLogicAvatar(int SlotID, ESlotDescDiff ReloadType, bool bReBuild);
	void ReloadAllLogicAvatar(ESlotDescDiff ReloadType);
	void ReloadAllEquippedAvatar(ESlotDescDiff ReloadType);
	bool PutOnEquipmentByResID(int resID);
	bool PutOffEquimentByResID(int resID);
	void PreProcessBeforeLoadMesh();
	void PostProcessAfterLoadMesh();
	void OnSyncLoadMeshesDone();
	void OnRep_BodySlotStateChanged();
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, const struct FItemDefineID& InItemDefineID);
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemID);
	void OnAvatarAllMeshLoaded__DelegateSignature();
	void OnAsyncLoadMeshesDone(int AsyncLoadID);
	void OnAsyncLoadHandlesDone(TArray<class UAvatarHandleBase*> AvatarHandles);
	void OnAllAvatarHandleLoadedDoneSync();
	void OnAllAvatarHandleLoadedDone();
	bool LoadAvatarMeshData(const struct FAvatarSlotDesc& InSlotDesc);
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);
	bool IsMasterMeshSlotID(int InSlotID);
	bool IsItemHasEquipped(int InItemID);
	bool IsDefautlAvatarID(const struct FItemDefineID& InItemID);
	void HandleMaterialDiff(int InSlotID, class UItemHandleBase* InItemHandle);
	EMeshType GetSlotMeshType(int InSlotID, int InSubSlotID, class UItemHandleBase* InItemHandle);
	EMeshType GetMeshType(int SlotID);
	class UMeshComponent* GetMeshCompBySlotID(int InSlotID);
	class UMeshComponent* GetMeshCompBySlot(EAvatarSlotType slotType);
	TArray<class UItemHandleBase*> GetLoadedItemHandlePool();
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);
	class UAvatarEntityFactory* GetEntityFactory();
	class UItemHandleBase* GetAvatarHandleExternal(const struct FItemDefineID& InItemID, bool bDirectCreate);
	class UAvatarEntity* GetAvatarEntity(int SlotID, const struct FName& Option, int subSlotID);
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);
	bool DeleteAvatarMeshData(int InSlotID);
	class UItemHandleBase* CreateAvatarHandle(const struct FItemDefineID& InItemID, class UObject* Outer);
	class UAvatarEntity* CreateAvatarEntity(int SlotID, int subSlotID);
	bool CheckSlotInfo(int InSlotID, bool* isHide, bool* isReplace, bool* bVisable, struct FItemDefineID* OutItemID);
	void BuildLoadHandleList(TArray<struct FItemDefineID>* RequestItemList);
	EMeshType BPGetSlotMeshType(int InSlotID, int InSubSlotID, class UItemHandleBase* InItemHandle);
	void BPCreateAvatarCustomHandle(int SlotID, int ItemID, const struct FAvatarCustom& InCostomInfo, TArray<class UAvatarCustomBase*>* OutCustomHandle);
};


// Class ShadowTrackerExtra.CharacterAvatarComponent2
// 0x0438 (0x0A80 - 0x0648)
class UCharacterAvatarComponent2 : public USlotViewAvatarComponent
{
public:
	unsigned char                                      UnknownData00[0xAC];                                      // 0x0648(0x00AC) MISSED OFFSET
	int                                                gender;                                                   // 0x06F4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAvatarHeadVisible;                                      // 0x06F8(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAvatarEquipped;                                         // 0x0708(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0718(0x0010) MISSED OFFSET
	int                                                HeadAvatarID;                                             // 0x0728(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                PreHeadAvatarID;                                          // 0x072C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0730(0x0018) MISSED OFFSET
	bool                                               forceLodMode;                                             // 0x0748(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableCameraModeLODControll;                             // 0x0749(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x6];                                       // 0x074A(0x0006) MISSED OFFSET
	unsigned char                                      UnknownData04[0x50];                                      // 0x074A(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.CharacterAvatarComponent2.HadHideBoneNames
	TArray<EAvatarSlotType>                            OpenResetHideBone;                                        // 0x07A0(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<EAvatarSlotType, struct FAvatarHideBonesDesc> AvatarHideBoneMap;                                        // 0x07B0(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int>                                        ignoreSlots;                                              // 0x0800(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int                                                WholeBodyModelID;                                         // 0x0810(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurrentClothID;                                           // 0x0814(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        NeedRemoveSlot;                                           // 0x0818(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        LastSuitItems;                                            // 0x0828(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bWearingSuit;                                             // 0x0838(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0839(0x0007) MISSED OFFSET
	TMap<EAvatarSlotType, struct FName>                ClothMaterialColorName;                                   // 0x0840(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EAvatarSlotType, struct FName>                ClothMaterialSkinName;                                    // 0x0890(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EAvatarSlotType, class UBackpackAvatarItemColor*> RunningColorHandle;                                       // 0x08E0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EAvatarSlotType, class UBackpackAvatarItemPattern*> RunningPatternHandle;                                     // 0x0930(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, struct FAvatarEffectGroup>               LoadedEffectGroup;                                        // 0x0980(0x0050) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAvatarAttachEquipped;                                   // 0x09D0(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<int, struct FAvatarAttachMeshGroup>           LoadedAttachMeshGroup;                                    // 0x09E0(0x0050) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int                                                ConfigMinDistFromMainChar;                                // 0x0A30(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ConfigMaxDistFromMainChar;                                // 0x0A34(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ConfigBaseNonRenderedUpdateRate;                          // 0x0A38(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0A3C(0x0004) MISSED OFFSET
	TArray<float>                                      ConfigBaseVisibleDistanceFactorThesholds;                 // 0x0A40(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FAvatarAttachMeshFrameSkipMap>       ConfigLODToFrameSkipMap;                                  // 0x0A50(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             FakeHeadPath;                                             // 0x0A60(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnableEquipAvatarPendant;                                 // 0x0A78(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bConsiderDefaultReplaceModel;                             // 0x0A7C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAllowSetInvincible;                                      // 0x0A7D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x2];                                       // 0x0A7E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CharacterAvatarComponent2");
		return pStaticClass;
	}


	int TypeToInt(EAvatarSlotType InSlotType);
	void Streamable_RequestAsyncLoadHandles(TArray<struct FItemDefineID>* InHandleList);
	bool SetSkinMaterial(int SlotID, const struct FItemDefineID& DefineID, class UBackpackAvatarHandle* InAvatarHandle);
	void SetNormalMaterial(const struct FMeshPackage& meshPack, class UMeshComponent* meshComp, int SlotID, class UBackpackAvatarHandle* InAvatarHandle);
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);
	void SetIgnoreSlots(class UBackpackAvatarHandle* avatar);
	bool SetBodySuitsMaterial(const struct FMeshPackage& meshPack, class UMeshComponent* meshComp, class UBackpackAvatarHandle* InAvatarHandle);
	void SetAvatarVisibility(EAvatarSlotType slotType, bool visible, bool IsForCE);
	void SetAvatarGender(int AGender);
	void SetAvatarForceLOD(EAvatarSlotType slotType, int LODLevel);
	void SetAllMeshCharMode(bool bMainChar);
	void ResetAnimDynamicsByMeshComp(class UMeshComponent* meshComp);
	void ResetAllAnimDynamics();
	void RequestSyncLoadHandles(TArray<struct FItemDefineID>* InHandleList);
	void RemoveClothParticleEffect(int SlotID);
	void RemoveAttachMesh(int SlotID);
	void ReloadAllEquippedAvatar(ESlotDescDiff ReloadType);
	void ProcessClothSuits();
	void ProcessAvatarRectify();
	void PreProcessBeforeLoadMesh();
	void PostProcessAfterLoadMesh();
	void OnSyncLoadBattleHandlesDone(TArray<class UBattleItemHandleBase*> AvatarHandles);
	void OnRep_BodySlotStateChanged();
	void OnLoadAvatarSlotDesc(const struct FAvatarSlotDesc& InSlotDesc);
	void OnDeleteAvatarSlotDesc(const struct FAvatarSlotDesc& InSlotDesc, bool bDelayDelete);
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, const struct FItemDefineID& InItemDefineID);
	void OnAvatarHeadVisible__DelegateSignature(int ItemID);
	void OnAvatarEquippedCall(EAvatarSlotType slotType, bool bEquipped, int ItemID);
	void OnAvatarEquipped__DelegateSignature(EAvatarSlotType slotType, bool isEquipped, int ItemID);
	void OnAvatarAttachEquipped__DelegateSignature(EAvatarSlotType slotType, bool isEquipped, int ItemID);
	void OnAsyncLoadMeshesDone(int AsyncLoadID);
	void OnAsyncLoadBattleHandlesDone(TArray<class UBattleItemHandleBase*> AvatarHandles);
	bool LoadAvatarMeshData(const struct FAvatarSlotDesc& InSlotDesc);
	bool IsUseDefaultReplaceModel(int InSlotID, const struct FItemDefineID& InItemDefineID, class UBackpackAvatarHandle* Handle);
	bool IsTeammate();
	bool IsSameAvatarItem(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2);
	bool IsSameAvatarHandle(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2);
	bool IsMasterMeshSlotID(int InSlotID);
	bool IsItemBlueprintExist(int InSlotID, const struct FItemDefineID& InItemID, bool bWithLog);
	EAvatarSlotType IntToType(int InSlotID);
	void InitMasterComponent();
	void Initialize();
	void InitialAvatarParam(int AGender);
	void InitDefaultMesh(class UBattleItemHandleBase* Handle);
	void InitDefaultAvatarByResID(int AGender, int Head, int hair);
	bool InitBodyMeshByHead(const struct FItemDefineID& InItemID, class UBackpackAvatarHandle* InAvatarHandle);
	bool HandleUnEquipCloth(const struct FItemDefineID& InItemID);
	void HandleHeadEquipped(class UBattleItemHandleBase* Handle);
	void HandleEquipInitalCloth(class UBattleItemHandleBase* InItemHandle);
	bool HandleEquipCloth(const struct FItemDefineID& InItemID, class UBackpackAvatarHandle* InAvatarHandle);
	class UStaticMesh* GetStaticMesh(const struct FMeshPackage& meshPack);
	EMeshType GetSlotMeshType(int InSlotID, int InSubSlotID, class UItemHandleBase* InItemHandle);
	class USkeletalMesh* GetSkeletalMesh(const struct FMeshPackage& meshPack);
	class UMeshComponent* GetMeshCompBySlot(EAvatarSlotType slotType);
	class UMaterialInstanceDynamic* GetMaterialBySlotName(EAvatarSlotType InSlotType, const struct FName& SlotName);
	class UMaterialInstance* GetMaterial(const struct FMeshPackage& meshPack);
	class UBackpackAvatarHandle* GetLoadedHandle(int SlotID);
	int GetEquipmentSkinItemID(int InItemID);
	bool GetEquimentMeshBySlot(int Slot, struct FMeshData* meshPack);
	TArray<int> GetDefaultBodyItemIDList();
	struct FName GetClothMaterialSkinName(EAvatarSlotType slotType, bool bSuit);
	struct FName GetClothMaterialColorName(EAvatarSlotType slotType, bool bSuit);
	class UMaterialInterface* GetCharSkinMaterial(EAvatarSlotType slotType, const struct FItemDefineID& DefineID, class UBackpackAvatarHandle* InAvatarHandle);
	class UBackpackAvatarItemPattern* GetAvatarItemPattern(EAvatarSlotType InSlotType, int InPatternID, int InNumID);
	class UBackpackAvatarItemColor* GetAvatarItemColor(EAvatarSlotType InSlotType, int InColorID);
	bool GetAttachMeshResRef(const struct FAvatarAttachMeshData& meshPack, struct FSoftObjectPath* OutAssetRef);
	bool GenerateClientDefaultAvatar(class UBattleItemHandleBase* InAvatarHandle);
	bool EnableEquipAvatarPendantFeature();
	bool DeleteAvatarMeshData(int InSlotID);
	class UBackpackAvatarItemPattern* CreateAvatarItemPattern(EAvatarSlotType InSlotType, int InPatternID);
	class UBackpackAvatarItemColor* CreateAvatarItemColor(EAvatarSlotType InSlotType, int InColorID);
	class UItemHandleBase* CreateAvatarHandle(const struct FItemDefineID& InItemID, class UObject* Outer);
	void ClearAvatarHandlerFromPool(const struct FItemDefineID& InItemID);
	bool CheckShouldEquipDefaultItem(int InSlotID);
	bool CheckIsHiddenByOther(int InItemResID);
	void AsyncLoadClothParticleEffect(int SlotID, class UBackpackAvatarHandle* Handle);
	void AsyncLoadAttachMesh(int SlotID, class UBackpackAvatarHandle* Handle);
	void ApplyMeshCompCollision(int SlotID);
	bool ApplyMaterial(class UMeshComponent* InMeshComponent, class UItemHandleBase* InItemHandle);
	void ApplyClothParticleEffect(int SlotID, class UBackpackAvatarHandle* Handle);
	void ApplyAvatarCustomInfo(int InSlotID, class UMaterialInstanceDynamic* InMatDynamic, class UBackpackAvatarItemColor* InColorHandle, class UBackpackAvatarItemPattern* InPatternHandle);
	void ApplyAttachMesh(int SlotID, class UBackpackAvatarHandle* Handle);
	void AddAvatarHandleToPool(class UItemHandleBase* InHandle);
};


// Class ShadowTrackerExtra.CharacterAvatarEntity
// 0x0028 (0x0218 - 0x01F0)
class UCharacterAvatarEntity : public UAvatarEntity
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x01F0(0x0001) MISSED OFFSET
	bool                                               PendingRenderFlag;                                        // 0x01F1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x2];                                       // 0x01F2(0x0002) MISSED OFFSET
	int                                                EquipedPendantSlotID;                                     // 0x01F4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                EquipedDefaultPendantSlotID;                              // 0x01F8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET
	TArray<struct FName>                               NeedUnHideBone;                                           // 0x0200(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                               ForceHide;                                                // 0x0210(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0211(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CharacterAvatarEntity");
		return pStaticClass;
	}


	void SetSlotMeshByReplacedMark(bool ReplacedMark);
	bool SetSlotHidden(int Slot, int DoHiddenSlot, bool ShouldHide);
	void ScaledMeshBone(bool ScaledMark);
	bool ReplaceTargetSlotMesh(int SourceSlot, int DestSlot, bool ReplaceMark);
	void RenderEntity(struct FSoftObjectPath* SoftPath);
	void RefreshVisable();
	bool PutOnEquipmentLogic(class UBattleItemHandleBase* ItemHandle);
	void PutOnDefaultEquipment(EAvatarSlotType slotType);
	void GetReplacingSlots(TArray<int>* DoReplaceSlots);
	EMeshType GetMeshType();
	struct FItemDefineID GetDefineID();
	void EnterRenderPipeline();
	void EnterLogicPipeline();
	void DoPostLogic();
	void DealSlotHidden(bool ShouldHide);
	void DealSelfReplaced();
	void DealSelfHide();
	void DealHideBone();
	bool CreateAndApplyResource(struct FSoftObjectPath* SoftPath);
	void ClearLogicExecutedFlag();
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);
	void ClearEquipmentLogic(bool putDefault);
	void ClearEntity(bool ForceClear);
	void CheckPendantForEquipmentPutOn(class UBackpackAvatarHandle* InItemHandle);
	void CheckPendantForEquipmentPutOff();
	void CheckDefaultPendantForEquipmentPutOn(class UBackpackAvatarHandle* InItemHandle);
	void ApplyMeshCompCollision();
	void ApplyAnimation();
	void ApplaySocketRelativeTransform(class UBackpackAvatarHandle* AvatarHandle);
};


// Class ShadowTrackerExtra.CharacterParachuteComponent
// 0x0118 (0x0228 - 0x0110)
class UCharacterParachuteComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	float                                              CurrentDiveRate;                                          // 0x0118(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x10];                                      // 0x011C(0x0010) MISSED OFFSET
	float                                              FreeFall_InputTriggerThreshold;                           // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_AcceFall;                                        // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_MaxFreeFallSpeed;                                // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_MaxFallSpeedChangeAccel;                         // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_AcceForward;                                     // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_MaxForwardSpeed;                                 // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_MaxForwardExtraFallSpeed;                        // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_AcceRight;                                       // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_MaxRightSpeed;                                   // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_MaxRightExtraFallSpeed;                          // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_MaxPitchForwardAngle;                            // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_MaxPitchBackAngle;                               // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_RotationYawInterpSpeed;                          // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_RotationPitchInterpSpeed;                        // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_MinDiveAngle;                                    // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_DiveExtraAcceFall;                               // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeFall_MaxDiveExtraFallSpeed;                           // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bOpened_EnableInputMode8Dirs;                             // 0x0170(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0171(0x0003) MISSED OFFSET
	float                                              Opened_AcceFall;                                          // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxFreeFallSpeed;                                  // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_AcceForward;                                       // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxForwardSpeed;                                   // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxBackwardSpeed;                                  // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxForwardExtraFallSpeed;                          // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxBackExtraFallSpeed;                             // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_GlidingSpeedRemainPercent;                         // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_AcceRight;                                         // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxRightSpeed;                                     // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxLeftRightExtraFallSpeed;                        // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxRollAngle;                                      // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxPitchForwardAngle;                              // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxPitchBackAngle;                                 // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_MaxYawAngleSpeed;                                  // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Opened_RotationInterpSpeed;                               // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CurrentFallSpeed;                                         // 0x01B4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AllowMaxDiatanceSqAtServer;                               // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsPauseTick;                                             // 0x01BC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x23];                                      // 0x01BD(0x0023) MISSED OFFSET
	float                                              FollowerDist;                                             // 0x01E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReletiveStaticNearbyDistanceSquare;                       // 0x01E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x40];                                      // 0x01E8(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CharacterParachuteComponent");
		return pStaticClass;
	}


	bool VerifyClientTimeStamp(float TimeStamp);
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, TEnumAsByte<EParachuteState> State, const struct FRotator& CameraRotation);
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, TEnumAsByte<EParachuteState> State, const struct FRotator& CameraRotation);
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);
	void UpdateFreeFallRotation(const struct FRotator& CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, const struct FRotator& CameraRotation);
	void StopParachute();
	void StartParachute();
	void Set_UseServerAuthorize(bool InUseServerAuthor);
	void ResetVelocity();
	void PostNetReceiveNewState();
	void OnPreReconnectOnServer();
	void InvalidateAdjustFollowerLocation();
	float GetReplicatedRightInput();
	float GetReplicatedForwardInput();
	struct FVector GetParachuteVelocity();
	void ClearParachuteStatusCache();
	struct FVector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);
	struct FVector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);
	void AdjustFollowerLocation();
};


// Class ShadowTrackerExtra.CharacterPendantEntity
// 0x0000 (0x0218 - 0x0218)
class UCharacterPendantEntity : public UCharacterAvatarEntity
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CharacterPendantEntity");
		return pStaticClass;
	}


	void TickEntity();
	void SetAttachedEntityVisibility(bool InAttachedEntityVisibility);
	void OnPostRender();
	EAvatarSlotType GetPendantSlotType();
	EMeshType GetMeshType();
	EAvatarSlotType GetAttachPartSlotType();
	void EnterRenderPipeline();
	void EnterLogicPipeline();
	void ClearEntity(bool ForceClear);
	void ApplaySocketRelativeTransform(class UBackpackAvatarHandle* AvatarHandle);
};


// Class ShadowTrackerExtra.WeaponManagerComponent
// 0x04E0 (0x05F0 - 0x0110)
class UWeaponManagerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	TMap<struct FName, struct FName>                   LogicSocketToWeaponAttachSocketMap;                       // 0x0118(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FName                                       LeftLogicSocketName;                                      // 0x0168(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       RightLogicSocketName;                                     // 0x0170(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FName>                   LogicSocketToWeaponAttachSocketMapNoBag;                  // 0x0178(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct FName, TEnumAsByte<ESurviveWeaponPropSlot>> LogicSocketToPropSlotMap;                                 // 0x01C8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0218(0x0050) UNKNOWN PROPERTY: MapProperty ShadowTrackerExtra.WeaponManagerComponent.UGrenadeLogicSocketToWeaponClassMap
	TMap<struct FName, class UClass*>                  GrenadeLogicSocketToWeaponClassMap;                       // 0x0268(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                              CheckHasAnyGrenadeTimerSetting;                           // 0x02B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	struct FName                                       CurUseWeaponLogicSocket;                                  // 0x02C0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       CurUseShieldWeaponLogicSocket;                            // 0x02C8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSwitching;                                             // 0x02D0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x02D1(0x0007) MISSED OFFSET
	struct FName                                       LastUseNoneGrenadeLogicSlot;                              // 0x02D8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       LastUseNoneMeleeLogicSlot;                                // 0x02E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       LastUseLogicSlot;                                         // 0x02E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUIHasBoundDelegate;                                      // 0x02F0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bClientHasFinishedHandleSpawnWeapon;                      // 0x02F1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x6];                                       // 0x02F2(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    LocalBackpackCurerrentWeaponFinishDelegate;               // 0x02F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ChangeCurrentUsingWeaponDelegate;                         // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    ChangeInventoryDataDelegate;                              // 0x0318(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    LocalEquipWeaponFromBackpackFinishedDelegate;             // 0x0328(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    SwapWeaponByPropSlotFinishedDelegate;                     // 0x0338(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x20];                                      // 0x0348(0x0020) MISSED OFFSET
	TMap<struct FName, class ASTExtraWeapon*>          InventoryData;                                            // 0x0368(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<struct FName, struct FItemDefineID>           GrenadeLogicSlotAndDefineIDData;                          // 0x03B8(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class ASTExtraWeapon*>                      BackpackPistolList;                                       // 0x0408(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0418(0x0008) MISSED OFFSET
	TArray<struct FItemDefineID>                       TargetCreateArray;                                        // 0x0420(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0430(0x0008) MISSED OFFSET
	TArray<struct FSpawnAndBackpackWeaponReplicatedData> WeaponCreatePool;                                         // 0x0438(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FWeaponSystemDataOnSimulateClient           WeaponSystemDataOnSimulateClientSlot1;                    // 0x0448(0x0038) (BlueprintVisible, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWeaponSystemDataOnSimulateClient           WeaponSystemDataOnSimulateClientSlot2;                    // 0x0480(0x0038) (BlueprintVisible, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWeaponSystemDataOnSimulateClient           WeaponSystemDataOnSimulateClientSubSlot;                  // 0x04B8(0x0038) (BlueprintVisible, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWeaponSystemDataOnSimulateClient           WeaponSystemDataOnSimulateClientMeleeSlot;                // 0x04F0(0x0038) (BlueprintVisible, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWeaponSystemDataOnSimulateClient           WeaponSystemDataOnSimulateClientHandPropSlot;             // 0x0528(0x0038) (BlueprintVisible, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0560(0x0008) MISSED OFFSET
	class ASTExtraWeapon*                              CurrentWeaponReplicated;                                  // 0x0568(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraWeapon*                              TemporaryWeaponReplicated;                                // 0x0570(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraWeapon*                              CurrentWeaponSimulate;                                    // 0x0578(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraWeapon*                              CurrentShieldWeaponReplicated;                            // 0x0580(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraWeapon*                              CurrentShieldWeaponSimulate;                              // 0x0588(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData09[0x38];                                      // 0x0590(0x0038) MISSED OFFSET
	class ASTExtraWeapon*                              OldGrenadeWeaponNeedDestroy;                              // 0x05C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData10[0x10];                                      // 0x05D0(0x0010) MISSED OFFSET
	struct FString                                     MainWeaponTableName;                                      // 0x05E0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponManagerComponent");
		return pStaticClass;
	}


	void WeaponSystemDataChangedDelegate__DelegateSignature(struct FWeaponSystemDataOnSimulateClient* TargetChangeSlot);
	void UpdateOwnerClientCreateWeapon();
	void SwitchWeaponBySlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot, bool bUseAnimation);
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(TEnumAsByte<ESurviveWeaponPropSlot> Slot1, TEnumAsByte<ESurviveWeaponPropSlot> Slot2);
	void SimulatedWeaponChangedDelegate__DelegateSignature();
	void SetCurrentTemporaryWeapon(class ASTExtraWeapon* InVehicleWeapon, bool IsServerCall);
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();
	void OnRep_TemporaryWeaponReplicated(class ASTExtraWeapon* LastVehicleWeapon);
	void OnRep_CurrentWeaponReplicated();
	void OnRep_CurrentWeaponLogicSocket();
	void OnRep_CurrentShieldWeaponReplicated();
	void OnReconnectOnServer();
	void OnReconnectOnClient();
	void LogInventoryDataInfo();
	bool LocalSwapWeaponByPropSlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot1, TEnumAsByte<ESurviveWeaponPropSlot> Slot2, bool bForce);
	void LocalForceFinishSwitchWeapon();
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();
	void LocalEquipWeaponFromBackpackFinishedCallback();
	void LocalBackpackCurerrentWeaponFinishedCallback();
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();
	bool IsWeaponSpawnDataCacheIsEmpty();
	bool IsCreatingWeaponOnServer();
	static void InitializeTable(const struct FString& MainWeaponTableName);
	struct FName GetShieldWeaponSlot();
	class ASTExtraWeapon* GetShieldWeapon();
	TEnumAsByte<ESurviveWeaponPropSlot> GetPropSlotByLogicSocket(const struct FName& LogicSocket);
	static struct FMainWeaponTableStruct GetMainWeaponTableRow(int ID);
	struct FName GetLogicSocketBySlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	class ASTExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	class ASTExtraWeapon* GetInventoryWeaponByPropSlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	class ASTExtraWeapon* GetInventoryWeaponByLogicSocket(const struct FName& LogicSocket);
	class ASTExtraWeapon* GetInventoryWeaponByDefineID(const struct FItemDefineID& DefineID);
	struct FName GetGrenadeSpecificSlotNameByWeapon(class ASTExtraWeapon* Weapon);
	struct FItemDefineID GetGrenadeDefindIDBySlot(const struct FName& LogicSlot);
	class ASTExtraWeapon* GetCurrentUsingWeapon();
	TEnumAsByte<ESurviveWeaponPropSlot> GetCurrentUsingPropSlot();
	struct FName GetCurrentUsingLogicSocketOnServer();
	struct FName GetCurrentUsingLogicSocket();
	class ASTExtraWeapon* GetCurrentTemporaryWeapon();
	int GetBagLevel();
	TArray<class ASTExtraWeapon*> GetAllInventoryWeaponList(bool bForceUseMapData);
	void ForceBroadcastChangeAllInventoryDataEvent();
	void EnableAllBroadcast(bool bEnable);
	void DropWeapon(class ASTExtraWeapon* Weapon, EBattleItemDropReason Reason);
	void DeleteGrenadeSlotAndDefindID(const struct FName& LogicSlot);
	void DebugReconnectToClientOnServer();
	void DebugDisconnetToServerOnClient();
	void ChangeInventoryDataDelegate__DelegateSignature(TEnumAsByte<ESurviveWeaponPropSlot> TargetChangeSlot, TEnumAsByte<EWeaponChangeInvenroryDataType> EChangeType);
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(TEnumAsByte<ESurviveWeaponPropSlot> TargetChangeSlot);
	void AddOrSetGrenadeSlotAndDefindID(const struct FName& LogicSlot, const struct FItemDefineID& ID);
};


// Class ShadowTrackerExtra.CharacterWeaponManagerComponent
// 0x0058 (0x0648 - 0x05F0)
class UCharacterWeaponManagerComponent : public UWeaponManagerComponent
{
public:
	float                                              AttachCheckInterval;                                      // 0x05F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AttachCheckDistance;                                      // 0x05F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RefreshUIIntervalAfterReconnect;                          // 0x05F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RefreshUITimesAfterReconnect;                             // 0x05FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerCharacter*                     OwnerCharacter;                                           // 0x0600(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0608(0x0018) MISSED OFFSET
	TArray<struct FWeaponReconnectReplicateDataWrapper> PreWeaponReconnectReplicateDataWrapperList;               // 0x0620(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FWeaponReconnectReplicateDataWrapper> WeaponReconnectReplicateDataWrapperList;                  // 0x0630(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0640(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CharacterWeaponManagerComponent");
		return pStaticClass;
	}


	void UpdateDataWhenBagChangedOnServer(const struct FItemDefineID& DefineID, EBattleItemOperationType OperationType, unsigned char Reason);
	void UpdateDataWhenBagChangedOnAutonomous();
	void OnRecoverOnServer();
	void OnReconnectOnServer();
	void OnReconnectOnClient();
	void OnDisconnectToClientOnServer();
	int GetBagLevel();
};


// Class ShadowTrackerExtra.ChasingBar
// 0x00A0 (0x0448 - 0x03A8)
class UChasingBar : public UUAEUserWidget
{
public:
	float                                              ProgressBarCanvasXValue;                                  // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsNeedClearProgressBar;                                   // 0x03AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03AD(0x0003) MISSED OFFSET
	float                                              BlueCircleAppearanceTime;                                 // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlueCircleMovingCountDownDuration;                        // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlueCircleRunStartTime;                                   // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlueCircleRunDuration;                                    // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BlueCircleChasingPercent;                                 // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProgressBarLength;                                        // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     OriginBlueCircle;                                         // 0x03C8(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CleaningTime;                                             // 0x03D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraGameStateBase*                       STEGameStateBase;                                         // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    STEPlayerController;                                      // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FText                                       BlueCircleMovingCountDownText;                            // 0x03E8(0x0018) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                              PlayerEscapeProgress;                                     // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsPlayerOutBlueCircleCurrently;                           // 0x0404(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0405(0x0003) MISSED OFFSET
	class UImage*                                      PlayerIcon;                                               // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                                  TextBlock_Dist;                                           // 0x0410(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlayerPositionC;                                          // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsRefreshCircleDistanceC;                                 // 0x041C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x041D(0x0003) MISSED OFFSET
	struct FText                                       CircleDistanceTextFormat;                                 // 0x0420(0x0018) (Edit, NativeAccessSpecifierPublic)
	bool                                               IsTickWorldTime;                                          // 0x0438(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0xF];                                       // 0x0439(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ChasingBar");
		return pStaticClass;
	}


	void UpdateCountDownText();
	void ShowCircleDistanceC();
	void RefreshWorldTimeBP();
	void PlayerEscapePercentC();
	void OnPlayerEnterExitBlueCircle();
	void OnCountDownTextInvisible();
	bool IsPlayerOutBlueCircle(class APawn* CurPawn);
	bool IsPlayerInWhiteCircle(class APawn* CurPawn);
	bool IsBlueCircleMoving();
	bool IsBlueCircleAppearAndCountDown();
	void ClearProgressBar();
	void CleanTheProgressBar();
	void CheckToCleanProgress();
	float CalPlayerEscapePercent();
	void BlueCirclePreMoveCountDown();
};


// Class ShadowTrackerExtra.ChatComponent
// 0x0280 (0x0390 - 0x0110)
class UChatComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0110(0x0004) MISSED OFFSET
	int                                                end_time;                                                 // 0x0114(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     Reason;                                                   // 0x0118(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int>                                        audioChat;                                                // 0x0128(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FQuickChatIDAndAudio>                chatQuickList;                                            // 0x0138(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuickChatIDAndAudio>                TurnplateChatQuickList;                                   // 0x0148(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuickChatOption>                    allChatOption;                                            // 0x0158(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FString                                     TeammateColor;                                            // 0x0168(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     MyColor;                                                  // 0x0178(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int, struct FString>                          ActorNameList;                                            // 0x0188(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FString, struct FIngameFriendChat>     FriendChatInfo;                                           // 0x01D8(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuickChatFlag>                      ChatFlagList;                                             // 0x0228(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              SendMsgCD;                                                // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              lastShowChatTime;                                         // 0x023C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShowChatDuration;                                         // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0244(0x0004) MISSED OFFSET
	TArray<struct FQuickGroundFlag>                    groundFlags;                                              // 0x0248(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FString                                     EndChar;                                                  // 0x0258(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ColonChar;                                                // 0x0268(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int, int>                                     TextID2AudioID;                                           // 0x0278(0x0050) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInGameFilterChatMsg>                ChatFilterList;                                           // 0x02C8(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPickupManagerComponent*                     PickupMgrComp;                                            // 0x02D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x38];                                      // 0x02E0(0x0038) MISSED OFFSET
	struct FString                                     CongregationPlayerName;                                   // 0x0318(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     CongregationPlayerKey;                                    // 0x0328(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x58];                                      // 0x0338(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ChatComponent");
		return pStaticClass;
	}


	void UpdateQuickItemText(int msgID, int resID, int alternateMsgID);
	void ShowQuickPanel(bool bShow);
	void ServerSendMsg(const struct FInGameChatMsg& msgItem);
	void SendDirtyFilterContent(const struct FString& Content);
	void SendDirtyFilter(const struct FString& Name, const struct FString& Content, bool isMe);
	void OnInviteNextBattle(const struct FString& gid, const struct FString& Name);
	void OnFilterFinish(const struct FString& filterText);
	void NotifyFriendReplyInvite(const struct FString& str_gid, const struct FString& sender_name, bool bReply);
	void NotifyFriendInvite(const struct FString& str_gid, const struct FString& sender_name);
	void NotifyFriendChat(const struct FString& str_gid, const struct FString& sender_name, const struct FString& chat_content, bool self_msg);
	void LoadBankAndPlay(const struct FString& BankName, const struct FString& EventName);
	void InviteNextBattleReply(const struct FString& gid, const struct FString& Name, bool bReply);
	void FindTextIDByAudioID();
	void CloseChatHistoryList();
	void ClientReceiveMsg(const struct FInGameChatMsg& msgItem, bool isMe);
	void AddQuickAudio(class UAkAudioEvent* audio, int chatID);
	void AddOneMsgToUI1(const struct FString& Name, const struct FString& Content, int msgID, int audioID, bool isMe, bool playSound);
	void AddFriendChat(const struct FString& gid, const struct FString& Name, const struct FString& Content, bool isSelf);
};


// Class ShadowTrackerExtra.CircleFloatInterface
// 0x0000 (0x0028 - 0x0028)
class UCircleFloatInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CircleFloatInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.CircleMgrComponent
// 0x00C0 (0x0228 - 0x0168)
class UCircleMgrComponent : public UTimerRegistComponent
{
public:
	TArray<struct FCirCleCfg>                          CircleConfigs;                                            // 0x0168(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              DestinyThreshold;                                         // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RoundNum;                                                 // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableDebugMultiCircle;                                  // 0x0180(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0181(0x001F) MISSED OFFSET
	class AActor*                                      ContainActor;                                             // 0x01A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x01A8(0x0010) MISSED OFFSET
	bool                                               bCircleCenterInExtend;                                    // 0x01B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x67];                                      // 0x01B9(0x0067) MISSED OFFSET
	class ACirleAreaVolume*                            BindedCirleAreaVolume;                                    // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CircleMgrComponent");
		return pStaticClass;
	}


	void SetGMCicleTime(float CDTime, float LastTime);
	void RetriveCircleInfo(struct FReConnectGameStateInfo* CurInfo);
};


// Class ShadowTrackerExtra.CirleAreaVolume
// 0x0038 (0x03C8 - 0x0390)
class ACirleAreaVolume : public AActor
{
public:
	class UBoxComponent*                               CircleBoxArea;                                            // 0x0390(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0398(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CirleAreaVolume");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ClimbingProxyGenerator
// 0x0000 (0x02C0 - 0x02C0)
class UClimbingProxyGenerator : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ClimbingProxyGenerator");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ClothAvatarUtils
// 0x0000 (0x0028 - 0x0028)
class UClothAvatarUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ClothAvatarUtils");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ClothAvatarBPUtils
// 0x0050 (0x0078 - 0x0028)
class UClothAvatarBPUtils : public UObject
{
public:
	TMap<int, struct FMeshPackage>                     DefaultCutHairConfig;                                     // 0x0028(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ClothAvatarBPUtils");
		return pStaticClass;
	}


	bool GetDefaultReplaceMeshPack(class UBackpackAvatarHandle* InAvatarHandle, struct FMeshPackage* OutMeshPack);
};


// Class ShadowTrackerExtra.CollisionUtils
// 0x0000 (0x0028 - 0x0028)
class UCollisionUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CollisionUtils");
		return pStaticClass;
	}


	static bool IsSphereInToWater(const struct FVector& CenterPos, float SphereRadius);
	static TArray<class AActor*> GetCharactersInSphere(class UWorld* World, const struct FVector& CenterPos, float SphereRadius);
};


// Class ShadowTrackerExtra.CommonBtnComponent
// 0x0010 (0x0120 - 0x0110)
class UCommonBtnComponent : public UActorComponent
{
public:
	class APUBGDoor*                                   TriggeredDoor;                                            // 0x0110(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APUBGDoor*                                   TriggeredDoorAux;                                         // 0x0118(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CommonBtnComponent");
		return pStaticClass;
	}


	void SetAutoOpenDoorMode(int Mode);
	void SetAutoOpenDoorEnable(bool bEnable);
	void RPC_Server_DoorState(class APUBGDoor* actionDoor, int ClientDoorState);
	void RPC_Client_DoorState(class APUBGDoor* actionDoor, int doorState);
	bool IsAimingExtraDoor(class APUBGDoor* actionDoor);
	class APUBGDoor* GetPriorityDoor();
	void DoorRequireRPC(class APUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);
	void BP_SimulateUIClick(bool bExtraDoor);
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);
};


// Class ShadowTrackerExtra.MapWidgetBase
// 0x0080 (0x0428 - 0x03A8)
class UMapWidgetBase : public UUAEUserWidget
{
public:
	class UCanvasPanel*                                m_pMarkRoot;                                              // 0x03A8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int, class UMapUIMarkBaseWidget*>             AllUIMarks;                                               // 0x03B0(0x0050) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                     LandscapeCenterCpp;                                       // 0x0400(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LevelToMapScaleCpp;                                       // 0x040C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              RotateAngleCpp;                                           // 0x0410(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MapScaleCpp;                                              // 0x0414(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   MapImageSizeCpp;                                          // 0x0418(0x0008) (BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TEnumAsByte<EMapWidgetType>                        MapWidgetType;                                            // 0x0420(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               isMarkScaleAsDirty;                                       // 0x0421(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0422(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MapWidgetBase");
		return pStaticClass;
	}


	void SetupUIMarkRoot();
	void OnUpdateUIMarks();
};


// Class ShadowTrackerExtra.CommonMapWidget
// 0x0208 (0x0630 - 0x0428)
class UCommonMapWidget : public UMapWidgetBase
{
public:
	float                                              MapImageExtentC;                                          // 0x0428(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MapWindowExtentC;                                         // 0x042C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                             PlayerInfoBPArrayC;                                       // 0x0430(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                                   MapAdjustOffsetC;                                         // 0x0440(0x0008) (BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                      Image_CarTips;                                            // 0x0448(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                     Border_RingFX;                                            // 0x0450(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                     Border_FullRing;                                          // 0x0458(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                             PlayerInfoRotWidgetArrayC;                                // 0x0460(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                              ImageBlueCircleScale;                                     // 0x0470(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LevelToMapScaleC;                                         // 0x0474(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     LevelLandScapeCenterC;                                    // 0x0478(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	TArray<class UUserWidget*>                         AirdropBoxIconItems;                                      // 0x0488(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UUserWidget*>                         EnemiesIconItems;                                         // 0x0498(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMapRealTimeInfo                            MapRealTimeInfoC;                                         // 0x04A8(0x00A0) (BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMapRealTimeInfo                            CacheMapRealTimeInfoC;                                    // 0x0548(0x00A0) (BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UImage*                                      Image_AirIcon;                                            // 0x05E8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                      Image_PassedRoute;                                        // 0x05F0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                      Image_LineUV;                                             // 0x05F8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int>                                        OutOfRangeTeammateIndexArray;                             // 0x0600(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0610(0x000C) MISSED OFFSET
	float                                              UpdateEnemyIconInterval;                                  // 0x061C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0620(0x000C) MISSED OFFSET
	bool                                               bMapDynamicScaleDirty;                                    // 0x062C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x062D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CommonMapWidget");
		return pStaticClass;
	}


	void UpdatePlayersLocAndRotC();
	void UpdateMarkerDistanceC();
	void UpdateLeftRouteLengthC();
	void UpdateLastDriveVehicleC();
	void UpdateAirIconC();
	void TickEnemiesIconItems();
	void TickCircleC();
	void TickAirdropBoxIconItems();
	void RepositionItemOnMapC();
	void ReCalMapInfoC();
	void OnCreateEnemyIcon();
	void OnCreateAirdropBoxIcon();
	void MapResizeC();
	void ClearEnemiesLocations();
	void ClearAirdropBoxLocations();
};


// Class ShadowTrackerExtra.CompatibleEventCenter
// 0x0108 (0x01E8 - 0x00E0)
class UCompatibleEventCenter : public ULevelEventCenter
{
public:
	unsigned char                                      UnknownData00[0x108];                                     // 0x00E0(0x0108) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CompatibleEventCenter");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameReplay
// 0x0108 (0x0130 - 0x0028)
class UGameReplay : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class UUserWidget*                                 GMUI;                                                     // 0x0038(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0040(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.GameReplay.GMUIClass
	EGameReplayType                                    ReplayType;                                               // 0x0068(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x17];                                      // 0x0069(0x0017) MISSED OFFSET
	class UReplayUIManager*                            pReplayUIMgr;                                             // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x58];                                      // 0x0088(0x0058) MISSED OFFSET
	bool                                               bIsPausePlaying;                                          // 0x00E0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x2F];                                      // 0x00E1(0x002F) MISSED OFFSET
	class ASTExtraPlayerController*                    PlayerController;                                         // 0x0110(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0118(0x0008) MISSED OFFSET
	TArray<struct FKillInfoRecordData>                 RecordKillInfoDataArray;                                  // 0x0120(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameReplay");
		return pStaticClass;
	}


	bool StopRecordingReplay();
	bool StopPlay();
	bool StartRecordingReplay();
	void SetSpectatorName(const struct FString& SpectatorName, bool bGM);
	void SetReplayStreamer(const struct FString& InReplayStreamer);
	void SetIsGMSpectator(bool bGM);
	void SetCurrentReplayTimeToSeconds(float Seconds);
	void ReplayUnbindBulletNumChangedDelegate(class ASTExtraBaseCharacter* pCharacter);
	void ReplayOnWeaponChanged();
	void ReplayOnSimulatedWeaponChanged();
	void ReplayOnBulletNumChanged();
	void ReplayBindBulletNumChangedDelegate(class ASTExtraBaseCharacter* pCharacter);
	bool PlayReplay();
	bool PauseReplay(bool bPaused);
	bool IsInRecordState();
	bool IsInPlayState();
	bool IsFastForwarding();
	bool HaveRecordingData();
	void HandleChangeStatePC();
	struct FString GetSpectatorName();
	float GetCurrentReplayTotalTimeInSeconds();
	float GetCurrentReplayCurTimeInSeconds();
};


// Class ShadowTrackerExtra.CompletePlayback
// 0x0140 (0x0270 - 0x0130)
class UCompletePlayback : public UGameReplay
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0130(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.CompletePlayback.UIClass
	class UUAEUserWidget*                              ReplayUI;                                                 // 0x0158(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxHoursForKeepingFiles;                                  // 0x0160(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               isUsingAssumedName;                                       // 0x0164(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0165(0x0003) MISSED OFFSET
	TArray<struct FString>                             ExcludedGameModes;                                        // 0x0168(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                               isProgressChanged;                                        // 0x0178(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               isForceUIMsg;                                             // 0x0179(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x6];                                       // 0x017A(0x0006) MISSED OFFSET
	TArray<uint32_t>                                   TeammateKeyArray;                                         // 0x0180(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0xE0];                                      // 0x0190(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CompletePlayback");
		return pStaticClass;
	}


	bool PlayDemoWithFilename(const struct FString& DemoName);
	struct FString GetDemoPlayTime();
};


// Class ShadowTrackerExtra.CoronaObject
// 0x0020 (0x0048 - 0x0028)
class UCoronaObject : public UObject
{
public:
	TArray<unsigned char>                              WPOrignalEffect;                                          // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<unsigned char>                              WPOverrideEffect;                                         // 0x0038(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CoronaObject");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.CoronaShotHelper
// 0x0000 (0x0028 - 0x0028)
class UCoronaShotHelper : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CoronaShotHelper");
		return pStaticClass;
	}


	static void MakeSmallPicture(int InShotType, const struct FScriptDelegate& OnSceenShotCallBackDelegate, bool isShowUI);
};


// Class ShadowTrackerExtra.CrossHairComponent
// 0x0100 (0x0238 - 0x0138)
class UCrossHairComponent : public UWeaponLogicBaseComponent
{
public:
	TMap<struct FName, struct FString>                 CrossHairNameAndTextureMap;                               // 0x0138(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FWeaponCrossHairPerformData>         CrossHairData;                                            // 0x0188(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              PistolCenterDownDis;                                      // 0x0198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawDebugCrossHairCircleArea;                            // 0x019C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x019D(0x0003) MISSED OFFSET
	float                                              DrawDebugCrossHairCircleAreaSteps;                        // 0x01A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawDebugSpreadCircleArea;                               // 0x01A4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01A5(0x0003) MISSED OFFSET
	float                                              DrawDebugSpreadCircleAreaSteps;                           // 0x01A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RotateAngle;                                              // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    PlayerController;                                         // 0x01B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UShootWeaponEntity*                          ShootWeaponEntity;                                        // 0x01B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x01C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBulletTrackComponent*                       BulletTrackComp;                                          // 0x01C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                                  CrossHairTextureNormal;                                   // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                                  CrossHairEmptyHand;                                       // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                                  CrossHairPistolEdge;                                      // 0x01E0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                                  CrossHairPistolCenter;                                    // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                                  CrossHairShotGun;                                         // 0x01F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x40];                                      // 0x01F8(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CrossHairComponent");
		return pStaticClass;
	}


	void UpdateComponentTick();
	void DrawWeaponCrosshairInner(class UHUDWidgetBase* WeaponHudWidget, float DeltaTime);
	void DrawSpreadEnd();
	void DrawDebugPointEnd();
};


// Class ShadowTrackerExtra.CrowdAgentComponent
// 0x0030 (0x0140 - 0x0110)
class UCrowdAgentComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0110(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CrowdAgentComponent");
		return pStaticClass;
	}


	void StopMove();
	void MoveToLoc(const struct FVector& Loc);
	void MoveToActor(class AActor* Actor);
};


// Class ShadowTrackerExtra.CrowdAgentQueryInterface
// 0x0000 (0x0028 - 0x0028)
class UCrowdAgentQueryInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CrowdAgentQueryInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.CrowdManagerComponent
// 0x08B8 (0x09C8 - 0x0110)
class UCrowdManagerComponent : public UActorComponent
{
public:
	float                                              TimeHorizon;                                              // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AvoidanceWeight;                                          // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CohesionWeight;                                           // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AlignmentWeight;                                          // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ArriveWeight;                                             // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PushedWeight;                                             // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SeparationWeight;                                         // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPauseTick;                                               // 0x012C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSingleTick;                                              // 0x012D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFlipSegmentNormal;                                       // 0x012E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOpenAvoidance;                                           // 0x012F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DragDistanceWhenStuck;                                    // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DetermineAgentStuckTime;                                  // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DetermineAgentStuckDistSq;                                // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x88C];                                     // 0x013C(0x088C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CrowdManagerComponent");
		return pStaticClass;
	}


	void SetQueryInterfaceBlueprint(class AAIWorldVolume* query);
	void RemoveCrowdAgentBlueprint(class AActor* Owner);
	void MoveToPositionBlueprint(class AActor* Agent, const struct FVector& Position, float stopRadius);
	void AddCrowdAgentBlueprint(class AActor* Owner, float AgentRadius, float segmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);
};


// Class ShadowTrackerExtra.CustomBase
// 0x0018 (0x0040 - 0x0028)
class UCustomBase : public UObject
{
public:
	int                                                CustomID;                                                 // 0x0028(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UActorComponent>              OwnerComp;                                                // 0x002C(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UMeshComponent>               OwnerMeshComp;                                            // 0x0034(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomBase");
		return pStaticClass;
	}


	void SetCustomID(int InCustomID);
	class UMeshComponent* GetOwnerMeshComp();
	class UActorComponent* GetOwnerComp();
	bool ClearCustomInfo();
	bool ApplyCustomInfo();
};


// Class ShadowTrackerExtra.AvatarCustomBase
// 0x0010 (0x0050 - 0x0040)
class UAvatarCustomBase : public UCustomBase
{
public:
	TArray<struct FCustomMatConfig>                    MatConfigs;                                               // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarCustomBase");
		return pStaticClass;
	}


	void SetCustomMatParam(class UMaterialInterface* InMaterial, const struct FCustomMatConfig& InMatConfig, bool bSetTexture);
	void AsyncLoadCustomAssetDone();
	bool ApplyCustomInfo();
};


// Class ShadowTrackerExtra.AvatarCustomColor
// 0x0000 (0x0050 - 0x0050)
class UAvatarCustomColor : public UAvatarCustomBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarCustomColor");
		return pStaticClass;
	}


	void InitColorInfo(float Gray, const struct FString& Color1, const struct FString& Color2, const struct FString& Color3);
};


// Class ShadowTrackerExtra.AvatarCustomParticle
// 0x0040 (0x0090 - 0x0050)
class UAvatarCustomParticle : public UAvatarCustomBase
{
public:
	TArray<struct FParticleAsset>                      ParticleDataList;                                         // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FParticleGroup                              ParticleGroup;                                            // 0x0060(0x0030) (ContainsInstancedReference, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarCustomParticle");
		return pStaticClass;
	}


	bool ClearCustomInfo();
	void AsyncLoadCustomParticleDone();
	bool ApplyCustomInfo();
};


// Class ShadowTrackerExtra.AvatarCustomPattern
// 0x0000 (0x0050 - 0x0050)
class UAvatarCustomPattern : public UAvatarCustomBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarCustomPattern");
		return pStaticClass;
	}


	void InitPatternInfo(float Scale1, float Scale2, const struct FString& Path1, const struct FString& Path2, const struct FString& Offset);
};


// Class ShadowTrackerExtra.AvatarCustomPatternNum
// 0x0030 (0x0080 - 0x0050)
class UAvatarCustomPatternNum : public UAvatarCustomBase
{
public:
	struct FSoftObjectPath                             SoftRefPath1;                                             // 0x0050(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                             SoftRefPath2;                                             // 0x0068(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AvatarCustomPatternNum");
		return pStaticClass;
	}


	void GetPatternNumTexturePath(int InNumID, struct FSoftObjectPath* OutTexture1, struct FSoftObjectPath* OutTexture2);
	class UTexture* CreatePattenNumTexture(const struct FSoftObjectPath& InTexture1, const struct FSoftObjectPath& InTexture2, class UObject* Outer);
	void AsyncLoadCustomAssetDone();
	bool ApplyCustomInfo();
};


// Class ShadowTrackerExtra.CustomCameraComponent
// 0x0010 (0x0850 - 0x0840)
class UCustomCameraComponent : public UCameraComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0840(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomCameraComponent");
		return pStaticClass;
	}


	void InterpToTargetFov(float FOV, float InterpSpeed, bool DeltaValue);
};


// Class ShadowTrackerExtra.CustomCndComponent
// 0x0018 (0x0128 - 0x0110)
class UCustomCndComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	TArray<struct FCustomCndWrappperIns>               CndWrappers;                                              // 0x0118(0x0010) (Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomCndComponent");
		return pStaticClass;
	}


	void RemoveCndWrapper(int ID);
	void RegisterCndWrappers();
	void OnReceiveEvent(TEnumAsByte<ECustomCndEventType> Type);
	void AddCndWrapper(const struct FString& Path, int ID);
};


// Class ShadowTrackerExtra.CustomCndWrapper
// 0x0050 (0x0078 - 0x0028)
class UCustomCndWrapper : public UObject
{
public:
	TArray<struct FCustomCndIns>                       Conditions;                                               // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<int>                                        TriggerSkills;                                            // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        CancelSkills;                                             // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        TriggerBuffs;                                             // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               TriggerFromClient;                                        // 0x0068(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ECustomCndEventType>                   EventType;                                                // 0x0069(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	TWeakObjectPtr<class UObject>                      WrapperOwner;                                             // 0x006C(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomCndWrapper");
		return pStaticClass;
	}


	void SetWrapperOwner(class UObject* Owner);
	void OnTriggerEvent(TEnumAsByte<ECustomCndEventType> Event);
	bool IsValidEvent(TEnumAsByte<ECustomCndEventType> Event);
};


// Class ShadowTrackerExtra.CustomComboBox
// 0x0148 (0x1078 - 0x0F30)
class UCustomComboBox : public UComboBoxString
{
public:
	class UClass*                                      itemType;                                                 // 0x0F30(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ContentType;                                              // 0x0F38(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRefreshItem;                                            // 0x0F40(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSelectItem;                                             // 0x0F50(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UWidget*                                     ContentWidget;                                            // 0x0F60(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xF0];                                      // 0x0F68(0x00F0) MISSED OFFSET
	TArray<class UWidget*>                             UnusedItems;                                              // 0x1058(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x10];                                      // 0x1068(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomComboBox");
		return pStaticClass;
	}


	class UWidget* RequireOneWidget(const struct FString& Item);
	void RefreshOptions();
	void OnRefreshItem__DelegateSignature(class UWidget* Item, const struct FString& Option);
};


// Class ShadowTrackerExtra.CustomCondition
// 0x0008 (0x0030 - 0x0028)
class UCustomCondition : public UObject
{
public:
	TWeakObjectPtr<class UObject>                      CndOwner;                                                 // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomCondition");
		return pStaticClass;
	}


	void SetCndOwner(class UObject* Owner);
	static class ASTExtraCharacter* SafeGetPawn(class UObject* Owner);
	bool IsOK();
};


// Class ShadowTrackerExtra.CustomCondition_AND
// 0x0010 (0x0040 - 0x0030)
class UCustomCondition_AND : public UCustomCondition
{
public:
	TArray<class UCustomCondition*>                    CndList;                                                  // 0x0030(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomCondition_AND");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.CustomCondition_CharacterHP
// 0x0008 (0x0038 - 0x0030)
class UCustomCondition_CharacterHP : public UCustomCondition
{
public:
	EConditionHeathType                                CheckType;                                                // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              Health;                                                   // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomCondition_CharacterHP");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.CustomCondition_OR
// 0x0010 (0x0040 - 0x0030)
class UCustomCondition_OR : public UCustomCondition
{
public:
	TArray<class UCustomCondition*>                    CndList;                                                  // 0x0030(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomCondition_OR");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.CustomParticleSystemComponent
// 0x0020 (0x08B0 - 0x0890)
class UCustomParticleSystemComponent : public UParticleSystemComponent
{
public:
	TArray<class AActor*>                              CollisionIgnoreActors;                                    // 0x0890(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bShowImpactInfo;                                          // 0x08A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xF];                                       // 0x08A1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomParticleSystemComponent");
		return pStaticClass;
	}


	void AddCollisionIgnoreActor(class AActor* IgnoreActor);
};


// Class ShadowTrackerExtra.CustomScrollBox
// 0x08F8 (0x0A10 - 0x0118)
class UCustomScrollBox : public UPanelWidget
{
public:
	struct FScrollBoxStyle                             WidgetStyle;                                              // 0x0118(0x02A8) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScrollBarStyle                             WidgetBarStyle;                                           // 0x03C0(0x05F0) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                      Style;                                                    // 0x09B0(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                      BarStyle;                                                 // 0x09B8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EOrientation>                          Orientation;                                              // 0x09C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                                   ScrollBarVisibility;                                      // 0x09C1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConsumeMouseWheel                                 ConsumeMouseWheel;                                        // 0x09C2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x09C3(0x0001) MISSED OFFSET
	struct FVector2D                                   ScrollbarThickness;                                       // 0x09C4(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AlwaysShowScrollbar;                                      // 0x09CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AllowOverscroll;                                          // 0x09CD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDescendantScrollDestination                       NavigationDestination;                                    // 0x09CE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1];                                       // 0x09CF(0x0001) MISSED OFFSET
	float                                              NavigationScrollPadding;                                  // 0x09D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x09D4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUserScrolled;                                           // 0x09D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnMoveOut;                                                // 0x09E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x18];                                      // 0x09F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomScrollBox");
		return pStaticClass;
	}


	void SwitchChildToIndex(class UWidget* Content, int Index);
	void SetScrollOffset(float NewScrollOffset);
	void SetScrollBarVisibility(ESlateVisibility NewScrollBarVisibility);
	void SetScrollbarThickness(const struct FVector2D& NewScrollbarThickness);
	void SetOrientation(TEnumAsByte<EOrientation> NewOrientation);
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);
	void SetAllowOverscroll(bool NewAllowOverscroll);
	void ScrollWidgetIntoView(class UWidget* WidgetToFind, bool AnimateScroll, EDescendantScrollDestination ScrollDesintion);
	void ScrollToStart();
	void ScrollToEnd();
	void ScrollStop();
	float GetScrollOffset();
	float GetMaxScrollOffset();
};


// Class ShadowTrackerExtra.CustomScrollBoxSlot
// 0x0020 (0x0058 - 0x0038)
class UCustomScrollBoxSlot : public UPanelSlot
{
public:
	struct FMargin                                     Padding;                                                  // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                      // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0049(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomScrollBoxSlot");
		return pStaticClass;
	}


	void SetPadding(const struct FMargin& InPadding);
	void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);
};


// Class ShadowTrackerExtra.CustomSocketObject
// 0x0098 (0x00C0 - 0x0028)
class UCustomSocketObject : public UObject
{
public:
	unsigned char                                      UnknownData00[0x98];                                      // 0x0028(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomSocketObject");
		return pStaticClass;
	}


	void OnLoadFinished(class AUAEPlayerController* PC);
	class UUAEUserWidget* GetActivedSocket();
	void ActivateSocket(class AUAEPlayerController* PC, const struct FScriptDelegate& DelegateToCall);
};


// Class ShadowTrackerExtra.CustomSocketPanel
// 0x00A8 (0x01D8 - 0x0130)
class UCustomSocketPanel : public UCanvasPanel
{
public:
	struct FChildPendingActiveWidget                   ChildPendingWidget;                                       // 0x0130(0x0080) (Edit, NativeAccessSpecifierPublic)
	bool                                               SeeIt;                                                    // 0x01B0(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x27];                                      // 0x01B1(0x0027) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomSocketPanel");
		return pStaticClass;
	}


	void OnLoadFinished();
	class UUAEUserWidget* GetActivedSocket(bool forceCreate);
	void ActivateSocketASync(const struct FScriptDelegate& DelegateToCall);
	void ActivateSocket(TArray<struct FString> ModeUIList);
};


// Class ShadowTrackerExtra.STExtraSpringArmComponent
// 0x0070 (0x03E0 - 0x0370)
class USTExtraSpringArmComponent : public USpringArmComponent
{
public:
	float                                              ArmLengthInterpSpeed;                                     // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6C];                                      // 0x0374(0x006C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraSpringArmComponent");
		return pStaticClass;
	}


	void ClearCameraData();
};


// Class ShadowTrackerExtra.CustomSpringArmComponent
// 0x02D0 (0x06B0 - 0x03E0)
class UCustomSpringArmComponent : public USTExtraSpringArmComponent
{
public:
	float                                              SpringArmLengthModifier2;                                 // 0x03E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpringArmLengthModifier3;                                 // 0x03E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 SpringArmForwadOffsetByPitchCurve;                        // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawDebugLineAndShap;                                    // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x20];                                      // 0x03F1(0x0020) MISSED OFFSET
	bool                                               bUseLocalSpaceClamp;                                      // 0x0411(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bClampPitch;                                              // 0x0412(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0413(0x0001) MISSED OFFSET
	float                                              ResultMinPitch;                                           // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ResultMaxPitch;                                           // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnableShoulderCameraMode;                                // 0x041C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3];                                       // 0x041D(0x0003) MISSED OFFSET
	float                                              FreeCamRotationReturnRate;                                // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           CrouchCameraData;                                         // 0x0424(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           ProneCameraData;                                          // 0x0440(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           IndoorCameraData;                                         // 0x045C(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           LeanLeftCameraData;                                       // 0x0478(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           LeanRightCameraData;                                      // 0x0494(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           InVehicleCameraData;                                      // 0x04B0(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           NearDeathCameraData;                                      // 0x04CC(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           PeekLeftCameraData;                                       // 0x04E8(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           PeekRightCameraData;                                      // 0x0504(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           IndoorLowerCameraStand;                                   // 0x0520(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           IndoorLowerCameraCrouch;                                  // 0x053C(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           IndoorLowerCameraProne;                                   // 0x0558(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           VaultCameraData;                                          // 0x0574(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           ShovelingCameraData;                                      // 0x0590(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           InHelicopterCameraData;                                   // 0x05AC(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           InFireBalloonCameraData;                                  // 0x05C8(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bIsShoulderMode;                                          // 0x05E4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x05E5(0x0003) MISSED OFFSET
	struct FCameraOffsetData                           ShoulderCameraData;                                       // 0x05E8(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0604(0x0004) MISSED OFFSET
	float                                              AdditionalSocketOffetZMax;                                // 0x0608(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   AdditionalSocketOffetZPitch;                              // 0x060C(0x0008) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0xC];                                       // 0x0614(0x000C) MISSED OFFSET
	class UCurveVector*                                LandingHeavyCameraOffset;                                 // 0x0620(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LandingHeavyCameraOffsetDurationTime;                     // 0x0628(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LandingHeavyCameraOffsetPlaySpeed;                        // 0x062C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeedAddTargetOffset;                                     // 0x0630(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsPlayingCurveAnim;                                      // 0x0631(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData06[0x2];                                       // 0x0632(0x0002) MISSED OFFSET
	float                                              OffsetCountTime;                                          // 0x0634(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              OffSetDurTime;                                            // 0x0638(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              RevertMoveSpeed;                                          // 0x063C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveVector*                                TargetOffsetAnimCurve;                                    // 0x0640(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0648(0x0008) MISSED OFFSET
	struct FTransform                                  PrevRelativeTrans;                                        // 0x0650(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                     PrevRelativeSocketLocation;                               // 0x0680(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData08[0x4];                                       // 0x068C(0x0004) MISSED OFFSET
	struct FQuat                                       PrevRelativeSocketRotation;                               // 0x0690(0x0010) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData09[0x10];                                      // 0x06A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomSpringArmComponent");
		return pStaticClass;
	}


	void SetSelfieCameraDefRotation();
	void SetCustomCameraDataEnable(bool IsEnable, struct FCameraOffsetData* CustomCameraData);
	void SetCameraDataEnable(TEnumAsByte<ECameraDataType> CameraDataType, bool IsEnable);
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);
	void DelayRotationLagEnabledEnd();
	void DelayRotationLagEnabled(bool bEnabled, float Time);
};


// Class ShadowTrackerExtra.CustomUserWidget
// 0x0008 (0x03B0 - 0x03A8)
class UCustomUserWidget : public UUAEUserWidget
{
public:
	bool                                               bEnableGlobalTouch;                                       // 0x03A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomUserWidget");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.CustomWidgetComponent
// 0x0020 (0x07B0 - 0x0790)
class UCustomWidgetComponent : public UWidgetComponent
{
public:
	class UMeshComponent*                              AttachedMeshComponent;                                    // 0x0790(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    UIParticleComp;                                           // 0x0798(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                        SurfaceEffectMesh;                                        // 0x07A0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x07A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.CustomWidgetComponent");
		return pStaticClass;
	}


	void SetupAttachMeshComponent(class UMeshComponent* meshComp, const struct FName& AttachSocket, const struct FTransform& RelativeTrans);
	class AActor* GetBindOwner();
	class UMeshComponent* GetAttachedMeshComponent();
	void CreateParticle(class UParticleSystem* ParticleRes, class UMeshComponent* meshComp, const struct FName& SocketName, const struct FTransform& RelativeTrans);
	void BindOwner(class AActor* Owner);
	void BindEvent(bool bShowWidget);
};


// Class ShadowTrackerExtra.DamageableActor
// 0x0060 (0x0400 - 0x03A0)
class ADamageableActor : public AUAERegionActor
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x03A0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DamageableActor");
		return pStaticClass;
	}


	void SetTargetDamageRateMap(TMap<EDamageableGameObjectType, float> InTargetDamageRateMap);
	int GetVehicleDamagedSpeed();
	int GetVehicleDamagedCoefficient();
	TMap<EDamageableGameObjectType, float> GetTargetDamageRateMap();
	float CPP_PreTakeDamage(float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	bool CPP_JudgeComponentBlockBullet(class UPrimitiveComponent* Comp);
	bool CPP_GetPickingBoundingBox(struct FVector* Center, struct FVector* Extent, struct FRotator* Rotation, float* Distance);
	float CPP_GetDamageRateFromDamageEvent(const struct FDamageEvent& DamageEvent);
	float CPP_GetDamageRateByTarget(class AActor* Target);
	TArray<EDamageableGameObjectType> CPP_GetDamageableGameObjectType();
	bool CPP_GetCanBePicked();
	struct FName CPP_GetBulletBlockComponentTag();
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(const struct FDamageEvent& DamageEvent);
	float CPP_CalcFinalMomentum(class UClass* DamageTypeClass, float BaseMomentun);
	float CPP_CalcFinalDamageRate(const struct FDamageEvent& DamageEvent, class AActor* Attacker);
	float BP_PreTakeDamage(float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	bool BP_JudgeComponentBlockBullet(class UPrimitiveComponent* Comp);
	bool BP_GetPickingBoundingBox(struct FVector* Center, struct FVector* Extent, struct FRotator* Rotation, float* Distance);
	float BP_GetDamageRateFromDamageEvent(const struct FDamageEvent& DamageEvent);
	float BP_GetDamageRateByTarget(class AActor* Target);
	TArray<EDamageableGameObjectType> BP_GetDamageableGameObjectType();
	bool BP_GetCanBePicked();
	struct FName BP_GetBulletBlockComponentTag();
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(const struct FDamageEvent& DamageEvent);
	float BP_CalcFinalMomentum(class UClass* DamageTypeClass, float BaseMomentun);
	float BP_CalcFinalDamageRate(const struct FDamageEvent& DamageEvent, class AActor* Attacker);
};


// Class ShadowTrackerExtra.DamageableInterface
// 0x0000 (0x0028 - 0x0028)
class UDamageableInterface : public UDamageableInterfaceBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DamageableInterface");
		return pStaticClass;
	}


	bool JudgeComponentBlockBullet(class UPrimitiveComponent* Comp);
	bool GetPickingBoundingBox(struct FVector* Center, struct FVector* Extent, struct FRotator* Rotation, float* Distance);
	float GetDamageRateFromDamageEvent(const struct FDamageEvent& DamageEvent);
	float GetDamageRateByTarget(class AActor* Target);
	TArray<EDamageableGameObjectType> GetDamageableGameObjectType();
	bool GetCanBePicked();
	struct FName GetBulletBlockComponentTag();
	float GetAdditionaAbsoluteDamageFromDamageEvent(const struct FDamageEvent& DamageEvent);
	float CalcFinalMomentum(class UClass* DamageTypeClass, float BaseMomentun);
	float CalcFinalDamageRate(const struct FDamageEvent& DamageEvent, class AActor* Attacker);
};


// Class ShadowTrackerExtra.DamageDrivenMeshChanger
// 0x00A0 (0x01B0 - 0x0110)
class UDamageDrivenMeshChanger : public UActorComponent
{
public:
	float                                              HPPercentage;                                             // 0x0110(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	TArray<struct FDDMCData>                           Stuffs;                                                   // 0x0118(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               AutoBindTakedamageEvent;                                  // 0x0128(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0129(0x0003) MISSED OFFSET
	float                                              MaxHealth;                                                // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bBreadcastDamage;                                         // 0x0130(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bStopsAtZeroHP;                                           // 0x0131(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0132(0x0002) MISSED OFFSET
	float                                              BreadcastDamageInterval;                                  // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       OwnerComponentTags;                                       // 0x0138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnHPChangeCustomEvent;                                    // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCliendHPChanged;                                        // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnIndex;                                                  // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnClientDamage;                                           // 0x0170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0180(0x0010) MISSED OFFSET
	TArray<class UActorComponent*>                     CacheTaggedComponents;                                    // 0x0190(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData04[0x10];                                      // 0x01A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DamageDrivenMeshChanger");
		return pStaticClass;
	}


	void SetHPPercentage(float InHPPercentage);
	void ResetDoneList();
	void OnTakeDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void OnRPCDamage(float Damage);
	void OnRep_HPPercentage();
	void OnHPCustomEvent(class UObject* LoadedObject);
	void OnAssetLoaded(int Index);
	void ExecToClient(TArray<int> Indicies);
	bool CanBroadcastDamage();
};


// Class ShadowTrackerExtra.DataSourceBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UDataSourceBPLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DataSourceBPLibrary");
		return pStaticClass;
	}


	static class UGMDataSource* GetDataSource(EGMDataType InDataType);
};


// Class ShadowTrackerExtra.DataTableManager
// 0x0038 (0x0060 - 0x0028)
class UDataTableManager : public UBlueprintFunctionLibrary
{
public:
	class UDataTable*                                  PickUpGlobalDataTable;                                    // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                                  PickUpGlobalIDAndWrapperDataTable;                        // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                                  WeaponDataTable;                                          // 0x0038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                                  PlayerEquipmentDataTable;                                 // 0x0040(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                                  WeaponComponentDataTable;                                 // 0x0048(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                                  ConsumeItemDataTable;                                     // 0x0050(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                                  AkEventDataTable;                                         // 0x0058(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DataTableManager");
		return pStaticClass;
	}


	class UDataTable* GetTableByType(TEnumAsByte<EDataTableType> TableType);
	static class UDataTableManager* GetInstance();
};


// Class ShadowTrackerExtra.DayToNightActor
// 0x0040 (0x03D0 - 0x0390)
class ADayToNightActor : public AActor
{
public:
	float                                              ClientSyncTime;                                           // 0x0390(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	TArray<struct FFireEventConfig>                    EventConfigs;                                             // 0x0398(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03A8(0x0008) MISSED OFFSET
	class ALevelSequenceActor*                         LevelSequenceActor;                                       // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x18];                                      // 0x03B8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DayToNightActor");
		return pStaticClass;
	}


	void TrytoFireEvent(int EventID);
	void SetNightVisionOpen(bool bOpen);
	void FireEvent(int EventID, int EventParam);
	void BP_ClientOnFireEvent(int EventID, int EventParam);
};


// Class ShadowTrackerExtra.DayToNightActorPVE
// 0x0050 (0x03E0 - 0x0390)
class ADayToNightActorPVE : public AActor
{
public:
	TArray<float>                                      WeatherTimeConfigs;                                       // 0x0390(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              DelayCountDownWeatherTime;                                // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ClientSyncTime;                                           // 0x03A4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPVEFireEventConfig>                 EventConfigs;                                             // 0x03A8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	class ALevelSequenceActor*                         LevelSequenceActor;                                       // 0x03C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x18];                                      // 0x03C8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DayToNightActorPVE");
		return pStaticClass;
	}


	void SetPVENightVisionOpen(bool bOpen);
	void PVETrytoFireEvent(int EventID);
	void PVEFireEvent(int EventID, int EventParam);
	float GetWeatherPlayTime();
	void BP_PVEOnExitNightEvent();
	void BP_PVEOnEnterNightEvent();
	void BP_PVEClientOnFireEvent(int EventID, int EventParam);
};


// Class ShadowTrackerExtra.DeadBoxAnimInstance
// 0x0050 (0x0410 - 0x03C0)
class UDeadBoxAnimInstance : public UAnimInstance
{
public:
	class USkeletalMesh*                               DeadPlayShowSkMesh;                                       // 0x03C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     DeadPlayActorScale;                                       // 0x03C8(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03D4(0x0004) MISSED OFFSET
	class UAnimSequence*                               DeadPlayAnim;                                             // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                SelfDropAnim;                                             // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SmokeDelayTime;                                           // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	class ASkeletalMeshActor*                          DeadShowActor;                                            // 0x03F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x18];                                      // 0x03F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeadBoxAnimInstance");
		return pStaticClass;
	}


	void TurnOffSelfSound();
	void ShowSelf();
	void Recover();
	void OnParentActorDestroyed(class AActor* Parent);
	struct FRotator GetDeadShowActorSpawnRotator();
};


// Class ShadowTrackerExtra.ItemAvatarComponentBase
// 0x01C8 (0x0330 - 0x0168)
class UItemAvatarComponentBase : public UAvatarComponentBase
{
public:
	struct FItemDefineID                               DefaultCfg;                                               // 0x0168(0x0018) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                              ItemBodyMesh;                                             // 0x0180(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNetItemAvatarData                          NetAvatarData;                                            // 0x0188(0x0020) (Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0xD0];                                      // 0x01A8(0x00D0) MISSED OFFSET
	class UBackpackCommonAvatarHandle*                 ItemAvatarHandle;                                         // 0x0278(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBackpackCommonAvatarHandle*                 DefaultItemAvatarHandle;                                  // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                itemType;                                                 // 0x0288(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x028C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData02[0x28];                                      // 0x028C(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.ItemAvatarComponentBase.MasterSkeletalMesh
	unsigned char                                      UnknownData03[0x28];                                      // 0x02B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.ItemAvatarComponentBase.MasterStaticMesh
	TMap<struct FString, class UObject*>               AssetObjectMap;                                           // 0x02E0(0x0050) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ItemAvatarComponentBase");
		return pStaticClass;
	}


	void SetMasterStaticMeshPath(const struct FString& InPath, bool bForce);
	void SetMasterSkeletalMeshPath(const struct FString& InPath, bool bForce);
	void ResetItemAvatar();
	void PreChangeItemAvatar(int InItemID);
	void OnRep_ItemAvatarChanged();
	bool IsValidAvatar();
	class UBackpackCommonAvatarHandle* GetValidAvatarHandle();
	class UObject* GetSoftRefObj(struct FSoftObjectPath* AssetRef);
	class UMeshComponent* GetItemBodyMesh();
	class UMaterialInterface* GetDynamicMaterial(class UMaterialInstance* MatInstance);
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);
	void AsyncChangeItemAvatar(int InItemID);
	bool ApplyMesh(class UMeshComponent* meshComp, class USkeletalMesh* SkeletalMesh, class UStaticMesh* StaticMesh);
	bool ApplyMaterial(class UMeshComponent* meshComp, TArray<struct FItemAvatarMatPath> AvatarMatArray);
	void AddAssetSoftObject(TArray<struct FSoftObjectPath>* ObjectPathList);
};


// Class ShadowTrackerExtra.DeadBoxAvatarComponent
// 0x0040 (0x0370 - 0x0330)
class UDeadBoxAvatarComponent : public UItemAvatarComponentBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0330(0x0008) MISSED OFFSET
	class UMeshComponent*                              MainStaticMesh;                                           // 0x0338(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                      MainSkeletalMesh;                                         // 0x0340(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*                    TeammateParticleSysComp;                                  // 0x0348(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*                    DeadParticleSysComp;                                      // 0x0350(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                                MainAkComp;                                               // 0x0358(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDeadBoxAvatarLoadedDone;                                // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeadBoxAvatarComponent");
		return pStaticClass;
	}


	void SyncChangeItemAvatar(int InItemID);
	void StopAudio();
	void ResetItemAvatar();
	void PreChangeItemAvatar(int InItemID);
	void PlayAudio();
	void OnDeadBoxAvatarLoaded__DelegateSignature();
	bool HasBoxOpenAnim();
	struct FString GetItemAvatarHandlePath(int ItemID);
	class UBackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);
	void CollectLoadRes(TArray<struct FSoftObjectPath>* AssetRefArray);
	bool ChangeItemParticle();
	void AsyncChangeItemAvatar(int InItemID);
	bool ApplyParticle(class UParticleSystemComponent* ParticleComp, class UParticleSystem* ParticleSystem);
	bool ApplyMesh(class UMeshComponent* meshComp, class USkeletalMesh* SkeletalMesh, class UStaticMesh* StaticMesh);
	bool ApplyMaterial(class UMeshComponent* meshComp, TArray<struct FItemAvatarMatPath> AvatarMatArray);
	void AddExtraParticles();
};


// Class ShadowTrackerExtra.DeadBoxAvatarHandle
// 0x0178 (0x02C8 - 0x0150)
class UDeadBoxAvatarHandle : public UBackpackCommonAvatarHandle
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0150(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.DeadBoxAvatarHandle.TeammateSmokeParticle
	unsigned char                                      UnknownData01[0x28];                                      // 0x0178(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.DeadBoxAvatarHandle.SelfDeadSmokeParticle
	TArray<struct FDeadBoxParticleSystemAsset>         ParticleSystemArray;                                      // 0x01A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               ShouldDelayParticle;                                      // 0x01B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01B1(0x0003) MISSED OFFSET
	struct FVector                                     MeshScale;                                                // 0x01B4(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x28];                                      // 0x01C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.DeadBoxAvatarHandle.MasterStaticMesh
	unsigned char                                      UnknownData04[0x28];                                      // 0x01E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.DeadBoxAvatarHandle.MasterSkeletalMesh
	unsigned char                                      UnknownData05[0x28];                                      // 0x0210(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.DeadBoxAvatarHandle.SkeletalMeshAnimation
	unsigned char                                      UnknownData06[0x28];                                      // 0x0238(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.DeadBoxAvatarHandle.SkeletalMeshAnimBP
	bool                                               HasOpenAnim;                                              // 0x0260(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0261(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData08[0x28];                                      // 0x0261(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.DeadBoxAvatarHandle.DeadPlayActor
	bool                                               bPlaySkeltalAnim;                                         // 0x0290(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPlaySkeltalAnimLoop;                                     // 0x0291(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x6];                                       // 0x0292(0x0006) MISSED OFFSET
	unsigned char                                      UnknownData10[0x28];                                      // 0x0292(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.DeadBoxAvatarHandle.AudioEvent
	float                                              AttenuationScalingFactor;                                 // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OcclusionRefreshInterval;                                 // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeadBoxAvatarHandle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedalBase
// 0x0018 (0x0040 - 0x0028)
class UDeathMatchMedalBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UDeathMatchMedalManagerComponent*            DeathMatchMedalManager;                                   // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedalBase");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_SuperGod
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_SuperGod : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_SuperGod");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_ContinuouKill
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_ContinuouKill : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_ContinuouKill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_SuperGodEnd
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_SuperGodEnd : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_SuperGodEnd");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_TopSpotEnd
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_TopSpotEnd : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_TopSpotEnd");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_ContinuouKillEnd
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_ContinuouKillEnd : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_ContinuouKillEnd");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_FirstKill
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_FirstKill : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_FirstKill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_Revenge
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_Revenge : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_Revenge");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_HeadShot
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_HeadShot : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_HeadShot");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_Hunter
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_Hunter : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_Hunter");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_Rally
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_Rally : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_Rally");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_Cheer
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_Cheer : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_Cheer");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_Sharpshooter
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_Sharpshooter : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_Sharpshooter");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_GorgeousExplosion
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_GorgeousExplosion : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_GorgeousExplosion");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_Slaughter
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_Slaughter : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_Slaughter");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_AntiKill
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_AntiKill : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_AntiKill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedal_SunderArmorExperts
// 0x0000 (0x0040 - 0x0040)
class UDeathMatchMedal_SunderArmorExperts : public UDeathMatchMedalBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedal_SunderArmorExperts");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchMedalManagerComponent
// 0x0040 (0x0150 - 0x0110)
class UDeathMatchMedalManagerComponent : public UActorComponent
{
public:
	struct FString                                     MedalDataTableName;                                       // 0x0110(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                HunterKillCount;                                          // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RallyContinuousDeadCount;                                 // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SharpshooterDistance;                                     // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SlaughterTime;                                            // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SlaughterKillCount;                                       // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AntiKillRemainHealthRatio;                                // 0x0134(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDeathMatchMedalBase*>                MedalList;                                                // 0x0138(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0148(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchMedalManagerComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DeathMatchWWISEManagerComponent
// 0x00A0 (0x01B0 - 0x0110)
class UDeathMatchWWISEManagerComponent : public UActorComponent
{
public:
	TMap<EDeathMatchWWISENotifyReason, struct FWWIEBankContainer> RandEventPool;                                            // 0x0110(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EDeathMatchWWISENotifyReason, class UAkAudioEvent*> GlobalEventPool;                                          // 0x0160(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathMatchWWISEManagerComponent");
		return pStaticClass;
	}


	void OnReload();
	void OnPlayerStateRep();
	void OnGlobalNotify(int KillerTeamID, int VictimerTeamID, EDeathMatchGlobalAudioType GlobalNotifyReason);
	void DeathMatchMedalNotify(TArray<int> MedalIDList);
};


// Class ShadowTrackerExtra.DeathPlayback
// 0x00C8 (0x01F8 - 0x0130)
class UDeathPlayback : public UGameReplay
{
public:
	bool                                               bDeathPlaybackEnable;                                     // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6F];                                      // 0x0131(0x006F) MISSED OFFSET
	TMap<struct FString, struct FDeathPlayCharacterTrans> CharacterTransMap;                                        // 0x01A0(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x01F0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DeathPlayback");
		return pStaticClass;
	}


	bool IsSwitchedOffByDevice();
	struct FString GetReplayTargetName();
	void EnableDeathPlayback(bool bEnable);
};


// Class ShadowTrackerExtra.DecalBakingActorMgr
// 0x0038 (0x0420 - 0x03E8)
class ADecalBakingActorMgr : public ADecalBakingActor
{
public:
	TArray<struct FDecalBakingRTCache>                 DecalBakingRTCacheList;                                   // 0x03E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDecalBakingRTCache>                 DecalBakingRTCacheListII;                                 // 0x03F8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              RTCacheLifeTime;                                          // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxRTCacheCount;                                          // 0x040C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RTCacheLifeTimeII;                                        // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxRTCacheCountII;                                        // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TickUpdateCacheInterval;                                  // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x041C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DecalBakingActorMgr");
		return pStaticClass;
	}


	void ResetDecalBakingRTCacheParam();
	static class ADecalBakingActorMgr* GetWorldInstance(class UObject* WorldContextObject);
	struct FVector GetSpawanDBPActorLocationByDiyData(const struct FDIYData& InDIYData, class USceneComponent* InSceneComponent);
	TArray<struct FDecalParameter> GetRelativeDecalParameterFromWorld(class USceneComponent* InSceneComponent);
	static class ADecalBakingActorMgr* GetInstance();
	TArray<struct FDecalParameter> GetDecalParameterFromWorld(class AActor* InActor);
	struct FDecalParameter GetDecalParameter(class USceneComponent* InSceneComponent, class UDecalBakingParameterComponent* InComponent);
	class UTextureRenderTarget2D* CreateNewTextureRenderTarget2D(int X, int Y);
	struct FDecalParameter ConvertDIYDataToDecalParam(const struct FDIYData& InDIYData);
	struct FDIYData ConvertDecalParamToDIYData(class USceneComponent* InSceneComponent, class ADecalBakingParameterActor* InDBPActor, bool ZProjection);
	void ClearDecalBackingRTCacheII(EDIYDecalBakingType InType, const struct FString& PlayerUID);
	void ClearDecalBackingRTCache(EDIYDecalBakingType InType, const struct FString& PlayerUID, bool bCacheII);
};


// Class ShadowTrackerExtra.DecoratorDamage
// 0x0018 (0x0128 - 0x0110)
class UDecoratorDamage : public UActorComponent
{
public:
	struct FString                                     DamageComponentTag;                                       // 0x0110(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageValue;                                              // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DecoratorDamage");
		return pStaticClass;
	}


	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class ShadowTrackerExtra.WeaponAntiCheatComp
// 0x01D8 (0x0310 - 0x0138)
class UWeaponAntiCheatComp : public UWeaponLogicBaseComponent
{
public:
	TWeakObjectPtr<class ASTExtraShootWeapon>          OwnerShootWeapon;                                         // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x24];                                      // 0x0140(0x0024) MISSED OFFSET
	float                                              ShootRateCheckInterval;                                   // 0x0164(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               ShootRateCheckTag;                                        // 0x0168(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0169(0x0003) MISSED OFFSET
	float                                              ShootRateCheckMulCoff;                                    // 0x016C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               ShootHitTargetIntervalCheckTag;                           // 0x0170(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0171(0x0003) MISSED OFFSET
	float                                              ShootHitTargetIntervalMulCoff;                            // 0x0174(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bCheckParachuteHit;                                       // 0x0178(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0179(0x0003) MISSED OFFSET
	float                                              MaxParachuteHeightDist;                                   // 0x017C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxParachutePlaneDist;                                    // 0x0180(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x58];                                      // 0x0184(0x0058) MISSED OFFSET
	float                                              ShootTimeInfoCheckClearInterval;                          // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootTimeInfoCheckLifeTime;                               // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootTimeGunPosBigCircle;                                 // 0x01E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootTimeGunPosMaxZDif;                                   // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootTimeGunPosMaxForwadDif;                              // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootTimeGunPosMaxForwadDifInVehicle;                     // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootTimeGunPosMaxRightDif;                               // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootTimeGunPosMaxRightDifInVehicle;                      // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxClientCapsuleHalfHeight;                               // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootTimeMuzzleDistThres;                                 // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootTimeMuzzleZThres;                                    // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyTimeLineSync;                                      // 0x0208(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0209(0x0003) MISSED OFFSET
	float                                              TimeLineCheckDnBorder;                                    // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TimeLineCheckUpBorder;                                    // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootTimeConnectionDeltaThres;                            // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyStartFireTime;                                     // 0x0218(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0219(0x0003) MISSED OFFSET
	float                                              MaxShootPassTimeDeltaBetweenSysAndLevel;                  // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateFlyTime;                                          // 0x0220(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateFlyDis;                                           // 0x0224(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0xE8];                                      // 0x0228(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponAntiCheatComp");
		return pStaticClass;
	}


	void OnWeaponShootHit(const struct FShootWeaponDamageEvent& DamageDetail, const struct FBulletHitInfoUploadData& HitData, const struct FLocalShootHitData& LocalHitData);
};


// Class ShadowTrackerExtra.DefaultAntiCheatComponent
// 0x0000 (0x0310 - 0x0310)
class UDefaultAntiCheatComponent : public UWeaponAntiCheatComp
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DefaultAntiCheatComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DelayFlyProjMovementComponent
// 0x0020 (0x01D8 - 0x01B8)
class UDelayFlyProjMovementComponent : public UProjectileMovementComponent
{
public:
	float                                              ThrowHighGravityScale;                                    // 0x01B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bResumeMoveAfterImpactWithNoLostFlag;                     // 0x01BC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01BD(0x0003) MISSED OFFSET
	struct FVector                                     LastVelocityBeforeStop;                                   // 0x01C0(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01CC(0x0004) MISSED OFFSET
	class USceneComponent*                             LastUpdateComponentBeforeStop;                            // 0x01D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DelayFlyProjMovementComponent");
		return pStaticClass;
	}


	void StartFly(const struct FVector& flyVelocity, bool isThrowHigh);
	void ResumeMoveAfterImpactWithNoLost();
};


// Class ShadowTrackerExtra.DrivingChallengeLevelRules
// 0x0018 (0x0048 - 0x0030)
class UDrivingChallengeLevelRules : public UChallengeLevelRules
{
public:
	TArray<class ATriggerItem_DrivingCheckPoint*>      DrivingCheckPointsArray;                                  // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                CurrentUnpassIndex;                                       // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                TotalPassNum;                                             // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DrivingChallengeLevelRules");
		return pStaticClass;
	}


	bool ValidNewCheckPoint();
	void SignCheckPointPassed(const struct FString& Msg);
	void SignAndSetDrivingCheckPoint(const struct FString& Msg);
	void OnReceiveTriggerMsg(class UTriggerAction* TriggerAction, const struct FString& Msg);
	void InitLevel();
};


// Class ShadowTrackerExtra.DSCommand
// 0x0060 (0x0088 - 0x0028)
class UDSCommand : public UObject
{
public:
	struct FString                                     DeviceType;                                               // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     BaseName;                                                 // 0x0038(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                     Parent;                                                   // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0050(0x0018) MISSED OFFSET
	TArray<struct FString>                             CVars;                                                    // 0x0068(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0078(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DSCommand");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DSCommandManager
// 0x0018 (0x0040 - 0x0028)
class UDSCommandManager : public UObject
{
public:
	TArray<class UObject*>                             DSCommands;                                               // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UGrayPushCommand*                            GrayPushCommands;                                         // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DSCommandManager");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DynamicWeatherController
// 0x0290 (0x03A0 - 0x0110)
class UDynamicWeatherController : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    DelegateOnWeatherChangeStarted;                           // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    DelegateOnWeatherChangeSaturated;                         // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    DelegateOnWeatherChangeRestoreStarted;                    // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    DelegateOnWeatherChangeRestoreEnded;                      // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    WeatherRecover;                                           // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EWeatherStatusType                                 DynamicWeatherType;                                       // 0x0160(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0161(0x0007) MISSED OFFSET
	class UMaterialParameterCollection*                DyanmicWeatherCollection;                                 // 0x0168(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 LightCurve;                                               // 0x0170(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TargetLightValue;                                         // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNotUseCurve;                                             // 0x017C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x017D(0x0003) MISSED OFFSET
	class UCurveFloat*                                 FogBlendInCurve;                                          // 0x0180(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 FogBlendOutCurve;                                         // 0x0188(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 DirectionLightRotYBlendInCurve;                           // 0x0190(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 DirectionLightRotZBlendInCurve;                           // 0x0198(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 DirectionLightRotYBlendOutCurve;                          // 0x01A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 DirectionLightRotZBlendOutCurve;                          // 0x01A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UINotifyTimeBeforeStart;                                  // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	struct FString                                     UINotifyModuleName;                                       // 0x01B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ChangeStartUINotifyID;                                    // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ChangeQuitUINotifyID;                                     // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ChangeStartUINotifyAnimPlayRate;                          // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               UINotifyAKEventBeforeStart;                               // 0x01D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               ChangeStartUINotifyAKEvent;                               // 0x01E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               ChangeQuitUINotifyAKEvent;                                // 0x01E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseLowEffect;                                            // 0x01F0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x01F1(0x0003) MISSED OFFSET
	struct FWeatherControllerRepData                   LocalControlData;                                         // 0x01F4(0x001C) (NoDestructor, NativeAccessSpecifierPublic)
	float                                              RuningDirection;                                          // 0x0210(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RuningTime;                                               // 0x0214(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LerpTotalTime;                                            // 0x0218(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	struct FString                                     WeatherName;                                              // 0x0220(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADirectionalLight*                           MainLight;                                                // 0x0230(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                                   SkyLight;                                                 // 0x0238(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                       Fog;                                                      // 0x0240(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeatherObject                              ObjectValues;                                             // 0x0248(0x0068) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeatherObject                              WeatherObjectSrc;                                         // 0x02B0(0x0068) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0318(0x0004) MISSED OFFSET
	struct FWeatherObject                              WeatherObjectLerp;                                        // 0x031C(0x0068) (NoDestructor, NativeAccessSpecifierPublic)
	struct FWeatherDetailStatus                        CurrentWeatherStatus;                                     // 0x0384(0x000C) (BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x10];                                      // 0x0390(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DynamicWeatherController");
		return pStaticClass;
	}


	void UINotifyCallbackOnServer();
	void OnUserQualitySettingChanged(int renderlevel);
};


// Class ShadowTrackerExtra.DynamicFogController
// 0x0000 (0x03A0 - 0x03A0)
class UDynamicFogController : public UDynamicWeatherController
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DynamicFogController");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DynamicMovementBaseInterface
// 0x0000 (0x0028 - 0x0028)
class UDynamicMovementBaseInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DynamicMovementBaseInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DynamicRainController
// 0x0068 (0x0408 - 0x03A0)
class UDynamicRainController : public UDynamicWeatherController
{
public:
	struct FScriptMulticastDelegate                    OnThunder;                                                // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bWetEnable;                                               // 0x03B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03B1(0x0007) MISSED OFFSET
	class UCurveFloat*                                 WetCurve;                                                 // 0x03B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxRainParticle;                                          // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxRainParticleLow;                                       // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxRainParticleDummy;                                     // 0x03C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 RainBlendInCurve;                                         // 0x03D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 RainBlendOutCurve;                                        // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bThunderEnable;                                           // 0x03E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03E1(0x0003) MISSED OFFSET
	float                                              ThunderIntervalMin;                                       // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ThunderIntervalMax;                                       // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ThunderDistanceMin;                                       // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ThunderDistanceMax;                                       // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ThunderAngleMax;                                          // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET
	class ASTExtraPlayerCharacter*                     MainPawn;                                                 // 0x0400(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DynamicRainController");
		return pStaticClass;
	}


	void OnUserQualitySettingChanged(int renderlevel);
	class ASTExtraPlayerCharacter* GetMainPawn();
	void CreateThunderOnServer();
	void CreateThunderOnClient(float Angle, float Distance);
};


// Class ShadowTrackerExtra.DynamicSunnyController
// 0x0000 (0x03A0 - 0x03A0)
class UDynamicSunnyController : public UDynamicWeatherController
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DynamicSunnyController");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DynamicWeatherMgr
// 0x0158 (0x04E8 - 0x0390)
class ADynamicWeatherMgr : public AActor
{
public:
	struct FWeatherChangeConfig                        WeatherChangeConfig;                                      // 0x0390(0x0050) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int                                                CurUseFixWeatherIndex;                                    // 0x03E0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeatherChangeControl                       WeatherChangeControl;                                     // 0x03E4(0x001C) (NoDestructor, NativeAccessSpecifierPublic)
	TMap<EWeatherStatusType, class UDynamicWeatherController*> DynamicWeatherLookupTable;                                // 0x0400(0x0050) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWeatherControllerRepData                   ControllerRepData;                                        // 0x0450(0x001C) (Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeatherControllerRepData                   ControllerRepDataForReplay;                               // 0x046C(0x001C) (Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	float                                              ServerElapsedTime;                                        // 0x0488(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x048C(0x0004) MISSED OFFSET
	bool                                               bAllowRPCRequire;                                         // 0x0490(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeatherStatusType                                 NextWeatherStatus;                                        // 0x0491(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0492(0x0002) MISSED OFFSET
	float                                              NextWeatherCountDownTime;                                 // 0x0494(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x5];                                       // 0x0498(0x0005) MISSED OFFSET
	bool                                               bEnableWeatherPredictionUI;                               // 0x049D(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x2];                                       // 0x049E(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDynamicWeatherChangeDelegate;                           // 0x04A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x10];                                      // 0x04B0(0x0010) MISSED OFFSET
	bool                                               bDisableModifyControllerRepData;                          // 0x04C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData05[0x7];                                       // 0x04C1(0x0007) MISSED OFFSET
	class ASTExtraGameStateBase*                       GameState;                                                // 0x04C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData06[0x12];                                      // 0x04D0(0x0012) MISSED OFFSET
	EWeatherUICountDownType                            UICountDownType;                                          // 0x04E2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ForbidServerHandleRepData;                                // 0x04E3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DynamicWeatherMgr");
		return pStaticClass;
	}


	void StartTransition();
	void SoftReconnectRecoverData(class AUAEPlayerController* PC);
	void RPCRequireControl();
	void RPCRequire();
	void RPC_S2C_UINotify(EWeatherStatusType WeatherStatus);
	void RPC_S2C_ForceStopDynamicWeatherChange();
	void ReinitInDemoReplay();
	void RefreshWeatherPredictionUI();
	void OnWeatherChangeStarted(const struct FWeatherChangeEvent& Event);
	void OnWeatherChangeSaturated(const struct FWeatherChangeEvent& Event);
	void OnWeatherChangeRestoreStarted(const struct FWeatherChangeEvent& Event);
	void OnWeatherChangeRestoreEnded(const struct FWeatherChangeEvent& Event);
	void OnRep_NextWeatherCountDownTime();
	void OnRep_ControllerDataForReplay();
	void OnRep_ControllerData();
	void OnRep_bEnableWeatherPredictionUI();
	void OnDynamicWeatherChangeDelegate__DelegateSignature(const struct FWeatherChangeEvent& Event);
	void HandleClientHasReactivated();
	void GotoSpecificWeather(int WeatherIndex);
	bool GetNextWeatherDataByWeatherType(EWeatherStatusType WeatherStatusType, struct FWeatherChangeSequenceItem* OutData);
	bool GetNextWeatherData(struct FWeatherChangeSequenceItem* OutData);
	float GetNextWeatherCountDownTimeByType(EWeatherStatusType Type);
	float GetInProgressElapsedTimeSecWithWeather();
	float GetGlobalWeatherSystemTimeOnServer();
	struct FWeatherDetailStatus GetCurrentWeatherDetailStatus();
	void ForceStopDynamicWeatherChangeOnServer();
	void ForceStartNextWeatherChangeOnServer();
	void ClientInit(const struct FWeatherControllerRepData& InitDataIn);
};


// Class ShadowTrackerExtra.DynamicWeatherExMgr
// 0x0118 (0x0600 - 0x04E8)
class ADynamicWeatherExMgr : public ADynamicWeatherMgr
{
public:
	int                                                CircleIndex;                                              // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeatherControllerRepData                   SrcControllerCfg;                                         // 0x04EC(0x001C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeatherControllerRepData                   DstControllerCfg;                                         // 0x0508(0x001C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0524(0x0004) MISSED OFFSET
	struct FScreenAppearanceCfg                        ScreenAppearanceCfg;                                      // 0x0528(0x0028) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                              TickOBPlayerCD;                                           // 0x0550(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TickWeatherFogCD;                                         // 0x0554(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicWeatherController*                   SrcController;                                            // 0x0558(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicWeatherController*                   DstController;                                            // 0x0560(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTScreenAppearanceComponent*                ScreenAppearanceComponent;                                // 0x0568(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UseWeatherFogCfg;                                         // 0x0570(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0571(0x0007) MISSED OFFSET
	struct FWeatherFogCfg                              WeatherFogCfg;                                            // 0x0578(0x0050) (Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x10];                                      // 0x05C8(0x0010) MISSED OFFSET
	TArray<struct FPlayerKeyDstWeather>                PlayerKeyDstWeatherList;                                  // 0x05D8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FPlayerKeyDstWeather>                OBPlayerKeyDstWeatherList;                                // 0x05E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData03[0x8];                                       // 0x05F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DynamicWeatherExMgr");
		return pStaticClass;
	}


	void BlendToWeatherFog(bool bDstWeatherFog);
	void BlendToWeather(bool bDstWeather);
};


// Class ShadowTrackerExtra.HUDWidgetBase
// 0x0098 (0x00C0 - 0x0028)
class UHUDWidgetBase : public UObject
{
public:
	float                                              DesignedResolution;                                       // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   Position;                                                 // 0x002C(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   Size;                                                     // 0x0034(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   Origin;                                                   // 0x003C(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ScreenPosition;                                           // 0x0044(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bScaleByDesignedResolution : 1;                           // 0x004C(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bMaintainAspectRatio : 1;                                 // 0x004C(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              Opacity;                                                  // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreHUDBaseColor : 1;                                  // 0x0054(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	class ASurviveHUD*                                 HUDOwner;                                                 // 0x0058(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    ExtraPlayerOwner;                                         // 0x0060(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                       CharacterOwner;                                           // 0x0068(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0070(0x0001) MISSED OFFSET
	unsigned char                                      bHidden : 1;                                              // 0x0071(0x0001) (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0072(0x0002) MISSED OFFSET
	float                                              LastRenderTime;                                           // 0x0074(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   RenderPosition;                                           // 0x0078(0x0008) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   RenderSize;                                               // 0x0080(0x0008) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              RenderScale;                                              // 0x0088(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   CanvasCenter;                                             // 0x008C(0x0008) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UCanvas*                                     Canvas;                                                   // 0x0098(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AspectScale;                                              // 0x00A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   CanvasClip;                                               // 0x00A4(0x0008) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<class UStructProperty*>                     RenderObjectList;                                         // 0x00B0(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.HUDWidgetBase");
		return pStaticClass;
	}


	bool ShouldDraw(bool bShowScores);
	void SetHidden(bool bIsHidden);
	void RenderObj_TextureAt(float X, float Y, float Width, float Height, struct FHUDRenderObject_Texture* TextureObject);
	void RenderObj_Texture(const struct FVector2D& DrawOffset, struct FHUDRenderObject_Texture* TextureObject);
	struct FVector2D RenderObj_TextAt(float X, float Y, struct FHUDRenderObject_Text* TextObject);
	struct FVector2D RenderObj_Text(const struct FVector2D& DrawOffset, struct FHUDRenderObject_Text* TextObject);
	void DrawTexture(class UTexture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, const struct FLinearColor& DrawColor, const struct FVector2D& RenderOffset, float Rotation, const struct FVector2D& RotPivot, bool bApplyHUDRenderPos);
	struct FVector2D DrawText(const struct FText& Text, float X, float Y, class UFont* Font, bool bDrawShadow, const struct FVector2D& ShadowDirection, const struct FLinearColor& ShadowColor, bool bDrawOutline, const struct FLinearColor& OutlineColor, float TextScale, float DrawOpacity, const struct FLinearColor& DrawColor, TEnumAsByte<ETextHorzPos> TextHorzAlignment, TEnumAsByte<ETextVertPos> TextVertAlignment, const struct FFontRenderInfo& RenderInfo);
	void DrawMaterial(class UMaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, const struct FLinearColor& DrawColor, const struct FVector2D& RenderOffset, float Rotation, const struct FVector2D& RotPivot);
	void DrawAllRenderObjects(float DeltaTime, const struct FVector2D& DrawOffset);
	void Draw(float DeltaTime);
	struct FLinearColor ApplyHUDColor(const struct FLinearColor& DrawColor);
};


// Class ShadowTrackerExtra.EditableHUDWidget
// 0x0000 (0x00C0 - 0x00C0)
class UEditableHUDWidget : public UHUDWidgetBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EditableHUDWidget");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.EffectComponent
// 0x0050 (0x0160 - 0x0110)
class UEffectComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0110(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EffectComponent");
		return pStaticClass;
	}


	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, class AActor* Source, class AActor* Target, TArray<unsigned char> Data);
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, class AActor* Source, class AActor* Target, TArray<unsigned char> Data);
	void S2A_EndEffectGraph(int Uid);
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, class AActor* Source, class AActor* Target, TArray<unsigned char> Data);
};


// Class ShadowTrackerExtra.TeammatePositionWidget
// 0x0108 (0x04B0 - 0x03A8)
class UTeammatePositionWidget : public UUAEUserWidget
{
public:
	class UCanvasPanelSlot*                            CanvasPanel;                                              // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                      ArrowImage;                                               // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                                TeammateDistPanel;                                        // 0x03B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                                  TeammateDistText;                                         // 0x03C0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                                TeammateNamePanel;                                        // 0x03C8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                                  TeammateNameText;                                         // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                                  TeammateGridPanel;                                        // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               InAir;                                                    // 0x03E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET
	class ASTExtraPlayerState*                         SavedPlayerState;                                         // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraBaseCharacter*                       SavePlayerCharacter;                                      // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET
	struct FVector4                                    Limit;                                                    // 0x0400(0x0010) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                heightPlus;                                               // 0x0410(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                rightPlus;                                                // 0x0414(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   UIOffset;                                                 // 0x0418(0x0008) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     LocOffset;                                                // 0x0420(0x000C) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     DeadLocOffset;                                            // 0x042C(0x000C) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   OnPlaneUIOffset;                                          // 0x0438(0x0008) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DeadAlpha;                                                // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DeadMournSec;                                             // 0x0444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaBegin;                                               // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaEnd;                                                 // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaStep;                                                // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaBeginDistance;                                       // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AlphaEndDistance;                                         // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleBegin;                                               // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleEnd;                                                 // 0x0460(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleStep;                                                // 0x0464(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleBeginDistance;                                       // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleEndDistance;                                         // 0x046C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxShowDistance;                                          // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                TargetDistance;                                           // 0x0474(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0478(0x0020) MISSED OFFSET
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0498(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData03[0x10];                                      // 0x04A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TeammatePositionWidget");
		return pStaticClass;
	}


	void UpdatePlayerRevivalTime(int RemainingRevivalTime, int MaxRevivalTime);
	void UpdatePlayerRevivalState(bool InRevivalState, bool IsIDCapPick);
	void SetSavedPlayerState(class ASTExtraPlayerState* SPS);
	void SetCurrentWidgetVisible(bool visible);
	void OnPlayerRevivalTimeChanged(int RemainingRevivalTime, int MaxRevivalTime);
	void OnPlayerRevivalStateChanged(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);
	bool IsPlayerInRevival();
};


// Class ShadowTrackerExtra.EnemyPositionWidget
// 0x0020 (0x04D0 - 0x04B0)
class UEnemyPositionWidget : public UTeammatePositionWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x04B0(0x0008) MISSED OFFSET
	class UCanvasPanel*                                NearImages;                                               // 0x04B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                                FarImages;                                                // 0x04C0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EnemyPositionWidget");
		return pStaticClass;
	}


	void SetEnemyLocation(const struct FVector& Location);
};


// Class ShadowTrackerExtra.EnhancerSpot
// 0x0058 (0x03E8 - 0x0390)
class AEnhancerSpot : public AActor
{
public:
	TArray<struct FEnhancerSpotPlayerSkill>            SkillIdConfig;                                            // 0x0390(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                AddMonsterExpNum;                                         // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RemainEnhancerTimesConfig;                                // 0x03A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RemainEnhancerTimes;                                      // 0x03A8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                UseSuccessTipsId;                                         // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ValidDistance;                                            // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SelfResetTime;                                            // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsAutoResetSelf;                                          // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnhancerSpotState                                 EnhancerState;                                            // 0x03B9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03BA(0x0002) MISSED OFFSET
	float                                              ReadyTime;                                                // 0x03BC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FixReadyTime;                                             // 0x03C0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    EnhancerSpotTimesChange;                                  // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x10];                                      // 0x03D8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EnhancerSpot");
		return pStaticClass;
	}


	void StateChangeDelegate();
	void SetReadyTime(float SReadyTime);
	void SetEState(EEnhancerSpotState EState);
	void RPC_Broadcast_NotifyReadyTime(EEnhancerSpotState SEnhancerState, float SReadyTime);
	void ResetTimes();
	void ResetSelf();
	void ReqUseEnhancerSpot(class ASTExtraPlayerController* InController);
	void ReadyTimeChangeDelegate();
	void OpenEffect();
	void OnRep_StateChange();
	void OnRep_ReadyTimeChange();
	void OnRep_FixReadyTimeChange();
	EEnhancerSpotState GetSpotState();
	void DelayResetSelf();
	void CloseEffect();
};


// Class ShadowTrackerExtra.EnhanceSpotComponent
// 0x0040 (0x0150 - 0x0110)
class UEnhanceSpotComponent : public UActorComponent
{
public:
	TArray<class AEnhancerSpot*>                       SpotList;                                                 // 0x0110(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AEnhancerSpot*>                       DeactiveSpotList;                                         // 0x0120(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNeedActiveEnhanceSpotSruct>         TempNeedActiveEnhances;                                   // 0x0130(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                EnhancePreActiveTipsId;                                   // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnhanceActiveTipsId;                                      // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0148(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EnhanceSpotComponent");
		return pStaticClass;
	}


	void ShowWarnTips(int TipsID);
	void ResetAllEnhanceSpot();
	void RandomSpawnEnhanceSpot(int Number, int TimeSeconds, int Percent);
	void InitTotalSpotList();
	void AddDeactiveSpotList(class AEnhancerSpot* DSpot);
	void ActiveLineReadyEnhanceSpots();
};


// Class ShadowTrackerExtra.EntireMapWidget
// 0x0020 (0x0650 - 0x0630)
class UEntireMapWidget : public UCommonMapWidget
{
public:
	float                                              MapScaleC;                                                // 0x0630(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsSpecialAirlineScaleC;                                  // 0x0634(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0635(0x0003) MISSED OFFSET
	float                                              CorrectLevelToMapScaleC;                                  // 0x0638(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x063C(0x0004) MISSED OFFSET
	class UCanvasPanel*                                CanvasPanel_AirLineGroup;                                 // 0x0640(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                                CanvasPanel_Airline;                                      // 0x0648(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EntireMapWidget");
		return pStaticClass;
	}


	void UpdatePlayersLocAndRotC();
	void UpdateLeftRouteLengthC();
	void TellMarkUIsEnterEntireMap();
	void ReCalMapInfoC();
};


// Class ShadowTrackerExtra.EntityAntiCheatComponent
// 0x0018 (0x0128 - 0x0110)
class UEntityAntiCheatComponent : public UActorComponent
{
public:
	bool                                               bVerifyClientHitAndBullet;                                // 0x0110(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyClientMuzzle;                                      // 0x0111(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0112(0x0002) MISSED OFFSET
	struct FShootVerifyConfig                          VictimShootVerify;                                        // 0x0114(0x0010) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                              TolerateOwnerAndBulletDist;                               // 0x0124(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EntityAntiCheatComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.EventDataCollectionKeys
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys");
		return pStaticClass;
	}


	static struct FString GetTimestamp();
	static struct FString GetTeammatePositions();
	static struct FString GetSelfPosition();
};


// Class ShadowTrackerExtra.EventDataCollectionValues
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues");
		return pStaticClass;
	}


	static struct FString GetTeammatePositionsFromContext(class AActor* ActorContext);
	static struct FString GetTeammatePositions(class ASTExtraPlayerState* STExtraPlayerState);
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_RankingScore
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_RankingScore : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_RankingScore");
		return pStaticClass;
	}


	static struct FString GetSurvivalTime();
	static struct FString GetRescueTimes();
	static struct FString GetRank();
	static struct FString GetPlayerName();
	static struct FString GetMaxKillDistance();
	static struct FString GetMarchDistance();
	static struct FString GetKnockouts();
	static struct FString GetKillNumInVehicle();
	static struct FString GetKillNumByGrenade();
	static struct FString GetKillNum();
	static struct FString GetInDamage();
	static struct FString GetHeal();
	static struct FString GetHeadShotNum();
	static struct FString GetGotAirDropNum();
	static struct FString GetDriveDistance();
	static struct FString GetDamage();
	static struct FString GetAssists();
	static struct FString GetAliveTeamNum();
	static struct FString GetAlivePlayerNum();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_GameStatus
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_GameStatus : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_GameStatus");
		return pStaticClass;
	}


	static struct FString GetWorldLocation();
	static struct FString GetWeather();
	static struct FString GetTotalPlayerCount();
	static struct FString GetToPlaneCarryLeftTime();
	static struct FString GetTeamId();
	static struct FString GetPlaneRouteStop();
	static struct FString GetPlaneRouteStart();
	static struct FString GetOpenId();
	static struct FString GetGameStatus();
	static struct FString GetAlivePlayerCount();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_GameStatus_GameStatus
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_GameStatus_GameStatus : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_GameStatus_GameStatus");
		return pStaticClass;
	}


	static struct FString GetWin();
	static struct FString GetWaitingOnLobby();
	static struct FString GetQualityPlaza();
	static struct FString GetPlaneCarrying();
	static struct FString GetParachuteOpen();
	static struct FString GetParachuteJumping();
	static struct FString GetMatching();
	static struct FString GetLanding();
	static struct FString GetFireWorking();
	static struct FString GetFighting();
	static struct FString GetCake();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_StartMatching
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_StartMatching : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_StartMatching");
		return pStaticClass;
	}


	static struct FString GetViewType();
	static struct FString GetTeamCount();
	static struct FString GetMapId();
	static struct FString GetGameMode();
	static struct FString GetFullTeamCount();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_PlaneCarrying
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_PlaneCarrying : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_PlaneCarrying");
		return pStaticClass;
	}


	static struct FString GetStartPosition();
	static struct FString GetEndPosition();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_PuttingDownCakeFireWorks
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_PuttingDownCakeFireWorks : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_PuttingDownCakeFireWorks");
		return pStaticClass;
	}


	static struct FString GetFireWorksOpenId();
	static struct FString GetCakeOpenId();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_TakeDropItem
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_TakeDropItem : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_TakeDropItem");
		return pStaticClass;
	}


	static struct FString GetType();
	static struct FString GetReason();
	static struct FString GetPlayerName();
	static struct FString GetOpenId();
	static struct FString GetItemInstanceId();
	static struct FString GetItemId();
	static struct FString GetItemCount();
	static struct FString GetHoldingCount();
	static struct FString GetBulletCount();
	static struct FString GetBackpackAvatarItemDurability();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_TakeDropItem_Type
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_TakeDropItem_Type : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_TakeDropItem_Type");
		return pStaticClass;
	}


	static struct FString GetTaking();
	static struct FString GetDropping();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_UsingItem
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_UsingItem : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_UsingItem");
		return pStaticClass;
	}


	static struct FString GetStatus();
	static struct FString GetPlayerName();
	static struct FString GetOpenId();
	static struct FString GetItemLeftCount();
	static struct FString GetItemId();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_UsingItem_Status
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_UsingItem_Status : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_UsingItem_Status");
		return pStaticClass;
	}


	static struct FString GetLeading();
	static struct FString GetInteruption();
	static struct FString GetCompletion();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_Climbing
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_Climbing : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_Climbing");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.EventDataCollectionKeys_Falling
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_Falling : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_Falling");
		return pStaticClass;
	}


	static struct FString GetType();
	static struct FString GetStatus();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_Falling_Type
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_Falling_Type : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_Falling_Type");
		return pStaticClass;
	}


	static struct FString GetStart();
	static struct FString GetEnd();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_Falling_Status
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_Falling_Status : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_Falling_Status");
		return pStaticClass;
	}


	static struct FString GetNonDriving();
	static struct FString GetDriving();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_InFieldOfView
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_InFieldOfView : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_InFieldOfView");
		return pStaticClass;
	}


	static struct FString GetUniqueIdentifier();
	static struct FString GetTargetWorldLocation();
	static struct FString GetOldFieldOfViewNotificationStatus();
	static struct FString GetMyWorldLocation();
	static struct FString GetMinimalScreenLocation();
	static struct FString GetMaximumScreenLocation();
	static struct FString GetFieldOfViewTargetCategory();
	static struct FString GetCurrentFieldOfViewNotificationStatus();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_InFieldOfView_FieldOfView
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_InFieldOfView_FieldOfView : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_InFieldOfView_FieldOfView");
		return pStaticClass;
	}


	static struct FString GetTombBox();
	static struct FString GetTeammateVehicle();
	static struct FString GetTeammate();
	static struct FString GetSmog();
	static struct FString GetFireWorks();
	static struct FString GetEnemyVehicle();
	static struct FString GetEnemy();
	static struct FString GetCake();
	static struct FString GetBombing();
	static struct FString GetAirDroping();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_UnderEnermyAttack
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_UnderEnermyAttack : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_UnderEnermyAttack");
		return pStaticClass;
	}


	static struct FString GetValue();
	static struct FString GetTargetPart();
	static struct FString GetResult();
	static struct FString GetHurtUniqueIdentifier();
	static struct FString GetHurtPosture();
	static struct FString GetHurtPosition();
	static struct FString GetHurtPlayerName();
	static struct FString GetHurtOpenId();
	static struct FString GetHurtHealth();
	static struct FString GetHurtEquipId();
	static struct FString GetHurtDirection();
	static struct FString GetHurtBulletCountInClip();
	static struct FString GetHurtAim();
	static struct FString GetDph();
	static struct FString GetDistance();
	static struct FString GetCarValue();
	static struct FString GetCarHealth();
	static struct FString GetBeHurtUniqueIdentifier();
	static struct FString GetBeHurtPosture();
	static struct FString GetBeHurtPosition();
	static struct FString GetBeHurtPlayerName();
	static struct FString GetBeHurtOpenId();
	static struct FString GetBeHurtJacketDurabilityReduction();
	static struct FString GetBeHurtJacketDurability();
	static struct FString GetBeHurtJacket();
	static struct FString GetBeHurtHelmetDurabilityReduction();
	static struct FString GetBeHurtHelmetDurability();
	static struct FString GetBeHurtHelmet();
	static struct FString GetBeHurtHealth();
	static struct FString GetBeHurtEquipId();
	static struct FString GetBeHurtDirection();
	static struct FString GetAce();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_UnderEnermyAttack_Result
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_UnderEnermyAttack_Result : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_UnderEnermyAttack_Result");
		return pStaticClass;
	}


	static struct FString GetWeedingOut();
	static struct FString GetReducingHealth();
	static struct FString GetKnockingOutReducingHealth();
	static struct FString GetKnockingOut();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_UnderEnermyAttack_BeHurtPosture
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_UnderEnermyAttack_BeHurtPosture : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_UnderEnermyAttack_BeHurtPosture");
		return pStaticClass;
	}


	static struct FString GetWalking();
	static struct FString GetTurningHead();
	static struct FString GetStanding();
	static struct FString GetRunning();
	static struct FString GetProning();
	static struct FString GetJumping();
	static struct FString GetDying();
	static struct FString GetDriving();
	static struct FString GetCrouching();
	static struct FString GetCarriging();
	static struct FString FromPawnStates(int64_t PawnStates);
	static struct FString FromPawnState(EPawnState PawnState);
};


// Class ShadowTrackerExtra.EventDataCollectionValues_UnderEnermyAttack_HurtPosture
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_UnderEnermyAttack_HurtPosture : public UEventDataCollectionValues_UnderEnermyAttack_BeHurtPosture
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_UnderEnermyAttack_HurtPosture");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.EventDataCollectionValues_UnderEnermyAttack_HurtAim
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_UnderEnermyAttack_HurtAim : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_UnderEnermyAttack_HurtAim");
		return pStaticClass;
	}


	static struct FString Get(class ASTExtraBaseCharacter* AttackerSTExtraBaseCharacter, class AActor* DamageCauser);
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_TakingDamage
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_TakingDamage : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_TakingDamage");
		return pStaticClass;
	}


	static struct FString GetResult();
	static struct FString GetReason();
	static struct FString GetPlayerName();
	static struct FString GetOpenId();
	static struct FString GetLeftHealth();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_TakingDamage_Reason
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_TakingDamage_Reason : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_TakingDamage_Reason");
		return pStaticClass;
	}


	static struct FString GetVehiclecolliding();
	static struct FString GetVehicleBombing();
	static struct FString GetPoison();
	static struct FString GetLastBreathWithoutRescue();
	static struct FString GetFalling();
	static struct FString GetDrowning();
	static struct FString GetBombing();
	static struct FString GetAirAttacking();
	static struct FString FromDamageEvent(const struct FDamageEvent& DamageEvent);
};


// Class ShadowTrackerExtra.EventDataCollectionValues_TakingDamage_Result
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_TakingDamage_Result : public UEventDataCollectionValues_UnderEnermyAttack_Result
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_TakingDamage_Result");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.EventDataCollectionKeys_ReducingSignalValue
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_ReducingSignalValue : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_ReducingSignalValue");
		return pStaticClass;
	}


	static struct FString GetPlayerName();
	static struct FString GetOpenId();
	static struct FString GetLeftValue();
	static struct FString GetDistance();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_CircleReducing
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_CircleReducing : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_CircleReducing");
		return pStaticClass;
	}


	static struct FString GetOpenId();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_CircleChange
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_CircleChange : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_CircleChange");
		return pStaticClass;
	}


	static struct FString GetWorldLocation();
	static struct FString GetOldCircleRadius();
	static struct FString GetOldCircleCenter();
	static struct FString GetNewCircleRadius();
	static struct FString GetNewCircleCenter();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_Rescue
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_Rescue : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_Rescue");
		return pStaticClass;
	}


	static struct FString GetStatus();
	static struct FString GetRescuePlayerName();
	static struct FString GetRescueOpenId();
	static struct FString GetBeRescuePlayerName();
	static struct FString GetBeRescueOpenId();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_Rescue_Status
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_Rescue_Status : public UEventDataCollectionValues_UsingItem_Status
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_Rescue_Status");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.EventDataCollectionKeys_DrivingVehicle
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_DrivingVehicle : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_DrivingVehicle");
		return pStaticClass;
	}


	static struct FString GetVehicleId();
	static struct FString GetTire();
	static struct FString GetStatus();
	static struct FString GetSpeed();
	static struct FString GetOil();
	static struct FString GetDrivingType();
	static struct FString GetDriverPlayerName();
	static struct FString GetDriverOpenId();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_DrivingVehicle_DrivingType
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_DrivingVehicle_DrivingType : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_DrivingVehicle_DrivingType");
		return pStaticClass;
	}


	static struct FString GetPassanger();
	static struct FString GetDriver();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_DrivingVehicle_Status
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_DrivingVehicle_Status : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_DrivingVehicle_Status");
		return pStaticClass;
	}


	static struct FString GetOn();
	static struct FString GetOff();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_ReloadingBullet
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_ReloadingBullet : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_ReloadingBullet");
		return pStaticClass;
	}


	static struct FString GetMaxBulletCountInClip();
	static struct FString GetBulletCountInClip();
	static struct FString GetBulletCountInBarrel();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_AirDrop
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_AirDrop : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_AirDrop");
		return pStaticClass;
	}


	static struct FString GetType();
	static struct FString GetPosition();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_AirDrop_Type
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_AirDrop_Type : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_AirDrop_Type");
		return pStaticClass;
	}


	static struct FString GetSuper();
	static struct FString GetNormal();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_ItemAttach
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_ItemAttach : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_ItemAttach");
		return pStaticClass;
	}


	static struct FString GetState();
	static struct FString GetOpenId();
	static struct FString GetItemId();
	static struct FString GetAttachmentId();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_ItemAttach_State
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_ItemAttach_State : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_ItemAttach_State");
		return pStaticClass;
	}


	static struct FString GetDetaching();
	static struct FString GetAttaching();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_PlayerInfo
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_PlayerInfo : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_PlayerInfo");
		return pStaticClass;
	}


	static struct FString GetSex();
	static struct FString GetPlayerName();
	static struct FString GetAvatars();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_PlayerInfo_Sex
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_PlayerInfo_Sex : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_PlayerInfo_Sex");
		return pStaticClass;
	}


	static struct FString GetMale();
	static struct FString GetFemale();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_MiniMapShowInfo
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_MiniMapShowInfo : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_MiniMapShowInfo");
		return pStaticClass;
	}


	static struct FString GetVoiceCheck();
	static struct FString GetPosition();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_MiniMapShowInfo_VoiceCheck
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_MiniMapShowInfo_VoiceCheck : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_MiniMapShowInfo_VoiceCheck");
		return pStaticClass;
	}


	static struct FString GetWeapon();
	static struct FString GetTyre();
	static struct FString GetSilentWeapon();
	static struct FString GetGlass();
	static struct FString GetFootPrint();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_Following
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_Following : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_Following");
		return pStaticClass;
	}


	static struct FString GetFollowType();
	static struct FString GetFollowerOpenId();
	static struct FString GetFolloweeOpenId();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_Following_FollowType
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_Following_FollowType : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_Following_FollowType");
		return pStaticClass;
	}


	static struct FString GetRefuse();
	static struct FString GetInvitation();
	static struct FString GetFollowing();
	static struct FString GetCancellation();
	static struct FString GetAcception();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_MiniMapPinning
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_MiniMapPinning : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_MiniMapPinning");
		return pStaticClass;
	}


	static struct FString GetType();
	static struct FString GetPinPosition();
	static struct FString GetOpenId();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_MiniMapPinning_Type
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_MiniMapPinning_Type : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_MiniMapPinning_Type");
		return pStaticClass;
	}


	static struct FString GetPinning();
	static struct FString GetNonPinning();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_Blocking
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_Blocking : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_Blocking");
		return pStaticClass;
	}


	static struct FString GetType();
	static struct FString GetBlockerOpenId();
	static struct FString GetBlockerIndex();
	static struct FString GetBlockeeOpenId();
	static struct FString GetBlockeeIndex();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_Blocking_Type
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_Blocking_Type : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_Blocking_Type");
		return pStaticClass;
	}


	static struct FString GetNonBlocking();
	static struct FString GetBlocking();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_Dancing
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_Dancing : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_Dancing");
		return pStaticClass;
	}


	static struct FString GetDancerOpenId();
	static struct FString GetDanceId();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_PickingupTombBox
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_PickingupTombBox : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_PickingupTombBox");
		return pStaticClass;
	}


	static struct FString GetOpenId();
	static struct FString GetItemIds();
	static struct FString GetItemId();
	static struct FString GetItemCounts();
	static struct FString GetItemCount();
	static struct FString GetBoxName();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_AirAttacking
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_AirAttacking : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_AirAttacking");
		return pStaticClass;
	}


	static struct FString GetWorldLocation();
	static struct FString GetCenter();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_CurrentWeapon
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_CurrentWeapon : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_CurrentWeapon");
		return pStaticClass;
	}


	static struct FString GetMaxBulletCountInClip();
	static struct FString GetItemId();
	static struct FString GetBulletCountInClip();
	static struct FString GetBulletCountInBarrel();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_SceneInfo
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_SceneInfo : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_SceneInfo");
		return pStaticClass;
	}


	static struct FString GetIsInHouse();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_SceneInfo_IsInHouse
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_SceneInfo_IsInHouse : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_SceneInfo_IsInHouse");
		return pStaticClass;
	}


	static struct FString GetYes();
	static struct FString GetNo();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_TeamInfo
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_TeamInfo : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_TeamInfo");
		return pStaticClass;
	}


	static struct FString GetTeammateOpenIds();
	static struct FString GetTeamId();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_EnteringLeavingTeam
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_EnteringLeavingTeam : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_EnteringLeavingTeam");
		return pStaticClass;
	}


	static struct FString GetTeamId();
	static struct FString GetOpenId();
	static struct FString GetAction();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_EnteringLeavingTeam_Action
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_EnteringLeavingTeam_Action : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_EnteringLeavingTeam_Action");
		return pStaticClass;
	}


	static struct FString GetLeaving();
	static struct FString GetEntering();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_OnOffline
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_OnOffline : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_OnOffline");
		return pStaticClass;
	}


	static struct FString GetType();
	static struct FString GetOpenId();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_OnOffline_Type
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_OnOffline_Type : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_OnOffline_Type");
		return pStaticClass;
	}


	static struct FString GetOnline();
	static struct FString GetOffline();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_RankList
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_RankList : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_RankList");
		return pStaticClass;
	}


	static struct FString GetType();
	static struct FString GetState();
	static struct FString GetOpenId();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_RankList_State
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_RankList_State : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_RankList_State");
		return pStaticClass;
	}


	static struct FString GetOn();
	static struct FString GetOff();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_TextMessage
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_TextMessage : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_TextMessage");
		return pStaticClass;
	}


	static struct FString GetText();
	static struct FString GetOpenId();
	static struct FString GetItemPosition();
	static struct FString GetItemId();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_PawnState
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_PawnState : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_PawnState");
		return pStaticClass;
	}


	static struct FString GetType();
	static struct FString GetStates();
	static struct FString GetOpenId();
	static struct FString GetChangedState();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_PawnState_State
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_PawnState_State : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_PawnState_State");
		return pStaticClass;
	}


	static struct FString GetLeaving();
	static struct FString GetEntering();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_OpenCloseDoor
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_OpenCloseDoor : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_OpenCloseDoor");
		return pStaticClass;
	}


	static struct FString GetRightState();
	static struct FString GetOpenId();
	static struct FString GetLeftState();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_OpenCloseDoor_RightState
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_OpenCloseDoor_RightState : public UEventDataCollectionValues
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_OpenCloseDoor_RightState");
		return pStaticClass;
	}


	static struct FString GetOpen();
	static struct FString GetClose();
	static struct FString GetBroken();
};


// Class ShadowTrackerExtra.EventDataCollectionValues_OpenCloseDoor_LeftState
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionValues_OpenCloseDoor_LeftState : public UEventDataCollectionValues_OpenCloseDoor_RightState
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionValues_OpenCloseDoor_LeftState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.EventDataCollectionKeys_MicSpeakerState
// 0x0000 (0x0028 - 0x0028)
class UEventDataCollectionKeys_MicSpeakerState : public UEventDataCollectionKeys
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_MicSpeakerState");
		return pStaticClass;
	}


	static struct FString GetSpeaker();
	static struct FString GetOpenId();
	static struct FString GetMic();
};


// Class ShadowTrackerExtra.EventDataCollectionKeys_VehicleState
// 0x0008 (0x0030 - 0x0028)
class UEventDataCollectionKeys_VehicleState : public UEventDataCollectionKeys
{
public:
	float                                              LowerboundTickReportIntervalSeconds;                      // 0x0028(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UpperboundTickReportIntervalSeconds;                      // 0x002C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.EventDataCollectionKeys_VehicleState");
		return pStaticClass;
	}


	static struct FString GetWheelStates();
	static struct FString GetFuel();
	static struct FString GetForwardSpeed();
};


// Class ShadowTrackerExtra.ExtendedLoopScrollBox
// 0x0198 (0x0BA8 - 0x0A10)
class UExtendedLoopScrollBox : public UScrollBox
{
public:
	struct FScriptMulticastDelegate                    OnRefreshItem;                                            // 0x0A10(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnItemCreated;                                            // 0x0A20(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRefreshSubItem;                                         // 0x0A30(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSubItemCreated;                                         // 0x0A40(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnViewScrolled;                                           // 0x0A50(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UClass*                                      itemType;                                                 // 0x0A60(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ItemSize;                                                 // 0x0A68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Padding;                                                  // 0x0A6C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      SubItemType;                                              // 0x0A70(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   SubItemSize;                                              // 0x0A78(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   SubPadding;                                               // 0x0A80(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0A88(0x0008) MISSED OFFSET
	class UCanvasPanel*                                CanvasPanel;                                              // 0x0A90(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0A98(0x0050) MISSED OFFSET
	TMap<int, class UWidget*>                          CurrentItemsMap;                                          // 0x0AE8(0x0050) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                             UnusedItemsArray;                                         // 0x0B38(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<int, class UWidget*>                          CurrentSubItemsMap;                                       // 0x0B48(0x0050) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                             UnusedSubItemsArray;                                      // 0x0B98(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ExtendedLoopScrollBox");
		return pStaticClass;
	}


	void UserScrolled(float Offset);
	bool SetSubItemCount(int Index, int subCount);
	bool SetItemCount(int count);
	void ScrollToSubItemByIndex(int Index);
	void ScrollToItemByIndex(int Index);
	void RefreshSubItem(int Index);
	void RefreshItem(int Index);
	void RefreshAllSubItems();
	void RefreshAllItems();
	bool ClearAllSubItems(bool includeUnused);
	bool ClearAllItems(bool includeUnused);
};


// Class ShadowTrackerExtra.FakePlayerAIController
// 0x0060 (0x0818 - 0x07B8)
class AFakePlayerAIController : public ABaseAIController
{
public:
	class UClass*                                      CharacterClass;                                           // 0x07B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEnterJumping;                                           // 0x07C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x07D0(0x0010) MISSED OFFSET
	class UNewPathFollowingComponent*                  newFollowingComponent;                                    // 0x07E0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PlayerTeamId;                                             // 0x07E8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           PlayerKey;                                                // 0x07EC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PlayerName;                                               // 0x07F0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      AIType;                                                   // 0x0800(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseDynamicNAV;                                           // 0x0801(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0802(0x0006) MISSED OFFSET
	class ASTExtraBaseCharacter*                       ControlledCharacter;                                      // 0x0808(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0810(0x0001) MISSED OFFSET
	bool                                               IsOpenPawnMoveOpti;                                       // 0x0811(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0812(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FakePlayerAIController");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.FakePlayerCustomComponent
// 0x0060 (0x0170 - 0x0110)
class UFakePlayerCustomComponent : public UActorComponent
{
public:
	struct FString                                     tableName;                                                // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int, struct FFakePlayerCustomRow>             RowMap;                                                   // 0x0120(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FakePlayerCustomComponent");
		return pStaticClass;
	}


	void InitRowDataMap();
	void InitAIParam(int resID, struct FGameModeAIPlayerParams* OutParam);
	struct FString GetControllerPath(int resID);
};


// Class ShadowTrackerExtra.FeatureSetCollection
// 0x0020 (0x0048 - 0x0028)
class UFeatureSetCollection : public UObject
{
public:
	TArray<struct FFeatureConfigItem>                  FeatureConfigItemList;                                    // 0x0028(0x0010) (ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFeatureSetItem>                     FeatureSetItemList;                                       // 0x0038(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FeatureSetCollection");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.FerrisBoxRecord
// 0x0008 (0x0118 - 0x0110)
class UFerrisBoxRecord : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FerrisBoxRecord");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.SimulateSyncSmoothActor
// 0x0008 (0x0398 - 0x0390)
class ASimulateSyncSmoothActor : public AActor
{
public:
	class USimulateSyncSmoothComponent*                SimulateSyncSmooth;                                       // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SimulateSyncSmoothActor");
		return pStaticClass;
	}


	void SetVelocity(const struct FVector& Velocity);
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);
};


// Class ShadowTrackerExtra.FerrisWheel
// 0x00D0 (0x0468 - 0x0398)
class AFerrisWheel : public ASimulateSyncSmoothActor
{
public:
	struct FVector                                     BoxExtentMin;                                             // 0x0398(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     BoxExtentMax;                                             // 0x03A4(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                        OutBoundBox;                                              // 0x03B0(0x001C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                        InBoundBox;                                               // 0x03CC(0x001C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     DefaultInPosition;                                        // 0x03E8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              mf_PassDoorAngel;                                         // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RotateSpeedCpp;                                           // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6C];                                      // 0x03FC(0x006C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FerrisWheel");
		return pStaticClass;
	}


	void UnRegSingleBox(class UStaticMeshComponent* InStatic);
	void StandBox();
	void RegNewBox(class USkeletalMeshComponent* InSkel);
	void PullBoxStand(class USceneComponent* InComp);
	bool PassThroughDoor(class UStaticMeshComponent* InComp, const struct FVector& InStart, const struct FVector& InEnd);
	void OnBoxHitted(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	bool IsInFerrisDoor(class UStaticMeshComponent* InComp, const struct FVector& InPos, bool InShouldLog);
	bool IsInFerrisBox(class UStaticMeshComponent* InComp, const struct FVector& InPos, bool InShouldLog);
	void Init_Refs();
	struct FVector GetGoodOutPos(class UStaticMeshComponent* InComp, const struct FVector& InPos, bool ForceForward);
	void CheckPosition(const struct FVector& InPos, class UStaticMeshComponent* InHitedBox);
	void BroadcastEnableTick(bool bEnabled);
};


// Class ShadowTrackerExtra.FieldOfViewNotificationComponent
// 0x0038 (0x0148 - 0x0110)
class UFieldOfViewNotificationComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    InFieldOfViewChangedDelegate;                             // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                              CheckFrequencyLowerBoundInSeconds;                        // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckFrequencyUpperBoundInSeconds;                        // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSelfDebugLineTraceDrawn;                                 // 0x0128(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheckingFieldOfViewEnabled;                              // 0x0129(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x012A(0x0006) MISSED OFFSET
	EFieldOfViewNotificationStatus                     FieldOfViewNotificationStatus;                            // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x17];                                      // 0x0131(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FieldOfViewNotificationComponent");
		return pStaticClass;
	}


	bool IsNotificationWorking();
	static int IsGlobalDebugLineTraceDrawn();
	void InFieldOfViewChangedDelegate__DelegateSignature(class UFieldOfViewNotificationComponent* Sender, EFieldOfViewNotificationStatus OldFieldOfViewNotificationStatus);
	EFieldOfViewNotificationStatus GetFieldOfViewNotificationStatus();
};


// Class ShadowTrackerExtra.FieldOfViewNotificationComponentRegistry
// 0x0030 (0x0058 - 0x0028)
class UFieldOfViewNotificationComponentRegistry : public UObject
{
public:
	struct FScriptMulticastDelegate                    FieldOfViewNotificationComponentRegisteredDelegate;       // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    FieldOfViewNotificationComponentUnregisteredDelegate;     // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FieldOfViewNotificationComponentRegistry");
		return pStaticClass;
	}


	void UnRegister(class UFieldOfViewNotificationComponent* FieldOfViewNotificationComponent);
	void Register(class UFieldOfViewNotificationComponent* FieldOfViewNotificationComponent);
	void GetRegisteredFieldOfViewNotificationComponents(TArray<class UFieldOfViewNotificationComponent*>* OutRegisteredFieldOfViewNotificationComponents);
	static class UFieldOfViewNotificationComponentRegistry* Get(class UObject* WorldContext);
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(class UFieldOfViewNotificationComponentRegistry* Sender, class UFieldOfViewNotificationComponent* FieldOfViewNotificationComponent);
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(class UFieldOfViewNotificationComponentRegistry* Sender, class UFieldOfViewNotificationComponent* FieldOfViewNotificationComponent);
};


// Class ShadowTrackerExtra.FieldOfViewTargetCategoryGetterInterface
// 0x0000 (0x0028 - 0x0028)
class UFieldOfViewTargetCategoryGetterInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FieldOfViewTargetCategoryGetterInterface");
		return pStaticClass;
	}


	struct FString GetFieldOfViewTargetCategory(class UObject* Context);
};


// Class ShadowTrackerExtra.WeaponStateBase
// 0x0078 (0x01B0 - 0x0138)
class UWeaponStateBase : public UWeaponLogicBaseComponent
{
public:
	struct FScriptMulticastDelegate                    OnBeginState;                                             // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEndState;                                               // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bNeedConditionGateCheck;                                  // 0x0158(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EFreshWeaponStateType>                 FreshWeaponStateType;                                     // 0x0159(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x56];                                      // 0x015A(0x0056) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponStateBase");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.FireWeaponState
// 0x0028 (0x01D8 - 0x01B0)
class UFireWeaponState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraBaseCharacter*                       WeaponOwner;                                              // 0x01B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x11];                                      // 0x01C0(0x0011) MISSED OFFSET
	bool                                               OpenPressBtnStay;                                         // 0x01D1(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x01D2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FireWeaponState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.FlareGunCrossHairComponent
// 0x0028 (0x0260 - 0x0238)
class UFlareGunCrossHairComponent : public UCrossHairComponent
{
public:
	class UTexture2D*                                  DisableTexture;                                           // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0240(0x0008) MISSED OFFSET
	float                                              fadeInSpeed;                                              // 0x0248(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              fadeOutSpeed;                                             // 0x024C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              fadeScaleMin;                                             // 0x0250(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              fadeScaleMax;                                             // 0x0254(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              fadeColorAlphaMin;                                        // 0x0258(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              fadeColorAlphaMax;                                        // 0x025C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FlareGunCrossHairComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.FloatingTextComponent
// 0x0020 (0x0130 - 0x0110)
class UFloatingTextComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0110(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FloatingTextComponent");
		return pStaticClass;
	}


	void OnFloatingDamageText(float BaseDamage, bool IsHeadShot, const struct FDamageEvent& DamageEvent, const struct FHitResult& HitResult, class AActor* Victim);
	void CreateFloatingText(const struct FFloatingTextData& FloatingTextData);
	void ClientHandleFloatingTextArray(TArray<struct FFloatingTextData> FloatingTextArray);
};


// Class ShadowTrackerExtra.FloatLogic
// 0x0010 (0x0038 - 0x0028)
class UFloatLogic : public UObject
{
public:
	class USTExtraAdavancedFloatingMovementComp*       FloatingVehicleMovement;                                  // 0x0028(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FloatLogic");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.FootprintActor
// 0x0030 (0x03C0 - 0x0390)
class AFootprintActor : public AActor
{
public:
	class USceneComponent*                             RootSceneComp;                                            // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                                 FootprintMesh;                                            // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03A0(0x0008) MISSED OFFSET
	TArray<class UStaticMeshComponent*>                FootprintList;                                            // 0x03A8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FootprintActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.FootprintInstanceActor
// 0x0010 (0x03A0 - 0x0390)
class AFootprintInstanceActor : public AActor
{
public:
	class UInstancedStaticMeshComponent*               InstancedMeshComponent;                                   // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FootprintInstanceActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.FPPSpringArmComponent
// 0x0070 (0x0450 - 0x03E0)
class UFPPSpringArmComponent : public USTExtraSpringArmComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03E0(0x0020) MISSED OFFSET
	struct FTransform                                  InVehicleCameraTrans;                                     // 0x0400(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           ShovelingCameraData;                                      // 0x0430(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x044C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FPPSpringArmComponent");
		return pStaticClass;
	}


	void SetFPPCameraDataEnable(TEnumAsByte<EFPPCameraDataType> CameraDataType, bool IsEnable);
};


// Class ShadowTrackerExtra.GameEventListener
// 0x0040 (0x0150 - 0x0110)
class UGameEventListener : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnGameEventListener;                                      // 0x0110(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	float                                              HeightCheck_High;                                         // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HeightCheck_Mid;                                          // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HeightCheck_Low;                                          // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	float                                              FlyingScreenSizeCullingFactor;                            // 0x0130(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FlyingDistanceCullingFactor;                              // 0x0134(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HighMidFightingScreenSizeCullingFactor;                   // 0x0138(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HighMidFightingDistanceCullingFactor;                     // 0x013C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LowFightingScreenSizeCullingFactor;                       // 0x0140(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LowFightingDistanceCullingFactor;                         // 0x0144(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUsetoControlNearClip;                                    // 0x0148(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNearClipInPlane;                                         // 0x0149(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x014A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameEventListener");
		return pStaticClass;
	}


	void StarCalcJump();
	void ScaleScreenSizeCulling(TEnumAsByte<EGamePawnEvent> pawnevent);
	void OnChangeViewTarget();
	bool IsPlayerLandFromTheAir();
	bool IsPlayerLanded();
	bool IsPlayerFlying();
	void HeightCheck();
	void GameEventReBirth();
	void GameEventPlane();
	void GameEventParachute();
	void GameEventLanded();
	void GameEventJump();
	void GameEventFinished();
	void GameEventFighting();
	void GameEventDie(float currentHP, float ratioHP);
	void GameEventBirth();
	void ChangeViewtargetToPlane();
};


// Class ShadowTrackerExtra.GameLevelData
// 0x0088 (0x0418 - 0x0390)
class AGameLevelData : public AActor
{
public:
	struct FGameLevelDesc                              LevelDesc;                                                // 0x0390(0x0018) (Edit, NativeAccessSpecifierPublic)
	TArray<struct FString>                             TargetClassPaths;                                         // 0x03A8(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UClass*                                      LevelDirectorClass;                                       // 0x03B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LeveDirectorFilePath;                                     // 0x03C0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMonsterWave>                        MonsterWaveCfg;                                           // 0x03D0(0x0010) (Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FPVECircleDeploymentConfig>          PVECircleConfigs;                                         // 0x03E0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TEnumAsByte<ELevelEndCondType>                     EndCondType;                                              // 0x03F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	int                                                EndCondPar;                                               // 0x03F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsLastLevel;                                              // 0x03F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET
	class AActor*                                      RelifePointGroupActor;                                    // 0x0400(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                             TaskPointLocations;                                       // 0x0408(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameLevelData");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameLevelManagerComponent
// 0x03C0 (0x04D0 - 0x0110)
class UGameLevelManagerComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnAppendEliteGroup;                                       // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRemoveEliteGroup;                                       // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int                                                EliteWarningItemIconID;                                   // 0x0130(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	TMap<int, int>                                     EliteWarningItemInstanceIDMap;                            // 0x0138(0x0050) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameLevelDesc>                      CurActiveGameLevelList;                                   // 0x0188(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FLevelData>                          CurActiveGameLevelDataList;                               // 0x0198(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int                                                TotalAliveMonsterNum;                                     // 0x01A8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BornLevelMonsterNum;                                      // 0x01AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BornShitMonsterNum;                                       // 0x01B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	TMap<struct FString, struct FSingleLevelObjArray>  LevelObjs;                                                // 0x01B8(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAliveMonsterNum>                    AliveMonsterNumList;                                      // 0x0208(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameLevelDesc                              CurCompletedGameLevel;                                    // 0x0218(0x0018) (NativeAccessSpecifierPublic)
	float                                              LevelBeginTime;                                           // 0x0230(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LevelEndTime;                                             // 0x0234(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_Diffcult;                                              // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_UnLoadLevelData;                                       // 0x023C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_UnLoadDynamicLevel;                                    // 0x023D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x023E(0x0002) MISSED OFFSET
	float                                              NavTickInterval;                                          // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0244(0x0004) MISSED OFFSET
	TArray<struct FLevelData>                          LevelDataList;                                            // 0x0248(0x0010) (Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FLevelRelifePointInfo>               LevelRelifePointList;                                     // 0x0258(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FString                                     MonsterTableName;                                         // 0x0268(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     MonsterBPTableName;                                       // 0x0278(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     MonsterSpecialStateTableName;                             // 0x0288(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     DecoratorTableName;                                       // 0x0298(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     MonsterDropTableName;                                     // 0x02A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                RelifePosOffsetZ;                                         // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x214];                                     // 0x02BC(0x0214) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameLevelManagerComponent");
		return pStaticClass;
	}


	class AActor* SpawnPickup(int ID, const struct FTransform& Transform, int ContentNum);
	class AActor* SpawnMonster(int ID, const struct FTransform& Transform, const struct FMonsterParams& Params);
	void RemoveRelifePoint(struct FGameLevelDesc* LevelDesc);
	void RegisterGameEvent();
	void OnRep_CurGameLevelChanged();
	void OnMonsterWaveEnd(int WaveID, struct FGameLevelDesc* LevelDesc);
	void OnGameStart();
	void OnGameEnd();
	void OnBotDied(class AActor* Actor, class AActor* Killer);
	void OnBotBorn(class AActor* Actor);
	void OnActorUniqueIdRemove(uint32_t SId);
	void OnActorUniqueIdAdd(class AActor* Actor, uint32_t SId);
	void OnActorSpawn(class AActor* Actor);
	void OnActorDespawn(class AActor* Actor);
	bool KillUnitBySingleId(int SingleId, bool ForbidenReborn);
	bool KillUnitBySelf(class AActor* TActor);
	bool KillUnit(TEnumAsByte<EBotCategray> BotCat, int BotType, bool ForbidenReborn);
	bool KillCategoryUnit(TEnumAsByte<EBotCategray> BotCat, bool ForbidenReborn);
	void InitUnit(class AActor* TActor, TEnumAsByte<EBotCategray> Category);
	void InitRelifePoint(TArray<struct FRelifePoint> PVERelifePoints, struct FGameLevelDesc* LevelDesc);
	void InitLuaLevelActors();
	void InitLevelAddObjs(struct FLevelData* LevelData);
	void HandleGameLevelEnd(struct FGameLevelDesc* LevelDesc);
	void HandleEnterLevel(class AActor* OffsetActor, struct FGameLevelDesc* InLevelDesc);
	class AActor* GetUnit(TEnumAsByte<EBotCategray> Category, int TypeID);
	bool GetRelifeTrans(const struct FVector& NearVector, struct FTransform* RelifeTrans);
	TArray<struct FLevelData> GetNearPosLevelList(int GetNum, int RandomNum, int ChapterType, const struct FVector& NearPos);
	bool GetNearPosLevel(const struct FVector& NearPos, int ChapterType, TArray<struct FLevelData> AvoidLevelList, struct FLevelData* OutLevelData);
	struct FLevelData GetLoadedLevelData(struct FGameLevelDesc* LevelDesc);
	int GetAliveMonsterNum(TEnumAsByte<EMonsterSpawnSourceType> SourceType);
	struct FLevelData GetActiveLevelDataByLevelDesc(struct FGameLevelDesc* LevelDesc);
	void EndLevelAddObjs(struct FLevelData* LevelData);
	void ChangeAliveMonsterNumList(TEnumAsByte<EMonsterSpawnSourceType> SourceType, int Addition);
	void BroadRemoveEliteGroup(int LevelId, const struct FVector& Pos);
	void BroadAppendEliteGroup(int LevelId, const struct FVector& Pos);
	void AdjustPosByOffsetActor(const struct FTransform& OffsetTrans, struct FLevelData* LevelData);
	void ActiveRelifePoint(int ID, bool ActivePoint, struct FGameLevelDesc* LevelDesc);
};


// Class ShadowTrackerExtra.AreaBase
// 0x0000 (0x0028 - 0x0028)
class UAreaBase : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AreaBase");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AreaVolume
// 0x0028 (0x0050 - 0x0028)
class UAreaVolume : public UAreaBase
{
public:
	struct FVector                                     Position;                                                 // 0x0028(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    Rotation;                                                 // 0x0034(0x000C) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     Volume;                                                   // 0x0040(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AreaVolume");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AreaSphere
// 0x0010 (0x0038 - 0x0028)
class UAreaSphere : public UAreaBase
{
public:
	struct FVector                                     Position;                                                 // 0x0028(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Radius;                                                   // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AreaSphere");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameLuaAPI
// 0x0000 (0x0028 - 0x0028)
class UGameLuaAPI : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameLuaAPI");
		return pStaticClass;
	}


	void UIShowTips(const struct FString& FunctionName, uint32_t PlayerKey, int TipType, const struct FString& Params1, const struct FString& Params2, bool IsToAll);
	void UISetWidgetVisibility(uint32_t PlayerKey, const struct FString& WidgetTag, int Visibility, bool IsToAll);
	void UISetWidgetText(uint32_t PlayerKey, const struct FString& WidgetTag, const struct FString& SText, int TextId, const struct FString& Params, bool IsToAll);
	void UIOperateWidget(uint32_t PlayerKey, const struct FString& WidgetTag, const struct FString& SOperation, const struct FString& Params, bool IsToAll);
	void UICustomBehavior(uint32_t PlayerKey, const struct FString& UIBehavior, int TipType, const struct FString& Params, bool IsToAll);
	bool TeleportPlayerToVehicle(class ASTExtraBaseCharacter* Player, class ASTExtraVehicleBase* Vehicle, int SeatIdx);
	void TeleportPawn(class ASTExtraBaseCharacter* Player, const struct FVector& Position, const struct FRotator& Rotation);
	void TaskModifyTask(uint32_t PlayerKey, int TaskID, int Progress, int State);
	void TaskDeleteTask(uint32_t PlayerKey, int TaskID);
	void TaskAddTask(uint32_t PlayerKey, int TaskID, int Aim);
	void StopPlayerJoin();
	class ASTExtraVehicleBase* SpawnVehicle(int resID, const struct FVector& Position, const struct FRotator& Rotation);
	void ShowMessage(const struct FString& Message);
	void SetTeamID(class AActor* TActor, int TeamID);
	void RevivePlayerAtPosition(uint32_t PlayerKey, const struct FVector& Position, const struct FRotator& Rotation);
	void RevivePlayer(uint32_t PlayerKey);
	bool RemoveBuff(int ID, class APawn* TargetPawn, class AActor* Causer);
	bool RemoveActor(class AActor* TActor);
	void RemoteDestroyActor(uint32_t PlayerKey, int SingleId, bool IsToAll);
	int RemoteCreateActor(uint32_t PlayerKey, int TeamID, int resID, const struct FVector& Position, const struct FRotator& Rotation, bool IsToAll);
	bool IsVehicle(class AActor* TActor);
	bool IsValid(class UObject* TObject);
	bool IsPlayerAlive(uint32_t PlayerKey);
	bool IsPlayer(class AActor* TActor);
	bool IsInArea(const struct FVector& Position, int AreaID);
	static bool IsClassOf(class UObject* Object, class UClass* Class);
	bool HasBuff(int ID, class APawn* TargetPawn);
	int GetWeaponBulletResId(class ASTExtraWeapon* TWeapon);
	TArray<class ASTExtraPlayerCharacter*> GetPlayersOnVehicle(class ASTExtraVehicleBase* Vehicle);
	class ASTExtraPlayerController* GetPlayerControllerByPlayerKey(uint32_t PlayerKey);
	class ASTExtraBaseCharacter* GetPlayerByPlayerKey(uint32_t PlayerKey);
	class ASTExtraBaseCharacter* GetOneRealPlayer();
	class ASTExtraBaseCharacter* GetOnePlayerBase();
	class ASTExtraPlayerCharacter* GetOnePlayer();
	class UUAENetConnection* GetNetConnection(class ASTExtraPlayerController* PlayerController);
	struct FString GetLevelPath(class ULevel* Level);
	int GetItemNumByResID(class ASTExtraBaseCharacter* Player, int resID);
	TArray<int> GetEquipWeaponList(class ASTExtraBaseCharacter* Pawn);
	class ASTExtraWeapon* GetCurrentUseWeapon(class ASTExtraBaseCharacter* Pawn);
	TArray<class ASTExtraVehicleBase*> GetAllVehicles();
	TArray<class ASTExtraPlayerState*> GetAllPlayerStates();
	TArray<class ASTExtraPlayerCharacter*> GetAllPlayerPawns();
	TArray<class ASTExtraPlayerController*> GetAllPlayerControllers();
	TArray<class AActor*> GetActorsInSphere(const struct FVector& SpherePos, float SphereRadius, class UClass* ActorClass);
	TArray<class AActor*> GetActorsByTag(const struct FName& Tag);
	TArray<class AActor*> GetActorsByClass(class UClass* TargetClass);
	int GetActorResId(class AActor* TActor);
	class ASTExtraBaseCharacter* FindFakePlayer();
	void EndMatch(int TeamID, int Reason);
	void DamageTarget(class AActor* SourceActor, class AActor* TargetActor, float Damage, int TypeID);
	class APickUpWrapperActor* CreatePickup(int TeamID, int resID, const struct FVector& Position, const struct FRotator& Rotation, int Num);
	class ASTExtraCharacter* CreatePawn(int TeamID, int resID, const struct FVector& Position, const struct FRotator& Rotation);
	class ASTExtraBaseCharacter* CreateFakePlayer(int TeamID, int resID, const struct FVector& Posi, const struct FRotator& Rota);
	class UAreaVolume* CreateAreaVolume(const struct FVector& Posi, const struct FRotator& Rota, const struct FVector& Volume);
	class UAreaSphere* CreateAreaSphere(const struct FVector& Posi, float Radius);
	class AActor* CreateActor(int TeamID, int resID, const struct FVector& Position, const struct FRotator& Rotation);
	bool CheckDSSwitchOpen(int SwitchId);
	class ASTExtraVehicleBase* CastToVehicle(class AActor* TActor);
	class ASTExtraPlayerState* CastToPlayerState(class AActor* TActor);
	class ASTExtraPlayerCharacter* CastToPlayer(class AActor* TActor);
	bool AddItemByResID(class ASTExtraBaseCharacter* Player, int resID, int Num);
	int AddHealth(class ASTExtraBaseCharacter* Player, float AddHealth);
	bool AddBuff(int ID, class APawn* TargetPawn, class AActor* Causer);
};


// Class ShadowTrackerExtra.GamemodeAIDataAsset
// 0x0060 (0x0090 - 0x0030)
class UGamemodeAIDataAsset : public UDataAsset
{
public:
	TArray<struct FAIEquipSpawnGroupDataBase>          SpawnEquipDataBase;                                       // 0x0030(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              RandomStartJumpTime;                                      // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomEndJumpTime;                                        // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpRadius;                                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpHeight;                                               // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomAccelerateStart;                                    // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomAccelerateEnd;                                      // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OpenParachuteHeight;                                      // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckOpenParachuteFreq;                                   // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloseParachuteHeight;                                     // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckCloseParachuteFreq;                                  // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckNoPlayerRadiusSquare;                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WhiteCircleRaduisCanPrne;                                 // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WhiteCircleRaduisMedicine;                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StopdeliverTime;                                          // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoCirlceRadius;                                           // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TraceHeight;                                              // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RangeMin;                                                 // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RangeMax;                                                 // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OriginCheckSquare;                                        // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DestCheckSquare;                                          // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GamemodeAIDataAsset");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeBaseComponent
// 0x0010 (0x0120 - 0x0110)
class UGameModeBaseComponent : public UActorComponent
{
public:
	class ABattleRoyaleGameModeTeam*                   OwnerGameMode;                                            // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bHasInitialized;                                          // 0x0118(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0119(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeBaseComponent");
		return pStaticClass;
	}


	void Update(float DeltaTime);
	void UnInit();
	void Init();
};


// Class ShadowTrackerExtra.GameModeDataAsset
// 0x0020 (0x0050 - 0x0030)
class UGameModeDataAsset : public UDataAsset
{
public:
	TArray<float>                                      Probabilities;                                            // 0x0030(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameModeParam>                      GameModeParams;                                           // 0x0040(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeDataAsset");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeLuaEnv
// 0x0098 (0x00C0 - 0x0028)
class UGameModeLuaEnv : public UObject
{
public:
	struct FString                                     GameScriptPath;                                           // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LuaFileEntryFile;                                         // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PreloadLuaFile;                                           // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LuaTriggersPath;                                          // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LuaModName;                                               // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LuaTriggersFile;                                          // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableDSGameTickLua;                                     // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0089(0x000F) MISSED OFFSET
	class ULuaStateWrapper*                            LuaStateWrapper;                                          // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00A0(0x0008) MISSED OFFSET
	class ULuaTimerManager*                            LuaTimerMgr;                                              // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULuaTriggerManager*                          LuaTriggerMgr;                                            // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameLuaAPI*                                 GameLuaAPI;                                               // 0x00B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeLuaEnv");
		return pStaticClass;
	}


	void TickEnv(float tickTime);
	void SetStepGCLimitTime(double GCLimitTime);
	void PullLevelActors(const struct FString& LevelName);
	void InitLuaGlobalVariable();
	void InitLuaGlobalTools();
	void InitLuaFile();
	void InitLuaEnv();
	struct FString GetLuaModPath();
	void CreateSluaState();
	void CallLuaWaitGlobalScriptFunction(const struct FString& InFunctionName);
	void CallLuaGlobalScriptFunction(const struct FString& InFunctionName);
};


// Class ShadowTrackerExtra.GameModeServiceBase
// 0x0000 (0x0028 - 0x0028)
class UGameModeServiceBase : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeServiceBase");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeService_Original
// 0x0000 (0x0028 - 0x0028)
class UGameModeService_Original : public UGameModeServiceBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeService_Original");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeState_Challenge
// 0x0000 (0x0048 - 0x0048)
class UGameModeState_Challenge : public UGameModeState
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeState_Challenge");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeState_Training
// 0x0018 (0x0060 - 0x0048)
class UGameModeState_Training : public UGameModeState
{
public:
	float                                              AboutToOverTime;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	int                                                AboutToOverMsgID;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	float                                              PostLoginMsgDelay;                                        // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                PostLoginMsgID;                                           // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeState_Training");
		return pStaticClass;
	}


	void BroadcastAboutToOver();
};


// Class ShadowTrackerExtra.GameModeStateEmpty
// 0x0000 (0x0048 - 0x0048)
class UGameModeStateEmpty : public UGameModeState
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateEmpty");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeStateFightingGroup
// 0x0000 (0x0058 - 0x0058)
class UGameModeStateFightingGroup : public UGameModeStateFightingTeam
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFightingGroup");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeStateFightingWar
// 0x0010 (0x0068 - 0x0058)
class UGameModeStateFightingWar : public UGameModeStateFightingTeam
{
public:
	float                                              RespawnTime;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0xC];                                       // 0x005C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFightingWar");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeStateFinishedGroup
// 0x0000 (0x0048 - 0x0048)
class UGameModeStateFinishedGroup : public UGameModeStateFinishedTeam
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFinishedGroup");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeStateFinishedWar
// 0x0000 (0x0048 - 0x0048)
class UGameModeStateFinishedWar : public UGameModeStateFinishedTeam
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFinishedWar");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GameModeStateReadyCorpsWar
// 0x0000 (0x0088 - 0x0088)
class UGameModeStateReadyCorpsWar : public UGameModeStateReady
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateReadyCorpsWar");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GlobalLevelLogicActor
// 0x0030 (0x03C0 - 0x0390)
class AGlobalLevelLogicActor : public AActor
{
public:
	bool                                               bEnableGroundWaterFogSwitch;                              // 0x0390(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0391(0x0007) MISSED OFFSET
	struct FName                                       GroundFogTag;                                             // 0x0398(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       WaterFogTag;                                              // 0x03A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SeaLvel;                                                  // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	class AExponentialHeightFog*                       GroundFog;                                                // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AExponentialHeightFog*                       WaterFog;                                                 // 0x03B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GlobalLevelLogicActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraPlayerController
// 0x2268 (0x2E60 - 0x0BF8)
class ASTExtraPlayerController : public AUAEPlayerController
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0BF8(0x0014) MISSED OFFSET
	float                                              FreeCameraStartMinPitchMin;                               // 0x0C0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCameraStartMinPitchMax;                               // 0x0C10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bTrackingKillerEnabled;                                   // 0x0C14(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0C15(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData02[0x50];                                      // 0x0C15(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.STExtraPlayerController.TouchIndexSet
	TEnumAsByte<ETouchIndex>                           OnFireTouchFingerIndex;                                   // 0x0C68(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUTSkillEntry                                      TouchEndTriggerSkillEntry;                                // 0x0C69(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x1E];                                      // 0x0C6A(0x001E) MISSED OFFSET
	unsigned char                                      UnknownData04[0x50];                                      // 0x0C6A(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.STExtraPlayerController.FriendOBRelevancyCharacterSet
	TArray<TEnumAsByte<ETouchIndex>>                   IgnoreCameraMovingIndexArray;                             // 0x0CD8(0x0010) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                               bNeedSetFireTouchFingerIndex;                             // 0x0CE8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TEnumAsByte<ETouchIndex>                           OnFreeCameraFingerIndex;                                  // 0x0CE9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0CEA(0x0002) MISSED OFFSET
	float                                              FreeCameraSPL_Hor;                                        // 0x0CEC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCameraSPL_Ver;                                        // 0x0CF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCamera_FPP_MIN;                                       // 0x0CF4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCamera_FPP_MAX;                                       // 0x0CF8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCamera_FPP_PITCH_MIN;                                 // 0x0CFC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCamera_FPP_PITCH_MAX;                                 // 0x0D00(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCamera_FPP_PITCH_MIN_LIMITED;                         // 0x0D04(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCamera_FPP_PITCH_MAX_LIMITED;                         // 0x0D08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCameraSPL_Hor_Parachute;                              // 0x0D0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCameraSPL_Ver_Parachute;                              // 0x0D10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              RecoverLagDelayTime;                                      // 0x0D14(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   StartPosition;                                            // 0x0D18(0x0008) (IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   CurFreeCamPosition;                                       // 0x0D20(0x0008) (IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                                    EmoteFreeCamPrevFigureResultDelta;                        // 0x0D28(0x000C) (IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                                    SelfieFreeCamPrevFigureResultDelta;                       // 0x0D34(0x000C) (IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0D40(0x0008) MISSED OFFSET
	struct FString                                     FollowCandidateName;                                      // 0x0D48(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FString, bool>                         IsTeammatesAutoFollowing;                                 // 0x0D58(0x0050) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                                    FreeCameraStartRotation;                                  // 0x0DA8(0x000C) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0xC];                                       // 0x0DB4(0x000C) MISSED OFFSET
	struct FTransform                                  FPPModeSpringArmTrans;                                    // 0x0DC0(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<ETouchIndex>                           FreeCameraFigerIndex;                                     // 0x0DF0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8_t                                             CurrentBuildingIndex;                                     // 0x0DF1(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x2];                                       // 0x0DF2(0x0002) MISSED OFFSET
	int                                                WeaponReconnectOpIndex;                                   // 0x0DF4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasInitUIFinished;                                       // 0x0DF8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x1];                                       // 0x0DF9(0x0001) MISSED OFFSET
	bool                                               isShowVaultEnable;                                        // 0x0DFA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x5];                                       // 0x0DFB(0x0005) MISSED OFFSET
	TArray<struct FBattleSceneAvatarDisplayInfo>       BattleSceneAvatarDisplayInfoList;                         // 0x0E00(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	struct FLinearColor                                CrossHairColor;                                           // 0x0E10(0x0010) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EAutoAimType>                          AutoAimType;                                              // 0x0E20(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0xF];                                       // 0x0E21(0x000F) MISSED OFFSET
	bool                                               bIsTrainingMode;                                          // 0x0E30(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableAutoAimTrainingMode;                               // 0x0E31(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0xE];                                       // 0x0E32(0x000E) MISSED OFFSET
	bool                                               bIsInResultView;                                          // 0x0E40(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0E41(0x0007) MISSED OFFSET
	TArray<struct FClientFatalDamageRecordData>        ClientFatalDamageRecords;                                 // 0x0E48(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FClientFatalDamageRecordData                ClientFatalDamageLastRecords;                             // 0x0E58(0x00B0) (BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSensibilityConfig                          SensibilityConfig;                                        // 0x0F08(0x00C0) (BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                               bSingleShotWeaponShootMode;                               // 0x0FC8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShotGunShootMode;                                        // 0x0FC9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x2];                                       // 0x0FCA(0x0002) MISSED OFFSET
	int                                                UseMotionControlType;                                     // 0x0FCC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterNearDeathOrRescueingOtherNotifyDelegate;       // 0x0FD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerEnterFlying;                                      // 0x0FE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerChangeViewtargetToPlane;                          // 0x0FF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerExitFlying;                                       // 0x1000(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerEnterJumping;                                     // 0x1010(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerExitJumping;                                      // 0x1020(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerEnterParachute;                                   // 0x1030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerExitParachute;                                    // 0x1040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerEnterWater;                                       // 0x1050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerExitWater;                                        // 0x1060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerEnterFighting;                                    // 0x1070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerExitFighting;                                     // 0x1080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerEnterFinished;                                    // 0x1090(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerStartReloadWeapon;                                // 0x10A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerEndReloadWeapon;                                  // 0x10B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnTeammateHPChangeDelegate;                               // 0x10C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterBreathChange;                                  // 0x10D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterAntidoteChange;                                // 0x10E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnNightBeggan;                                            // 0x10F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnNightEnded;                                             // 0x1100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerHitInfoUpdate;                                    // 0x1110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int                                                SelectedNightRenderConfig;                                // 0x1120(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x4];                                       // 0x1124(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInitTaskData;                                           // 0x1128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnInitCollectionData;                                     // 0x1138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerDoEmote;                                          // 0x1148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerKilling;                                          // 0x1158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPickupItem;                                             // 0x1168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDropItem;                                               // 0x1178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDeathBoxSpawned;                                        // 0x1188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnTaskConditionActived;                                   // 0x1198(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnTaskConditionDeactived;                                 // 0x11A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0x30];                                      // 0x11B8(0x0030) MISSED OFFSET
	struct FKillOrPutDownMessage                       KillOrPutDownMessageData;                                 // 0x11E8(0x0060) (BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStartFireEvent;                                         // 0x1248(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStopFireEvent;                                          // 0x1258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnReleaseFireBtn;                                         // 0x1268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnReleaseScreen;                                          // 0x1278(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnFingerMove;                                             // 0x1288(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSwitchCameraModeStart;                                  // 0x1298(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSwitchCameraModeEnd;                                    // 0x12A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerPickUpActor;                                      // 0x12B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerPutDownActor;                                     // 0x12C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerPutDownAllProp;                                   // 0x12D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSwitchWeapon;                                           // 0x12E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEquipWeaponDel;                                         // 0x12F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnUnequipWeaponDel;                                       // 0x1308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnUseInventoryItem;                                       // 0x1318(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnChangeBattleOwnerDel;                                   // 0x1328(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDamageToOther;                                          // 0x1338(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLocalCharacterHPChangeDel;                              // 0x1348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    DelegatePlayerGoldChange;                                 // 0x1358(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    DelegatePlayerLevelChange;                                // 0x1368(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnGameStartCountDownDelegate;                             // 0x1378(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRank;                                                   // 0x1388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnGameStartDelegate;                                      // 0x1398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerNameChange;                                       // 0x13A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnUseMainSlot;                                            // 0x13B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBackpackMainSlot;                                       // 0x13C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRemoveMainSlot;                                         // 0x13D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRepPlayerState;                                         // 0x13E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRepTeammateChange;                                      // 0x13F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRepTeammateAvatarDisplayInfo;                           // 0x1408(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData17[0x8];                                       // 0x1418(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMapMarkChangeDelegate;                                  // 0x1420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnShowSkillPrompt;                                        // 0x1430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStartAutoSprintCountDown;                               // 0x1440(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnShowAutoSprintButton;                                   // 0x1450(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerChangeWearingDone;                                // 0x1460(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerChangeWearingAnimFinished;                        // 0x1470(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerFinalAssistKill;                                  // 0x1480(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEquipmentAvatarChange;                                  // 0x1490(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEquipmentWeaponAvatarChange;                            // 0x14A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnGameStateChange;                                        // 0x14B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSetChangeCharacterStateDelegate;                        // 0x14C0(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData18[0x10];                                      // 0x14D0(0x0010) MISSED OFFSET
	class ASTExtraBaseCharacter*                       tmpAnchorCharacter;                                       // 0x14E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnInterruptAutoSprintCountDown;                           // 0x14E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAutoSprintActive;                                       // 0x14F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnTakeDamagedDelegate;                                    // 0x1508(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData19[0x28];                                      // 0x1518(0x0028) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLostConnection;                                         // 0x1540(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnReconnected;                                            // 0x1550(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnExitGame;                                               // 0x1560(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSpectatorChange;                                        // 0x1570(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterRecoveryHealth;                                // 0x1580(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    RunOnNextFrameDelegate;                                   // 0x1590(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UNewbieGuideComponent*                       NewbieComponent;                                          // 0x15A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimeLineSyncComponent*                      TimeLineSyncComponent;                                    // 0x15A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimeWatchDogComponent*                      TimeWatchDogComponent;                                    // 0x15B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerAntiCheatManager*                     AntiCheatManagerComp;                                     // 0x15B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldReportAntiCheat;                                   // 0x15C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData20[0x28F];                                     // 0x15C1(0x028F) MISSED OFFSET
	struct FScriptMulticastDelegate                    PlayerControllerEnterFightingStateDelegate;               // 0x1850(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData21[0x4];                                       // 0x1860(0x0004) MISSED OFFSET
	bool                                               EnableAsyncLoading;                                       // 0x1864(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DisableNewStopFireLogic;                                  // 0x1865(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UseScreenStopFireCheckOnlyInModeTwo;                      // 0x1866(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableDebugRotatoInfo;                                    // 0x1867(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableDebugRotatoInfoTimeLimit;                           // 0x1868(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DisableItemAttachListFilter;                              // 0x1869(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableNewUpdateTeamPlayerState;                           // 0x186A(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableNetCullingDistOnVeryLowDevice;                      // 0x186B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PC_CameraMoveRateX;                                       // 0x186C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PC_CameraMoveRateY;                                       // 0x1870(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Mobile_CameraMoveRateX;                                   // 0x1874(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Mobile_CameraMoveRateY;                                   // 0x1878(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData22[0x4];                                       // 0x187C(0x0004) MISSED OFFSET
	class UCurveFloat*                                 CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;         // 0x1880(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;       // 0x1888(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseDisCurve;                                             // 0x1890(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData23[0x3];                                       // 0x1891(0x0003) MISSED OFFSET
	struct FCommonCameraModeData                       NormalCameraModeData;                                     // 0x1894(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommonCameraModeData                       NearCameraModeData;                                       // 0x18B8(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                                   NearCameraModeCameraMoveAdditionalRate;                   // 0x18DC(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   NearCameraModeCameraMoveMaxSpeed;                         // 0x18E4(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAimCameraModeData                          AimCameraModeData;                                        // 0x18EC(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                                   AimCameraModeCameraMoveAdditionalRate;                    // 0x1910(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   AimCameraModeCameraMoveMaxSpeed;                          // 0x1918(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommonCameraModeData                       PlaneCameraModeData;                                      // 0x1920(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData24[0x4];                                       // 0x1944(0x0004) MISSED OFFSET
	TMap<TEnumAsByte<ESTEPoseState>, struct FCameraViewPitchLimitData> CameraViewPitchLimitDataMap;                              // 0x1948(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              MoveCameraMinDistanceThreshold;                           // 0x1998(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MoveCameraMinTimeThreshold;                               // 0x199C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShouldShowPawnDetailInfoOnHUD;                            // 0x19A0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShouldSpringUsePawnControlRotation;                       // 0x19A1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData25[0x6];                                       // 0x19A2(0x0006) MISSED OFFSET
	TEnumAsByte<EPlayerCameraMode>                     CurCameraMode;                                            // 0x19A8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData26[0x7];                                       // 0x19A9(0x0007) MISSED OFFSET
	struct FName                                       AutoScopeAimCompName;                                     // 0x19B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AutoScopeAimTraceDistance;                                // 0x19B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMoveable;                                                // 0x19BC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMoveablePickup;                                          // 0x19BD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMoveableAirborne;                                        // 0x19BE(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMoveableLandHard;                                        // 0x19BF(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MoveableLandHardTime;                                     // 0x19C0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CanMoveCDTime;                                            // 0x19C4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CanSprintCDTime;                                          // 0x19C8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SwitchPoseCDTime;                                         // 0x19CC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MovealbeSwitchPoseTime;                                   // 0x19D0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AutoSprintRequestCD;                                      // 0x19D4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanGetTouchInput;                                        // 0x19D8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData27[0x3];                                       // 0x19D9(0x0003) MISSED OFFSET
	struct FVector                                     CurScreenMoveSpeed;                                       // 0x19DC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Mobile_CameraMoveAdjustSensitiveValue;                    // 0x19E8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpecialDeviceRate;                                        // 0x19EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FString, float>                        SpecialDeviceRateConfigs;                                 // 0x19F0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                               bIsBattleOwner;                                           // 0x1A40(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsAutoAimEnabled;                                        // 0x1A41(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData28[0x2];                                       // 0x1A42(0x0002) MISSED OFFSET
	int                                                AutoAimLevel;                                             // 0x1A44(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsMeleeAutoAimEnabled;                                   // 0x1A48(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData29[0x7];                                       // 0x1A49(0x0007) MISSED OFFSET
	class ASTExtraBaseCharacter*                       STExtraBaseCharacter;                                     // 0x1A50(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               CharacterTouchMove;                                       // 0x1A58(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsDeadForLogout;                                          // 0x1A59(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData30[0x6];                                       // 0x1A5A(0x0006) MISSED OFFSET
	struct FServerHitEnemyReplicatedData               ServerHitEnemyReplicatedData;                             // 0x1A60(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bDebugShowYawInput;                                       // 0x1A70(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData31[0x3];                                       // 0x1A71(0x0003) MISSED OFFSET
	float                                              AccumulateYawInput;                                       // 0x1A74(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LandAfterJumpPlaneDelayMoveTime;                          // 0x1A78(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLandAfterJumpPlane;                                      // 0x1A7C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsLandingOnGround;                                       // 0x1A7D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsNeedCheckPullPercentage;                               // 0x1A7E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData32[0x1];                                       // 0x1A7F(0x0001) MISSED OFFSET
	float                                              NoRespondArea;                                            // 0x1A80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ComfortableSwipeAddition;                                 // 0x1A84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsLeftScreenUseComfortableSwipe;                         // 0x1A88(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsRightScreenUseComfortableSwipe;                        // 0x1A89(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EnmSprintOptType>                      sprintOptType;                                            // 0x1A8A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData33[0x1];                                       // 0x1A8B(0x0001) MISSED OFFSET
	float                                              JoystickSprintDisThreshold;                               // 0x1A8C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JoystickSprintDisThresholdNew;                            // 0x1A90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JoystickSprintBtnHeight;                                  // 0x1A94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JoystickSprintAngleThreshold;                             // 0x1A98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsUseDisOrSpeedMove;                                     // 0x1A9C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EJoystickOperatingMode>                JoystickOperatingMode;                                    // 0x1A9D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData34[0x2];                                       // 0x1A9E(0x0002) MISSED OFFSET
	float                                              EasyGoStraightAngle;                                      // 0x1AA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsTouching;                                              // 0x1AA4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData35[0x3];                                       // 0x1AA5(0x0003) MISSED OFFSET
	TMap<TEnumAsByte<ETouchIndex>, float>              TouchForceMap;                                            // 0x1AA8(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              TouchForceFireThreshold;                                  // 0x1AF8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DoubleClickFireTimeThreshold;                             // 0x1AFC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DoubleClickFireDistanceThreshold;                         // 0x1B00(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DoubleClickCancelDistanceThreshold;                       // 0x1B04(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TouchForceWatchFrame;                                     // 0x1B08(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseTouchForce;                                           // 0x1B0C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData36[0x3];                                       // 0x1B0D(0x0003) MISSED OFFSET
	float                                              InputTouchRepeatLastTime;                                 // 0x1B10(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ETouchFireType>                        TouchFireType;                                            // 0x1B14(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData37[0x3];                                       // 0x1B15(0x0003) MISSED OFFSET
	float                                              TestForce;                                                // 0x1B18(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData38[0x4];                                       // 0x1B1C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    On3DTouchForceChange;                                     // 0x1B20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDoubleClickCheck;                                       // 0x1B30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bIsAutoAimOnlyInTouch;                                    // 0x1B40(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsAutoAimOnlyOnFire;                                     // 0x1B41(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMoveInMiniMap;                                           // 0x1B42(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoSprint;                                              // 0x1B43(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AutoSprintBtnTime;                                        // 0x1B44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AutoSprintWaitingTime;                                    // 0x1B48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AutoSprintThreshold;                                      // 0x1B4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JoystickTriggerSprintDuration;                            // 0x1B50(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InHouseSpringArmLengthModifier;                           // 0x1B54(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InHouseSpringArmLengthModifierChangeSpeed;                // 0x1B58(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsPlayerUnableToDoAutoSprintOperation;                    // 0x1B5C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData39[0x3];                                       // 0x1B5D(0x0003) MISSED OFFSET
	float                                              CurrentCameraFOV;                                         // 0x1B60(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinFovChangeView;                                         // 0x1B64(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponSystemReconnectReplicateData         WeaponSystemReconnectReplicateData;                       // 0x1B68(0x0038) (Net, RepNotify, NativeAccessSpecifierPublic)
	int                                                GameTipMsgID;                                             // 0x1BA0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData40[0x4];                                       // 0x1BA4(0x0004) MISSED OFFSET
	struct FString                                     GameTipParam1;                                            // 0x1BA8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     GameTipParam2;                                            // 0x1BB8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData41[0x50];                                      // 0x1BC8(0x0050) MISSED OFFSET
	float                                              AutoSprintCD;                                             // 0x1C18(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData42[0x4];                                       // 0x1C1C(0x0004) MISSED OFFSET
	TArray<struct FTeamMateStateInfo>                  TeamMateStates;                                           // 0x1C20(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<TEnumAsByte<ETouchIndex>, struct FTeamMateStateInfo> DoubleClickLastTouchInfoMap;                              // 0x1C30(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<TEnumAsByte<ETouchIndex>, struct FTeamMateStateInfo> DoubleClickCurTouchInfoMap;                               // 0x1C80(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData43[0x20];                                      // 0x1CD0(0x0020) MISSED OFFSET
	struct FTransform                                  FPPCameraLerpStartTransformRelative;                      // 0x1CF0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData44[0x98];                                      // 0x1D20(0x0098) MISSED OFFSET
	class UCurveFloat*                                 CurveFPPCameraLerp;                                       // 0x1DB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                            PreActiveCameraCache;                                     // 0x1DC0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                            CurrentActiveCameraCache;                                 // 0x1DC8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                         CurrentActiveSpringArmCache;                              // 0x1DD0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData45[0x10];                                      // 0x1DD8(0x0010) MISSED OFFSET
	class APlayerTombBox*                              DeadTombBox;                                              // 0x1DE8(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData46[0x8];                                       // 0x1DF0(0x0008) MISSED OFFSET
	TArray<struct FString>                             ForbitPickList;                                           // 0x1DF8(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData47[0x10];                                      // 0x1E08(0x0010) MISSED OFFSET
	bool                                               bForbitPickupEffect;                                      // 0x1E18(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData48[0x3];                                       // 0x1E19(0x0003) MISSED OFFSET
	int                                                pickupPlayerChoice;                                       // 0x1E1C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanImprisonmentTeammate;                                 // 0x1E20(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldDisplayHitFinalDamage;                             // 0x1E21(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData49[0x2];                                       // 0x1E22(0x0002) MISSED OFFSET
	float                                              RescueRemainingSeconds;                                   // 0x1E24(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RescueTotalSeconds;                                       // 0x1E28(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsCurrentSpectatorFreeView;                               // 0x1E2C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData50[0x3];                                       // 0x1E2D(0x0003) MISSED OFFSET
	float                                              FreeViewUpRate;                                           // 0x1E30(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      MaxTouchMoveDelayFrame;                                   // 0x1E34(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData51[0x3];                                       // 0x1E35(0x0003) MISSED OFFSET
	int                                                MaxCacheInputSpeedNum;                                    // 0x1E38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bBleFreeCameraUse;                                        // 0x1E3C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData52[0x1];                                       // 0x1E3D(0x0001) MISSED OFFSET
	bool                                               IsCatchUpByMonster;                                       // 0x1E3E(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData53[0x1];                                       // 0x1E3F(0x0001) MISSED OFFSET
	struct FVector                                     PreMonsterCatchUpPos;                                     // 0x1E40(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               isPressingBtn_AimAndFire;                                 // 0x1E4C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ETouchIndex>                           CurTouchAimAndFireFingerIndex;                            // 0x1E4D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DiedisableInput;                                          // 0x1E4E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData54[0x45];                                      // 0x1E4F(0x0045) MISSED OFFSET
	TEnumAsByte<ETouchIndex>                           CurAimFireFingerIndex;                                    // 0x1E94(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData55[0x6B];                                      // 0x1E95(0x006B) MISSED OFFSET
	class ASTExtraBaseCharacter*                       closedAimTarget;                                          // 0x1F00(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData56[0xB8];                                      // 0x1F08(0x00B8) MISSED OFFSET
	class UBackpackComponent*                          BackpackComponent;                                        // 0x1FC0(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonBtnComponent*                         CommonBtnComponent;                                       // 0x1FC8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChatComponent*                              ChatComponent;                                            // 0x1FD0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGuideComponent*                             GuideComponent;                                           // 0x1FD8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuickSignComponent*                         QuickSignComponent;                                       // 0x1FE0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBaseTaskComponent*                          TaskComponent;                                            // 0x1FE8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData57[0x15];                                      // 0x1FF0(0x0015) MISSED OFFSET
	bool                                               bEnableDeathPlayback;                                     // 0x2005(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8_t                                             bEnableDeathPlaybackDelay;                                // 0x2006(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData58[0x21];                                      // 0x2007(0x0021) MISSED OFFSET
	TArray<struct FBattleItemData>                     ObservedItemList;                                         // 0x2028(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData59[0x80];                                      // 0x2038(0x0080) MISSED OFFSET
	TArray<uint32_t>                                   FiringPlayerList;                                         // 0x20B8(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAboutToChangeViewTarget;                                // 0x20C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnFinishedChangeViewTarget;                               // 0x20D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterStatesChange;                                  // 0x20E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FFriendObserver>                     FriendObserverDetails;                                    // 0x20F8(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bShowWhoObservingMe;                                      // 0x2108(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData60[0x7];                                       // 0x2109(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    ObservedTargetDieDelegate;                                // 0x2110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData61[0x4];                                       // 0x2120(0x0004) MISSED OFFSET
	float                                              GotoSpectatingDelayTime;                                  // 0x2124(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlayerBaseInfoInOB>                 TotalPlayers;                                             // 0x2128(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FPlayerInfoInOB>                     TotalPlayerList;                                          // 0x2138(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlayerInfoInOB>                     TotalPlayerList_SortedByTeamID;                           // 0x2148(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlayerInfoInOB>                     NearPlayerList;                                           // 0x2158(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlayerInfoInOB>                     SameTeamPlayerList;                                       // 0x2168(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int, struct FTeamInfoInOB>                    TeamInfoMap;                                              // 0x2178(0x0050) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FObservedData                               ObservedData;                                             // 0x21C8(0x0050) (BlueprintVisible, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData62[0x15];                                      // 0x2218(0x0015) MISSED OFFSET
	bool                                               bShowClubLogoInOB;                                        // 0x222D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData63[0x2];                                       // 0x222E(0x0002) MISSED OFFSET
	TArray<struct FAirDropBoxInOb>                     AirDropBoxList;                                           // 0x2230(0x0010) (BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData64[0x8];                                       // 0x2240(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnToggleOBMapShowHide;                                    // 0x2248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnInterruptGameButtonShow;                                // 0x2258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData65[0x8];                                       // 0x2268(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnToggleOBPlayerList;                                     // 0x2270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSwitchToPlayerByNumPressed;                             // 0x2280(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSwitchToTeamByNumPressed;                               // 0x2290(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnToggleOBTeamList;                                       // 0x22A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnFreeViewChangedDelegate;                                // 0x22B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData66[0x10];                                      // 0x22C0(0x0010) MISSED OFFSET
	float                                              OBTPPFreeViewArmLengthMax;                                // 0x22D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OBTPPFreeViewArmLengthMin;                                // 0x22D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              fPlayerAliasInfoDistanceLimit;                            // 0x22D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      iPlayerAliasInfoCount;                                    // 0x22DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsCharacterInitFlushStreaming;                            // 0x22DD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData67[0x2];                                       // 0x22DE(0x0002) MISSED OFFSET
	int                                                FireMode;                                                 // 0x22E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNotMoveFire;                                             // 0x22E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAlreadyFired;                                            // 0x22E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFireNotToBuild;                                          // 0x22E6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               WallFeedBack;                                             // 0x22E7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASTExtraBaseCharacter*>               nowNearCharacterList;                                     // 0x22E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ASTExtraVehicleBase*>                 nowNearVehicleList;                                       // 0x22F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData68[0x10];                                      // 0x2308(0x0010) MISSED OFFSET
	TArray<class ASTExtraShootWeapon*>                 nowShotWeaponList;                                        // 0x2318(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData69[0x10];                                      // 0x2328(0x0010) MISSED OFFSET
	TArray<class AActor*>                              nowGrenadeList;                                           // 0x2338(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bIsLastTwoCircle;                                         // 0x2348(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData70[0x7];                                       // 0x2349(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    triggerVoiceCheckDelegate;                                // 0x2350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    triggerMoveVoiceCheckDelegate;                            // 0x2360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    triggerShotVoiceCheckDelegate;                            // 0x2370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    triggerVehicleVoiceCheckDelegate;                         // 0x2380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    triggerGlassVoiceCheckDelegate;                           // 0x2390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData71[0x1];                                       // 0x23A0(0x0001) MISSED OFFSET
	bool                                               bCanJump;                                                 // 0x23A1(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData72[0x6];                                       // 0x23A2(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerCanJump;                                          // 0x23A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerCannotJump;                                       // 0x23B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bCanOpenParachute;                                        // 0x23C8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData73[0x7];                                       // 0x23C9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerCanOpenParachute;                                 // 0x23D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerCannotOpenParachute;                              // 0x23E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bCanCloseParachute;                                       // 0x23F0(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData74[0x3];                                       // 0x23F1(0x0003) MISSED OFFSET
	float                                              PlaneFlyHeightFromGameMode;                               // 0x23F4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CanOpenParachuteHeight;                                   // 0x23F8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForceOpenParachuteHeight;                                 // 0x23FC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloseParachuteHeight;                                     // 0x2400(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RealTimePawnHeight;                                       // 0x2404(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    OB_DestControlRotation;                                   // 0x2408(0x000C) (Net, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData75[0xC];                                       // 0x2414(0x000C) MISSED OFFSET
	float                                              OB_RotationLagSpeed;                                      // 0x2420(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData76[0x1C];                                      // 0x2424(0x001C) MISSED OFFSET
	TArray<struct FItemDefineWeaponSyncData>           SpawnAndBackpackWeaponReplicatedDataArray;                // 0x2440(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData77[0x8];                                       // 0x2450(0x0008) MISSED OFFSET
	TArray<struct FWeaponMgrInfo>                      SpawnAndBackpackWeaponReplicatedDataWithMgr;              // 0x2458(0x0010) (Net, ZeroConstructor, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                      ThePlane;                                                 // 0x2468(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData78[0x8];                                       // 0x2470(0x0008) MISSED OFFSET
	float                                              GameAssistantJoyStickOpacity;                             // 0x2478(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData79[0x4];                                       // 0x247C(0x0004) MISSED OFFSET
	TArray<class ASTExtraWeapon*>                      TargetClientWeaponWaitForReconnectList;                   // 0x2480(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData80[0x20];                                      // 0x2490(0x0020) MISSED OFFSET
	class UClass*                                      KillerTrackerTemplate;                                    // 0x24B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData81[0x2];                                       // 0x24B8(0x0002) MISSED OFFSET
	bool                                               MurderIsAI;                                               // 0x24BA(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData82[0x5];                                       // 0x24BB(0x0005) MISSED OFFSET
	struct FString                                     LastBreathMurder;                                         // 0x24C0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               LastBreathMurderIsAI;                                     // 0x24D0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData83[0x7];                                       // 0x24D1(0x0007) MISSED OFFSET
	uint64_t                                           LastBreathMurderUID;                                      // 0x24D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleUserComponent*                       VehicleUserComp;                                          // 0x24E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     murderName;                                               // 0x24E8(0x0010) (Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     FinalMurderName;                                          // 0x24F8(0x0010) (Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64_t                                           MurderUID;                                                // 0x2508(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               MurderIsSameTeam;                                         // 0x2510(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               LastBreathMurderIsSameTeam;                               // 0x2511(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData84[0x46];                                      // 0x2512(0x0046) MISSED OFFSET
	TMap<class UClass*, struct FImpactMapValueData>    ImpactEffectCachedListSimulateMap;                        // 0x2558(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class UClass*, struct FImpactMapValueData>    ImpactEffectCachedListLocalMap;                           // 0x25A8(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData85[0x8];                                       // 0x25F8(0x0008) MISSED OFFSET
	float                                              OceanSideDetectDistance;                                  // 0x2600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OceanSideDetectInterval;                                  // 0x2604(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurrOBAirDropID;                                          // 0x2608(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData86[0x4];                                       // 0x260C(0x0004) MISSED OFFSET
	TMap<TEnumAsByte<ETouchIndex>, struct FString>     EndTouchScreenCommandMap;                                 // 0x2610(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData87[0xB0];                                      // 0x2660(0x00B0) MISSED OFFSET
	class UAkAudioEvent*                               HitVehicleSound;                                          // 0x2710(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsPressingFireBtn;                                       // 0x2718(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData88[0x7];                                       // 0x2719(0x0007) MISSED OFFSET
	struct FString                                     ClientActivePlatformProfileName;                          // 0x2720(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData89[0x50];                                      // 0x2730(0x0050) MISSED OFFSET
	float                                              ZMoveDisCalcThreshold;                                    // 0x2780(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugDrawHUDCrossLine;                                   // 0x2784(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData90[0x3];                                       // 0x2785(0x0003) MISSED OFFSET
	class UStateMachineComponent*                      NewStateMachineComp;                                      // 0x2788(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ExitFromHelicopterParachuteJump;                          // 0x2790(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateType                                         ServerStateType;                                          // 0x2791(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateType                                         ClientStateType;                                          // 0x2792(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugDrawCrosshair;                                      // 0x2793(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData91[0x18];                                      // 0x2794(0x0018) MISSED OFFSET
	bool                                               bSwitchesInMapsExecuted;                                  // 0x27AC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsEnterBattleResultStep;                                 // 0x27AD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAddPoseStateCheckResponse;                               // 0x27AE(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData92[0x1];                                       // 0x27AF(0x0001) MISSED OFFSET
	float                                              ObservingTime;                                            // 0x27B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData93[0x4];                                       // 0x27B4(0x0004) MISSED OFFSET
	class AKillerTracker*                              tracker;                                                  // 0x27B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData94[0x14];                                      // 0x27C0(0x0014) MISSED OFFSET
	bool                                               bEnableOBBulletTrackEffect;                               // 0x27D4(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableOBBulletTrackEffectSetting;                        // 0x27D5(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData95[0x62];                                      // 0x27D6(0x0062) MISSED OFFSET
	class AMonsterTreasureBox*                         CurHUDMonsterTreasureBox;                                 // 0x2838(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               IsQuickGrenade;                                           // 0x2840(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData96[0x7];                                       // 0x2841(0x0007) MISSED OFFSET
	struct FString                                     DefaultHUDClassPath;                                      // 0x2848(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData97[0x28];                                      // 0x2858(0x0028) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnClientReportPeerVisualFieldAcotrList;                   // 0x2880(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    DieInstigator;                                            // 0x2890(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsImprisonmentTeammate;                                   // 0x2898(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsCharacterDie;                                           // 0x2899(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData98[0x6];                                       // 0x289A(0x0006) MISSED OFFSET
	class AAvatarCapture*                              AvatarCaptureInfo;                                        // 0x28A0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BOptimizeBulletHit;                                       // 0x28A8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData99[0x4];                                       // 0x28AC(0x0004) MISSED OFFSET
	struct FClientSettingBaseOnGameMode                ClientSettingBaseOnGameMode;                              // 0x28B0(0x0050) (Net, NativeAccessSpecifierPublic)
	TArray<struct FFootprintActorInfo>                 FootprintActorInfo;                                       // 0x2900(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int                                                MaxTeamFootprintCount;                                    // 0x2910(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxOtherFootprintCount;                                   // 0x2914(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurfaceDescription, struct FFootprintActorBlock> FootprintActorLookupTable;                                // 0x2918(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class UClass*, struct FTrailMarkActorBlock>   TrailMarkActorLookupTable;                                // 0x2968(0x0050) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData100[0x8];                                      // 0x29B8(0x0008) MISSED OFFSET
	class AIdeaDecalManager*                           IdeaDecalManager;                                         // 0x29C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>            BloodDecalMaterials;                                      // 0x29C8(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMap<int, class UBackpackDecalHandle*>             LocalDecalHandleMap;                                      // 0x29D8(0x0050) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData101[0x20];                                     // 0x2A28(0x0020) MISSED OFFSET
	class ASupplySpot*                                 CurrentSupplySpot;                                        // 0x2A48(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEnhancerSpot*                               CurrentEnhancerSpot;                                      // 0x2A50(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerRevivalComponent*                     PlayerRevivalComp;                                        // 0x2A58(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData102[0xC8];                                     // 0x2A60(0x00C8) MISSED OFFSET
	bool                                               bEnableClampControllerRelativeYaw;                        // 0x2B28(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bClampControllerRelativeYaw;                              // 0x2B29(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData103[0x2];                                      // 0x2B2A(0x0002) MISSED OFFSET
	float                                              ControllerRelativeYawMin;                                 // 0x2B2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ControllerRelativeYawMax;                                 // 0x2B30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData104[0x8];                                      // 0x2B34(0x0008) MISSED OFFSET
	TWeakObjectPtr<class ARevivalPointActor>           CurOperatePlayerRevivalPoint;                             // 0x2B3C(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData105[0x4];                                      // 0x2B44(0x0004) MISSED OFFSET
	int                                                IdCardMarkType;                                           // 0x2B48(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData106[0x3];                                      // 0x2B4C(0x0003) MISSED OFFSET
	bool                                               DisableJoystickMultiControl;                              // 0x2B4F(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                VehicleControlMode;                                       // 0x2B50(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               VehicleJoystickLRSwitcher;                                // 0x2B54(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData107[0x3];                                      // 0x2B55(0x0003) MISSED OFFSET
	class UClass*                                      GiveupDamageTypeClass;                                    // 0x2B58(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           LastKillerKey;                                            // 0x2B60(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAAlOpen;                                                 // 0x2B64(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsBackPackPanelOpen;                                     // 0x2B65(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData108[0x22];                                     // 0x2B66(0x0022) MISSED OFFSET
	bool                                               bUseAntiDataReportFilter;                                 // 0x2B88(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseAntiDataReportFilterNew;                              // 0x2B89(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseAntiDataReportFilterCheck;                            // 0x2B8A(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData109[0x1];                                      // 0x2B8B(0x0001) MISSED OFFSET
	float                                              LastReportAntiDataTime;                                   // 0x2B8C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnTeammateConveyStatusChangedDelegate;                    // 0x2B90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerControllerStateChangedDelegate;                   // 0x2BA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    RefreshPickupFlagStatusDelegate;                          // 0x2BB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRevivalAndEnterAirplane;                                // 0x2BC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeakGuidEventDelegate;                                  // 0x2BD0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStopWeakGuidDelegate;                                   // 0x2BE0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEnableGuidActorDelegate;                                // 0x2BF0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWeatherConfigComponent*                     WeatherConfigComponent;                                   // 0x2C00(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADynamicWeatherExMgr*                        DynamicWeatherExMgr;                                      // 0x2C08(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData110[0x8];                                      // 0x2C10(0x0008) MISSED OFFSET
	bool                                               bDstWeather;                                              // 0x2C18(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData111[0xF];                                      // 0x2C19(0x000F) MISSED OFFSET
	bool                                               bDstWeatherFog;                                           // 0x2C28(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData112[0x1A7];                                    // 0x2C29(0x01A7) MISSED OFFSET
	double                                             LastFlyLeapPlatfromTime;                                  // 0x2DD0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData113[0x50];                                     // 0x2DD8(0x0050) MISSED OFFSET
	bool                                               bEnableDSErrorLogReport;                                  // 0x2E28(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData114[0x7];                                      // 0x2E29(0x0007) MISSED OFFSET
	struct FWeaponHitDetailInfo                        ShowWeaponHitDetailInfo;                                  // 0x2E30(0x0018) (Net, RepNotify, NativeAccessSpecifierPublic)
	struct FWeaponHitDetailInfo                        CacheWeaponHitDetailInfo;                                 // 0x2E48(0x0018) (NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPlayerController");
		return pStaticClass;
	}


	void VisualizeItem();
	void ViewVehicle(float YawAdd, float PitchAdd, const struct FVector& Loc);
	void ViewPlane();
	void UseZombieModeSkill();
	void UserDropItemOperation(const struct FItemDefineID& DefineID);
	void UseItem(int ID);
	void UpdatePoseViewPitchLimit();
	void UpdatePoseState(TEnumAsByte<ESTEPoseState> PoseType);
	void UpdateBodyIndoorState(bool BodyIndoor);
	void UnLoadAllCollision(bool Unload);
	void TryReqMoveToTarget(int FollowType, const struct FString& FollowUID);
	void TriggerVehicleVoiceCheckFuction(class ASTExtraVehicleBase* nowVehicle, const struct FVector& posVector, float showTime);
	void TriggerShotVoiceCheckFuction(class ASTExtraShootWeapon* nowWeapon, const struct FVector& posVector, float showTime, bool isslience);
	void TriggerMoveVoiceCheckFuction(class ASTExtraBaseCharacter* nowCharacter, const struct FVector& posVector, float showTime);
	void TriggerGlassVoiceCheckFuction(const struct FVector& posVector, float showTime);
	void TouchMove(const struct FVector& Loc, TEnumAsByte<ETouchIndex> FingerIndex);
	bool TouchEnd(TEnumAsByte<EPressType> PressType);
	void TouchBegin(TEnumAsByte<EPressType> PressType);
	void ToggleVehicleSync(bool Val);
	void ToggleUserCmdDeltaSendAck(bool Val);
	void ToggleUserCmdDeltaFlag(bool Val);
	void ToggleUserCmdDeltaCheckSum(bool Val);
	void ToggleUserCmdDelta(bool Val);
	void ToggleServerAcknowledgePossession(bool Val);
	void ToggleOBTPPFollowFreeView();
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);
	void ToggleCheatLocation(bool Val);
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);
	void TeamNoAlwaysRelevant();
	void TeamMateStateChanged(class ASTExtraPlayerState* STPlayerState, const struct FVector_NetQuantize100& Location, uint32_t View, unsigned char Roll, float Health, int VoiceID);
	void SwitchViewTarget();
	void SwitchToTeamByNumPressed();
	void SwitchToPlayerByNumPressed();
	void SwitchToDeadBox();
	void SwitchShowUI();
	void SwitchPoseStateServer(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEPoseState> PoseState);
	void SwitchPoseStateFailedResponse(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEPoseState> FailedPoseState, TEnumAsByte<ESTEPoseState> CurPoseState);
	void SwitchPoseStateClient(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEPoseState> PoseState);
	void SwitchMouseCursorShowState();
	void SwitchGenerateItem();
	void SwitchCameraModeScope(TEnumAsByte<EPlayerCameraMode> Mode, class ASTExtraBaseCharacter* InCharacter);
	void SwitchCameraModeByOrder();
	void SwitchCameraMode(TEnumAsByte<EPlayerCameraMode> Mode, class ASTExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);
	void SwapWeaponByPropSlotOnServer(TEnumAsByte<ESurviveWeaponPropSlot> Slot1, TEnumAsByte<ESurviveWeaponPropSlot> Slot2, bool bForce);
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);
	void StartReadyCountDown();
	void StartLandOnGroundAfterJumpPlane();
	void StartInputCameraMoveTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);
	void StartGame();
	void StartFreeCamera(TEnumAsByte<ETouchIndex> FigerIndex);
	void StartAirDropSpecified(float X, float Y);
	void StartAirDropBackupEnter(float X, float Y, int MaxPlaneNum);
	void StartAirDrop(int Index);
	void StartAirAttackSpecified(float X, float Y, float Radius);
	void StartAirAttack(int Index);
	void SpectatorCameraChange_Broadcast(bool bDie);
	void SpawnVehicleWithPath(const struct FString& Path);
	void SpawnVehicleInAir();
	void SpawnVehicle();
	void SpawnHeavyweaponBox(int Num);
	void SpawnAllVehicle(const struct FString& Path);
	void SpawnAITeam(int Num, int AITeamID, unsigned char Difficulty);
	void SpawnAI(int Num);
	void SoftReconnectRecoverData(class AUAEPlayerController* PC);
	void ShutDownItemGenerate(bool IsOpen);
	void ShowWeaponRecordInfo();
	void ShowVaultEnable();
	void ShowStringMsg(const struct FString& Message, const struct FString& FromPlayerName, int msgID);
	void ShowPoints(TArray<struct FVector> Points, const struct FColor& Color, float LifeTime);
	void ShowMovePath(TArray<struct FVector> Path);
	void ShowFireBtn(bool bShow);
	void ShowBulletShoot(const struct FVector& StartLoc, const struct FRotator& rot);
	void ShowAllRoles();
	bool ShouldForceFPPView(class ASTExtraPlayerCharacter* InCharacter);
	void SetVirtualStickVisibility(bool bJSVisiable);
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);
	void SetUAETriggerEnable(bool IsEnbale);
	void SetTimeSpeedFactor(float Val);
	void SetTimeSpeedCheck(bool Val);
	void SetTeammateForbitPick(bool bForbit, int LogType);
	void SetStateLeftTime(int LeftTime);
	void SetSpeed(float Modifier);
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);
	void SetServerLevelLoadingMode(bool bNewLoadAll);
	void SetScopeFingerIndex(bool TouchBegin, TEnumAsByte<ETouchIndex> FingerIndex);
	void SetReconnectZombieWaveDataToClient(TArray<struct FZombieWaveUIState> ZombieWaveUIState, float PastTime);
	void SetRageLevel(int Level);
	void SetPoisonFogEnable(bool IsEnbale);
	void SetPlayerMark(const struct FVector& Loc);
	void SetPlaneEnabled(bool InEnable);
	void SetPeekFingerIndex(bool TouchBegin, TEnumAsByte<ETouchIndex> FingerIndex, bool AutoCancelPeek);
	void SetObservingTime(float Time);
	void SetNightStatus(int nightStatus);
	void SetMaxHealth(float HP);
	void SetJoyStickScale(float JSScale);
	void SetJoystickOperatingMode(TEnumAsByte<EJoystickOperatingMode> OperatingMode, float GoStraightAngle);
	void SetJoyStickOpacity(float JSOpacity);
	void SetJoyStickInteractionSize(const struct FVector2D& JSInteractionSize);
	void SetJoyStickCenter(const struct FVector2D& JSCenter);
	void SetIsSnowy(bool bSnowy);
	void SetIsShowBlood(bool InIsShowBlood);
	void SetIsRainy(bool bRainy);
	void SetIsBlizzard(bool bBlizzard);
	void SetGameStateReconnectInfoToClient(const struct FReConnectGameStateInfo& ReConnectInfo);
	void SetGameStateModeUI(TArray<struct FString> ModeUIMgr);
	void SetForbidNightVehicle(int isForbid);
	void SetEnableVoiceByPlayerKey(class ASTExtraPlayerState* State, bool Enable);
	void SetCustomJumpPoint(float JmpX, float JmpY, float JmpRadius);
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);
	void SetCurrentCameraFOV(float FOV, TEnumAsByte<EPlayerCameraMode> Mode);
	void SetControlRotation(const struct FRotator& NewRotation, const struct FString& CallSource);
	void SetCirCenterFixed(bool Enable, float X, float Y);
	void SetBeKickedPlayerName(const struct FString& InPlayerName);
	void SetAllInfectedAreaLevel(int LevelId);
	void SetAirDropEnable(bool Enable);
	void SetAirAttackEnable(bool Enable);
	void ServerUseItem(const struct FItemDefineID& DefineID, const struct FBattleItemUseTarget& Target, EBattleItemUseReason Reason);
	void ServerUpdateShovelingState(const struct FVector& StartPos, const struct FRotator& ShovelingRotation, float TimeStamp);
	void ServerUpdateCurrentBuildIndex(int8_t idx);
	void ServerTriggerSelectGrenade(int GrenadeID);
	void ServerTriggerCharacterEntryEvent(EUTSkillEntry EntryEvent);
	void ServerTriggerCharacterCustomEvent(TEnumAsByte<EUAESkillEvent> SkillEvent);
	void ServerTestPaintDecal(int ID, const struct FPlayerDecalData& DecalData);
	void ServerStopFireNew(class UWeaponManagerBaseComponent* WeaponMangerComp, class ASTExtraShootWeapon* TargetWeapon, uint32_t CurClipID, int CurrentBullet);
	void ServerStopFire(class ASTExtraBaseCharacter* TargetCharacter, class ASTExtraShootWeapon* TargetWeapon, uint32_t CurClipID, int CurrentBullet);
	void ServerStartPreBarrel(class ASTExtraBaseCharacter* TargetCharacter, float HandledTime);
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, const struct FVector& P_MapCenterLoc, const struct FVector& P_PlaneStartLoc, float P_PlaneStartYaw);
	void ServerStartFireNew(class UWeaponManagerBaseComponent* WeaponMangerComp, class ASTExtraShootWeapon* TargetWeapon, const struct FStartFireInfo& InStartFireInfo, float MaxAimDistance, const struct FVector2D& ScreenAimRect);
	void ServerStartFire(class ASTExtraBaseCharacter* TargetCharacter, class ASTExtraShootWeapon* TargetWeapon, const struct FStartFireInfo& InStartFireInfo);
	void ServerStartBarrelNew(class UWeaponManagerBaseComponent* WeaponMangerComp, class ASTExtraShootWeapon* ShootWeapon);
	void ServerStartBarrel(class ASTExtraBaseCharacter* TargetCharacter);
	void ServerSetShootType(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEWeaponShootType> shootType);
	void ServerSetReloadMethod(class AActor* TargetActor, TEnumAsByte<EWeaponReloadMethod> reloadMethod, class ASTExtraShootWeapon* ShootWeapon);
	void ServerSetObsverLocation(const struct FVector& locat);
	void ServerSetIsQuickGrenade(bool IsOpenQuickGrenade);
	void ServerSetIsFreeView(bool isFreeView);
	void ServerSetFreeCameraRotationOnVehicle(const struct FRotator& InRotation, bool IsAutoReturn);
	void ServerSetFreeCamera(const struct FRotator& InRotation);
	void ServerSetControlRotationOnVehicle(const struct FRotator& InRotation, bool IsFreeCamera);
	void ServerSetControlRotation(const struct FRotator& NewRotation);
	void ServerSendLogToLobby(const struct FString& ErrorLog);
	void ServerReportWatchGamePlayerInfoButtonClick(uint64_t WatchPlayer_UID, uint64_t WatchedPlayer_UID, float Duration);
	void ServerReplicateExplosionEffect(class UClass* Template, const struct FTransform& Trans, class AActor* ActorOwner, class APawn* InstigatorPawn, ESpawnActorCollisionHandlingMethod method);
	void ServerRemoteDestroyActor(int SingleId);
	int ServerRemoteCreateActor(int TTeamId, int resID, const struct FVector& Position, const struct FRotator& Rotation);
	void ServerReceiveThePlane(int64_t TimeStamp);
	void ServerReceiveServerStateType(EStateType ReceivedType, EStateType ClientType, int64_t TimeStamp);
	void ServerPickItem(const struct FItemDefineID& DefineID, const struct FBattleItemPickupInfo& pickupInfo, EBattleItemPickupReason Reason);
	void ServerOpenParachute();
	void ServerObserveKiller();
	void ServerObserveCharacter(uint32_t InPlayerKey);
	void ServerObserveAirDropBox(int BoxId);
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, class ASTExtraBaseCharacter* Target);
	void ServerKickPlayerFromGame(uint32_t InPlayerKey);
	void ServerJumpFromPlane();
	void ServerInterruptGame();
	void ServerHearSound(int AkEventID, const struct FVector& AkLocation);
	void ServerHandleMsg(EMsgType Msg);
	void ServerHandleHitDataArray(class ASTExtraShootWeapon* TargetWeapon, const struct FSACData& InAntiCheatData);
	void ServerGetTotalPlayers();
	void ServerGetPlayerAliasInfoList();
	void ServerFight();
	void ServerExitFromHelicopter(class ASTExtraVehicleBase* ExitVehicle);
	void ServerExitFreeCamera();
	void ServerDropItem(const struct FItemDefineID& DefineID, int count, EBattleItemDropReason Reason);
	void ServerDoPickupRevivalFlag();
	void ServerDisuseItem(const struct FItemDefineID& DefineID, EBattleItemDisuseReason Reason);
	void ServerCMD_RPC(const struct FString& Cmd);
	void ServerCMD(const struct FString& Cmd);
	void ServerClearTeammatesCache();
	void SendStringMsg(const struct FString& Message, int msgID);
	void SendLogToLobbyOnece(TEnumAsByte<EReportLogType> LogType);
	void SendEndTouchScreenUICommand(struct FString* UIMsg);
	void SendDeviceInfo(const struct FString& PlatformProfileName, const struct FDeviceInfo& DeviceInfo);
	void ScopeOut();
	void ScopeIn();
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, const struct FString& PromptText, float TotalTime);
	void S2C_HelpOther(class ACharacter* HelpWho, bool IsTurnInfo, float RemainingRescueTime);
	void S2C_BeHelpedByOther(class ACharacter* ByWho, bool IsTurnInfo, float RemainingRescueTime);
	void RunOnNextFrameEvent();
	void RunOnNextFrame__DelegateSignature();
	void RPC_ServerCoronaLab(TArray<unsigned char> CoronaLab, uint32_t CoronaState, TArray<unsigned char> ProParam);
	void RPC_ServerCoronaCook(int8_t InShotType, TArray<unsigned char> CoronaShot);
	void RPC_Server_ShootSpecialBullet(const struct FTransform& LaunchTrans, class ASTExtraShootWeapon* TargetWeapon);
	void RPC_Server_ShootSeekAndLockProjectileBullet(class ASTExtraShootWeapon* TargetWeapon, const struct FTransform& Trans, int Pellet, const struct FShootTimeData& InShootTimeInf, const struct FSeekAndLockRPGBulletUploadData& UploadData);
	void RPC_Server_ShootProjectileBullet(class ASTExtraShootWeapon* TargetWeapon, const struct FTransform& Trans, int Pellet, const struct FShootTimeData& InShootTimeInf);
	void RPC_Server_SetMicphoneTLogToServer(const struct FTLog_Micphone& MicphoneTlog);
	void RPC_Server_SendLog(const struct FString& ErrorLog);
	void RPC_Server_ReqHealth();
	void RPC_Server_ReportPeerVisualFieldActorList(TArray<class AActor*> VisualFieldActorList);
	void RPC_Server_PrintHP();
	void RPC_Server_NotifySwapMainWeaponFinished(TEnumAsByte<ESurviveWeaponPropSlot> Slot1, TEnumAsByte<ESurviveWeaponPropSlot> Slot2);
	void RPC_Server_NotifyServerUseSpot(class ASupplySpot* InSupplySpot);
	void RPC_Server_NotifyServerUseEnhancerSpot(class AEnhancerSpot* InEnhancerSpot);
	void RPC_Server_NotifyServerProjectileBulletImpact(const struct FExplosionProjectileHitInfo& InExProjectileHitInfo, class AProjectileBulletBase* Bullet);
	void RPC_Server_NotifyServerEnemyStep(class ASTExtraBaseCharacter* nowCharacter, const struct FVector& posVector, float showTime);
	void RPC_Server_NotifyServerEnemyShoot(class ASTExtraShootWeapon* nowWeapon, const struct FVector& posVector, float showTime, bool isslience);
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(TArray<int> AirDropBoxIDArray);
	void RPC_Server_NotifyBreakWindow(class AUAEHouseActor* OwnerTarget, const struct FUAEWindowRepData& Window);
	void RPC_Server_NorifyServerWhichTeamOpenedAirdropBox(int AirdropboxID, int ByTeamID);
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(bool bFinishAllWeapon, TArray<struct FItemDefineID> WeaponIDArray, class UWeaponManagerComponent* WeaponMgr);
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(bool bFinishAllWeapon, TArray<struct FItemDefineID> WeaponIDArray);
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(TArray<int> PlayerTombBoxIDArray);
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(TArray<int> AirDropBoxIDArray);
	void RPC_Server_ConfirmMisKill(uint32_t bConfirm, const struct FGameBaseInfo& ClientBaseInfo);
	void RPC_Server_ClientHasReactivated();
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(class ASTExtraWeapon* Weapon, const struct FWeaponReconnectReplicateData& RecoverData);
	void RPC_Server_ClientHasFinishedRecoverWeapon(class ASTExtraWeapon* Weapon, const struct FWeaponReconnectReplicateData& RecoverData);
	void RPC_Server_CharacterSpawnFinish();
	void RPC_Server_ChangeWeaponState(class ASTExtraWeapon* Weapon, TEnumAsByte<EFreshWeaponStateType> StateType);
	void RPC_Server_BattleStateTime(float InBattleStateTime);
	void RPC_ReviveState_GiveUpRevive();
	void RPC_RequireDynamicWeatherInfo(class ADynamicWeatherMgr* DynamicWeatherMgr);
	void RPC_RemoteCustomEventWithObjects(const struct FString& EventTag, const struct FString& CustomParam, class UObject* TObject01, class UObject* TObject02);
	void RPC_RemoteCustomEventWithObject(const struct FString& EventTag, const struct FString& CustomParam, class UObject* TObject);
	void RPC_RemoteCustomEvent(const struct FString& EventTag, const struct FString& CustomParam);
	void RPC_PushDynamicWeatherInfo(class ADynamicWeatherMgr* DynamicWeatherMgr, const struct FWeatherControllerRepData& RepWeatherInfo);
	void RPC_OwnerClient_WeaponWarmUpEnd(class ASTExtraWeapon* Weapon);
	void RPC_OwnerClient_SwapWeaponByPropSlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot1, TEnumAsByte<ESurviveWeaponPropSlot> Slot2, bool bForce);
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(TArray<struct FString> ListOnServer);
	void RPC_OwnerClient_SetMurderInfo(const struct FString& murderName, bool IsAI, uint64_t Uid, bool IsMurderSameTeam);
	void RPC_OwnerClient_SetLastBreathMurder(const struct FString& MurderPlayerName, bool IsAI, uint64_t Uid, bool IsMurderSameTeam);
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const struct FAttrModifyItem& ItemData);
	void RPC_OwnerClient_PlayerConsumeItem(const struct FItemDefineID& ID, int count);
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, TEnumAsByte<ERecoveryReasonType> Reason);
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, TEnumAsByte<ERecoveryReasonType> Reason);
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(TEnumAsByte<ESurviveWeaponPropSlot> WeaponPropSlot, const struct FItemDefineID& DefineID, bool bEquip);
	void RPC_OwnerClient_HandleAIShootBulletHit(const struct FVector& BulletStart, const struct FVector& BulletEnd);
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, EBattleItemOperationType ItemOperation, class AActor* TargetActor);
	void RPC_GiveUpGame();
	void RPC_DrawDebug_Sphere(const struct FVector& Center, float Radius, const struct FColor& Color, float LifeTime);
	void RPC_DrawDebug_Line(const struct FVector& Start, const struct FVector& End, const struct FColor& Color, float LifeTime);
	void RPC_ClientCoronaLab(unsigned char bAllSwitch, TArray<unsigned char> CoronaLab, uint32_t CoronaState);
	void RPC_Client_UISetWidgetVisibility(const struct FString& WidgetTag, ESlateVisibility IsVisibility);
	void RPC_Client_UISetWidgetText(const struct FString& WidgetTag, const struct FString& SText, int TextId, const struct FString& Params);
	void RPC_Client_UIOperateWidget(const struct FString& WidgetTag, const struct FString& SOperation, const struct FString& Params);
	void RPC_Client_UICustomBehavior(const struct FString& BehaviorTag, const struct FString& BehaviorType, const struct FString& Params);
	void RPC_Client_SwitchWeapon(TEnumAsByte<ESurviveWeaponPropSlot> Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeID);
	void RPC_Client_RemoteDestroyActor(int SingleId);
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, const struct FVector& Position, const struct FRotator& Rotation);
	void RPC_Client_PlayerBulletHitVehicleSound(const struct FVector& Loc, const struct FRotator& rot);
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, const struct FName& CauserName);
	void RPC_Client_NotifyHealth(float Health);
	void RPC_Client_DestroyWeapon(const struct FName& LogicSocket, const struct FItemDefineID& ID, bool bEnableBroadcast);
	void RPC_Client_ClientDisplayScoreChangeTips(const struct FWarPlayerStateScore& ScoreStruct);
	void RPC_Client_CircleRun(int Index, int TotalNum);
	void RPC_Client_AirAttack(const struct FAirAttackOrder& airAttackOrderSrc);
	void RevivalTemateSuccess();
	void RevivalTemateFail(const struct FString& Reason);
	float RetriveMobileContentScaleFactor();
	void RestoreDefaultInteractionSize(int JSIndex);
	void RespawnRecoverData(class AUAEPlayerController* PC);
	void ResetMissingUIUpdate();
	void RequireNetCullingDistanceByDevice();
	void RequireDeviceInfo();
	void RequestPlayerNewbieInfo();
	bool RequestChangeWearInBattle(int newIndex);
	bool RequestChangeWear(int newIndex);
	void ReqSwitchPersonPerspective(bool IsNewFPP);
	void ReqLeaveVehicle();
	void ReqEnterSnowBoard();
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);
	void ReportVehicleMoveFlow(const struct FVehicleMoveFlow& VehicleMoveFlow);
	void ReportAntiCheatInfo();
	void RemoveTouchMoveFinger(TEnumAsByte<ETouchIndex> FingerIndex);
	void RemoveAllDoors();
	void ReleaseFire();
	void ReInitUIAfterReCreatePawn(class AUAEPlayerController* UAEPC);
	void RefreshTopMostUIPanel(TEnumAsByte<ETopMostUIPanelType> Type);
	void RefreshShootDetailInfo();
	void RefreshPickupFlagStatusDelegate__DelegateSignature();
	void RecoverStatusAfterReconnecting();
	void RecordPathPoint();
	void ReceiveClientRestart();
	void ReceiveBackpackComponent();
	void PrintStringToScreen(const struct FString& inString, const struct FLinearColor& TextColor, float Duration);
	void PrintMovementLog(int PrintLog);
	void PrintDownCollision();
	void PrintAllPickupWarpper();
	void PressGrenade(bool isThrow);
	void PressFire(int FingerIndex);
	void PlayVehicleCameraShake();
	void PlayMatinee(int Index);
	void PlayInteractionEmote(int EmoteId);
	void PlayerLiveStateChangedInOB(ExtraPlayerLiveState State, class ACharacter* OwnerCharacter);
	void PlayerKillingDelegate__DelegateSignature();
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);
	void PlayBattleSound(const struct FString& BankName, const struct FString& SoundName);
	void OpenParachute();
	void OnWeaponEquipAttachment(TEnumAsByte<ESurviveWeaponPropSlot> WeaponPropSlot, const struct FItemDefineID& DefineID, bool bEquip);
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, class AActor* GuidActor);
	void OnWallFeedBack(bool _WallFeedBack);
	void OnViewTargetPoseChanged(TEnumAsByte<ESTEPoseState> LastPose, TEnumAsByte<ESTEPoseState> NewPose);
	void OnViewTargetDetachedFromVehicle(class ASTExtraVehicleBase* LastVehicle);
	void OnViewTargetChangeVehicleSeat();
	void OnViewTargetAttachedToVehicle(class ASTExtraVehicleBase* InVehicle);
	void OnUseMainSlot__DelegateSignature(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	void OnUseInventoryItemDelegate__DelegateSignature();
	void OnUnequipWeaponDelegate__DelegateSignature();
	void OnUITouchMoveDelegate__DelegateSignature(const struct FVector& Loc);
	static void OnTryReqMoveToTarget(class UObject* WorldContextObject, int FollowType, const struct FString& FollowUID);
	void OnTeammatesAllDie();
	void OnTeammateLogin(int InTeamID);
	void OnTeammateHPChangeDelegate__DelegateSignature();
	void OnTeammateConveyStatusChangedDelegate__DelegateSignature(class ASTExtraPlayerState* STPlayerState, ETeammateConveyStatus TeammateConveyStatus);
	void OnTaskConditionDeactivedDelegate__DelegateSignature(TEnumAsByte<ETaskConditionType> TaskConditionType, class UVariableSet* DataSource);
	void OnTaskConditionActivedDelegate__DelegateSignature(TEnumAsByte<ETaskConditionType> TaskConditionType, class UVariableSet* DataSource);
	void OnTakeDamaged__DelegateSignature(float DamageAngel);
	void OnSwitchWeaponDelegate__DelegateSignature();
	void OnSwitchToTeamByNumPressed__DelegateSignature();
	void OnSwitchToPlayerByNumPressed__DelegateSignature();
	void OnSwitchCameraModeStartDelegate__DelegateSignature(TEnumAsByte<EPlayerCameraMode> CameraMode);
	void OnSwitchCameraModeEndDelegate__DelegateSignature(TEnumAsByte<EPlayerCameraMode> CameraMode);
	void OnStopWeakGuidDelegate__DelegateSignature();
	void OnStopFireDelegate__DelegateSignature();
	void OnStartFireDelegate__DelegateSignature();
	void OnStartAutoSprintCountDown__DelegateSignature();
	void OnSpectatorChange__DelegateSignature();
	void OnSpectatorCameraChange(bool bDie);
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, const struct FString& PromptText, float TotalTime);
	void OnShowAutoSprintButton__DelegateSignature(bool visible, const struct FVector2D& showPos, bool IsInside);
	void OnSetChangeCharacterState__DelegateSignature(TEnumAsByte<EChangeCharacterState> ChangeState);
	void OnServerFinishPickupRevivalFlag();
	void OnRevivalAndEnterAirplane__DelegateSignature();
	void OnRepTeammateChange__DelegateSignature();
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();
	void OnRepPlayerState__DelegateSignature();
	void OnRepNotify_SetBattleOwner();
	void OnRepNotify_ServerHitEnemyReplicatedData();
	void OnRep_WeatherFog();
	void OnRep_WeaponSystemReconnectReplicateData();
	void OnRep_WeaponAvatarDataList();
	void OnRep_UsedSimulation();
	void OnRep_SwitchWeather();
	void OnRep_STExtraBaseCharacter();
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();
	void OnRep_SpawnAndBackpackWeaponReplicatedDataArray();
	void OnRep_ShowWeaponHitDetailInfo();
	void OnRep_ServerStateType();
	void OnRep_RefreshTotalPlayers();
	void OnRep_RefreshAirDropBox();
	void OnRep_Plane();
	void OnRep_ObservedItemList();
	void OnRep_InitialEquipmentAvatar();
	void OnRep_ImprisonmentTeammateSucess();
	void OnRep_ForbitPickEffect();
	void OnRep_ForbitPick();
	void OnRep_FiringPlayerList();
	void OnRep_EnableDeathPlaybackDelay();
	void OnRep_DestControlRotation();
	void OnRep_DeadTombBox();
	void OnRep_CanOpenParachute();
	void OnRep_CanJump();
	void OnRep_CanImprisonmentTeammate();
	void OnRep_BattleSceneAvatarDisplayInfoList();
	void OnRep_BackpackComponent();
	void OnRemoveMainSlot__DelegateSignature(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	void OnReleaseScreen__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex);
	void OnReleaseFireBtnDelegate__DelegateSignature();
	void OnReleaseFire();
	void OnReconnected__DelegateSignature();
	void OnRank__DelegateSignature(int Kills, int Rank);
	void OnPressVampireClothSlotBtn();
	void OnPressTurnplateQuickMsgBtn();
	void OnPressTriggerEntireMapBtn();
	void OnPressShowTagVehileSeatListBtn();
	void OnPressRolewearChangeBtn(int Index);
	void OnPressItemSKillBtn();
	void OnPressFire();
	void OnPressBackpackBtn();
	void OnPlayerUseRecoverItem();
	void OnPlayerStateChanged();
	void OnPlayerReConnected(int LostPlayerKey);
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();
	void OnPlayerPutDownActorDelegate__DelegateSignature(class ASTExtraBaseCharacter* TargetPlayer, class AActor* TargetActor);
	void OnPlayerPickUpActorDelegate__DelegateSignature(TEnumAsByte<ESurvivePickUpGlobalCategory> SurvivePickUpGlobalCategory, int ID);
	void OnPlayerNameChange__DelegateSignature(const struct FString& changedplayername);
	void OnPlayerLostConnection(int LostPlayerKey);
	void OnPlayerHitFireBtn(bool bIsRightBtn);
	void OnPlayerFinalAssistKill__DelegateSignature();
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(EStateType StateType);
	void OnPlayerContollerTouchBegin__DelegateSignature(const struct FVector2D& TouchBeginPos);
	void OnPlayerClickDriveBtn();
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);
	void OnPickupItemDelegate__DelegateSignature(int ItemID, int count, class ASTExtraPlayerController* PC);
	void OnPickUpExpand();
	void OnPickUpCollapsed(bool isCollapsed);
	void OnObserverLevelLoaded();
	void OnObservedUsingWeaponChanged();
	void OnObservedPoisonFogStageChanged();
	void OnObservedItemsChanged();
	void OnObservedBulletNumChanged();
	void OnNightStateChangedDelegate__DelegateSignature();
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);
	void OnLostConnection__DelegateSignature();
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);
	void OnLandOnGroundAfterJumpPlaneEnd();
	void OnKillerNotify(class AActor* Killer);
	void OnItemOperCount(const struct FItemDefineID& DefineID, EBattleItemOperationType OperationType, int count);
	void OnItemOperation(const struct FItemDefineID& DefineID, EBattleItemOperationType OperationType, unsigned char Reason);
	void OnInterruptAutoSprintCountDown__DelegateSignature();
	void OnGameStateChange__DelegateSignature(const struct FName& GameState);
	void OnGameStartDelegate__DelegateSignature();
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);
	void OnGameModeStateChanged();
	void OnFingerMove__DelegateSignature(const struct FVector& Loc);
	void OnExitGame__DelegateSignature();
	void OnEquipWeaponDelegate__DelegateSignature();
	void OnEquipmentWeaponAvatarChange__DelegateSignature();
	void OnEquipmentAvatarChange__DelegateSignature();
	void OnEnterBattleResultStep();
	void OnDropItemDelegate__DelegateSignature(int ItemID, int count, class ASTExtraPlayerController* PC);
	void OnDoubleClickCheckDelegate__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex);
	void OnDeathBoxSpawnedDelegate__DelegateSignature(const struct FTransform& SpawnTransform);
	void OnDeadBoxExpand();
	void OnDeadBoxCollapsed(bool isCollpased);
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);
	void OnCoronaCookCallBack(int InShotType, TArray<unsigned char> DataArray);
	void OnClientWillGotoSpectating();
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CampID, TArray<class AActor*> PeerVisualFieldActorList);
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(class ASTExtraVehicleBase* nowVehicle, const struct FVector& posVector, float showTime);
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(class ASTExtraShootWeapon* nowWeapon, const struct FVector& posVector, float showTime, bool isslience);
	void OnCharacterRecoveryHealthEvent();
	void OnCharacterRecoveryHealth__DelegateSignature();
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(class ASTExtraBaseCharacter* nowCharacter, const struct FVector& posVector, float showTime);
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(const struct FVector& posVector, float showTime);
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(class AActor* nowActor, float checkDis);
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, class ACharacter* OwnerCharacter, int HealthStatus);
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);
	void OnChangeBattleOwnerDelegate__DelegateSignature();
	void OnBackpackMainSlot__DelegateSignature(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	void OnAutoSprintActive__DelegateSignature();
	void On3DTouchForceChangeDelegate__DelegateSignature();
	void ObserveWhoKilledMe();
	void ObserveClientSetPoisonSmogStage(int SmogStage);
	void ObserveCharacter(const struct FString& InPlayerName);
	void ObserveAirDropBox(int BoxId);
	void OBCameraTurnSlower();
	void OBCameraTurnFaster();
	void OBCameraMoveSlower();
	void OBCameraMoveNear();
	void OBCameraMoveFaster();
	void OBCameraMoveFar();
	void NotifyObserverFinalDamage(float FinalDamage, int AttackerTeamID, class ASTExtraBaseCharacter* VictimCharacter);
	void NotifyIsInResultView(bool isInResultView);
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);
	void MoveUp(float Rate);
	void MoveToVehicle(int ItemID);
	void MoveToItem(int ItemID);
	void MoveToAIByDropItem(int ItemID);
	void MoveToAI();
	void MoveTo(float X, float Y, float Z);
	void ModifyTouchIndex(const struct FVector& Loc, TEnumAsByte<ETouchIndex> FingerIndex);
	void ModifyStreamingDistance(int Distance);
	void MemberVoice(int member, int Status);
	void MarkStartFireFrame();
	void LocalProfileFootprint();
	void LocalGetGameStateReconnectInfo();
	void LoadAllLand(bool bLoadAll);
	void LerpFPPCamera();
	void KillSomeOne(const struct FString& InPlayerName);
	void KillAll();
	void Kill(int GivenNumber);
	void KickPlayerFromGame();
	void JumpFromPlane();
	void JoystickTriggerSprint(bool bIsSprint);
	bool IsViewTarget(class AActor* pActor);
	bool IsUse3DTouch();
	bool IsTombBoxTeammate(class APlayerTombBox* TombBox);
	bool IsShowBlood();
	bool IsSameTeam(class APawn* Other);
	bool IsReleasePosInAimBtnRange(const struct FVector& Loc);
	bool IsMurderSelfDefense(const struct FString& InformMurderName);
	bool IsMoveable_DontConsiderFollowingState();
	bool IsMoveable();
	bool IsLastBreathOrRescueingOther();
	bool IsInRevival();
	bool IsInPlane();
	bool IsInParachuteOpen();
	bool IsInParachuteJump();
	bool IsInParachute();
	bool IsInObservingPlayback();
	bool IsInInitial();
	bool IsInFreeCameraView();
	bool IsInFinish();
	bool IsInFight();
	bool IsInDeathReplay();
	bool IsInDead();
	bool IsForbitPickMakeEffect();
	bool IsForbitPick(const struct FName& tombName);
	bool IsCanViewEnemy();
	bool IsCanSpectateTeammate();
	bool IsCanImprisonmentTeammate();
	bool IsAllowActorTouchMove();
	bool IsAGMPlayer();
	void InsertGrenadeIDToName(int GrenadeID, const struct FName& Name);
	void InsertGrenadeIDInOrder(int GrenadeID);
	void InputCameraMoveTest(float DeltaSeconds);
	void InitWeatherConfigComponent();
	void InitTaskDatas(uint32_t InPlayerKey);
	void InitTaskDataDelegate__DelegateSignature(int TaskID, int process, const struct FString& ext_info);
	void InitTaskData(int TaskID, int process, const struct FString& ext_info);
	void InitTaskComponent();
	void InitRevivalComponent();
	void InitNewbieComponent(TArray<int> FinishedGuide, TArray<int> FinishedCounts, int PlayerLevel, int PlayerExperienceType);
	void InitJoyStickAfterActivation();
	void InitCollectionDataDelegate__DelegateSignature(int ItemID, int CurrentCount, int TotalCount);
	void InitCollectionData(int ItemID, int CurrentCount, int TotalCount);
	void IniClientCoronaLab();
	void ImprisonmentTeammate(const struct FString& TeammateName, bool IsSelfDef);
	void HandleUpdateShovelingRelease();
	void HandleUpdateShovelingPressed();
	void HandleUpdateShoveling();
	void HandleTogglePlayerListInOB();
	void HandleToggleOBTeamList(bool InShow);
	void HandleToggleMapInOB();
	void HandleToggleHitDamageDisplay();
	void HandleSwitchToTeammatePrev();
	void HandleSwitchToTeammateNext();
	void HandleSwitchToTeam(int InTeamID);
	void HandleSwitchToPlayerIndex(int InPlayerIndex);
	void HandleLeaveFreeViewInOB();
	void HandleLandOnGroundEnd();
	void HandleEnterFreeViewInOB();
	void HandleClientHasReactivated();
	void HandleCameraModeChanged(TEnumAsByte<EPlayerCameraMode> NewMode, class ASTExtraBaseCharacter* InCharacter);
	int GotoSpectating(int TeammatePlayerid);
	void GotoFlying();
	void GMUseSynVerify(int UseSynVerifyFlag);
	void GMTeleport(const struct FName& Teleporter);
	void GMSetBoolPoisonCircle();
	void GMSetBoolAirDrop();
	void GMSetBoolAirAttack();
	void GMSetBoolAI();
	void GMResVerifySize(int VerifySize);
	void GMOpenWeather(int OpenWeatherID);
	void GMEnableRandom();
	void GMEnableAllComponent();
	void GMDisableRandom();
	void GMDisableAllComponent();
	void GMCloseWeather(int CloseWeatherID);
	int GetWriteCircleDistance();
	class UWeatherConfigComponent* GetWeatherConfigComponent();
	static struct FWeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);
	float GetViewPortDPIScale();
	class UVehicleUserComponent* GetVehicleUserComp();
	bool GetUseMotionControlLog();
	bool GetUseMotionControlEnable();
	int GetUnlockWearCount();
	float GetTouchForce(TEnumAsByte<ETouchIndex> FingerIndex);
	class AActor* GetThePlane();
	class ASTExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(class APlayerTombBox* TombBox);
	class USpringArmComponent* GetTargetedSpringArm();
	int GetStatTriangles();
	struct FString GetStatMemory();
	int GetStatDrawCalls();
	TArray<int> GetSpecialAreaList();
	int GetSpecialAreaID();
	struct FRotator GetSensibilityRate(bool bIsMotionControl);
	struct FBattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();
	int GetRevivalCountDownTime();
	struct FString GetRemarkNameByGID(const struct FString& actorName, const struct FString& actorUID);
	class UQuickSignComponent* GetQuickSignComponent();
	class USTScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();
	struct FPlayerInfoInOB GetPlayerInfoInOBByName(const struct FString& InPlayerName);
	class ASTExtraBaseCharacter* GetPlayerCharacterSafety();
	struct FTransform GetPaintDecalTargetTransform();
	class UObservingReplay* GetObservingPlayback();
	struct FVector GetNewestAirDropBoxPos();
	TArray<struct FPlayerInfoInOB> GetNearPlayerList();
	struct FString GetMurderUIDStr();
	struct FString GetMurderName();
	bool GetMurderIsAI();
	TArray<struct FBattleItemData> GetMultiItemFromItemList(TArray<int> ItemSpecifiedID);
	TEnumAsByte<ETouchIndex> GetMaxTouchForceFinger();
	struct FVector2D GetJoyStickVisualSize();
	struct FVector2D GetJoyStickCenter();
	bool GetIsRespawn();
	bool GetIsMurderSameTeam();
	bool GetIsFreeCamera();
	ECharacterSubType GetInfectionPawnSubType();
	ECharacterMainType GetInfectionPawnMainType();
	void GetGameStateReconnectInfoOnServer();
	void GetGameScreenSize();
	int GetFriendDistance();
	struct FVector GetFocalLocation();
	struct FWeaponHitDetailInfo GetDetailHitInfo();
	class ASTExtraPlayerState* GetCurPlayerState();
	int GetCurPlayerId();
	class ASTExtraBaseCharacter* GetCurPlayerCharacter();
	struct FVector GetCurPawnLocation();
	class APawn* GetCurPawn();
	float GetCurFPS();
	struct FRotator GetControlLookRotation();
	struct FVector GetControlLookPoint(int LineTraceRange, bool* HitTaget);
	TArray<struct FBattleItemData> GetClothingInAllBackpack(int Index);
	class UClass* GetClassFromBPClassManager(class UClass* BaseClass);
	class UChatComponent* GetChatComponent();
	class UBackpackComponent* GetBackpackComponent();
	TArray<struct FSearchedTombBoxAndWrapperListResult> GenerateAirDropData(int BoxId);
	void GameModeGotoNextState();
	void GameModeGotoFightingState();
	void FreeCameraTouchMove(const struct FVector& Loc, TEnumAsByte<ETouchIndex> FingerIndex);
	void ForceServerSetControlRotationOnVehicle();
	void ForceReleaseCurTouchMoveFinger();
	void FlushItem(int onlyStatic);
	void FireTakeDamagedEvent(const struct FVector& CauserLocation);
	void FireOrGrenade();
	void FindAIDropItem(int ItemID);
	void Fight();
	struct FBattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(class ASTExtraPlayerCharacter* TargetCharacter);
	void ExitNightState();
	void ExitFreeCamera(bool IsForceReset);
	void ExecDSCommand(const struct FString& DSCommand);
	void EnterNightState();
	void EndTouchScreen(const struct FVector& Loc, TEnumAsByte<ETouchIndex> FingerIndex, bool UseOldEndFireJudge);
	void EndForceTouchFire(const struct FVector& Loc);
	void EnablePlayerInHouse(bool bIsIn);
	void EnableMyLandscapeDraw();
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);
	void DynamicCreateComponents();
	void DropItem(int ID);
	void DropAllItem();
	void DoUITouchMove(const struct FVector& Loc);
	void DoubleClickCancel(TEnumAsByte<ETouchIndex> FingerIndex);
	void DoTouchMove(float Yaw, float Pitch);
	void DoRevivalTemmates(class ARevivalPointActor* RevivalPoint);
	void DoGiveUpRevivalTemmates(class ARevivalPointActor* RevivalPoint);
	void DoAutoManageActiveCameraTarget();
	void DisplayLuaGameTips(const struct FString& FunctionName, int ID, const struct FString& Param1, const struct FString& Param2);
	void DisplayGameWarningTipWithMsgIDAndString(int ID, const struct FString& Param1, const struct FString& Param2);
	void DisplayGameTipWithMsgIDAndString(int ID, const struct FString& Param1, const struct FString& Param2);
	void DisplayGameTipWithMsgID(int ID);
	void DisplayGameTipForLowFPSWarning(int ID, const struct FString& Param1, const struct FString& Param2);
	void DisplayBattleGeneralTip(int ID, const struct FString& Param1, const struct FString& Param2);
	void DispatchPlayerRespawnedEvent(class AUAEPlayerController* PlayerController);
	void DispatchPlayerReconnectedEvent();
	void DispatchPlayerLostEvent();
	void DispatchPlayerExitEvent();
	void DispatchPlayerAboutToRespawnEvent(class AUAEPlayerController* PlayerController);
	void DisableMyLandscapeDraw();
	void DisableAirDrop();
	void DelegatePlayerLevelChange__DelegateSignature(int Level);
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);
	void DelayGotoSpectating();
	void DelayForceExitFreeCamera();
	void DelayedFocusPlayerPawn();
	void DebugWorldPlayerAvatarInfo();
	void DebugSetUIVisibility(bool bUIVisibility);
	void DebugEnableFerrisWheelTick(bool bEnable);
	void DebugEnableDrawSearchLine(int bEnabled);
	void DebugEnableBulletImpact(int bEnabled);
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);
	void DealGetAllNearShotWeapon(float disRate);
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);
	void DealGetAllNearMoveCharacter(float checkDis);
	void DeactiveTaskTrigger(TEnumAsByte<ETaskConditionType> ConditionType, class UVariableSet* InDataSource);
	void CreateVehicleOverlapDamage();
	void CreateGodzilla(float X, float Y, float Z);
	void CorrectVehicleState(int InCorrectionId, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity, bool bIsSnap);
	void CollectAllPlayerWeaponPosInfo();
	void ClientUpdateShovelingState(const struct FVector& StartPos, const struct FRotator& ShovelingRotation);
	void ClientStopShoveling();
	void ClientStartOnlineGame();
	void ClientShowInfectAreaWarning();
	void ClientSetTotalPlayers(TArray<struct FPlayerStaticInfoInOB> InPlayerStaticInfoList, TArray<struct FPlayerBaseInfoInOB> InTotalPlayers);
	void ClientSetPoisonSmogStage(int SmogStage);
	void ClientSetOBData(uint32_t InPlayerKey, int InTeamID, class ASTExtraBaseCharacter* CurViewChar);
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void ClientQuitViewEnemy();
	void ClientPlayItemOperationSound(int ItemSoundID, EBattleItemOperationType ItemOperation, class AActor* TargetActor);
	void ClientOnHurt();
	void ClientOnDamageToOther(float _DamageToOther);
	void ClientObserveCharacter(uint32_t InPlayerKey, bool IsOnPlane, EStateType InServerStateType);
	void ClientInterruptGame();
	void ClientInitIngameUIAfterRespawn();
	void ClientHearSound(int AkEventID, const struct FVector& AkLocation);
	void ClientHandleMsg(EMsgType Msg, int64_t TimeStamp);
	void ClientGotoSpectating();
	void ClientGiveUpRevivalTemmates();
	void ClientGameStarted();
	void ClientFriendBattleEnd();
	void ClientExitFromHelicopter(bool SkipOpenParachute);
	void ClientEnterViewBox(int BoxId);
	void ClientEndOnlineGame();
	void ClientDisplayLuaGameTips(const struct FString& FunctionName, int ID, const struct FString& Param1, const struct FString& Param2);
	void ClientDisplayGameTipWithMsgID(int ID);
	void ClientCheckStartShovelingFail();
	void ClientChangeStatePC(EStateType TargetStateType);
	void ClearBossBornPoint();
	struct FVector2D ClampFreeCamIconOffset(const struct FGeometry& MyGeometry);
	bool CientRevivalTemmates();
	bool CheckNeedReport(const struct FSACData& InAntiCheatData);
	void CheckConsumeGlideItem();
	void ChangeSpectatorStateToFreeView();
	bool ChangeRolewearIndex(int newIndex);
	void ChangeFinishTime(int RestTime);
	void CanSeeAllUI(bool bUIVisibility);
	bool CaluIsReleasePosInAimBtnRange(const struct FVector& Loc, const struct FVector2D& AimBtnPos, const struct FVector2D& AimBtnSize);
	void CallZombieFlowAirDrop(int ZombieID);
	void CallZombieAirDrop(int ZombieID);
	void CallTeamMateStateChanged(class ASTExtraPlayerState* STPlayerState, const struct FVector& Location, const struct FRotator& Rotation, float Health, int VoiceID);
	void CallShowTouchInterface(bool InShow);
	void CalInputFromRotaionRate(float MotionAimRate_Pitch, float Right, float Left, float MotionRate_Yaw_Threshold, const struct FVector& CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, bool bLandScapeOrientation, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, bool* bIsAddYaw, bool* bIsAddPitch, float* OutYaw, float* OutPitch);
	struct FVector2D CalcAttactBtnPos(float locX, float locY, float SizeX, float SizeY);
	void CacheShootDetailInfoShootNum(int ShootNum);
	void CacheShootDetailInfoHitPos(unsigned char HitPos);
	void C2S_RequestSkillPrompt();
	void C2S_RequestBeingRescuedRemainingTime();
	void BroadcastFatalDamageToClient(const struct FString& CauserName, const struct FString& VictimName, unsigned char DamageType, int AdditionalParam, bool IsHeadShot, unsigned char ResultHealthStatus, unsigned char Relationship, unsigned char PreviousHealthStatus, const struct FString& RealKillerName, unsigned char realKillerNewKillNum, const struct FString& CauserNation, const struct FString& VictimNation, uint32_t causerKey, uint32_t victimKey, int causerAnchorPlatformResID, int causerAnchorPlatformColorID, int victimAnchorPlatformResID, int victimAnchorPlatformColorID, int realKillerAnchorPlatformResID, int realKillerAnchorPlatformColorID, int CauserWeaponAvatarID, unsigned char CauserType, unsigned char VictimType);
	void BroadcastClientsSpawnExplosionEffect(class UClass* Template, const struct FTransform& Trans, class AActor* ActorOwner, class APawn* InstigatorPawn, ESpawnActorCollisionHandlingMethod method);
	bool BPGetIsAndroidSimulator();
	void BP_OceanSideDetected(const struct FVector& OceansideLocation, bool bDetectedRiver);
	void BluePrintSetViewTarget(class ASTExtraBaseCharacter* pCharacter);
	void BindVoiceCheckFunction();
	void BeginTouchScreen(const struct FVector& Loc, TEnumAsByte<ETouchIndex> FingerIndex);
	void BackToGameDataRefresh();
	bool AutoSelectViewTarget();
	void AutoSelectTeammateToView();
	void AddTouchMoveFinger(TEnumAsByte<ETouchIndex> FingerIndex, unsigned char Priority, const struct FVector& TouchLoc);
	void AddItemAttachList(int BaseItemID);
	void AddItem(int ID, int count);
	void AddBossBornPoint(float BornX, float BornY);
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);
	void ActiveTaskTrigger(TEnumAsByte<ETaskConditionType> ConditionType, class UVariableSet* InDataSource);
	void ActiveCurCamera(bool bActive);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};


// Class ShadowTrackerExtra.GMCheatManager
// 0x0010 (0x0088 - 0x0078)
class UGMCheatManager : public UCheatManager
{
public:
	class AActor*                                      PVETestMonster;                                           // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GMCheatManager");
		return pStaticClass;
	}


	void VehicleSpotLog();
	void UseLocalVehicleAvatar();
	void UnequitPlayerPawnWeapon(int idx);
	void ToggleSpringMode();
	void ToggleSpringDebug();
	void ToggleShootVertify();
	void TogglePawnInfo();
	void TestWeaponAttachment(bool bEquip);
	void TestResetNetDriver();
	void TestLineTrace(float X, float Y, float Z);
	void TestGameplayDataRecord(int Uid, int RecordType);
	void TestConnectToNewNetDriver();
	void TeleportToPVEMonster(int ChapterID, int LevelId, int WaveID);
	void TeleportToMark();
	void TeleportTo(float X, float Y, float Z);
	void SwitchShowUI();
	void StatVehicle();
	void StartMonsterAction(int ActionType, int ActionID);
	void StartMainTriggerClock();
	void SpawnMonsterArroundAllPlayer(int MonsterID, int Num, int MaxNum, float Radius, float Radius2, float Radius3, float Radius4);
	void SpawnLevelDirector();
	void SpawnFakePlayer(int Num, bool bWithPet, bool bStopAI);
	void SpawnDecal();
	void SpawnBotForTest(int Num);
	void ShowPet(bool Enable);
	void SetWeatherPlaySpeed(float FSpeed);
	void SetViewFPP(bool IsFPP);
	void SetVehicleAvatar(int VehicleShapeType, int VehicleSkin);
	void SetTouchMoveLog(bool Enable);
	void SetTouchMoveDelay(int DelayFrame);
	void SetStrongHoldTimes(float SpawnVehicleCD, float ActiveTimeToSet, float UnfreezeTimeToSet, float DoorOpenTime, float TarmacOpenTime);
	void SetSpringArm(unsigned char armFlag);
	void SetSkillDup(int count);
	void SetShootPveVertify(bool IsVertify);
	void SetShootPveDebug(bool DebugShootPve);
	void SetShootDebugInfo(bool debugShootInfo);
	void SetRateScore(float RankScore);
	void SetNeckUp(float UpAngle);
	void SetNeckSpeed(float Speed);
	void SetNeckRight(float RightAngle);
	void SetNeckMax(float MaxAngle);
	void SetNeckLeft(float LeftAngle);
	void SetMonsterNumMultiple(int ChapterID, int LevelId, int DiffcultPerc);
	void SetMonsterNB(bool MonsterNB);
	void SetMonsterHatred(float Hatred);
	void SetMaxActiveAi(int Num);
	void SetItemCallMonsterLimit(int WeatherID, int LimitItemCallNum, int LimitTotalNum);
	void SetIsRender(bool IsRender);
	void SetGVMemberID(int memberID);
	void SetEquipmentAvatar(int EquipmentAvatarType, int EquipmentSkin);
	void SetDynamicWeather(int WeatherType, int EventType);
	void SetDeliver();
	void SetDebugRegionType(int debugRegionType);
	void SetControlRotation(float Yaw);
	void SetCameraLagEnable(bool Enable);
	void SetCacheInputNum(int CacheNum);
	void SetAnimEnable(bool Enable);
	void SetAnimDebugInfo(bool debugAnimInfo);
	void SetAnimDebugGroup(bool debugAnimGroup);
	void SetAllMonsterHp(int HP);
	void RemoveBuffBySkill(int SkillID, int IsPlayer);
	void RemoveBuff(int BuffID, int IsPlayer);
	void ReloadPVETable();
	void RefreshReconnectUI();
	void PVESpawnMonsterByPos(int MonsterID, int Num, float Radius, float PosX, float PosY, float PosZ);
	void PVESpawnMonsterByDistance(int MonsterID, int Num, float Radius, float FrontDist);
	void PVESpawnMonster(int MonsterID, bool StopAI);
	void PVESpawnItemCallMonster(int MonsterID, int Num, int Radius);
	void PVESetTestMonster(class AActor* InMonster);
	void PVEResetMonsterTable();
	void PVEPrintAllAnim();
	void PVEPlayerTriggerSkill(int SkillID, int EventType);
	void PVEPlayerStopSkill(int SkillID, int StopReason);
	void PVEMonsterTriggerSkill(int SkillID, int EventType);
	void PVEMonsterStopSkill(int SkillID, int StopReason);
	void PVEMonsterRemoveBuffByID(int BuffID, int LayerCount, int CauserSkillID, bool CauseByPlayer);
	void PVEMonsterAddBuffByID(int BuffID, int LayerCount, int CauserSkillID, bool CauseByPlayer);
	void PVECloseMonsterLimit(bool bCloseMonsterLimit);
	void PrintWeaponAllState();
	void PrintPool();
	void PrintMainCharAllAvatar();
	void PrintAllPlayerPawnCollisions();
	void PrintAllControlledPlayerAimmingConfig();
	void PrintAllAnim();
	void PauseAnim(bool bPause);
	void OpenHitTest();
	void KillMonsterCalledByMe(int KillNum);
	void KillAllPVEBot();
	void ItemSpotLog();
	void GotoSpectatingDirectly();
	void GotoSpectating();
	void GotoSpecificWeather(int WeatherIdx);
	void GMUseGunCollision(bool bIsUse);
	void GMSuicide();
	void GMStopAI(bool bStop, uint32_t InPlayerKey);
	void GMSpeedUp();
	void GMSpawnSocialLandPlayerAIAroundMe(uint32_t AINum, float fRadius, bool bActiveAI, bool IsAIInvincible, bool bWithPet, bool bWithEqui);
	void GMSpawnPlayerAIAroundPoint(uint32_t iNum, float X, float Y, float Z, float fRadius, bool bActiveAI, bool IsAIInvincible, bool bWithPet);
	void GMSpawnPlayerAIAroundMe(uint32_t iNum, float fRadius, bool bActiveAI, bool IsAIInvincible, bool bWithPet);
	void GMSetViewYawLimit(float MinLimit, float MaxLimit);
	void GMSetSpeed(float WalkSpeed);
	void GMSetServerLevelLoadingMode(bool bNewLoadAll);
	void GMSetPawnNull(bool bIsNull);
	void GMSetJoystickEightDirection(bool IsNeedEightDirection);
	void GMSetJoystickActivatedRange(bool IsNeedActivatedRange, float ActivatedRange);
	void GMSetHealth(float Val);
	void GMSetCullDistance(bool bCullDistance);
	void GMSetCircleTime(float CDTime, float LastTime);
	void GMRevivePlayer();
	void GMRainCount(float count);
	void GMIOSFrameRateLock(int FrameRateLock);
	void GMInvincible(bool IsInvincible);
	void GMGatherAllPlayerAIAroundMe(float fRadius, bool bActiveAI, bool IsAIInvincible, bool bWithPet);
	void GMFollow(const struct FString& TargetName);
	void GMDrawDebugSphere2(float X, float Y, float Z, float Radius, int Segments, float LifeTime);
	void GMDrawDebugSphere(float Radius, int Segments, float LifeTime);
	void GMDecreaseHealth();
	void GMAddYawTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);
	void GMAddYaw(float Val, int AddType);
	void GMActiveRenderDynamicStyle(bool bSet, int Type);
	void GetGVMemberID(int memberID);
	void GetGold();
	void GeneratePVPBoss(int BossID, int BossIndex);
	void GenerateMonsterWave(int ChapterID, int LevelId, int WaveID);
	void ForceStopDynamicWeatherChange();
	void ForceStartNextDynamicWeatherChange();
	void ForceGC();
	void ForceEndInputForAppWillDeactivate();
	void FireSpawnAirplane();
	void FireReviveTeammate(int RespawnStartID, bool bJump);
	void FallKill(int Type);
	void EquipAllPlayers();
	void EnterPVELevel(int ChapterID, int LevelId);
	void EnterPawnState(EPawnState InState, bool IsEnter);
	void EnablePlayerPawnCollision(int idx, bool IsEnable);
	void DumpVehicleAnimInstance();
	void DumpVehicle();
	void DumpPlayerController();
	void DumpObservingCharacter();
	void DumpObjectProperties(const struct FString& ObjectName);
	void DumpDSNetConsiderList();
	void DumpCharacterAnimInstance();
	void DumpCharacter();
	void DoMonsterExit(int FuncType, int RemainNum);
	void DeleteVehicleAdvanceAvatar_Style(int VehicleSkin, int VehicleStyle);
	void DeleteVehicleAdvanceAvatar(int VehicleSkin, int ModelID);
	void DebugStopEMote(int Index);
	void DebugStopCapture();
	void DebugStartEMote(int Index);
	void DebugSpringArm(bool bDebug);
	void DebugSpeed();
	void DebugSetChangeWearCoolDownTime(float Time);
	void DebugRoomCustomParams(int FirstCircleDelayTime, int FirstCircleAppearTime, int FirstWhiteCircleRadiusMultiplicator, int BlueCircleDamageMultiplicator);
	void DebugOBNearPlayerList();
	void DebugLocation();
	void DebugFPPAnim();
	void DebugFixedParams();
	void DebugChangeWearIndex(int Index);
	void DebugCamera();
	void CloseItemDrop(bool IsCloseItemDrop);
	void ClientSetSpeed(float Times);
	void ChangeViewTarget();
	void ChangeMonsterWalkMode(int Mode);
	void ChangeBattleAvatar(int HeadAvatarID, int HairAvatarID, int InGender, int PutOffAvatar);
	void ChangeAllPlayersAvatar(int InSlotType, int InItemID);
	void CastUIMsg(const struct FString& Msg, const struct FString& module);
	void CallOnReconnect();
	void CallLuaTableFunction(const struct FString& tableName, const struct FString& FunctionName);
	void CallGameModeLuaFunction(struct FString* FunctionName);
	void BuildingCollide(bool InCollide);
	void AutoSetPlayerLocation(bool bEnable);
	void AnimDebugUseSkipMapForDistanceFactor(bool bUseLodMap);
	void AnimDebugUseLodMap(bool bUseLodMap);
	void AnimDebugUpdateFlag(int Type);
	void AnimDebugNonRenderedRate(int UpdateRate);
	void AnimDebugNonRenderedMinDist(float minDist);
	void AnimDebugNonRenderedMaxDist(float MaxDist);
	void AnimDebugLodSkipMap(TArray<struct FLODToSkipFrame> SkipMap);
	void AnimDebugEnable(bool bEnable);
	void AnimDebugBaseDistFactor(TArray<float> BaseDistFactor);
	void AILog();
	void AddWeaponAvatar(int WeaponSkin);
	void AddVehicleAvatar(int VehicleSkin);
	void AddVehicleAdvanceAvatar_Style(int VehicleSkin, int VehicleStyle);
	void AddVehicleAdvanceAvatar(int VehicleSkin, int ModelID, int ColorID, int PatternID, int ParticleID);
	void AddScore(int Score);
	void AddItemToDownloadlist(int ItemID);
	void AddBuffBySkill(int SkillID, int IsPlayer);
	void AddBuff(int BuffID, int IsPlayer);
	void ActiveLevelNearBornPos(int ActiveChapterType, int RandomNum, int ActiveNum, int ActiveWaveID, int NumLimit);
};


// Class ShadowTrackerExtra.GMDataSource_AIProbe
// 0x0008 (0x0038 - 0x0030)
class UGMDataSource_AIProbe : public UGMDataSource
{
public:
	class UClass*                                      AIControllerClass;                                        // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GMDataSource_AIProbe");
		return pStaticClass;
	}


	bool IsRespawnAIPosWithTeam();
	bool IsImmediatelySpawnAI();
	class UClass* GetAIControllerClass();
};


// Class ShadowTrackerExtra.GMDataSource_AirDrop
// 0x0138 (0x0168 - 0x0030)
class UGMDataSource_AirDrop : public UGMDataSource
{
public:
	struct FAirDropPlaneParams                         AirDropPlaneParams;                                       // 0x0030(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAirDropPlaneParams                         SuperAirDropPlaneParams;                                  // 0x004C(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAirDropPlaneParams                         VehicleAirDropPlaneParams;                                // 0x0068(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAirDropPlaneParams                         ZombieAirDropPlaneParams;                                 // 0x0084(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int                                                ZombieAirDropTargetSourceID;                              // 0x00A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x00A4(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.GMDataSource_AirDrop.BossWarningActorClass
	TArray<struct FAirDropConfig>                      AirDropConfigs;                                           // 0x00D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                               bCanUseDelayDrop;                                         // 0x00E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData03[0x28];                                      // 0x00E1(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.GMDataSource_AirDrop.AirDropPlaneBluePrint
	unsigned char                                      UnknownData04[0x28];                                      // 0x0110(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.GMDataSource_AirDrop.AirDropBoxBlueprint
	struct FFlareGunAirDropRandomParams                SuperAirDropRandomParams;                                 // 0x0138(0x000C) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFlareGunAirDropRandomParams                VehicleAirDropRandomParams;                               // 0x0144(0x000C) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TEnumAsByte<ESpotType>>                     SpotType;                                                 // 0x0150(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              StuffBoxToWorldBoundaryMinDis;                            // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0164(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GMDataSource_AirDrop");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GMDataSource_AirRoute
// 0x0090 (0x00C0 - 0x0030)
class UGMDataSource_AirRoute : public UGMDataSource
{
public:
	struct FGameModeParam                              CurPlaneRouteData;                                        // 0x0030(0x0058) (Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FString                                     PlaneClassPath;                                           // 0x0088(0x0010) (Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     PlaneBTPath;                                              // 0x0098(0x0010) (Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxAIAllowJumpRadius;                                     // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<struct FPlaneTypes>                         SeasonPlanes;                                             // 0x00B0(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GMDataSource_AirRoute");
		return pStaticClass;
	}


	float GetMaxAIAllowJumpRadius();
	struct FGameModeParam GetCurPlaneRouteData();
};


// Class ShadowTrackerExtra.GMDataSource_DynamicObject
// 0x0028 (0x0058 - 0x0030)
class UGMDataSource_DynamicObject : public UGMDataSource
{
public:
	class UClass*                                      LevelDirectorClass;                                       // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AIdeaDecalManager*                           IdeaDecalManager;                                         // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                              DynamicTriggers;                                          // 0x0040(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	class AUAELevelDirector*                           LevelDirector;                                            // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GMDataSource_DynamicObject");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GMDataSource_GlobalSettings
// 0x0008 (0x0038 - 0x0030)
class UGMDataSource_GlobalSettings : public UGMDataSource
{
public:
	float                                              FallingDamageModifier;                                    // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSkipNearDeath;                                           // 0x0034(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GMDataSource_GlobalSettings");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GMDataSource_Navigation
// 0x0020 (0x0050 - 0x0030)
class UGMDataSource_Navigation : public UGMDataSource
{
public:
	struct FString                                     NavDataPath;                                              // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     NavLinkDataPath;                                          // 0x0040(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GMDataSource_Navigation");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GMDataSource_PlayerStart
// 0x00B0 (0x00E0 - 0x0030)
class UGMDataSource_PlayerStart : public UGMDataSource
{
public:
	TArray<class ASTExtraPlayerStart*>                 CachedPlayerStarts;                                       // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<int, struct FBornPlayerStartData>             BornIDToPlayerStartsMap;                                  // 0x0040(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<int, struct FBornPlayerStartData>             BornIDToActivityPlayerStartsMap;                          // 0x0090(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GMDataSource_PlayerStart");
		return pStaticClass;
	}


	TArray<class ASTExtraPlayerStart*> GetPlayerStarts();
	TMap<int, struct FBornPlayerStartData> GetBornIDToPlayerStartsMap();
	TMap<int, struct FBornPlayerStartData> GetBornIDToActivityPlayerStartsMap();
};


// Class ShadowTrackerExtra.GMDataSource_Respawn
// 0x0068 (0x0098 - 0x0030)
class UGMDataSource_Respawn : public UGMDataSource
{
public:
	struct FScriptMulticastDelegate                    OnRespawnRemainTimeChangeDelegate;                        // 0x0030(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	float                                              DefaultPlayerRespawnTime;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DefaultRespawnInvincibleTime;                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<uint32_t, struct FTimerHandle>                PlayerRespawnTimerMap;                                    // 0x0048(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GMDataSource_Respawn");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GMDataSource_Team
// 0x00A8 (0x00D8 - 0x0030)
class UGMDataSource_Team : public UGMDataSource
{
public:
	TMap<int, struct FTeamInfo>                        TeamMap;                                                  // 0x0030(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	int                                                MaxTeamSize;                                              // 0x0080(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x54];                                      // 0x0084(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GMDataSource_Team");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GrayPushCommand
// 0x0140 (0x0168 - 0x0028)
class UGrayPushCommand : public UObject
{
public:
	struct FString                                     ModeOpenID;                                               // 0x0028(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGPProfileMatch>                     MatchProfile;                                             // 0x0038(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x120];                                     // 0x0048(0x0120) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GrayPushCommand");
		return pStaticClass;
	}


	bool InitConfigFile();
	bool GetPushCommands(const struct FString& MapShortName, const struct FString& GameModeName, const struct FString& ProfileName, const struct FDeviceInfo& DeviceInfo, TArray<struct FString>* PushComands);
};


// Class ShadowTrackerExtra.GrenadeAvatarComponent
// 0x0010 (0x0340 - 0x0330)
class UGrenadeAvatarComponent : public UItemAvatarComponentBase
{
public:
	struct FScriptMulticastDelegate                    GrenadeAvatarEqiuped;                                     // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GrenadeAvatarComponent");
		return pStaticClass;
	}


	void PreChangeGrenadeAvatar(int InItemID);
	void PostChangeItemAvatar(bool bProcessRenderPipeline);
	struct FString GetItemAvatarHandlePath(int ItemID);
	class UBackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);
	int GetDefaultAvatarID(int InAvatarID);
	void AddAssetSoftObject(TArray<struct FSoftObjectPath>* FSoftObjectPathList);
};


// Class ShadowTrackerExtra.GrenadePredictLine
// 0x00E8 (0x0478 - 0x0390)
class AGrenadePredictLine : public AActor
{
public:
	struct FVector                                     HighThrowOffset;                                          // 0x0390(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LowThrowOffset;                                           // 0x039C(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EThrowGrenadeMode>                     ThrowMode;                                                // 0x03A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03A9(0x0003) MISSED OFFSET
	float                                              PredictLineVelocityScale;                                 // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSimTime;                                               // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	struct FGrenadePredictResult                       GrenadePredictResult;                                     // 0x03B8(0x0030) (BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                              GrenadeRadius;                                            // 0x03E8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     PredictLineStartLocation;                                 // 0x03EC(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     PredictLineStartVelocity;                                 // 0x03F8(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LauncheVelocity;                                          // 0x0404(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x68];                                      // 0x0410(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GrenadePredictLine");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GroundFlagWidget
// 0x0068 (0x0410 - 0x03A8)
class UGroundFlagWidget : public UUAEUserWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03A8(0x0018) MISSED OFFSET
	struct FVector4                                    Limit;                                                    // 0x03C0(0x0010) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   UIOffset;                                                 // 0x03D0(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                      flagDuration;                                             // 0x03D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                rightPlus;                                                // 0x03E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              opacityFactor;                                            // 0x03EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                            CanvasPanel;                                              // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                                  TeammateDistText;                                         // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0400(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0408(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GroundFlagWidget");
		return pStaticClass;
	}


	void SetWorldPos(const struct FVector& Loc);
};


// Class ShadowTrackerExtra.PickupGroupSource
// 0x0008 (0x0030 - 0x0028)
class UPickupGroupSource : public UObject
{
public:
	bool                                               bDropByPlayer;                                            // 0x0028(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PickupGroupSource");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GroupBackpackComp
// 0x0040 (0x0150 - 0x0110)
class UGroupBackpackComp : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0110(0x0028) MISSED OFFSET
	TArray<class USingleBackpackComp*>                 SingleList;                                               // 0x0138(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0148(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GroupBackpackComp");
		return pStaticClass;
	}


	static void SpawnItemForBackpack(class APawn* Owner, float Capacity, TArray<struct FPickUpItemData> ItemList, const struct FName& BoxName);
};


// Class ShadowTrackerExtra.STNewbieGuideSuccessListenerBase
// 0x0010 (0x0038 - 0x0028)
class USTNewbieGuideSuccessListenerBase : public UObject
{
public:
	TWeakObjectPtr<class AController>                  OwnerController;                                          // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayTime;                                                // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STNewbieGuideSuccessListenerBase");
		return pStaticClass;
	}


	bool ReconnectRecover();
	bool GuideFinishedByPlayer();
	bool EnableListener();
	bool DisableListener();
};


// Class ShadowTrackerExtra.GSListener_ClickBackpackBtn
// 0x0000 (0x0038 - 0x0038)
class UGSListener_ClickBackpackBtn : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_ClickBackpackBtn");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_ClickEntireMapTriggerBtn
// 0x0000 (0x0038 - 0x0038)
class UGSListener_ClickEntireMapTriggerBtn : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_ClickEntireMapTriggerBtn");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_ClickRolewearBtn
// 0x0000 (0x0038 - 0x0038)
class UGSListener_ClickRolewearBtn : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_ClickRolewearBtn");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_ClickShowTagVehileSeatList
// 0x0000 (0x0038 - 0x0038)
class UGSListener_ClickShowTagVehileSeatList : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_ClickShowTagVehileSeatList");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_ClickTurnplateQuickMsgBtn
// 0x0000 (0x0038 - 0x0038)
class UGSListener_ClickTurnplateQuickMsgBtn : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_ClickTurnplateQuickMsgBtn");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_FireBtnHitted
// 0x0000 (0x0038 - 0x0038)
class UGSListener_FireBtnHitted : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_FireBtnHitted");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_GunReload
// 0x0000 (0x0038 - 0x0038)
class UGSListener_GunReload : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_GunReload");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_IsInControllerState
// 0x0000 (0x0038 - 0x0038)
class UGSListener_IsInControllerState : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_IsInControllerState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_JoystickActive
// 0x0010 (0x0048 - 0x0038)
class UGSListener_JoystickActive : public USTNewbieGuideSuccessListenerBase
{
public:
	float                                              XValueThreshold;                                          // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               CheckY;                                                   // 0x003C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	float                                              YValueThreshold;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_JoystickActive");
		return pStaticClass;
	}


	void ReceiveJoystickInput(const struct FVector2D& JSInput, const struct FVector2D& Size);
};


// Class ShadowTrackerExtra.GSListener_PickUpExpand
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PickUpExpand : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PickUpExpand");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_PlayerClickDriveBtn
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PlayerClickDriveBtn : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PlayerClickDriveBtn");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_PlayerEnterSafeZone
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PlayerEnterSafeZone : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PlayerEnterSafeZone");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_PlayerExpandDeadBox
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PlayerExpandDeadBox : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PlayerExpandDeadBox");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_PlayerLeaveKillZone
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PlayerLeaveKillZone : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PlayerLeaveKillZone");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.GSListener_PlayerUseRecoverItem
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PlayerUseRecoverItem : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PlayerUseRecoverItem");
		return pStaticClass;
	}


	void OnPlayerUseRecoverItem();
};


// Class ShadowTrackerExtra.GSListener_ShakeCamera
// 0x0000 (0x0038 - 0x0038)
class UGSListener_ShakeCamera : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_ShakeCamera");
		return pStaticClass;
	}


	void ReceiveCameraShake();
};


// Class ShadowTrackerExtra.GSListener_SwitchToMainWeapon
// 0x0000 (0x0038 - 0x0038)
class UGSListener_SwitchToMainWeapon : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GSListener_SwitchToMainWeapon");
		return pStaticClass;
	}


	void OnCurUsingWeaponChange(TEnumAsByte<ESurviveWeaponPropSlot> targetSlot);
};


// Class ShadowTrackerExtra.GuideComponent
// 0x0028 (0x0138 - 0x0110)
class UGuideComponent : public UActorComponent
{
public:
	TArray<struct FGuideInfo>                          WidgetList;                                               // 0x0110(0x0010) (BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UWidget>                      MaskWidget;                                               // 0x0120(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0128(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.GuideComponent");
		return pStaticClass;
	}


	void SetMaskWidgetOnTop(bool bTop);
	void CreateGuideUI();
};


// Class ShadowTrackerExtra.HealthControlComponent
// 0x0050 (0x0160 - 0x0110)
class UHealthControlComponent : public UActorComponent
{
public:
	float                                              RecoverDelayWhenLeaveFightState;                          // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SeriousWoundThreshold;                                    // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraPlayerController*                    OwnerPlayerController;                                    // 0x0118(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       HealthRecoverBuffName;                                    // 0x0120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       SeriousWoundApperanceBuffName;                            // 0x0128(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       PlayerTakeDamageBuffName;                                 // 0x0130(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               LowHealthWarningSound;                                    // 0x0138(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<EPawnState>                                 FightState;                                               // 0x0140(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0150(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.HealthControlComponent");
		return pStaticClass;
	}


	void HandlePlayerTakeDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void HandlePlayerStateChanged(EPawnState NewState);
	class ASTExtraBaseCharacter* GetOwnerPlayerPawn();
	class ASTExtraPlayerController* GetOwnerPlayerController();
};


// Class ShadowTrackerExtra.MonsterTreasureBox
// 0x0408 (0x08A0 - 0x0498)
class AMonsterTreasureBox : public AUAEHouseActor
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0498(0x0060) MISSED OFFSET
	TArray<EDamageableGameObjectType>                  DamageableGameObjectTypeList;                             // 0x04F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FString                                     TreasureBoxName;                                          // 0x0508(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TotalHP;                                                  // 0x0518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              BrokenHPPropotion;                                        // 0x051C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TotalTime;                                                // 0x0520(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                BoxId;                                                    // 0x0524(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     GroupLoc;                                                 // 0x0528(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DestroyTime;                                              // 0x0534(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              OperationalDistance;                                      // 0x0538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              VisibleHUDlDistance;                                      // 0x053C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                             StandbyEffect;                                            // 0x0540(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0548(0x0008) MISSED OFFSET
	struct FTransform                                  StandbyEffectTrans;                                       // 0x0550(0x0030) (Edit, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UParticleSystem*                             OpenningEffect;                                           // 0x0580(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0588(0x0008) MISSED OFFSET
	struct FTransform                                  OpenningEffectTrans;                                      // 0x0590(0x0030) (Edit, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UParticleSystem*                             OpennedEffect;                                            // 0x05C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x8];                                       // 0x05C8(0x0008) MISSED OFFSET
	struct FTransform                                  OpennedEffectTrans;                                       // 0x05D0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UParticleSystem*                             BrokenEffect1;                                            // 0x0600(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0608(0x0008) MISSED OFFSET
	struct FTransform                                  BrokenEffect1Trans;                                       // 0x0610(0x0030) (Edit, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UParticleSystem*                             BrokenEffect2;                                            // 0x0640(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0648(0x0008) MISSED OFFSET
	struct FTransform                                  BrokenEffect2Trans;                                       // 0x0650(0x0030) (Edit, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UMaterialInterface*                          BlackMat;                                                 // 0x0680(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProduceDropItemComponent*                   ProduceComponent;                                         // 0x0688(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                             DefaultRoot;                                              // 0x0690(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0698(0x0010) UNKNOWN PROPERTY: ArrayProperty ShadowTrackerExtra.MonsterTreasureBox.InstigatorList
	unsigned char                                      UnknownData07[0x10];                                      // 0x06A8(0x0010) UNKNOWN PROPERTY: ArrayProperty ShadowTrackerExtra.MonsterTreasureBox.DamageCauserList
	EPickUpBoxType                                     PickUpBoxType;                                            // 0x06B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIconInstanceID;                                          // 0x06B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData08[0x2];                                       // 0x06BA(0x0002) MISSED OFFSET
	int                                                IconID;                                                   // 0x06BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData09[0x68];                                      // 0x06C0(0x0068) MISSED OFFSET
	bool                                               bHideLightColumn;                                         // 0x0728(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData10[0x1];                                       // 0x0729(0x0001) MISSED OFFSET
	bool                                               bAutoActiveBox;                                           // 0x072A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x1];                                       // 0x072B(0x0001) MISSED OFFSET
	int                                                ClientAutoActiveBoxCD;                                    // 0x072C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AutoActiveBoxCD;                                          // 0x0730(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                HideLightColumn;                                          // 0x0734(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GoUpAnimationWait;                                        // 0x0738(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GoUpAnimationSpeed;                                       // 0x073C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GoUpAnimationHight;                                       // 0x0740(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0744(0x0004) MISSED OFFSET
	float                                              GoUpAnimationYawSpeed;                                    // 0x0748(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GoUpAnimationYawTotal;                                    // 0x074C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     BoxCoverLoc;                                              // 0x0750(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    BoxCoverRot;                                              // 0x075C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               GoUpAnimationAkAudioStart;                                // 0x0768(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0769(0x0007) MISSED OFFSET
	class USkeletalMeshComponent*                      NeedAnimationBoxMesh;                                     // 0x0770(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                               NeedAnimationBoxCover;                                    // 0x0778(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x18];                                      // 0x0780(0x0018) MISSED OFFSET
	float                                              StartedTime;                                              // 0x0798(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMonsterTreasureBoxState                           CurState;                                                 // 0x079C(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData15[0x7];                                       // 0x079D(0x0007) MISSED OFFSET
	int                                                StartedTeamId;                                            // 0x07A4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CountdownTime;                                            // 0x07A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              StartDestroytime;                                         // 0x07AC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MonsterBoxId;                                             // 0x07B0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MonsterBoxTempleteId;                                     // 0x07B4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FString, struct FString>               DataStrs;                                                 // 0x07B8(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData16[0x8];                                       // 0x0808(0x0008) MISSED OFFSET
	class UParticleSystemComponent*                    StandbyEffectComp;                                        // 0x0810(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    OpenningEffectComp;                                       // 0x0818(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    OpenedEffectComp;                                         // 0x0820(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    BrokenEffect1Comp;                                        // 0x0828(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    BrokenEffect2Comp;                                        // 0x0830(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*                    DynamicMat;                                               // 0x0838(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData17[0x38];                                      // 0x0840(0x0038) MISSED OFFSET
	class UObject*                                     TriggerActionHost;                                        // 0x0878(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData18[0x20];                                      // 0x0880(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MonsterTreasureBox");
		return pStaticClass;
	}


	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);
	void ShowMonsterTreasureBox();
	void SetClientClientAutoActiveBoxCD(int CD);
	void OnTreasureBoxPicked__DelegateSignature();
	void OnSomeonePickItem(uint32_t InPC);
	void OnRep_HideLightColumn();
	void OnRep_CurState();
	void OnBoxEmpty();
	bool IsShowIcon();
	int GetMonsterBoxId();
	TArray<EDamageableGameObjectType> GetDamageableGameObjectType();
	EMonsterTreasureBoxState GetCurState();
	int GetClientClientAutoActiveBoxCD();
	void DeActiveMonsterTreasureBox();
	bool CanBeDamaged();
	void BPOnStopMonsterTreasureBox();
	void BPOnStartMonsterTreasureBox();
	void BPOnHideLightColumn();
	void BPOnCountdownEnd();
	void BPOnBreakMonsterTreasureBox();
	void BPOnAnimationStop();
	void BPOnAnimationAkAudioStop();
	void BPOnAnimationAkAudioStart();
	struct FString BPGetTreasureBoxName();
};


// Class ShadowTrackerExtra.HeavyWeaponBox
// 0x0000 (0x08A0 - 0x08A0)
class AHeavyWeaponBox : public AMonsterTreasureBox
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.HeavyWeaponBox");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.IceWorldSceneActor
// 0x0020 (0x0468 - 0x0448)
class AIceWorldSceneActor : public AActivityInteractiveActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0448(0x0008) MISSED OFFSET
	int                                                Progress;                                                 // 0x0450(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	class UTimelineComponent*                          TimelineComp;                                             // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsMoveStart;                                              // 0x0460(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0461(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.IceWorldSceneActor");
		return pStaticClass;
	}


	void OnRep_Progress();
};


// Class ShadowTrackerExtra.IdeaDecalActor
// 0x00A0 (0x0430 - 0x0390)
class AIdeaDecalActor : public AActor
{
public:
	class USceneComponent*                             DecalRootComp;                                            // 0x0390(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                DecalId;                                                  // 0x0398(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	struct FIdeaDecalInfo                              DecalInfo;                                                // 0x03A0(0x0070) (Net, RepNotify, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ASTExtraPlayerState*                         OwnerPS;                                                  // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASTExtraVehicleBase>          Vehicle;                                                  // 0x0418(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0420(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.IdeaDecalActor");
		return pStaticClass;
	}


	void OnRep_DecalInfo();
};


// Class ShadowTrackerExtra.IdeaDecalRenderComponent
// 0x0060 (0x07D0 - 0x0770)
class UIdeaDecalRenderComponent : public URuntimeMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0770(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.IdeaDecalRenderComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.IdeaDecalManager
// 0x0370 (0x0700 - 0x0390)
class AIdeaDecalManager : public AActor
{
public:
	TMap<struct FDecalBlock, class UMaterialInstanceDynamic*> DecalMaterialsLookupTable;                                // 0x0390(0x0050) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UClass*>                              IgnoreActorClass;                                         // 0x03E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x38];                                      // 0x03F0(0x0038) MISSED OFFSET
	TArray<class UIdeaDecalRenderComponent*>           DecalComponents;                                          // 0x0428(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x2B8];                                     // 0x0438(0x02B8) MISSED OFFSET
	class URuntimeMeshComponent*                       Decal;                                                    // 0x06F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x8];                                       // 0x06F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.IdeaDecalManager");
		return pStaticClass;
	}


	void RemoveDecalOnTimer(TArray<uint32_t> DecalIdArray);
};


// Class ShadowTrackerExtra.IdeaFence
// 0x00A0 (0x0430 - 0x0390)
class AIdeaFence : public AFastMergeableActor
{
public:
	class USplineComponent*                            SplineComponent;                                          // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EIdeaFenceSelector                                 BeginSelector;                                            // 0x0398(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0399(0x0007) MISSED OFFSET
	class UStaticMesh*                                 BeginMesh1;                                               // 0x03A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                                 BeginMesh2;                                               // 0x03A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                                 BeginMesh3;                                               // 0x03B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                                 BeginMesh4;                                               // 0x03B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EIdeaFenceSelector                                 EndSelector;                                              // 0x03C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03C1(0x0007) MISSED OFFSET
	class UStaticMesh*                                 EndMesh1;                                                 // 0x03C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                                 EndMesh2;                                                 // 0x03D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                                 EndMesh3;                                                 // 0x03D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                                 EndMesh4;                                                 // 0x03E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseRandomForMiddle;                                      // 0x03E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseMiddleSegmentsInOrder;                                // 0x03E9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03EA(0x0002) MISSED OFFSET
	float                                              UnitLengthForMiddle;                                      // 0x03EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              UnitSpacingForMiddle;                                     // 0x03F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              PivotOffsetForMiddle;                                     // 0x03F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRandomStream                               RandomStreamForMiddle;                                    // 0x03F8(0x0008) (Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UStaticMesh*                                 MiddleMesh1;                                              // 0x0400(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                                 MiddleMesh2;                                              // 0x0408(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                                 MiddleMesh3;                                              // 0x0410(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                                 MiddleMesh4;                                              // 0x0418(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCollisionProfileName                       FenceCollisionProfile;                                    // 0x0420(0x0008) (Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0428(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.IdeaFence");
		return pStaticClass;
	}


	class USplineComponent* GetSplineComponent();
};


// Class ShadowTrackerExtra.IdeaStaticFence
// 0x0000 (0x0430 - 0x0430)
class AIdeaStaticFence : public AIdeaFence
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.IdeaStaticFence");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.IdleWeaponState
// 0x0010 (0x01C0 - 0x01B0)
class UIdleWeaponState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.IdleWeaponState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.InactiveWeaponState
// 0x0000 (0x01B0 - 0x01B0)
class UInactiveWeaponState : public UWeaponStateBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.InactiveWeaponState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.InfectedAreaActor
// 0x0020 (0x03B0 - 0x0390)
class AInfectedAreaActor : public AActor
{
public:
	struct FInfectedArea                               AreaData;                                                 // 0x0390(0x001C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.InfectedAreaActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.InfectedAreaComponent
// 0x0038 (0x0148 - 0x0110)
class UInfectedAreaComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    InfectedAreaChanged;                                      // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FHardLevelRange                             EasyLevelRange;                                           // 0x0120(0x0008) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FHardLevelRange                             NormalLevelRange;                                         // 0x0128(0x0008) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FHardLevelRange                             HardLevelRange;                                           // 0x0130(0x0008) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FInfectedArea>                       InfectedAreaArray;                                        // 0x0138(0x0010) (Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.InfectedAreaComponent");
		return pStaticClass;
	}


	void ShowWarning(int ID);
	void SetAreaLevels(int LevelId);
	void RPC_Client_ShowWarning();
	void OnRep_InfectedAreaDatas();
	bool IsInArea(const struct FVector& Location, struct FInfectedArea* Area);
	void GenerateAreaLevels();
	void AddInfectedAreaData(const struct FInfectedArea& AreaData);
	void ActiveInfectedArea(int AreaID);
};


// Class ShadowTrackerExtra.InfectedAreaDatas
// 0x0010 (0x03A0 - 0x0390)
class AInfectedAreaDatas : public AActor
{
public:
	TArray<struct FInfectedArea>                       InfectedAreaArray;                                        // 0x0390(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.InfectedAreaDatas");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.IngameArmedVehicleUI
// 0x0070 (0x0418 - 0x03A8)
class UIngameArmedVehicleUI : public UUAEUserWidget
{
public:
	class AVehicleShootWeapon*                         Weapon;                                                   // 0x03A8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUsed;                                                    // 0x03B0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShowControlButton;                                       // 0x03B1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShowCompass;                                             // 0x03B2(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x5];                                       // 0x03B3(0x0005) MISSED OFFSET
	class UMaterialInstanceDynamic*                    AngleMatInstance;                                         // 0x03B8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                AngleMatParamIndex;                                       // 0x03C0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	struct FName                                       AngleMatParameterName;                                    // 0x03C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                                  AngleText;                                                // 0x03D0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bGotAngleMatParamIndex;                                   // 0x03D8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03D9(0x0003) MISSED OFFSET
	float                                              ScalePercent;                                             // 0x03DC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Angle;                                                    // 0x03E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CompassMinAngle;                                          // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CompassMaxAngle;                                          // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CompassMatMinPercent;                                     // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CompassMatMaxPercent;                                     // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnableShowInterferenceLineByScreenAppearance;            // 0x03F4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bShowInterference;                                        // 0x03F5(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x2];                                       // 0x03F6(0x0002) MISSED OFFSET
	struct FString                                     InterferenceLineAppearanceName;                           // 0x03F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     CompassStrFormat;                                         // 0x0408(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.IngameArmedVehicleUI");
		return pStaticClass;
	}


	void UpdateCompassAngleAndMatScalePercent(float InDeltaTime);
	void ShowInterferenceLineByScreenAppearance(bool bShow);
	void InitCompassAngleMat(class UMaterialInstanceDynamic* InCompassMat);
};


// Class ShadowTrackerExtra.IngameEnemyPanelWidget
// 0x0000 (0x0208 - 0x0208)
class UIngameEnemyPanelWidget : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.IngameEnemyPanelWidget");
		return pStaticClass;
	}


	void UpdateEnemyLocations();
	void setEnemyHitConfig(const struct FHitEnemyConfig& Config);
	static void ResetEnemyHitData();
	static TArray<struct FHitEnemyDataLocal> GetEnemyHitData();
	void AlertEnemyNearDeath();
	void AlertEnemyHitted();
	static void AddEnemyHitData(const struct FHitEnemyData& HitData, float HitTime, const struct FString& FromPlayerName);
};


// Class ShadowTrackerExtra.InGameReconnectingInterface
// 0x0000 (0x0028 - 0x0028)
class UInGameReconnectingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.InGameReconnectingInterface");
		return pStaticClass;
	}


	void RetriveDataAfterReconnecting();
	void RecoverStatusAfterReconnecting();
};


// Class ShadowTrackerExtra.InterpToMovementComponent2
// 0x0038 (0x0220 - 0x01E8)
class UInterpToMovementComponent2 : public UInterpToMovementComponent
{
public:
	struct FScriptMulticastDelegate                    OnInterp2ToStopDelegate;                                  // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnMoveDeltaComputedDelegate;                              // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      bReverseOnImpact : 1;                                     // 0x0208(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0209(0x0003) MISSED OFFSET
	struct FInterpToMovementComponent2ReplicatedData   ReplicatedData;                                           // 0x020C(0x0010) (Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x021C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.InterpToMovementComponent2");
		return pStaticClass;
	}


	void Restart(float InitialDirection, float InTime, bool bInWaiting, bool bInStopped);
	void OnRep_ReplicatedData();
	void OnMoveDeltaComputedDelegate__DelegateSignature(class UInterpToMovementComponent2* Sender, float Time, const struct FVector& Delta);
	void OnInterpToMovementComponentInterpToStop(const struct FHitResult& ImpactResult, float Time);
	void OnInterp2ToStopDelegate__DelegateSignature(class UInterpToMovementComponent2* Sender, const struct FHitResult& ImpactResult, float Time);
	bool IsWaiting();
	bool IsStopped();
	float GetCurrentTime();
};


// Class ShadowTrackerExtra.InterpToMovementComponent3
// 0x0038 (0x0258 - 0x0220)
class UInterpToMovementComponent3 : public UInterpToMovementComponent2
{
public:
	TArray<struct FInterp3ControlPoint>                Interp3ControlPoints;                                     // 0x0220(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0230(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.InterpToMovementComponent3");
		return pStaticClass;
	}


	void FinaliseInterp3ControlPoints();
};


// Class ShadowTrackerExtra.ItemDropMgrComponent
// 0x0068 (0x0178 - 0x0110)
class UItemDropMgrComponent : public UActorComponent
{
public:
	bool                                               GM_CloseItemDrop;                                         // 0x0110(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	int                                                GM_SpawnItemFrame;                                        // 0x0114(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DefaultTomb;                                              // 0x0118(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     DropItemRuleTableName;                                    // 0x0120(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                GridStep;                                                 // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	TArray<struct FWaitDropData>                       WaitDropList;                                             // 0x0138(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int                                                MaxRandomWeight;                                          // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              RadiusStep;                                               // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ZBias;                                                    // 0x0150(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LookUpDistance;                                           // 0x0154(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUAEDataTable*                               DropRuleTable;                                            // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UProperty*>                           DropRuleTablePropertys;                                   // 0x0160(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int                                                CurSpawnItemFrame;                                        // 0x0170(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0174(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ItemDropMgrComponent");
		return pStaticClass;
	}


	struct FVector TraceGroundPoint(const struct FVector& StartPos, class AActor* IgnoreActor);
	int PickItemByUnionRandom(int WeightCount, TArray<struct FRandomDropData>* WeightMap);
	int PickItemByIndependentRandom(int Weight);
	void NavMeshDrop(TArray<struct FDropToGroundData> PropDatas, const struct FTransform& PawnTrans, bool bDropedByPlayer);
	void HandleActorDie(class AActor* Actor, class AActor* Killer);
	struct FString GetWrapperActorPath(const struct FItemDefineID& DefineID);
	class UClass* GetWrapperActorClass(const struct FItemDefineID& DefineID);
	void GetWeaponBulletNum(class ASTExtraBaseCharacter* Character, class ASTExtraWeapon* TWeapon, int* BulletID, int* BulletClipNum, int* BulletPackageNum, int* BulletClipMaxNum);
	void GetDropIdList(TArray<struct FMonsterSingleDropIds> DropIds, TArray<int>* DropIdList);
	void GetBulletDropIdList(TArray<struct FMonsterSingleBulletDropIds> BulletDropIds, TArray<int>* DropIdList, TArray<int>* DropParams);
	void DropToTombBox(TArray<struct FPickUpItemData> PropData, struct FWaitDropData* DropData);
	void DropToTarget(const struct FItemDefineID& DefineID, int count, class UBackpackComponent* Backpack);
	void DropToGround(const struct FDropToGroundData& PropData, const struct FTransform& WrapperTrans, bool bDropedByPlayer);
	void DropOutItems(struct FWaitDropData* DropData, TArray<struct FDropPropData>* DropItems);
	void CheckNeedDropItem();
	void CheckAddBulletDrop(class AActor* Actor, class AActor* Killer, TArray<int>* DropIdList);
	void CalcDropItemListByDropRule(int DropPlanId, TArray<struct FDropPropData>* DropItemList);
	void BulletDropStrategy(TArray<int>* BulletIdList, TArray<int>* BulletIdNum, TArray<int>* BulletDropPlanIDList, TArray<int>* BulletDropParams, TArray<int>* DropIdList, TArray<int>* BulletClipMaxNum);
	void BulletDropById(int BulletID, TArray<int>* BulletDropPlanIDList, TArray<int>* DropIdList);
	void AddToWaitDropList(const struct FWaitDropData& AddWaitDropData);
};


// Class ShadowTrackerExtra.ItemGeneratorBase
// 0x0058 (0x03E8 - 0x0390)
class AItemGeneratorBase : public AActor
{
public:
	class UCurveFloat*                                 UpdateOverlapCurve;                                       // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShowWrapperMeshDistance;                                  // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IsGenerateOverlapEventsForceUpdateTime;                   // 0x039C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     BoxOverlapCheckExtent;                                    // 0x03A0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShowCheckPropsMeshVisibleBox;                            // 0x03AC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03AD(0x0003) MISSED OFFSET
	float                                              ShowCheckPropsMeshVisibleBoxTime;                         // 0x03B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x14];                                      // 0x03B4(0x0014) MISSED OFFSET
	class ASTExtraPlayerController*                    PlayerController;                                         // 0x03C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x18];                                      // 0x03D0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ItemGeneratorBase");
		return pStaticClass;
	}


	void ForceUpdate();
};


// Class ShadowTrackerExtra.ItemsBoxConfigDataAsset
// 0x0048 (0x0078 - 0x0030)
class UItemsBoxConfigDataAsset : public UDataAsset
{
public:
	class UDataTable*                                  DataBase;                                                 // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     TablePath;                                                // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemsBoxConfigDataAssetConfigGroup> AirDropBoxGroupConfigs;                                   // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FItemsBoxConfigDataAssetConfigGroup> SuperAirDropBoxGroupConfigs;                              // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FItemsBoxConfigDataAssetConfigGroup> TreasureBoxGroupConfigs;                                  // 0x0068(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ItemsBoxConfigDataAsset");
		return pStaticClass;
	}


	TArray<struct FAirDropBoxGenerateWrapperItemData> GetTreasureBoxGenerateDataList(const struct FString& GroupName);
	TArray<struct FAirDropBoxGenerateWrapperItemData> GetTargetItemsDataFromTableByCategoryFilter(const struct FString& CategoryFilter);
	TArray<struct FAirDropBoxGenerateWrapperItemData> GetSuperAirDropBoxGenerateDataList();
	TArray<struct FAirDropBoxGenerateWrapperItemData> GetAirDropBoxGenerateDataList();
};


// Class ShadowTrackerExtra.KillerTracker
// 0x0068 (0x03F8 - 0x0390)
class AKillerTracker : public AActor
{
public:
	class AActor*                                      TargetKiller;                                             // 0x0390(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                      ReturnActor;                                              // 0x0398(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x20];                                      // 0x03A0(0x0020) MISSED OFFSET
	class USpringArmComponent*                         CameraSpringArm;                                          // 0x03C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                            ObservingCamera;                                          // 0x03C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScriptMulticastDelegate                    OnTrackingEnd;                                            // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	float                                              MinMovingSpeed;                                           // 0x03E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxMovingTime;                                            // 0x03E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ObservingTime;                                            // 0x03E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TrackingDelay;                                            // 0x03EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExpectedMinObservingDistance;                             // 0x03F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraAdjustSpeed;                                        // 0x03F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.KillerTracker");
		return pStaticClass;
	}


	void ForceEnd();
};


// Class ShadowTrackerExtra.LagCompensationComponentBase
// 0x01D8 (0x0300 - 0x0128)
class ULagCompensationComponentBase : public UEntityAntiCheatComponent
{
public:
	TArray<struct FServerCheckBox>                     PoseCheckBoxesCfg;                                        // 0x0128(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FServerCheckBox>                     PoseCheckBoxesHighPrecision;                              // 0x0138(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              fRewindMaxSeconds;                                        // 0x0148(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_UseNewProjectileBulletVertify;                         // 0x014C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugShoot;                                              // 0x014D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawHitBox;                                              // 0x014E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyShootPoint;                                        // 0x014F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyShootPointPassWall;                                // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerityBlock;                                             // 0x0151(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableReverseVerityBlock;                                // 0x0152(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyInParachuteShootPoint;                             // 0x0153(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateShootPointDistanceSqured;                         // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateShootPointScaleOnFast;                            // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyHitType;                                           // 0x015C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	float                                              TolerateShootPointDistanceVehicleSqured;                  // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateSimulatedDelayTime;                               // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyBulletFlyTime;                                     // 0x0168(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyShooterMuzzle;                                     // 0x0169(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyMuzzle;                                            // 0x016A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyShootRange;                                        // 0x016B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyShootDir;                                          // 0x016C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyBulletImpactOffset;                                // 0x016D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyCharacterImpactOffset;                             // 0x016E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyHistoryLoc;                                        // 0x016F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyShooterWeaponRange;                                // 0x0170(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0171(0x0003) MISSED OFFSET
	float                                              TolerateFlyTime;                                          // 0x0174(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateFlyDis;                                           // 0x0178(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOpenStillLagCompensation;                                // 0x017C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x017D(0x0003) MISSED OFFSET
	float                                              fBoundBoxScaleMillisecondMin;                             // 0x0180(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              fBoundBoxScaleMillisecondMax;                             // 0x0184(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyGunPos;                                            // 0x0188(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0189(0x0003) MISSED OFFSET
	float                                              BulletFlyTimeVerifyMinTime;                               // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateBulletFlyTimePercentage;                          // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateMuzzleDistanceSqured;                             // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateMuzzleDistanceVehicleSqured;                      // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateShootHitAngle;                                    // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateBulletImpactOffsetDistSqured;                     // 0x01A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateBulletDirOffsetSquared;                           // 0x01A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           TolerateCharacterImpactOffsetDistSqured;                  // 0x01A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateShootRange;                                       // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TEnumAsByte<EObjectTypeQuery>>              traceObjectTypes;                                         // 0x01B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                              ShooterWeaponRange;                                       // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShooterWeaponHeight;                                      // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAllowShortReverseDir;                                    // 0x01C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x01C9(0x0003) MISSED OFFSET
	float                                              ShortDirReverseDistance;                                  // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateShootMuzzleHeight;                                // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseSimpleVerifyHitVehicle;                               // 0x01D4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseSimpleVerifyHitParachute;                             // 0x01D5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bTimeCompensationDisable;                                 // 0x01D6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x1];                                       // 0x01D7(0x0001) MISSED OFFSET
	float                                              TolerateLocusSingle;                                      // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateLocusDist;                                        // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateLocusSegment;                                     // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateBoxExpand;                                        // 0x01E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateLocusZOffsetUp;                                   // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateLocusZOffsetDown;                                 // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LocusSearchBackTime;                                      // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LocusZHistoryUpInVehicle;                                 // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxGunPosZHeight;                                         // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxGunPosLength;                                          // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     GiftHeadBoundingBoxUpperOffset;                           // 0x0200(0x000C) (Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     GiftHeadBoundingBoxLowerOffset;                           // 0x020C(0x000C) (Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyBonePointInfo;                                     // 0x0218(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVerifyBoneHitType;                                       // 0x0219(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x2];                                       // 0x021A(0x0002) MISSED OFFSET
	float                                              BonePointTorelate;                                        // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     VerifiedBoneScale;                                        // 0x0220(0x000C) (Edit, BlueprintVisible, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           TolerateCharacterImpactOffsetDistSquredOnVehicle;         // 0x022C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_VerifyProjectileBulletShootPos;                        // 0x0230(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_VerifyProjectileBulletShootPosByNetDelay;              // 0x0231(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData07[0x6];                                       // 0x0232(0x0006) MISSED OFFSET
	class ACharacter*                                  CharacterOwner;                                           // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               GM_VerifyShootPointByNetDelay;                            // 0x0240(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               GM_VerifyShooterAndMuzzleDis;                             // 0x0241(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData08[0x2];                                       // 0x0242(0x0002) MISSED OFFSET
	uint32_t                                           TolerateMuzzleAndCharacterDisSquare;                      // 0x0244(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32_t                                           TolerateMuzzleAndVehicleDisSquare;                        // 0x0248(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               GM_VerifyServerShooterPosDis;                             // 0x024C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               GM_VerifyBlock;                                           // 0x024D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x2];                                       // 0x024E(0x0002) MISSED OFFSET
	int                                                MaxBlockLineTraceTimes;                                   // 0x0250(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VehiclePosCheckInterval;                                  // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxVehicleSpeed;                                          // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TolerateVehicleDis;                                       // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxTolerateVehicleDis;                                    // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CharacterPosCheckInterval;                                // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxCharacterSpeed;                                        // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TolerateCharacterDis;                                     // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxTolerateCharacterDis;                                  // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SimVehiclePosCheckInterval;                               // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SimTolerateVehicleDis;                                    // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SimMaxTolerateVehicleDis;                                 // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SimCharacterPosCheckInterval;                             // 0x0280(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SimTolerateCharacterDis;                                  // 0x0284(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SimMaxTolerateCharacterDis;                               // 0x0288(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SimMaxVictmPosChangeSpeed;                                // 0x028C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TolerateNetDelay;                                         // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TolerateMaxVictmPosDis;                                   // 0x0294(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               GM_VerifyClientMuzzle;                                    // 0x0298(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0299(0x0003) MISSED OFFSET
	float                                              TolerateDownShootMuzzleAndCharacterBottomHeight;          // 0x029C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TolerateDownShootMaxMuzzleAndCharacterHeight;             // 0x02A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TolerateMaxWeaponAimAndOwnerHeadHeight;                   // 0x02A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TolerateMinWeaponAimAndOwnerHeadHeight;                   // 0x02A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TolerateMinMuzzleFloorHeight;                             // 0x02AC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TolerateWeaponAimAndOwnerHeadDis;                         // 0x02B0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TolerateWeaponAndOwnerHeadDis;                            // 0x02B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              VerifyDownShootCD;                                        // 0x02B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData11[0x8];                                       // 0x02BC(0x0008) MISSED OFFSET
	bool                                               GM_VerifyActorPosByNetDelay;                              // 0x02C4(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x3];                                       // 0x02C5(0x0003) MISSED OFFSET
	float                                              GrayWeaponAndShootAngle;                                  // 0x02C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           GrayCharacterImpactMaxOffset;                             // 0x02CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GrayImpactPointChangeMinSqured;                           // 0x02D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GrayBulletImpactOffsetMaxDist;                            // 0x02D4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponAntiData                             CacheWeaponAntiData;                                      // 0x02D8(0x0018) (NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                     LastImpactPoint;                                          // 0x02F0(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData13[0x4];                                       // 0x02FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LagCompensationComponentBase");
		return pStaticClass;
	}


	TEnumAsByte<EShootVertifyRes> VertifyMuzzleHeight(const struct FBulletHitInfoUploadData& ShootData, class ASTExtraShootWeapon* ShootWeapon);
	TEnumAsByte<EShootVertifyRes> VertifyImpactActorPosWithNoLagCompensation(class ASTExtraShootWeapon* ShootWeapon, class APawn* VictmPawn, const struct FVector& InImpactActorPos);
	TEnumAsByte<EShootVertifyRes> VertifyClientAntiCheatResult(uint16_t ClientAntiCheatResult, class ASTExtraShootWeapon* ShootWeapon);
	TEnumAsByte<EShootVertifyRes> VerityOwnerAndGunBlock(const struct FBulletHitInfoUploadData& ShootData, class ASTExtraShootWeapon* ShootWeapon);
	TEnumAsByte<EShootVertifyRes> VerifyWeaponOwnerPosByNetDelay(const struct FBulletHitInfoUploadData& ShootData, class ASTExtraShootWeapon* Weapon);
	TEnumAsByte<EShootVertifyRes> VerifyWeaponOwnerPos(const struct FBulletHitInfoUploadData& ShootData, class ASTExtraShootWeapon* Weapon);
	TEnumAsByte<EShootVertifyRes> VerifyWeaponOwnerAndMuzzleDis(const struct FBulletHitInfoUploadData& ShootData, class ASTExtraShootWeapon* Weapon);
	TEnumAsByte<EShootVertifyRes> VerifyServerVictmPosByNetDelay(const struct FBulletHitInfoUploadData& ShootData, class ASTExtraShootWeapon* Weapon, class ASTExtraCharacter* Victim);
	float SimulatedCharacterServerTimeHighPrecision();
	float SimulatedCharacterServerTime();
	void RPC_DrawHeadBox(const struct FCharacterHistoryData& DataToDraw);
	void GrayVerify(class ASTExtraShootWeapon* Weapon, const struct FBulletHitInfoUploadData& ShootData);
	float GetTolerateSimuPosOffsetByNetDelay(class APawn* TargetPawn, float NetDelay);
	float GetTolerateServerVictmPosTolerateByNetDelay(class APawn* AttackerPawn, class APawn* VictmPawn);
	float GetTolerateServerVictmPosByNearMaxNetDelay(class APawn* AttackerPawn, class APawn* VictmPawn);
	float GetTolerateServerShooterPosDisByNetDelay(class APawn* AttackerPawn);
	float GetTolerateAutonomousPosOffsetByNetDelay(class APawn* TargetPawn, float NetDelay);
	float GetNearMaxNetDelay(class APawn* TargetPawn, float NearTime);
	float GetNearAvgNetDelay(class APawn* TargetPawn, float NearNum);
};


// Class ShadowTrackerExtra.LagCompensationComponent
// 0x12F0 (0x15F0 - 0x0300)
class ULagCompensationComponent : public ULagCompensationComponentBase
{
public:
	unsigned char                                      UnknownData00[0x64];                                      // 0x0300(0x0064) MISSED OFFSET
	struct FDistanceContinueHitCheck                   DistanceContinueHitCheck;                                 // 0x0364(0x002C) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	int                                                KeepStillMinTime;                                         // 0x0390(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StillMaxSpeed;                                            // 0x0394(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     StandStillBoundBoxExtent;                                 // 0x0398(0x000C) (Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     StandStillHeadBoundBoxExtent;                             // 0x03A4(0x000C) (Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     StandStillHeadBoxOffset;                                  // 0x03B0(0x000C) (Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     CrouchStillBoundBoxExtent;                                // 0x03BC(0x000C) (Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     CrouchStillHeadBoundBoxExtent;                            // 0x03C8(0x000C) (Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     CrouchStillHeadBoxOffset;                                 // 0x03D4(0x000C) (Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1210];                                    // 0x03E0(0x1210) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LagCompensationComponent");
		return pStaticClass;
	}


	TEnumAsByte<EShootVertifyRes> VerifyWeaponOwnerPosByNetDelay(const struct FBulletHitInfoUploadData& ShootData, class ASTExtraShootWeapon* Weapon);
	TEnumAsByte<EShootVertifyRes> VerifyServerVictmPosByNetDelay(const struct FBulletHitInfoUploadData& ShootData, class ASTExtraShootWeapon* Weapon, class ASTExtraCharacter* Victim);
	float SimulatedCharacterServerTime();
};


// Class ShadowTrackerExtra.LandScapeLODByHeight
// 0x0030 (0x0140 - 0x0110)
class ULandScapeLODByHeight : public UActorComponent
{
public:
	TArray<struct FHeightLOD>                          heightLODMapping;                                         // 0x0110(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                CheckInternal;                                            // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurrentGroundHeight;                                      // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	class APlayerController*                           Player;                                                   // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0138(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LandScapeLODByHeight");
		return pStaticClass;
	}


	void Stop();
	void Start();
	void MappingLODByHeight();
};


// Class ShadowTrackerExtra.LensFlareActor
// 0x00E8 (0x0478 - 0x0390)
class ALensFlareActor : public ACameraObserverActor
{
public:
	bool                                               EnableSun;                                                // 0x0390(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0391(0x0003) MISSED OFFSET
	float                                              SunSize;                                                  // 0x0394(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                SunColor;                                                 // 0x0398(0x0010) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WorldRadius;                                              // 0x03A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     WorldOrigin;                                              // 0x03AC(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   SunUV0;                                                   // 0x03B8(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   SunUVSize;                                                // 0x03C0(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          SunMaterial;                                              // 0x03C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           SunTranslucentSortPriority;                               // 0x03D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EDetailMode>                           SunDetailMode;                                            // 0x03D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableHalo;                                               // 0x03D5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03D6(0x0002) MISSED OFFSET
	float                                              HaloSize;                                                 // 0x03D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                HaloColor;                                                // 0x03DC(0x0010) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   HaloUV0;                                                  // 0x03EC(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   HaloUVSize;                                               // 0x03F4(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class UMaterialInterface*                          HaloMaterial;                                             // 0x0400(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           HaloTranslucentSortPriority;                              // 0x0408(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HaloFadeSpeed;                                            // 0x040C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EDetailMode>                           HaloDetailMode;                                           // 0x0410(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableLensFlare;                                          // 0x0411(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0412(0x0006) MISSED OFFSET
	TArray<struct FLensFlareElement>                   LensFlareElements;                                        // 0x0418(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          LensFlareMaterial;                                        // 0x0428(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           LensFlareTranslucentSortPriority;                         // 0x0430(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LensFlareFadeSpeed;                                       // 0x0434(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EDetailMode>                           LensFlareDetailMode;                                      // 0x0438(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0439(0x0007) MISSED OFFSET
	class URuntimeMeshComponent*                       Sun;                                                      // 0x0440(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URuntimeMeshComponent*                       Halo;                                                     // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URuntimeMeshComponent*                       LensFlare;                                                // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData05[0x20];                                      // 0x0458(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LensFlareActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.LevelDirectorComponent
// 0x0068 (0x0178 - 0x0110)
class ULevelDirectorComponent : public UActorComponent
{
public:
	bool                                               DefaultIsEnable;                                          // 0x0110(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	TArray<struct FZombieWaveUIState>                  ZombieWaveUIStateArray;                                   // 0x0118(0x0010) (Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	float                                              ZombieWaveUIPastTime;                                     // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReallyClientWaveUIBeginTime;                              // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    WaveUIStateBeginDelegate;                                 // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               IsStartShowWaveUI;                                        // 0x0140(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	float                                              ReconnectWaveUITolerateTime;                              // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CountDownReconnectInterTime;                              // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CountDownEndServerTime;                                   // 0x014C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TotalCountDownTime;                                       // 0x0150(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RestCountDownTime;                                        // 0x0154(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CountDownStringId;                                        // 0x0158(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CountDownTypeId;                                          // 0x015C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    CommonnCountDownMessage;                                  // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0170(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LevelDirectorComponent");
		return pStaticClass;
	}


	void UpdateZombieWaveUIState(float DeltaTime);
	void StartShowZombieWaveStateUI(TArray<struct FZombieWaveUIState> ZombieWaveUIState);
	void ShowZombieWaveUIState(TArray<struct FZombieWaveUIState> ZombieWaveUIState, float PastTime);
	void ShowGameWarningTipsWithIdAndString(int ID, const struct FString& Param1, const struct FString& Param2);
	void ShowGameTipsWithIdAndString(int ID, const struct FString& Param1, const struct FString& Param2);
	void ShowGameTips(int ID);
	bool ShouldReconnectRepZombieWaveUIState();
	void ServerBeginCountDownTime(float TotalTime, float RestTime, int StringId, int TypeID);
	void OnRep_ZombieWaveUIStateArrayChange();
	void NetPostVoiceAtLocation(const struct FString& EventName, const struct FVector& Location);
	void ClientShowZombieWaveUIState(TArray<struct FZombieWaveUIState> ZombieWaveUIState, float PastTime);
	void ClientBroadcastVoice(const struct FString& EventName, const struct FVector& Location);
	void BroadCountDownTime(float EndServerTime, float TotalTime, float RestTime, int StringId, int TypeID);
};


// Class ShadowTrackerExtra.LobbyAvatarComponent
// 0x03C0 (0x0680 - 0x02C0)
class ULobbyAvatarComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02C0(0x0010) MISSED OFFSET
	int                                                gender;                                                   // 0x02D0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0xF4];                                      // 0x02D4(0x00F4) MISSED OFFSET
	class UMeshComponent*                              RootMesh;                                                 // 0x03C8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EAvatarSlotType, class UBackpackAvatarItemColor*> RunningColorHandle;                                       // 0x03D0(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<EAvatarSlotType, class UBackpackAvatarItemPattern*> RunningPatternHandle;                                     // 0x0420(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x158];                                     // 0x0470(0x0158) MISSED OFFSET
	TMap<EAvatarSlotType, struct FName>                ClothMaterialColorName;                                   // 0x05C8(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EAvatarSlotType, struct FName>                ClothMaterialSkinName;                                    // 0x0618(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UItemHandleBase*>                     LoadedAvatarHandlerPool;                                  // 0x0668(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0678(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LobbyAvatarComponent");
		return pStaticClass;
	}


	bool SetSkinMaterial(int SlotID, const struct FItemDefineID& DefineID, class UBackpackAvatarHandle* InAvatarHandle);
	void SetNormalMaterial(const struct FMeshPackage& meshPack, class UMeshComponent* meshComp, int SlotID, class UBackpackAvatarHandle* InAvatarHandle);
	bool SetBodySuitsMaterial(const struct FMeshPackage& meshPack, class UMeshComponent* meshComp, class UBackpackAvatarHandle* InAvatarHandle);
	void RemoveClothParticleEffect(int SlotID);
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, const struct FItemDefineID& InItemDefineID);
	void OnAvatarHeadVisible__DelegateSignature(int ItemID);
	void OnAvatarEquipped__DelegateSignature(EAvatarSlotType slotType, bool isEquipped, int ItemID);
	void OnAvatarAttachEquipped__DelegateSignature(EAvatarSlotType slotType, bool isEquipped, int ItemID);
	void OnAsyncLoadMeshes();
	void OnAsyncLoadItemHandles(TArray<class UBattleItemHandleBase*> AvatarHandles);
	void OnAsyncLoadAvatarHandles(TArray<class UAvatarHandleBase*> AvatarHandles);
	void InitRootMesh();
	void Initialize();
	void InitDefaultMesh(class UBattleItemHandleBase* Handle);
	void InitDefaultAvatarByResID(int InGender, int headId, int hairId);
	void InitBodyMeshByHead(const struct FItemDefineID& InItemID, class UBackpackAvatarHandle* InAvatarHandle);
	void InitBodyMesh(class UItemHandleBase* Handle);
	bool HandleUnequipSlot(int InSlotID);
	void HandleRealShowMeshpack(class UBackpackAvatarHandle* AvatarHandle, const struct FAvatarSlotDesc& InSlotDesc);
	void HandleEquipItem(const struct FItemDefineID& InItemID, const struct FAvatarCustom& InCustomInfo);
	class UMaterialInstance* GetMaterial(const struct FMeshPackage& meshPack);
	TArray<class UItemHandleBase*> GetLoadedItemHandlePool();
	struct FName GetClothMaterialSkinName(EAvatarSlotType slotType, bool bSuit);
	struct FName GetClothMaterialColorName(EAvatarSlotType slotType, bool bSuit);
	class UMaterialInterface* GetCharSkinMaterial(EAvatarSlotType slotType, const struct FItemDefineID& DefineID, class UBackpackAvatarHandle* InAvatarHandle);
	class UBackpackAvatarItemPattern* GetAvatarItemPattern(EAvatarSlotType InSlotType, int InPatternID, int InNumID);
	class UBackpackAvatarItemColor* GetAvatarItemColor(EAvatarSlotType InSlotType, int InColorID);
	class UItemHandleBase* GetAvatarHandleExternal(const struct FItemDefineID& InItemID, bool bDirectCreate);
	bool GetAttachMeshResRef(const struct FAvatarAttachMeshData& meshPack, struct FSoftObjectPath* OutAssetRef);
	class UBackpackAvatarItemPattern* CreateAvatarItemPattern(EAvatarSlotType InSlotType, int InPatternID);
	class UBackpackAvatarItemColor* CreateAvatarItemColor(EAvatarSlotType InSlotType, int InColorID);
	class UItemHandleBase* CreateAvatarHandle(const struct FItemDefineID& InItemID, class UObject* Outer);
	bool CanEquipDefaultItem(int InSlotID);
	void AyncLoadHandles(TArray<struct FItemDefineID>* InHandleList);
	void AsyncLoadMeshes(TArray<struct FSoftObjectPath>* InHandleList);
	void AsyncLoadClothParticleEffect(int SlotID, class UBackpackAvatarHandle* Handle);
	bool ApplyMaterial(class UMeshComponent* InMeshComponent, class UItemHandleBase* InItemHandle);
	void ApplyClothParticleEffect(int SlotID, class UBackpackAvatarHandle* Handle);
	void AddDefaultSlotItem(int ItemID);
	void AddAvatarHandleToPool(class UItemHandleBase* InHandle);
};


// Class ShadowTrackerExtra.LobbyGodEffectComponent
// 0x00A0 (0x0360 - 0x02C0)
class ULobbyGodEffectComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x02C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.LobbyGodEffectComponent.ParticleEffect1
	unsigned char                                      UnknownData01[0x28];                                      // 0x02E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.LobbyGodEffectComponent.ParticleEffect2
	unsigned char                                      UnknownData02[0x28];                                      // 0x0310(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.LobbyGodEffectComponent.ParticleEffect3
	class UClass*                                      GodEffectWidget;                                          // 0x0338(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                            WidgetComponent;                                          // 0x0340(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0348(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LobbyGodEffectComponent");
		return pStaticClass;
	}


	void StopEffect();
	void SetNameText(int TextId);
	void PlayGodEffect(int Level, const struct FVector& Location);
	void OnAsyncLoadEffectFinish(int Level, const struct FVector& Location);
};


// Class ShadowTrackerExtra.LobbyLevelScriptActor
// 0x0038 (0x03D0 - 0x0398)
class ALobbyLevelScriptActor : public ALevelScriptActor
{
public:
	TArray<class UClass*>                              FXClassList;                                              // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                              _fxActorList;                                             // 0x03A8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AStaticMeshActor*>                    AutoLodSMAList;                                           // 0x03B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LobbyLevelScriptActor");
		return pStaticClass;
	}


	void UnregistAutoLodSMAByTag();
	void RemoveFXActor();
	void RegistAutoLodSMAByTag();
	void CreateFXActor();
	void _AutoUpdateSMALod(int UserQualitySettingLevel);
};


// Class ShadowTrackerExtra.LobbyMatChgActor
// 0x0018 (0x03A8 - 0x0390)
class ALobbyMatChgActor : public AActor
{
public:
	class UStaticMeshComponent*                        stMesh;                                                   // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLobbyBgMatData>                     matWaitToChangeList;                                      // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LobbyMatChgActor");
		return pStaticClass;
	}


	void ChangeMaterialToIdx(int idx);
};


// Class ShadowTrackerExtra.LobbyModelCommonActor
// 0x0010 (0x03A0 - 0x0390)
class ALobbyModelCommonActor : public AActor
{
public:
	class UMeshComponent*                              MeshComponent;                                            // 0x0390(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LobbyModelCommonActor");
		return pStaticClass;
	}


	void ShowByResId(const struct FItemDefineID& ItemDefineID, bool bSync);
	void ShowByHandle(class UBattleItemHandleBase* InHandle, bool bSync);
	class UMeshComponent* SetupMeshComponent(class UMeshComponent* meshComp);
	void SetMeshAndMaterial(class UBattleItemHandleBase* BattleItemHandleBase, class UMeshComponent* meshComp, TArray<class UMaterialInterface*> matList);
	class USkeletalMeshComponent* InitSkeletalMesh();
	class USkeletalMesh* GetSkeletalMesh(const struct FMeshPackage& meshPack);
	TArray<class UMaterialInterface*> GetMeshAppliedMaterials(class UBackpackAvatarHandle* AvatarHandle, class UMeshComponent* meshComp, class USkeletalMesh* SkeletalMesh, class UStaticMesh* StaticMesh);
	void ApplyMaterialByIdx(class UMeshComponent* meshComp, class UMaterialInstance* Material, int idx);
};


// Class ShadowTrackerExtra.LobbySceneCaptureActor
// 0x0070 (0x0400 - 0x0390)
class ALobbySceneCaptureActor : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnCaptureError;                                           // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FString                                     PicturePath;                                              // 0x03A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   RTSize;                                                   // 0x03B0(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AlphaFullCorrect;                                         // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AlphaReverse;                                             // 0x03B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03BA(0x0002) MISSED OFFSET
	float                                              AlphaRate;                                                // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AlphaChannelEnable;                                       // 0x03C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GammaCorrect;                                             // 0x03C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               HSSave;                                                   // 0x03C2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ClearDrawRT;                                              // 0x03C3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	class UMaterialInstance*                           WriteMat;                                                 // 0x03C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                      DrawRT;                                                   // 0x03D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*                    Capture2D;                                                // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*                    AlphaCapture2D;                                           // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScreenWidth;                                              // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScreenHeight;                                             // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   AABBBoxLeftPoint;                                         // 0x03F0(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   AABBBoxRightPoint;                                        // 0x03F8(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LobbySceneCaptureActor");
		return pStaticClass;
	}


	void ResizeRT();
	void LogError(const struct FString& FilePath);
	void Capture();
};


// Class ShadowTrackerExtra.LoopScrollBase
// 0x0118 (0x0B28 - 0x0A10)
class ULoopScrollBase : public UScrollBox
{
public:
	bool                                               bDelayLoad;                                               // 0x0A10(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0A11(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRefreshItem;                                            // 0x0A18(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnItemCreated;                                            // 0x0A28(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0xD0];                                      // 0x0A38(0x00D0) MISSED OFFSET
	class UClass*                                      itemType;                                                 // 0x0B08(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0B10(0x0010) MISSED OFFSET
	class UCanvasPanel*                                CanvasPanel;                                              // 0x0B20(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LoopScrollBase");
		return pStaticClass;
	}


	void UserScrolled(float Offset);
	void SetItemType(class UClass* _ItemType);
	bool SetItemCount(int count);
	void RemoveItem(int Index);
	bool RefreshItem(int Index);
	void RefreshAllItems();
	void OnRefreshItem__DelegateSignature(class UWidget* Item, int Index);
	void OnItemCreated__DelegateSignature(class UWidget* Item, int Index);
	void InsertItem(int Index);
	int GetItemCount();
	void AutoSize(bool bAutoSize);
};


// Class ShadowTrackerExtra.LoopScrollBox
// 0x0008 (0x0B30 - 0x0B28)
class ULoopScrollBox : public ULoopScrollBase
{
public:
	float                                              ItemSize;                                                 // 0x0B28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Padding;                                                  // 0x0B2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LoopScrollBox");
		return pStaticClass;
	}


	void ScrollToItem(int Index);
};


// Class ShadowTrackerExtra.LoopScrollGrid
// 0x0010 (0x0B38 - 0x0B28)
class ULoopScrollGrid : public ULoopScrollBase
{
public:
	struct FVector2D                                   ItemSize;                                                 // 0x0B28(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   Padding;                                                  // 0x0B30(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LoopScrollGrid");
		return pStaticClass;
	}


	void ScrollToItem(int Index);
};


// Class ShadowTrackerExtra.LuaDataTable
// 0x0000 (0x0028 - 0x0028)
class ULuaDataTable : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LuaDataTable");
		return pStaticClass;
	}


	static int IsTableDataExist_LuaState();
	static int GetTableData_LuaState();
	static int GetTableCount(const struct FString& tableName);
	static int GetTable_LuaState();
};


// Class ShadowTrackerExtra.LuaGameMode
// 0x0068 (0x1850 - 0x17E8)
class ALuaGameMode : public ABattleRoyaleGameMode
{
public:
	struct FString                                     LuaFilePath;                                              // 0x17E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULuaStateWrapper*                            LuaStateWrapper;                                          // 0x17F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x1800(0x0008) MISSED OFFSET
	struct FString                                     PreloadLuaFileRelativePath;                               // 0x1808(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FString>                             LuaDirList;                                               // 0x1818(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<struct FString>                             NoGCPackage;                                              // 0x1828(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	float                                              LuaTickTime;                                              // 0x1838(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bCallLuaTick;                                             // 0x183C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bAutoLoginEnable;                                         // 0x183D(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0xA];                                       // 0x183E(0x000A) MISSED OFFSET
	class UCompatibleEventCenter*                      EventCenter;                                              // 0x1848(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LuaGameMode");
		return pStaticClass;
	}


	void TestFunction();
	void LuaDoString(const struct FString& LuaString);
	void CallGlobalScriptFunction(const struct FString& InFunctionName);
};


// Class ShadowTrackerExtra.MyLuaAPI
// 0x0000 (0x0028 - 0x0028)
class UMyLuaAPI : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MyLuaAPI");
		return pStaticClass;
	}


	static int Add(int A, int B);
};


// Class ShadowTrackerExtra.MyLuaObject
// 0x0008 (0x0030 - 0x0028)
class UMyLuaObject : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MyLuaObject");
		return pStaticClass;
	}


	void SetID(int I);
	static class UMyLuaObject* New();
	int GetID();
};


// Class ShadowTrackerExtra.LuaScrollBox
// 0x00C8 (0x0AD8 - 0x0A10)
class ULuaScrollBox : public UScrollBox
{
public:
	class UClass*                                      itemType;                                                 // 0x0A10(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ItemSize;                                                 // 0x0A18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Padding;                                                  // 0x0A1C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRefreshItem;                                            // 0x0A20(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnItemCreated;                                            // 0x0A30(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0A40(0x0008) MISSED OFFSET
	TMap<int, class UWidget*>                          CurrentItems;                                             // 0x0A48(0x0050) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int                                                ItemStartIndex;                                           // 0x0A98(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                ItemEndIndex;                                             // 0x0A9C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                             UnusedItems;                                              // 0x0AA0(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                               bViewSizeInit;                                            // 0x0AB0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0AB1(0x0003) MISSED OFFSET
	int                                                ItemCount;                                                // 0x0AB4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0AB8(0x0004) MISSED OFFSET
	int                                                ScrollToIndex;                                            // 0x0ABC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0AC0(0x0010) MISSED OFFSET
	class UCanvasPanel*                                CanvasPanel;                                              // 0x0AD0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LuaScrollBox");
		return pStaticClass;
	}


	bool UpdateContentSize(int count);
	void SetItemOffset(int Index);
	class UWidget* RequireOneWidget(int Index);
	void ReleaseItem(int Index);
	void RefreshItem(int Index);
	void RefreshAllItems();
	void OnRefreshItem__DelegateSignature(class UWidget* Item, int Index);
	void OnItemCreated__DelegateSignature(class UWidget* Item, int Index);
	struct FVector2D GetViewSize();
	float GetItemOffset(int Index);
	float GetContentSize(int count);
	void GetBeginEndIndex(float Offset, int* Begin, int* End);
};


// Class ShadowTrackerExtra.LuaTaskComponent
// 0x0040 (0x0150 - 0x0110)
class ULuaTaskComponent : public UActorComponent
{
public:
	TArray<struct FXTaskSyncData>                      TaskSyncList;                                             // 0x0110(0x0010) (BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FDailyTaskAwardInfo>                 RewardList;                                               // 0x0120(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    TaskSyncListRefreshDelegate;                              // 0x0130(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEndPlay;                                                // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LuaTaskComponent");
		return pStaticClass;
	}


	void SyncTaskList(TArray<struct FXTaskSyncData>* SyncList);
	void SetTestTaskReportData();
	void RPC_Server_GetReward(int TaskID);
	void RPC_Client_SyncTaskList(TArray<struct FXTaskSyncData> SyncList);
	void RPC_Client_ModefyTask(int TaskID, int TaskProgress, int TaskState);
	void RPC_Client_GetRewardRes(bool isSuccess);
	void RPC_Client_DeleteTask(int TaskID);
	void RPC_Client_AddTask(int TaskID, int Aim);
	void RefreshPlayerDailyTaskStoreInfo();
	void RecordRewardInfo(int TaskID, TArray<struct FTaskAwardItemInfo> AwardList);
	void OnRep_TaskSyncList();
	void ModifyTask(int TaskID, int Progress, int State);
	struct FDailyTaskReportInfo GetDailyTaskReportData();
	void DeleteTask(int TaskID);
	void CollapseTaskInfo();
	void AddTask(int TaskID, int Aim);
};


// Class ShadowTrackerExtra.LuaTimerManager
// 0x0068 (0x0090 - 0x0028)
class ULuaTimerManager : public UObject
{
public:
	class USTExtraGameInstance*                        GameInstance;                                             // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	TMap<int, struct FTimerHandle>                     _timers;                                                  // 0x0038(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0088(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LuaTimerManager");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.LuaTriggerManager
// 0x0050 (0x0078 - 0x0028)
class ULuaTriggerManager : public UObject
{
public:
	TMap<struct FString, int>                          EventListenMap;                                           // 0x0028(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.LuaTriggerManager");
		return pStaticClass;
	}


	bool SetEventListen(const struct FString& EventString, int EventNum);
	bool RemoveEventListen(const struct FString& EventString, int EventNum);
	void Init();
	bool AddEventListen(const struct FString& EventString, int EventNum);
};


// Class ShadowTrackerExtra.MainCharAnimInstance
// 0x0010 (0x03D0 - 0x03C0)
class UMainCharAnimInstance : public UAnimInstance
{
public:
	bool                                               bIsFPPMode;                                               // 0x03C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0xF];                                       // 0x03C1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MainCharAnimInstance");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ManagedActorInterface
// 0x0000 (0x0028 - 0x0028)
class UManagedActorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ManagedActorInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.MarkDispatchManager
// 0x0030 (0x0140 - 0x0110)
class UMarkDispatchManager : public UActorComponent
{
public:
	int                                                CurrentInstanceCount;                                     // 0x0110(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                CurrentLocalInstanceCount;                                // 0x0114(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMarkDispatchAction>                 ActionQueue;                                              // 0x0118(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FMarkDispatchAction>                 BatchActionQueue;                                         // 0x0128(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	int                                                MarkCountProcessed;                                       // 0x0138(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x4];                                       // 0x013C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MarkDispatchManager");
		return pStaticClass;
	}


	static class UMarkDispatchManager* GetMarkDispatchManager(class UObject* WorldContextObject);
	int GenerateNewLocalInstanceID();
	int GenerateNewInstanceID();
	void DispatchMarkData(const struct FMarkDispatchAction& Data);
};


// Class ShadowTrackerExtra.MapUIMarkBaseWidget
// 0x0028 (0x03D0 - 0x03A8)
class UMapUIMarkBaseWidget : public UUAEUserWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03A8(0x0018) MISSED OFFSET
	bool                                               bLimitedInMinimap;                                        // 0x03C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               isUpdateScale;                                            // 0x03C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDoCallFunctionWhenEnterEntireMap;                        // 0x03C2(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03C3(0x0001) MISSED OFFSET
	struct FVector2D                                   LimitedSize;                                              // 0x03C4(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MapUIMarkBaseWidget");
		return pStaticClass;
	}


	void UpdateUIBPState(const struct FCustomMarkEventData& InState);
	void UpdateMarkSize(float inScale);
	void UpdateMarkPosition(const struct FVector2D& NewMapPos, const struct FVector2D& MapAdjustOffset, float Angle, float MapWindowHalfExtent);
	void OnUIBPShow(const struct FCustomMarkEventData& InState);
	void OnUIBPDestroy();
	void OnUIBPCreate(const struct FCustomMarkEventData& InState, TEnumAsByte<EMarkParentWidget> ParentState);
	void OnEnterEntireMap();
	struct FVector GetWidgetCurWorldPos();
};


// Class ShadowTrackerExtra.MapUIMarkManager
// 0x0080 (0x0190 - 0x0110)
class UMapUIMarkManager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	TArray<struct FMarkPathSetting>                    MarkPathSettingArray;                                     // 0x0118(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UMapWidgetBase*                              m_pMiniMapWidget;                                         // 0x0128(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapWidgetBase*                              m_pEntireMapWidget;                                       // 0x0130(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        CurMarkInstList;                                          // 0x0138(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAlertItemListUpdateDelegate;                            // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ASTExtraGameStateBase*                       pExtraGameState;                                          // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    pExtraPC;                                                 // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0168(0x001C) MISSED OFFSET
	float                                              TickRate_Internal;                                        // 0x0184(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0188(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MapUIMarkManager");
		return pStaticClass;
	}


	void OnUIBPLoadCallBack(const struct FUIBPAsyncParams& inCallBackParams);
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);
};


// Class ShadowTrackerExtra.MatineePlayerActor
// 0x0010 (0x03A0 - 0x0390)
class AMatineePlayerActor : public AActor
{
public:
	TArray<class AMatineeActor*>                       MatineeList;                                              // 0x0390(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MatineePlayerActor");
		return pStaticClass;
	}


	void PlayMatinee(int Index);
};


// Class ShadowTrackerExtra.MeleeWeaponToSkillInterface
// 0x0000 (0x0028 - 0x0028)
class UMeleeWeaponToSkillInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MeleeWeaponToSkillInterface");
		return pStaticClass;
	}


	int GetSkillIndexForMeleeWeapon();
	EUTSkillEntry GetSkillEntryForMeleeWeapon(bool IsPressed);
};


// Class ShadowTrackerExtra.WeaponDisuseCancelInterface
// 0x0000 (0x0028 - 0x0028)
class UWeaponDisuseCancelInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponDisuseCancelInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.MemoryTeamIDActor
// 0x0008 (0x0398 - 0x0390)
class AMemoryTeamIDActor : public AActor
{
public:
	int                                                OwnerTeamID;                                              // 0x0390(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MemoryTeamIDActor");
		return pStaticClass;
	}


	bool IsLocalControllerSameTeam();
};


// Class ShadowTrackerExtra.MiniMapAirdropBoxIconItemWidget
// 0x0000 (0x0208 - 0x0208)
class UMiniMapAirdropBoxIconItemWidget : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MiniMapAirdropBoxIconItemWidget");
		return pStaticClass;
	}


	void OnUpdateAirdropBoxIcon(const struct FVector2D& Location, bool IsShow, bool Landed, float ExistsTime, float Altitude, float Distance, bool Opened);
};


// Class ShadowTrackerExtra.MiniMapEnemyItemWidget
// 0x0000 (0x03A8 - 0x03A8)
class UMiniMapEnemyItemWidget : public UUAEUserWidget
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MiniMapEnemyItemWidget");
		return pStaticClass;
	}


	void OnUpdateEnemyIcon(float X, float Y, bool IsShow, float PlayerRotation);
};


// Class ShadowTrackerExtra.MiniMapStandardPoint
// 0x0030 (0x03C0 - 0x0390)
class AMiniMapStandardPoint : public AActor
{
public:
	float                                              LevelBoundExtent;                                         // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EachTileExtent;                                           // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     LevelName;                                                // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FakeEdgeExtent;                                           // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	struct FVisualFieldLayerConfig                     VisualLayerConfig;                                        // 0x03B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MiniMapStandardPoint");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.MinimapWidget
// 0x0180 (0x07B0 - 0x0630)
class UMinimapWidget : public UCommonMapWidget
{
public:
	class UCanvasPanel*                                MapAndCircleCanvas;                                       // 0x0630(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0638(0x0050) MISSED OFFSET
	TArray<float>                                      SpeedLowerLimitListC;                                     // 0x0688(0x0010) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                      DynamicScaleFactorListC;                                  // 0x0698(0x0010) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                              ScaleElapsedLerpTimeC;                                    // 0x06A8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ScaleTotalLerpTimeC;                                      // 0x06AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LastTargetMapDynamicScaleC;                               // 0x06B0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TargetMapDynamicScaleC;                                   // 0x06B4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CurMapDynamicScaleC;                                      // 0x06B8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CachePawnVelocityC;                                       // 0x06BC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CurrentVelocityC;                                         // 0x06C0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x06C4(0x0004) MISSED OFFSET
	TArray<class UWidget*>                             BossAreaListC;                                            // 0x06C8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                             BossWarningListC;                                         // 0x06D8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<int, struct FVector>                          BossWarningMapC;                                          // 0x06E8(0x0050) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                             EliteMonsterListC;                                        // 0x0738(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UImage*>                              EliteBgImageListC;                                        // 0x0748(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<int, struct FVector>                          EliteActiveGroupMapC;                                     // 0x0758(0x0050) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UPVPBossComponent*                           BossComponent;                                            // 0x07A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MinimapWidget");
		return pStaticClass;
	}


	void UpdatePlayersLocAndRotC();
	void UpdateLeftRouteLengthC();
	void UpdateEliteMonsterGroupItems(TArray<class UWidget*> EliteMonsterList, TArray<class UImage*> EliteBgImageList, TMap<int, struct FVector> EliteActiveGroupMap);
	void UpdateBossWarningItems(TArray<class UWidget*> BossWarningList, TMap<int, struct FVector> BossWarningMap);
	void UpdateBossSpawnItems(TArray<class UWidget*> BossAreaList);
	void TickDynamicScaleC(float DeltaSec);
	void SyncTick();
	void ReCalMapInfoC();
	void LerpDynamicScaleC(float DeltaSec);
	void HandleTeammateOutOfRangeC(class UWidget* Widget, bool bIsInRange);
	float FindScaleFactorByVelocityC(float Velocity);
	void ChangeDynamicScaleC(float NewScale);
	void AdjustMapPositionC();
};


// Class ShadowTrackerExtra.MinimapWidget2
// 0x0018 (0x03C0 - 0x03A8)
class UMinimapWidget2 : public UUAEUserWidget
{
public:
	int                                                BossSpawnUpdateInterFrame;                                // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	class UPVPBossComponent*                           BossComponent;                                            // 0x03B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                BossSpawnUpdateInterAddFrame;                             // 0x03B8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MinimapWidget2");
		return pStaticClass;
	}


	static void UpdateEliteMonsterGroupItems(TArray<class UWidget*> EliteMonsterList, TArray<class UImage*> EliteBgImageList, const struct FVector& LevelLandScapeCenter, float LevelToMapScale, float RotateAngle, TMap<int, struct FVector> EliteActiveGroupMap);
	static void UpdateBossWarningItems(TArray<class UWidget*> BossWarningList, const struct FVector& LevelLandScapeCenter, float LevelToMapScale, float RotateAngle, TMap<int, struct FVector> BossWarningMap);
	void UpdateBossSpawnItems(TArray<class UWidget*> BossAreaList, const struct FVector& LevelLandScapeCenter, float LevelToMapScale, float RotateAngle);
};


// Class ShadowTrackerExtra.MobAdvancedMovement
// 0x0158 (0x0268 - 0x0110)
class UMobAdvancedMovement : public UActorComponent
{
public:
	float                                              WallClimb_AcceptableFaceAngle;                            // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WallClimb_TurnFaceSpeed;                                  // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WallClimb_KeepDistanceToWall;                             // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WallClimb_JumpToWallSpeed;                                // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WallClimb_JumpToWallHeightOffset;                         // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WallClimb_MoveUpSpeed;                                    // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WallClimb_MoveUpHeightOffset;                             // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WallClimb_ClimbToStand_Duration;                          // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_ClimbToStand_Forward;                               // 0x0130(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_ClimbToStand_Height;                                // 0x0138(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WallJump_JumpSpeed;                                       // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WallJump_JumpAngle;                                       // 0x0144(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WallJump_ZVelocity;                                       // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Stride_AcceptableFaceAngle;                               // 0x014C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Stride_Duration;                                          // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Stride_KeepDistanceToWall;                                // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Stride_HeightOffset;                                      // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Stride_ForwardOffset;                                     // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Stride_LineTraceOffset;                                   // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	class UCurveFloat*                                 Curve_Stride_Forward;                                     // 0x0168(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_Stride_Height;                                      // 0x0170(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               Stride_JumpInstead;                                       // 0x0178(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0179(0x0003) MISSED OFFSET
	int                                                iWallClimbState;                                          // 0x017C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                iWallJumpState;                                           // 0x0180(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                iStrideState;                                             // 0x0184(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0xE0];                                      // 0x0188(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MobAdvancedMovement");
		return pStaticClass;
	}


	void WindowJump(const struct FVector& DstLoacation, const struct FVector& originLocation, float WindowHeight);
	void WallJump(const struct FVector& DstLocation);
	void WallClimbExit();
	void WallClimb(const struct FVector& DstLocation, const struct FVector& originLocation, float WindowHeight);
	void TickWallJump_Turn(float DeltaTime);
	void TickWallJump(float DeltaTime);
	void TickWallClimb_Turn(float DeltaTime);
	void TickWallClimb_JumpToWall(float DeltaTime);
	void TickWallClimb_ClimbUp(float DeltaTime);
	void TickWallClimb_ClimbToStand(float DeltaTime);
	void TickWallClimb(float DeltaTime);
	void TickStride_Turn(float DeltaTime);
	void TickStride_Stride(float DeltaTime);
	void TickStride_MoveToWall(float DeltaTime);
	void TickStride(float DeltaTime);
	void StrideJump();
	void StrideExit();
	void Stride(struct FVector* DstLocation, struct FVector* originLocation);
	void OnMobDie();
	void NotifyClientsWallClimbSyncState(const struct FVector& Pos, const struct FRotator& Rotator, int nowWallClimbState);
	void NotifyClientsWallClimbStartClimbToStand(const struct FVector& Pos, const struct FRotator& Rotator, int nowWallClimbState);
	void NotifyClientsStrideState(const struct FVector& Pos, const struct FRotator& Rotator, int nowStrideState);
	void NotifyClientsStartStride(const struct FVector& Pos, const struct FRotator& Rotator, int nowStrideState, const struct FVector& originLocation, const struct FVector& DstLocation, float heightLength, float forwardLength);
	bool IsInAdvancedMovement();
	int GetWallJumpState();
	int GetWallClimbState();
	int GetStrideState();
	void BPWallJump(const struct FVector& DstLocation);
	void BPWallClimb(const struct FVector& DstLocation);
};


// Class ShadowTrackerExtra.MobAIController
// 0x0140 (0x05C8 - 0x0488)
class AMobAIController : public AAIController
{
public:
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0488(0x00C0) MISSED OFFSET
	class ASTExtraSimpleCharacter*                     ControlledMobPawn;                                        // 0x0548(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseDynamicNAV;                                           // 0x0550(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0551(0x0007) MISSED OFFSET
	TArray<class UBehaviorTree*>                       BehaviorTree;                                             // 0x0558(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UBehaviorTreeComponent*                      BehaviorComp;                                             // 0x0568(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlackboardComponent*                        BlackboardComp;                                           // 0x0570(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCrowdFollowingComponent*                    newFollowingComponent;                                    // 0x0578(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0580(0x0010) MISSED OFFSET
	class USTAISenseConfig_Hearing*                    hearingConfig;                                            // 0x0590(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBackpackComponent*                          BackpackComponent;                                        // 0x0598(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x8];                                       // 0x05A0(0x0008) MISSED OFFSET
	TArray<int>                                        SkillsArray;                                              // 0x05A8(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                ChangeSkillMinTimes;                                      // 0x05B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ChangeSkillMaxTimes;                                      // 0x05BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ChooseCurSkillProbability;                                // 0x05C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x05C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MobAIController");
		return pStaticClass;
	}


	void Suicide();
	void RefreshAdvancedMovementMode();
	void OnPerceptionSenseUpdated(TArray<class AActor*> UpdatedActors);
	void GotoEarthAndDie();
};


// Class ShadowTrackerExtra.MobClimbingProxy
// 0x0008 (0x03E8 - 0x03E0)
class AMobClimbingProxy : public ANavLinkProxy
{
public:
	EMobClimbingProxyType                              climbingType;                                             // 0x03E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E1(0x0003) MISSED OFFSET
	float                                              WindowHeight;                                             // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MobClimbingProxy");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.MobPerceptionController
// 0x0068 (0x0178 - 0x0110)
class UMobPerceptionController : public UActorComponent
{
public:
	float                                              AcceptableNoiseLoudness;                                  // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	TArray<ESTAINoiseType>                             AcceptableNoiseType;                                      // 0x0118(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ENoiseAttenuationModel                             NoiseAttenuationModel;                                    // 0x0128(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0129(0x0003) MISSED OFFSET
	int                                                NoisePoolSize;                                            // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoiseRememberTime;                                        // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoiseUpdateFrequency;                                     // 0x0134(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x40];                                      // 0x0138(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MobPerceptionController");
		return pStaticClass;
	}


	bool SearchNoise(ENoiseSearchType searchType, class UBehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed, struct FNoiseInfo* NoiseInfo);
	void OnPerceptionSenseUpdated(class UAIPerceptionComponent* PerceptionComponent, TArray<class AActor*>* UpdatedActors);
	void OnMobDie();
	void ClearNoisePool();
	struct FNoiseCheckResult CheckNoise(struct FAIStimulus* Stimulus);
	float Attenuation(struct FAIStimulus* Stimulus);
	void AddToNoisePool(class AActor* Instigator, float LoudnessHeard, struct FAIStimulus* Stimulus);
};


// Class ShadowTrackerExtra.MonsterAnimGroupComponent
// 0x0040 (0x0150 - 0x0110)
class UMonsterAnimGroupComponent : public UActorComponent
{
public:
	bool                                               bConfigEnableAnimGroup;                                   // 0x0110(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              ConfigSeparationDistanceSquare;                           // 0x0114(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConfigMinDistanceFromMainCharSquare;                      // 0x0118(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ConfigMaxDistanceFromMainCharSquare;                      // 0x011C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EffectiveDeviceLevel;                                     // 0x0120(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableAnimGroup;                                         // 0x0124(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugAnimGroup;                                          // 0x0125(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0126(0x0002) MISSED OFFSET
	float                                              DebugPrintDeltaTime;                                      // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DebugPrintTime;                                           // 0x012C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SeparationDistanceSquare;                                 // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinDistanceFromMainCharSquare;                            // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDistanceFromMainCharSquare;                            // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x013C(0x0004) MISSED OFFSET
	TArray<struct FMonsterAnimGroup>                   AllMonsterGroup;                                          // 0x0140(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MonsterAnimGroupComponent");
		return pStaticClass;
	}


	bool IsMonsterCanGroup(class ASTExtraSimpleCharacter* Actor);
	bool IsMonsterCanBelongToBaseMonster(class ASTExtraSimpleCharacter* BaseActor, class ASTExtraSimpleCharacter* Actor);
};


// Class ShadowTrackerExtra.MonsterAttributeComponent
// 0x0038 (0x0160 - 0x0128)
class UMonsterAttributeComponent : public UActorAttributeComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	struct FString                                     BPTableName;                                              // 0x0130(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     SpecialStateTableName;                                    // 0x0140(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     MonsterDropTableName;                                     // 0x0150(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MonsterAttributeComponent");
		return pStaticClass;
	}


	void UpdateAttribute(int TemplateID);
	void RPC_Broadcast_Initailize(int MonsterID);
	static void ResetTableData();
	static void InitializeTable(const struct FString& Table, const struct FString& BPTable, const struct FString& SpecialStateTable, const struct FString& MonsterDropTableName);
	void InitializeFollow();
	void Initialize(class AActor* Actor);
	static struct FMonsterTableRow GetTableRow(int ID);
	static struct FMonsterSpecialStateTableRow GetSpecialStateTableRow(int ID);
	static class UMonsterAttributeComponent* CreateComponent(class AActor* Actor);
};


// Class ShadowTrackerExtra.MonsterFloatingTextComponent
// 0x0020 (0x0130 - 0x0110)
class UMonsterFloatingTextComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0110(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MonsterFloatingTextComponent");
		return pStaticClass;
	}


	void SetClientPreCal(bool bPreCal);
	void OnPlayerAttackMonster(float BaseDamage, bool IsHeadShot, const struct FDamageEvent& DamageEvent, const struct FHitResult& HitResult, class AActor* Victim);
	void CreateFloatingText(const struct FMonsterFloatingTextData& MonsterFloatingTextData);
	void ClientHandleFloatingTextArray(TArray<struct FMonsterFloatingTextData> FloatingTextArray);
};


// Class ShadowTrackerExtra.MonsterProbeComponent
// 0x0070 (0x0180 - 0x0110)
class UMonsterProbeComponent : public UGameModeProbeComponent
{
public:
	int                                                TimeToSpawnPawn;                                          // 0x0110(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	TArray<struct FSpawnGroupItemInfo>                 SpawnGroupInfoList;                                       // 0x0118(0x0010) (BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMap<int, struct FSpawnTableData>                  PawnTableData;                                            // 0x0128(0x0050) (BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0178(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MonsterProbeComponent");
		return pStaticClass;
	}


	void InitialItemTable();
};


// Class ShadowTrackerExtra.MonsterWarningWidget
// 0x0050 (0x03F8 - 0x03A8)
class UMonsterWarningWidget : public UUAEUserWidget
{
public:
	int                                                MaxWidgetNum;                                             // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxWarningDistance;                                       // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InvisibleAngle;                                           // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VisibleAngle;                                             // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ZUpDistance;                                              // 0x03B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ZDownDistance;                                            // 0x03BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GridRange;                                                // 0x03C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	TArray<class UCanvasPanel*>                        WarningCanvasPanelArr;                                    // 0x03C8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UObject>>              CachedNearMonsterArr;                                     // 0x03D8(0x0010) (ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                              CurQueryTime;                                             // 0x03E8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              QueryZombieInterval;                                      // 0x03EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bWarningEnabled;                                          // 0x03F0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MonsterWarningWidget");
		return pStaticClass;
	}


	void UpdateCanvasOpacity(class UCanvasPanel* WarningCanvasPanel, float AngleToForward);
	void EnableWarning();
	void DisableWarning();
};


// Class ShadowTrackerExtra.TimerComponent
// 0x0020 (0x0130 - 0x0110)
class UTimerComponent : public UActorComponent
{
public:
	bool                                               bEnable;                                                  // 0x0110(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	TArray<struct FRegisterTimerInfo>                  TimerRegister;                                            // 0x0118(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                              CurTime;                                                  // 0x0128(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x012C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TimerComponent");
		return pStaticClass;
	}


	void ResetTimerRegister();
	void AddTimeDelay(int Index, float DelayTime, TArray<int> CallBackPar);
};


// Class ShadowTrackerExtra.MonsterWaveMgrComponent
// 0x02D0 (0x0400 - 0x0130)
class UMonsterWaveMgrComponent : public UTimerComponent
{
public:
	TArray<struct FLevelMonsterWaveRun>                LevelWaveRunInfoArray;                                    // 0x0130(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMonsterWaveRunInfo>                 RunInfoArray;                                             // 0x0140(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLevelMonsterWaveCfg>                AllConfigDatas;                                           // 0x0150(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                               GM_CloseMonsterLimit;                                     // 0x0160(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_CloseAliveMonsterLimit;                                // 0x0161(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0162(0x0002) MISSED OFFSET
	int                                                GM_SpawnMonsterFrame;                                     // 0x0164(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_ExitWaitFrame;                                         // 0x0168(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_AutoExitTime;                                          // 0x016C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_MaxRemainMonsterNum;                                   // 0x0170(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_AreaMaxMonsterNum;                                     // 0x0174(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_AreaRadius;                                            // 0x0178(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_CloseAreaMonsterNumCheck;                              // 0x017C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x017D(0x0003) MISSED OFFSET
	int                                                GM_AreaMonsterNumCheckFrame;                              // 0x0180(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_MonsterLimitPerc;                                      // 0x0184(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_MaxAliveMonsterNum;                                    // 0x0188(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_DisableSpawnDis;                                       // 0x018C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_HighPosZ;                                              // 0x0190(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_LowPosZ;                                               // 0x0194(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_MinHeight;                                             // 0x0198(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_MinSpaceHeight;                                        // 0x019C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GM_MaxWaterDeep;                                          // 0x01A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET
	TArray<struct FGM_MonsterSpawnAction>              GM_SpawnActionList;                                       // 0x01A8(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FItemCallMonsterLimit>               ItemCallMonsterLimitList;                                 // 0x01B8(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<int>                                        MonsterDropConfig;                                        // 0x01C8(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<int>                                        MonsterBulletDropConfig;                                  // 0x01D8(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int                                                PveGenerateZombieByNoTeamMate;                            // 0x01E8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01EC(0x0004) MISSED OFFSET
	struct FString                                     MonsterSpawnPlanTableName;                                // 0x01F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     MonsterSpawnActionTableName;                              // 0x0200(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     MonsterSpawnPlanIDAdjustTableName;                        // 0x0210(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0xF0];                                      // 0x0220(0x00F0) MISSED OFFSET
	TArray<struct FLevelMonsterGenerateInfo>           LevelDelayMonsterGenerateList;                            // 0x0310(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int                                                DeleyGeneratyMonsterRegistID;                             // 0x0320(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                DeleyEndMonsterWaveRegistID;                              // 0x0324(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                DelayGenerateMonsterWaveRegistID;                         // 0x0328(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData05[0x4];                                       // 0x032C(0x0004) MISSED OFFSET
	TArray<struct FDelaySpawnActionTimerRegister>      DelaySpawnMonsterActionRegistList;                        // 0x0330(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int                                                DelayExitMonsterActionRegistID;                           // 0x0340(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0344(0x0004) MISSED OFFSET
	TArray<struct FMonsterSpawnInfo>                   WaitSpawnMonsterList;                                     // 0x0348(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int                                                SpawnMonsterNumPerFrame;                                  // 0x0358(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                DefaultSpawnRadius;                                       // 0x035C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                SpawnRandomMaxTimes;                                      // 0x0360(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                DefaulMonsterTeamID;                                      // 0x0364(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MonsterHeight;                                            // 0x0368(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                StepSpawnPos;                                             // 0x036C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxSpawnCircle;                                           // 0x0370(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0374(0x0004) MISSED OFFSET
	TArray<struct FMonsterLimit>                       MonsterLimit;                                             // 0x0378(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMonsterLimit>                       MonsterAliveLimit;                                        // 0x0388(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int                                                MaxTraceTimes;                                            // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MaxFindTimes;                                             // 0x039C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                NumPerCirque;                                             // 0x03A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                CurSpawnWaitFrame;                                        // 0x03A4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                CurExitWaitFrame;                                         // 0x03A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                CurAreaMonsterNumCheckWaitFrame;                          // 0x03AC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                              WaitExitMonsterList;                                      // 0x03B0(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                               IsDoMonsterExit;                                          // 0x03C0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData08[0x7];                                       // 0x03C1(0x0007) MISSED OFFSET
	TArray<struct FPlayerMonsterSpot>                  PlayerMonsterSpotList;                                    // 0x03C8(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGenerateMonsterFlow                        GenerateMonsterFlow;                                      // 0x03D8(0x0028) (Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MonsterWaveMgrComponent");
		return pStaticClass;
	}


	void StartMonsterAction(int ActionType, int ActionID);
	void SpawnOneMonster(struct FMonsterSpawnInfo* SpawnInfo);
	void SpawnMonsterByAction(TArray<int> ParList);
	void SpawnMonster(struct FMonsterSpawnInfo* SpawnInfo);
	void SetLevelDiffcultPerc(int DiffcultPerc, struct FGameLevelDesc* LevelDesc);
	void ReportGenerateMonsterFlow();
	void RemoveWaveRunInfo(struct FGameLevelDesc* LevelDesc);
	void RemoveWaveCfg(struct FGameLevelDesc* LevelDesc);
	void RemoveWaitSpawnMonsterList(struct FGameLevelDesc* LevelDesc);
	void RemoveMonsterSpotList(uint32_t PlayerKey);
	void RemoveDelayMonsterGenerateList(struct FGameLevelDesc* LevelDesc);
	void OnMonsterAutoExit(TArray<int> ParList);
	void InitMonsterWave(struct FGameLevelDesc* LevelDesc, struct FLevelData* LevelData);
	void InitMonsterSpawnPlanIDAdjust();
	void InitMonsterSpawnPlan();
	void InitMonsterSpawnAction();
	void HanldeMonsterAutoExit();
	void HandleMonsterDie(class AActor* Actor, class AActor* Killer);
	void HandleMonsterBorn(class AActor* Actor);
	void HandleLeaveGameLevel(struct FGameLevelDesc* LevelDesc, struct FLevelData* LevelData);
	TArray<struct FMonsterWaveRunInfo> GetWaveRunInfo(struct FGameLevelDesc* LevelDesc);
	TArray<struct FMonsterWave> GetWaveCfg(struct FGameLevelDesc* LevelDesc);
	void GetPosByPlayerMonsterSpot(struct FPlayerMonsterSpot* PlayerMonsterSpot, struct FVector* OutPos);
	struct FVector GetPosByOffset(const struct FVector& TargetPos, int OffestX, int OffSetY);
	bool GetMonsterSpawnPlanList(int Plan, TArray<struct FMonsterSpawnPlan>* Out);
	bool GetMonsterSpawnPlanIDAdjustList(int AdjustID, TArray<struct FMonsterSpawnPlanIDAdjust>* Out);
	bool GetMonsterSpawnAction(int ID, struct FMonsterSpawnAction* Out);
	struct FMonsterGeneratePlan GetMonsterPlan(struct FMonsterGroup* MonsterGroupInfo);
	int GetMonsterNumInDis(class AActor* TargetActor, float MaxDis);
	bool GetMonsterGroupActorByNearest(struct FMonsterGroup* MonsterGroupInfo, struct FMonsterSpotGroup* OutMonsterSpotGroup);
	bool GetMonsterGroupActor(struct FMonsterGroup* MonsterGroupInfo, struct FMonsterSpotGroup* OutMonsterSpotGroup);
	TArray<struct FMonsterGenerateInfo> GetDelayMonsterGenerateList(struct FGameLevelDesc* LevelDesc);
	int GetCurMonsterDropConfigIndex(int WeatherIndex);
	int GetCurMonsterBulletDropConfigIndex(int WeatherIndex);
	int GetCallMonsterNum(class APawn* TargetPawn, int CallType);
	struct FVector GetAdjustSpawnPos(const struct FVector& CenterPos);
	void GetAdjustSpawnAction(struct FMonsterSpawnAction* Out);
	bool GetAdjustPos(struct FVector* TargetPos);
	int GetAdjustMonsterPlanID(int ID, class ASTExtraBaseCharacter* Player);
	int GetAdjustMonsterNum(int BaseNum, struct FGameLevelDesc* LevelDesc);
	void GenerateMonsterWaveImmediately(int WaveID, struct FGameLevelDesc* LevelDesc);
	void GenerateMonsterWaveDelay(TArray<int> ParList);
	void GenerateMonsterWaveById(int WaveID, struct FGameLevelDesc* LevelDesc);
	void GenerateMonsterGroup(int WaveID, struct FMonsterGroup* MonsterGroupInfo, struct FGameLevelDesc* LevelDesc);
	void GenerateMonsterDelay(TArray<int> Index);
	void GenerateMonsterArroundTargetPosByCirque(class APawn* CallPawn, int MonsterID, int MonsterNum, TArray<int> PosRadiusList, TEnumAsByte<EMonsterSpawnSourceType> SourceType, uint32_t CallPawnKey, int CallType, struct FVector* CenterPos);
	void GenerateMonsterArroundTargetPos(const struct FVector& CenterPos, int MonsterID, int MonsterNum, int PosRadius, TEnumAsByte<EMonsterSpawnSourceType> SourceType);
	void GenerateMonsterArroundPlayerByActionID(class ASTExtraBaseCharacter* Player, int ActionID);
	void GenerateMonsterArroundPlayer(class ASTExtraBaseCharacter* Player, int MonsterID, int RandomMonsterNum, int MaxNumLimit, int LimitType, TArray<int> RadiusList, TEnumAsByte<EMonsterSpawnSourceType> SourceType);
	void GenerateMonsterArroundAllPlayerByActionID(int ActionID);
	void GenerateMonster(struct FGameLevelDesc* LevelDesc, struct FMonsterGenerateInfo* MonsterGenerateInfo);
	void ExitOtherMonsterForItemCallMonster();
	void EndMonsterWaveDelay(TArray<int> WaveID);
	void DoMonsterWaveEnd(int WaveID, struct FGameLevelDesc* LevelDesc);
	void DoMonsterExitByFuncType(int FuncType, int RemainMonsterNum);
	void DoMonsterExit(int RemainMonsterNum);
	void ClearEnv(struct FGameLevelDesc* LevelDesc);
	void CheckNeedSpawnMonster();
	void CheckNeedExitOtherMonster(struct FMonsterSpawnInfo* SpawnInfo);
	void CheckNeedExitMonster();
	bool CheckIsVaildTargetPos(const struct FVector& TargetPos);
	bool CheckIsMaxAliveMonsterNum();
	void CheckAreaMonsterIsMax(class AActor* TargetActor);
	void CheckAllPlayerAreaMonsterIsMax();
	void BPCall_AddToWaitSpawnList(const struct FMonsterSpawnInfo& SpawnInfo);
	void AddWaveRunInfo(TArray<struct FMonsterWaveRunInfo> WaveRunInfoList, struct FGameLevelDesc* LevelDesc);
	void AddWaveCfg(struct FGameLevelDesc* LevelDesc, struct FLevelData* LevelData);
	void AddToWaitSpawnList(struct FMonsterSpawnInfo* SpawnInfo);
	void AddToWaitMonsterSpawnList(int MonsterID, int MonsterRebornTimes, int ReBornDelay, int MonsterWaveId, int MonsterChapterID, int MonsterLevelID, TEnumAsByte<EMonsterSpawnSourceType> SourceType, const struct FVector& Pos, int Radius, float GenerateTime, TArray<struct FRoadPointInfo>* RoadPoints);
	void AddMonsterSpotList(uint32_t PlayerKey, TArray<struct FVector>* SpotList);
	void AddGenerateMonsterFlow(int WeatherPhase, struct FGenerateOneMonsterFlow* AddFlow);
	void AddDelayMonsterGenerateInfo(const struct FMonsterGenerateInfo& GenerateInfo, struct FGameLevelDesc* LevelDesc);
};


// Class ShadowTrackerExtra.MoveablePlatformInterface
// 0x0000 (0x0028 - 0x0028)
class UMoveablePlatformInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MoveablePlatformInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.MoveAntiCheatComponent
// 0x0A00 (0x0B10 - 0x0110)
class UMoveAntiCheatComponent : public UActorComponent
{
public:
	unsigned char                                      bUseMoveAntiCheatCheck : 1;                               // 0x0110(0x0001) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              MinMoveAntiCheatCheckIntervel;                            // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxCheatTimes;                                            // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateDistanceFractor;                                  // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxPacketLossRate;                                        // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinDistanceSqAtStaticColliderCheck;                       // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxTotalMoveCheatTimes;                                   // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxTotalPassWallTimes;                                    // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinMoveAntiCheatCheckIntervel2;                           // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsForceAdjustZWhenExceed;                                // 0x0134(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0135(0x0003) MISSED OFFSET
	int                                                MaxShootPointPassWall;                                    // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxGunPosErrorTimes;                                      // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSkeletonLength;                                        // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxMuzzleHeightTime;                                      // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxLocusFailTime;                                         // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxBulletVictimClientPassWallTimes;                       // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxAllowVehicleTimeSpeedRawTime;                          // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxAllowVehicleTimeSpeedConvTime;                         // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxShooterDataNumErrorCnt;                                // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsBoneInfo;                                               // 0x015C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsTimeLineUpFailed;                                       // 0x0168(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsTimeLineDnFailed;                                       // 0x0174(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsTimeLineBlock;                                          // 0x0180(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsSysTimeCheckNoBack;                                     // 0x018C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsSysTimeRateCheck;                                       // 0x0198(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootRpgShootTimeVerify;                                // 0x01A4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootLockShootTimeVerify;                               // 0x01B0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootRpgHitNewVerify;                                   // 0x01BC(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootGunInfoCheck;                                      // 0x01C8(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsDynamicBasePassWall;                                    // 0x01D4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootTimeConDelta;                                      // 0x01E0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsSkeletonLengthCheck;                                    // 0x01EC(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsJumpMaxHeight;                                          // 0x01F8(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x74];                                      // 0x0204(0x0074) MISSED OFFSET
	struct FMoveCheatAntiStrategy                      MoveCheatAntiStrategy3;                                   // 0x0278(0x0090) (Config, NativeAccessSpecifierPublic)
	struct FMoveCheatAntiStrategy2                     MoveCheatAntiStrategy4;                                   // 0x0308(0x0058) (Config, NativeAccessSpecifierPublic)
	struct FCharacterZMoveDistanceCheck                CharacterZMoveDistanceCheck;                              // 0x0360(0x0034) (Config, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	struct FShovelAntiCheat                            ShovelAntiCheat;                                          // 0x0398(0x0088) (Edit, BlueprintVisible, Config, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x60];                                      // 0x0420(0x0060) MISSED OFFSET
	struct FClientTimeSpeedCheck                       TimeSpeedCheck;                                           // 0x0480(0x003C) (Config, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x24];                                      // 0x04BC(0x0024) MISSED OFFSET
	struct FRealtimeMoveSpeedCheck                     RealtimeMoveSpeedCheck;                                   // 0x04E0(0x0020) (Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FMoveCheatAntiStrategy6                     MoveCheatAntiStrategy6;                                   // 0x0500(0x0574) (Config, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0A74(0x0004) MISSED OFFSET
	float                                              MaxJumpHeight;                                            // 0x0A78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0A7C(0x0004) MISSED OFFSET
	class ACharacter*                                  CharacterOwner;                                           // 0x0A80(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData08[0x6C];                                      // 0x0A88(0x006C) MISSED OFFSET
	bool                                               IsOpenRTPunish;                                           // 0x0AF4(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0AF5(0x0007) MISSED OFFSET
	int                                                ServerControlMaxThreshold;                                // 0x0AFC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x10];                                      // 0x0B00(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MoveAntiCheatComponent");
		return pStaticClass;
	}


	void SendShovelDataToServer(const struct FShovelInfo& InShovelData);
	void RefreshRealMaxJumpHeight();
	void Ping2Server(float ServerTime, float ClientTime, const struct FVector_NetQuantize100& ClientLoc, float MaxSpeed);
	void Ping2Client(float ServerTime);
	void OnPreReconnectOnServer();
	bool K2_MoveSweepTest(const struct FVector& Start, const struct FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, float PadLength, bool bSweep, float SphereRadius, struct FHitResult* OutHit);
	void DebugDrawLine(const struct FVector& Start, const struct FVector& End);
	void ClearJumpLimit();
};


// Class ShadowTrackerExtra.MultiPickUpWrapperActor
// 0x0028 (0x03B8 - 0x0390)
class AMultiPickUpWrapperActor : public AActor
{
public:
	TArray<class UClass*>                              MultiPickUpWrapperConfigs;                                // 0x0390(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int                                                CoolDownTime;                                             // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xC];                                       // 0x03A4(0x000C) MISSED OFFSET
	class APickUpWrapperActor*                         SpawnedWrapper;                                           // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MultiPickUpWrapperActor");
		return pStaticClass;
	}


	void ResetWrapper();
	void OnWrapperPickedUp();
};


// Class ShadowTrackerExtra.MultipleBattleLogicManager
// 0x0050 (0x0160 - 0x0110)
class UMultipleBattleLogicManager : public UActorComponent
{
public:
	TMap<int, class AActor*>                           BattleDataMap;                                            // 0x0110(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MultipleBattleLogicManager");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.MyLandscape
// 0x0098 (0x0428 - 0x0390)
class AMyLandscape : public AActor
{
public:
	class URuntimeMeshComponent*                       Mesh;                                                     // 0x0390(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMyLandscapeGeometry*                        LandscapeGeometry;                                        // 0x0398(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterial*                                   LandscapeMat;                                             // 0x03A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x80];                                      // 0x03A8(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MyLandscape");
		return pStaticClass;
	}


	void GameEventReconnect();
	void GameEventFlying();
	void GameEventFighting();
	void AboutToSwitchViewTargetPlayer();
};


// Class ShadowTrackerExtra.MyLandscapeGeometry
// 0x00E8 (0x0118 - 0x0030)
class UMyLandscapeGeometry : public UDataAsset
{
public:
	TArray<struct FVector>                             Vertex;                                                   // 0x0030(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                             Normals;                                                  // 0x0040(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                           UV;                                                       // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        Indices;                                                  // 0x0060(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FIntPoint, int>                        ComponentIndexOffset;                                     // 0x0070(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                ComponentIndexCount;                                      // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ComponentVertexCount;                                     // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FString, struct FSubLevelComponentMapValue> SubLevelComponentMap;                                     // 0x00C8(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.MyLandscapeGeometry");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NavigatorPannelUAEUserWidget
// 0x0118 (0x04C0 - 0x03A8)
class UNavigatorPannelUAEUserWidget : public UUAEUserWidget
{
public:
	float                                              LandscapeRotation;                                        // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Offset;                                                   // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Width;                                                    // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    CompassMat;                                               // 0x03B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HalfPix;                                                  // 0x03C0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MapMarkPositionYInCompass;                                // 0x03C4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SafeZoneGuidePositionYInCompass;                          // 0x03C8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET
	struct FName                                       materialXParameterName;                                   // 0x03D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CPPNavigatorTickRate;                                     // 0x03D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MapRotateAngle;                                           // 0x03DC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03E0(0x0008) MISSED OFFSET
	int                                                DisplayCharRotation;                                      // 0x03E8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                CacheDisplayCharRotation;                                 // 0x03EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	TArray<struct FVector>                             MapMarkArray;                                             // 0x03F8(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                             TeamPlayerMarkerArray_Cpp;                                // 0x0408(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UTextBlock*>                          TeamPlayerMarkDistArray_Cpp;                              // 0x0418(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UInvalidationBox*                            PlayerMarker_Group;                                       // 0x0428(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                                  DirectionMarker_Dist;                                     // 0x0430(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                                CanvasPanel_SafeArea;                                     // 0x0438(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                                  TextBlock_BigTips;                                        // 0x0440(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateColor                                 NormalDirectionTextColor;                                 // 0x0448(0x0028) (Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                                 SpecifiedDirectionTextColor;                              // 0x0470(0x0028) (Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	int                                                NormalDirectionTextFontSize;                              // 0x0498(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                SpecifiedDirectionTextFontSize;                           // 0x049C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FText>                               DisplayRotToTextArray;                                    // 0x04A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x10];                                      // 0x04B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NavigatorPannelUAEUserWidget");
		return pStaticClass;
	}


	void UpdateSafeZoneGuideVisibilityAndPosition();
	void UpdateMapMarkVisibility();
	void UpdateMapMarkPosition();
	void UpdateForwardDirectionText();
	void SetCompassMat(class UMaterialInstanceDynamic* InCompassMat);
	void OnMapMarkChange_NoParam();
	void OnMapMarkChange(int MarkIndex);
	bool IsTextNotEqualTo(const struct FText& SelfValue, const struct FText& OtherText, bool ReverseResult);
	bool IsStrNotEqualToText(const struct FString& InValue, const struct FText& InText, bool ReverseResult);
	bool IsModToZero(int InValue, int ModValue);
	bool IsIntNotEqualToText(int InValue, const struct FText& InText, bool ReverseResult);
	struct FRotator GetPlayerLookRotation();
	void BindMapMarkChangeDelegate();
};


// Class ShadowTrackerExtra.NetMonitorComponent
// 0x0088 (0x0198 - 0x0110)
class UNetMonitorComponent : public UActorComponent
{
public:
	TArray<struct FNetProfileTimeBase>                 NetProfileTimeBase;                                       // 0x0110(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FNetProfileConditionBase>            NetProfileConditionBase;                                  // 0x0120(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FNetProfileMonitorBase>              NetProfileMonitorBase;                                    // 0x0130(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0140(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NetMonitorComponent");
		return pStaticClass;
	}


	void StartFlight();
};


// Class ShadowTrackerExtra.NetworkOnlineDriver
// 0x0000 (0x0390 - 0x0390)
class ANetworkOnlineDriver : public AActor
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NetworkOnlineDriver");
		return pStaticClass;
	}


	void SwitchPoseStateServer(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEPoseState> PoseState);
	void SwitchPoseStateClient(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEPoseState> PoseState);
	void ServerStopFire(class ASTExtraBaseCharacter* TargetCharacter, int CurrentBullet);
	void ServerStartFire(class ASTExtraBaseCharacter* TargetCharacter, class ASTExtraShootWeapon* TargetWeapon, const struct FStartFireInfo& InStartFireInfo);
	void ServerStartBarrel(class ASTExtraBaseCharacter* TargetCharacter);
	void ServerSetShootType(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEWeaponShootType> shootType);
	void ServerSetReloadMethod(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<EWeaponReloadMethod> reloadMethod);
	void ServerReplicateExplosionEffect(class UClass* Template, const struct FTransform& Trans, class AActor* ActorOwner, class APawn* InstigatorPawn, ESpawnActorCollisionHandlingMethod method);
	void BroadcastClientsSpawnExplosionEffect(class UClass* Template, const struct FTransform& Trans, class AActor* ActorOwner, class APawn* InstigatorPawn, ESpawnActorCollisionHandlingMethod method);
};


// Class ShadowTrackerExtra.STNewbieGuideConditionBase
// 0x0008 (0x0030 - 0x0028)
class USTNewbieGuideConditionBase : public UObject
{
public:
	TWeakObjectPtr<class AController>                  OwnerController;                                          // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STNewbieGuideConditionBase");
		return pStaticClass;
	}


	bool ReconnectRecover();
	bool IsOK();
};


// Class ShadowTrackerExtra.NewbieGuideComponent
// 0x0058 (0x0168 - 0x0110)
class UNewbieGuideComponent : public UActorComponent
{
public:
	int                                                CurTipsID;                                                // 0x0110(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsStartShowingGuide;                                      // 0x0114(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               OpenNewbieGuideSwitch;                                    // 0x0115(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0116(0x0002) MISSED OFFSET
	float                                              GuideInterval;                                            // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxGuideLevel;                                            // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNewbieGuideItem>                    items;                                                    // 0x0120(0x0010) (Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    OwnerController;                                          // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        FinishedTips;                                             // 0x0138(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        FinishedCounts;                                           // 0x0148(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0158(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NewbieGuideComponent");
		return pStaticClass;
	}


	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);
	void InitComponent(class ASTExtraPlayerController* _OwnerController, TArray<int> _FinishedTips, TArray<int> _FinishedCounts, TEnumAsByte<ENewbieGuidePlayerCategory> curPlayerCategory, int PlayerLevel);
};


// Class ShadowTrackerExtra.NewbieGuideWidget
// 0x0000 (0x03A8 - 0x03A8)
class UNewbieGuideWidget : public UUAEUserWidget
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NewbieGuideWidget");
		return pStaticClass;
	}


	void OnRemove();
	void OnCreateAndShow(int guideID, int UIConfigIndex);
};


// Class ShadowTrackerExtra.NewFakePlayerAIController
// 0x0100 (0x0918 - 0x0818)
class ANewFakePlayerAIController : public AFakePlayerAIController
{
public:
	unsigned char                                      UnknownData00[0x8C];                                      // 0x0818(0x008C) MISSED OFFSET
	int                                                CanEquipGrenadeNum;                                       // 0x08A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                nowEquipGrenadeNum;                                       // 0x08A8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CanhaveMedicalCapacity;                                   // 0x08AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              nowMedicalCapacity;                                       // 0x08B0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxWeaponAIFullVaule;                                     // 0x08B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NowWeaponFullVaue;                                        // 0x08B8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxEquipWeaponFullVaue;                                   // 0x08BC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        nowWeaponList;                                            // 0x08C0(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                CanHaveWeaponPartsVaules;                                 // 0x08D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NowWeaponPartsVaules;                                     // 0x08D4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               isHasMeleeWeapon;                                         // 0x08D8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x08D9(0x0003) MISSED OFFSET
	int                                                MaxEquipAIFullVaule;                                      // 0x08DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BackPackFullVaule;                                        // 0x08E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                HeadFullVaule;                                            // 0x08E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BodyFullVaule;                                            // 0x08E8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Bullet9Num;                                               // 0x08EC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Bullet7PointNum;                                          // 0x08F0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Bullet5PointNum;                                          // 0x08F4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BulletPoint12Num;                                         // 0x08F8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BulletPoint45Num;                                         // 0x08FC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BulletPoint300Num;                                        // 0x0900(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ArrowNum;                                                 // 0x0904(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AutoOpenDoorRange;                                        // 0x0908(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0xC];                                       // 0x090C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NewFakePlayerAIController");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NewPathFollowingComponent
// 0x0028 (0x0328 - 0x0300)
class UNewPathFollowingComponent : public UPathFollowingComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0300(0x0008) MISSED OFFSET
	float                                              maxCheckDis;                                              // 0x0308(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              maxCheckDisTime;                                          // 0x030C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0310(0x0004) MISSED OFFSET
	bool                                               isUseFixedPos;                                            // 0x0314(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0315(0x0003) MISSED OFFSET
	float                                              PlayerHalfHeight;                                         // 0x0318(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlayerNewHalfHeight;                                      // 0x031C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxTransferDis;                                           // 0x0320(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0324(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NewPathFollowingComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsElapseXsAfterJump
// 0x0008 (0x0038 - 0x0030)
class UNGCondition_IsElapseXsAfterJump : public USTNewbieGuideConditionBase
{
public:
	float                                              ActiveTime;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsElapseXsAfterJump");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsHoldingGrenade
// 0x0008 (0x0038 - 0x0030)
class UNGCondition_IsHoldingGrenade : public USTNewbieGuideConditionBase
{
public:
	TEnumAsByte<ESurviveWeaponPropSlot>                CheckSlotType;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsHoldingGrenade");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsHoldingGun
// 0x0000 (0x0030 - 0x0030)
class UNGCondition_IsHoldingGun : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsHoldingGun");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsInZombieMode
// 0x0000 (0x0030 - 0x0030)
class UNGCondition_IsInZombieMode : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsInZombieMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NightVisionComponent
// 0x00A0 (0x07C0 - 0x0720)
class UNightVisionComponent : public UStaticMeshComponent
{
public:
	struct FTransform                                  TPPRelativeTransform;                                     // 0x0720(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  FPPRelativeTransform;                                     // 0x0750(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0780(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NightVisionComponent");
		return pStaticClass;
	}


	void SetActivate(bool _IsActivate);
};


// Class ShadowTrackerExtra.NoBulletWeaponState
// 0x0000 (0x01B0 - 0x01B0)
class UNoBulletWeaponState : public UWeaponStateBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NoBulletWeaponState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraShootWeaponComponent
// 0x0228 (0x0360 - 0x0138)
class USTExtraShootWeaponComponent : public UWeaponLogicBaseComponent
{
public:
	struct FName                                       NormalBulletsTrackCompTag;                                // 0x0138(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ScopeBulletsTrackCompTag;                                 // 0x0140(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawShootLine;                                           // 0x0148(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0149(0x0003) MISSED OFFSET
	float                                              DrawShootLineTime;                                        // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawShootPointOnScreen;                                  // 0x0150(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0151(0x0003) MISSED OFFSET
	float                                              DrawShootPointOnScreenTime;                               // 0x0154(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DrawShootPointOnScreenSize;                               // 0x0158(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DrawShootPoint3DSize;                                     // 0x015C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBulletTrackComponent*                       ShootWeaponBulletsTrackComponent;                         // 0x0160(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBulletTrackComponent*                       ShootWeaponScopeBulletsTrackComponent;                    // 0x0168(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UShootWeaponEntity*                          ShootWeaponEntityComponent;                               // 0x0170(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsContinuousShooting;                                    // 0x0178(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0179(0x0003) MISSED OFFSET
	int                                                ContinuousShootingBulletsNum;                             // 0x017C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnShoot;                                                  // 0x0180(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x1C8];                                     // 0x0198(0x01C8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraShootWeaponComponent");
		return pStaticClass;
	}


	void VehicleShoot();
	void ShootDelegate__DelegateSignature();
	void ReInitWeaponOwnerData();
	void OnWeaponClipMaxBulletChanged();
	void OnWeaponBulletChanged();
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);
	void GetBulletPosAndVelocity(struct FVector* StartPos, struct FVector* Velocity);
	bool CheckShootState();
	struct FVector CalcShootTargetLocByStartAndRot(const struct FVector& Start, const struct FRotator& ShootRot, struct FHitResult* OutHitResult);
};


// Class ShadowTrackerExtra.STEShootWeaponProjectComponent
// 0x0010 (0x0370 - 0x0360)
class USTEShootWeaponProjectComponent : public USTExtraShootWeaponComponent
{
public:
	TArray<class AActor*>                              BulletCacheList;                                          // 0x0360(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STEShootWeaponProjectComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NormalProjectileComponent
// 0x0100 (0x0470 - 0x0370)
class UNormalProjectileComponent : public USTEShootWeaponProjectComponent
{
public:
	float                                              AutoRecoverShootLockInterval;                             // 0x0370(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNormalProjectileVerifyConfig               VerifyConfig;                                             // 0x0374(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnHandleShootDamageDelegate;                              // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03B0(0x0004) MISSED OFFSET
	int                                                LastShootTime;                                            // 0x03B4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0xB8];                                      // 0x03B8(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NormalProjectileComponent");
		return pStaticClass;
	}


	void OnHandleShootDamageDelegate__DelegateSignature(class UNormalProjectileComponent* NormalProjectileComponent);
	bool CheckShootState();
};


// Class ShadowTrackerExtra.OBEffectBullet
// 0x0060 (0x03F0 - 0x0390)
class AOBEffectBullet : public AActor
{
public:
	float                                              MaxMovingTime;                                            // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnOBEffectBulletMoveEnd;                                  // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03A8(0x0008) MISSED OFFSET
	class UParticleSystem*                             CurFXTemplate;                                            // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x28];                                      // 0x03B8(0x0028) MISSED OFFSET
	float                                              CurMovingTime;                                            // 0x03E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0xC];                                       // 0x03E4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.OBEffectBullet");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.OBHttpComponent
// 0x0020 (0x0130 - 0x0110)
class UOBHttpComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0110(0x0010) MISSED OFFSET
	int                                                Port;                                                     // 0x0120(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                MaxFailedTimes;                                           // 0x0124(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0128(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.OBHttpComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.OBModeAirDropWidget
// 0x0068 (0x0410 - 0x03A8)
class UOBModeAirDropWidget : public UUAEUserWidget
{
public:
	class UCanvasPanelSlot*                            OBCanvasPanelSlot;                                        // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                                OBPanel;                                                  // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AAirDropBoxActor*                            CachedAirDrop;                                            // 0x03B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector4                                    Limit;                                                    // 0x03C0(0x0010) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                heightPlus;                                               // 0x03D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                rightPlus;                                                // 0x03D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   UIOffset;                                                 // 0x03D8(0x0008) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     LocOffset;                                                // 0x03E0(0x000C) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x03EC(0x001C) MISSED OFFSET
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.OBModeAirDropWidget");
		return pStaticClass;
	}


	void SetAirDrop(class AAirDropBoxActor* DropBox);
	void OnItemClicked();
};


// Class ShadowTrackerExtra.OBModePositionWidget
// 0x0168 (0x0510 - 0x03A8)
class UOBModePositionWidget : public UUAEUserWidget
{
public:
	class UCanvasPanelSlot*                            OBCanvasPanelSlot;                                        // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                                OBPanel;                                                  // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraBaseCharacter*                       CachedCharacter;                                          // 0x03B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraPlayerState*                         CachedPlayerState;                                        // 0x03C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPlayerInfoInOB                             CachedPlayerInfo;                                         // 0x03C8(0x00E0) (BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04A8(0x0008) MISSED OFFSET
	struct FVector4                                    Limit;                                                    // 0x04B0(0x0010) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                heightPlus;                                               // 0x04C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                rightPlus;                                                // 0x04C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   UIOffset;                                                 // 0x04C8(0x0008) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     LocOffset;                                                // 0x04D0(0x000C) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CachedHealth;                                             // 0x04DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CachedBreathPercent;                                      // 0x04E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x04E4(0x001C) MISSED OFFSET
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0500(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0508(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.OBModePositionWidget");
		return pStaticClass;
	}


	void SetPlayerCharacter(class ASTExtraPlayerController* Controller, int idx);
	void RefreshPlayerHealth(float hpRatio, float breathRatio, bool IsNearDeath);
	void OnItemClicked();
	void DisplayFinalDamage(float FinalDamage, int AttackerTeamID);
};


// Class ShadowTrackerExtra.ObserverCameraComponent
// 0x00A0 (0x08E0 - 0x0840)
class UObserverCameraComponent : public UCameraComponent
{
public:
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0840(0x001C) MISSED OFFSET
	float                                              FreeCameraOffsetRadius;                                   // 0x085C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TEnumAsByte<ESTEPoseState>, float>            FreeCameraOffsetRadiusMap;                                // 0x0860(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               DrawDebugGraphics;                                        // 0x08B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x08B1(0x0003) MISSED OFFSET
	struct FVector                                     DrawDebugGraphicsOffset;                                  // 0x08B4(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProbeRadius;                                              // 0x08C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpecialStatePitchLimitMin;                                // 0x08C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpecialStatePitchLimitMax;                                // 0x08C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultFieldOfView;                                       // 0x08CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WeaponOffsetDistance;                                     // 0x08D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0xC];                                       // 0x08D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ObserverCameraComponent");
		return pStaticClass;
	}


	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
};


// Class ShadowTrackerExtra.ObservingReplay
// 0x0058 (0x0188 - 0x0130)
class UObservingReplay : public UGameReplay
{
public:
	struct FScriptMulticastDelegate                    OnRequestStreamsComplete;                                 // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0140(0x0038) MISSED OFFSET
	struct FString                                     ReplayServerURL;                                          // 0x0178(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ObservingReplay");
		return pStaticClass;
	}


	void RequestReplaysFromServer(const struct FString& URLString);
	void ClearStreams();
};


// Class ShadowTrackerExtra.OnTimeSpawnChallengeLevelRules
// 0x0010 (0x0040 - 0x0030)
class UOnTimeSpawnChallengeLevelRules : public UChallengeLevelRules
{
public:
	TArray<class ATriggerItem_TriggerClock*>           TriggerClockArray;                                        // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.OnTimeSpawnChallengeLevelRules");
		return pStaticClass;
	}


	void SpawnLevelDirector(class UClass* LevelDirectorClass);
	void OnReceiveTriggerMsg(class UTriggerAction* TriggerAction, const struct FString& Msg);
	void InitLevel();
};


// Class ShadowTrackerExtra.ParachuteAnimInstanceBase
// 0x0040 (0x0400 - 0x03C0)
class UParachuteAnimInstanceBase : public UAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03C0(0x0008) MISSED OFFSET
	float                                              MaxSimulatePhysicDist;                                    // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MoveDirParachuteLerpSpeed;                                // 0x03CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       DynamicParamName;                                         // 0x03D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DynamicMatPassTotalTime;                                  // 0x03D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayClearTime;                                           // 0x03DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x03E0(0x0010) MISSED OFFSET
	class ASTExtraPlayerCharacter*                     OwnerPlayer;                                              // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ParachuteAnimInstanceBase");
		return pStaticClass;
	}


	bool IsNearTheLocalMainChar();
	void HandleParachuteStateChanged();
};


// Class ShadowTrackerExtra.ParachuteFollowComponent
// 0x0000 (0x0110 - 0x0110)
class UParachuteFollowComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ParachuteFollowComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ParachutingWidget
// 0x00A8 (0x0450 - 0x03A8)
class UParachutingWidget : public UUAEUserWidget
{
public:
	float                                              AirborneAltitude;                                         // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AltitudeBarLength;                                        // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ParachuteBarLength;                                       // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AltitudeBarYPosition;                                     // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HeightAndSpeedBoxXPosition;                               // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	struct FString                                     SpeedText;                                                // 0x03C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                              HeightAndSpeedBox;                                        // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                            HeightAndSpeedBoxPanelSlot;                               // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                      ParachuteBarImage;                                        // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                      HeightBarImage;                                           // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                                  AirbornePawn;                                             // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    AirborneController;                                       // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   HeightAndSpeedBoxPosition;                                // 0x0400(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                            ParachuteBarCanvasSlot;                                   // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                            HeightBarCanvasSlot;                                      // 0x0410(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSpeedValueChangeDelegate;                               // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bUseAccelerationUpdating;                                 // 0x0428(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0429(0x0003) MISSED OFFSET
	float                                              UpdateAccleratingThreshold;                               // 0x042C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CalAcceleratingPeriod;                                    // 0x0430(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseMultiFramePastUpdate;                                 // 0x0434(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0435(0x0003) MISSED OFFSET
	int                                                UpdateSpeedTextFrameThreshold;                            // 0x0438(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x14];                                      // 0x043C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ParachutingWidget");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PartHitComponent
// 0x0110 (0x0220 - 0x0110)
class UPartHitComponent : public UActorComponent
{
public:
	class ASTExtraCharacter*                           OwnerCharacter;                                           // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UpdateHitBoxDeltaTime;                                    // 0x0118(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bActivePartHit;                                           // 0x011C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOptimizeBulletCache;                                     // 0x011D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bBoxCollionOptimize;                                      // 0x011E(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x011F(0x0001) MISSED OFFSET
	TArray<struct FTransform>                          HitBoxs_Stand_Tran;                                       // 0x0120(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                          HitBoxs_Prone_Tran;                                       // 0x0130(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>                 HitBoxs_Stand;                                            // 0x0140(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>                 HitBoxs_Prone;                                            // 0x0150(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<EHitPartJugementType>                  ClientHitPartJudgment;                                    // 0x0160(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EHitPartJugementType>                  DSHitPartJudgment;                                        // 0x0161(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0162(0x0006) MISSED OFFSET
	struct FString                                     HitBox_Stand_Tag;                                         // 0x0168(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     HitBox_Prone_Tag;                                         // 0x0178(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Server_HitBox_Stand_HalfHeight;                           // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Server_HitBox_Stand_Radius;                               // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Server_HitBox_Prone_HalfHeight;                           // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Server_HitBox_Prone_Radius;                               // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                ProneBodyDef;                                             // 0x0198(0x0008) (NoDestructor, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                StandBodyDef;                                             // 0x01A0(0x0008) (NoDestructor, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                CrouchBodyDef;                                            // 0x01A8(0x0008) (NoDestructor, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                DyingBodyDef;                                             // 0x01B0(0x0008) (NoDestructor, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                VechicleBodyDef;                                          // 0x01B8(0x0008) (NoDestructor, NativeAccessSpecifierPublic)
	TMap<struct FString, EAvatarDamagePosition>        NewHitBodyPosMap;                                         // 0x01C0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              PawnCollisionCountdown;                                   // 0x0210(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsRefreshPawnCollision;                                   // 0x0214(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0215(0x0003) MISSED OFFSET
	float                                              BoxCollisionCountdown;                                    // 0x0218(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsRefreshBoxCollision;                                    // 0x021C(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x021D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PartHitComponent");
		return pStaticClass;
	}


	void UpdatePoseCollisionShapes(TEnumAsByte<ECharacterPoseType> PoseState);
	void UpdateAllInstanceBodyTransform(int Type);
	void InitBodyBoneMap(TEnumAsByte<ECharacterPoseType> PoseState);
	class UPrimitiveComponent* GetHitBoxByState(EPawnState InPoseState);
	EAvatarDamagePosition GetHitBodyTypeByHitPos(const struct FVector& InHitPos);
	EAvatarDamagePosition GetHitBodyTypeByBoneName(const struct FString& InBoneName);
	EAvatarDamagePosition GetHitBodyType(const struct FVector& InHitPos, const struct FVector& InImpactVec, const struct FString& InBoneName);
	TEnumAsByte<EHitPartJugementType> GetCurHitPartJugementType();
	void CloseBodyBulletCollision();
	EAvatarDamagePosition CalcHitBodyType(const struct FVector& HitPos, const struct FVector& Projvec, const struct FVector& CenterPos, const struct FBodyTypeDef& bodyDef);
};


// Class ShadowTrackerExtra.PartHitPlayerComponent
// 0x0008 (0x0228 - 0x0220)
class UPartHitPlayerComponent : public UPartHitComponent
{
public:
	class ASTExtraBaseCharacter*                       ownerBaseCharacter;                                       // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PartHitPlayerComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PartHitZombieComponent
// 0x0020 (0x0240 - 0x0220)
class UPartHitZombieComponent : public UPartHitComponent
{
public:
	class ASTExtraSimpleCharacter*                     ownerSimpleCharacter;                                     // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                             HitBoxComponent;                                          // 0x0228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       HitBoxComponentTag;                                       // 0x0230(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugDrawHitPos;                                         // 0x0238(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0239(0x0003) MISSED OFFSET
	float                                              DebugDrawHitPosTime;                                      // 0x023C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PartHitZombieComponent");
		return pStaticClass;
	}


	class USceneComponent* GetHitBoxComponent();
	EAvatarDamagePosition GetHitBodyTypeByHitPos(const struct FVector& InHitPos);
	EAvatarDamagePosition GetHitBodyType(const struct FVector& InHitPos, const struct FVector& InImpactVec, const struct FString& InBoneName);
	EAvatarDamagePosition CalcHitBodyType(const struct FVector& HitPos, const struct FVector& Projvec, const struct FVector& CenterPos, const struct FBodyTypeDef& bodyDef);
};


// Class ShadowTrackerExtra.ParticleCacheMgr
// 0x0068 (0x03F8 - 0x0390)
class AParticleCacheMgr : public AActor
{
public:
	TArray<struct FParticleCacheConfig>                ParticleConfig;                                           // 0x0390(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FParticlePool>           ObjectPools;                                              // 0x03A0(0x0050) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ParticleCacheMgr");
		return pStaticClass;
	}


	float GetParticleCullingDistance(const struct FParticleCacheConfig& InConfig);
	int GetParticleCountLimit(const struct FParticleCacheConfig& InConfig);
	unsigned char GetParticleConfig(const struct FName& InName, struct FParticleCacheConfig* OutConfig);
	int GetDeviceLevel();
	TEnumAsByte<ECreateType> GetCreateType(const struct FName& ParticleName, float* CullingDistance);
	class UParticleSystemComponent* CreateNewParticleAttach(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy);
	class UParticleSystemComponent* CreateNewParticleAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy);
	bool AddToPool(const struct FName& InName, class UParticleSystemComponent* Target);
};


// Class ShadowTrackerExtra.ParticleSystemLoaderComponent
// 0x0140 (0x0400 - 0x02C0)
class UParticleSystemLoaderComponent : public USceneComponent
{
public:
	struct FVector                                     LocationOffset;                                           // 0x02C0(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RotationOffset;                                           // 0x02CC(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ScaleOffset;                                              // 0x02D8(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableInLowLevelDevice;                                   // 0x02E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02E5(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x02E5(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.ParticleSystemLoaderComponent.ParticleSystemPtr
	class UParticleSystemComponent*                    LoadedComponent;                                          // 0x0310(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0xE8];                                      // 0x0318(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ParticleSystemLoaderComponent");
		return pStaticClass;
	}


	class UParticleSystemComponent* GetLoadedComponent();
};


// Class ShadowTrackerExtra.PawnPositionWidget
// 0x0048 (0x03F0 - 0x03A8)
class UPawnPositionWidget : public UUAEUserWidget
{
public:
	class ASTExtraBaseCharacter*                       SavePlayerCharacter;                                      // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                            CanvasPanel;                                              // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	struct FVector4                                    Limit;                                                    // 0x03C0(0x0010) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                heightPlus;                                               // 0x03D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   UIOffset;                                                 // 0x03D4(0x0008) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     LocOffset;                                                // 0x03DC(0x000C) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PawnPositionWidget");
		return pStaticClass;
	}


	void SetSavedCharacter(class ASTExtraBaseCharacter* MyCharacter);
};


// Class ShadowTrackerExtra.PetAvatarComponent
// 0x0000 (0x0648 - 0x0648)
class UPetAvatarComponent : public USlotViewAvatarComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetAvatarComponent");
		return pStaticClass;
	}


	void InitMasterComponent();
	void Initialize();
	void InitialAvatarParam();
};


// Class ShadowTrackerExtra.PetAvatarHandle
// 0x01B8 (0x0268 - 0x00B0)
class UPetAvatarHandle : public UAvatarHandleBase
{
public:
	EPetSlotType                                       slotType;                                                 // 0x00B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	struct FPetMeshPackage                             MeshPackage;                                              // 0x00B8(0x00D8) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPetMeshPackage                             ReplaceMeshPackage;                                       // 0x0190(0x00D8) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetAvatarHandle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetBTDecorator_PetHasState
// 0x0018 (0x0078 - 0x0060)
class UPetBTDecorator_PetHasState : public UBTDecorator
{
public:
	TArray<TEnumAsByte<EPetState>>                     PetStates;                                                // 0x0060(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bMatchAllStates;                                          // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetBTDecorator_PetHasState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetBTDecorator_PetOwnerFallingTime
// 0x0000 (0x0060 - 0x0060)
class UPetBTDecorator_PetOwnerFallingTime : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetBTDecorator_PetOwnerFallingTime");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetBTDecorator_PetOwnerHasState
// 0x0018 (0x0078 - 0x0060)
class UPetBTDecorator_PetOwnerHasState : public UBTDecorator
{
public:
	TArray<EPawnState>                                 PetOwnerStates;                                           // 0x0060(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bMatchAllStates;                                          // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetBTDecorator_PetOwnerHasState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetBTService_PetLocation
// 0x0000 (0x0068 - 0x0068)
class UPetBTService_PetLocation : public UBTService
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetBTService_PetLocation");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetBTService_PetPerceiveAirAttack
// 0x0000 (0x0068 - 0x0068)
class UPetBTService_PetPerceiveAirAttack : public UBTService
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetBTService_PetPerceiveAirAttack");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetBTTask_PetFalling
// 0x0010 (0x0080 - 0x0070)
class UPetBTTask_PetFalling : public UBTTaskNode
{
public:
	class ASTExtraBaseCharacter*                       PetOwner;                                                 // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              FallingTime;                                              // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetBTTask_PetFalling");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetBTTask_PetMoveTo
// 0x0000 (0x00B0 - 0x00B0)
class UPetBTTask_PetMoveTo : public UBTTask_MoveTo
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetBTTask_PetMoveTo");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetBTTask_TriggerEvent
// 0x0000 (0x0070 - 0x0070)
class UPetBTTask_TriggerEvent : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetBTTask_TriggerEvent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetWaitEventInfo
// 0x0008 (0x0030 - 0x0028)
class UPetWaitEventInfo : public UObject
{
public:
	TEnumAsByte<EPetEventType>                         EventType;                                                // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              EventMaxWaitTime;                                         // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetWaitEventInfo");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetPawnStateEventInfo
// 0x0008 (0x0038 - 0x0030)
class UPetPawnStateEventInfo : public UPetWaitEventInfo
{
public:
	EPawnState                                         PawnState;                                                // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EPawnStateChangeType>                  StateChangeType;                                          // 0x0031(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0032(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetPawnStateEventInfo");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetEmotionEventInfo
// 0x0008 (0x0038 - 0x0030)
class UPetEmotionEventInfo : public UPetWaitEventInfo
{
public:
	int                                                EmotionId;                                                // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetEmotionEventInfo");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetPlayerEmotionEventInfo
// 0x0008 (0x0038 - 0x0030)
class UPetPlayerEmotionEventInfo : public UPetWaitEventInfo
{
public:
	int                                                PlayerEmotionId;                                          // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetPlayerEmotionEventInfo");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PetEntityComponent
// 0x00C0 (0x01D0 - 0x0110)
class UPetEntityComponent : public UActorComponent
{
public:
	class ASTExtraPetCharacter*                        PetCharacter;                                             // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPetAttachInfo                              AttachInfo;                                               // 0x0118(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPetAttachInfo                              FollowAttachInfo;                                         // 0x0138(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPetAttachInfo                              FlyAroundAttachInfo;                                      // 0x0158(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPetAttachInfo                              CurAttachInfo;                                            // 0x0178(0x0020) (BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FFixPetAttachInfo>                   FixAttachInfoList;                                        // 0x0198(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TEnumAsByte<EPetFollowOwnerType>                   FollowType;                                               // 0x01A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01A9(0x0007) MISSED OFFSET
	TArray<int>                                        ParachuteEquipItems;                                      // 0x01B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EPawnState>                                 PredictOwnerStates;                                       // 0x01C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetEntityComponent");
		return pStaticClass;
	}


	void UpdateAttachInfoList(bool bAdd, const struct FFixPetAttachInfo& Info);
	void OnPetStateChanged(TEnumAsByte<EPetState> State, bool IsEnter);
	class ASTExtraPetCharacter* GetPetCharacter();
	struct FPetAttachInfo GetCurrentAttachInfo();
	struct FPetAttachInfo GetAttachInfoFromTable(const struct FFixPetAttachInfo& Info);
};


// Class ShadowTrackerExtra.PetEventItem
// 0x0088 (0x00B0 - 0x0028)
class UPetEventItem : public UObject
{
public:
	TEnumAsByte<EPetEventType>                         EventType;                                                // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	int                                                EventPriority;                                            // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EventExecTime;                                            // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EventMaxWaitTime;                                         // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               NotEnterWaitList;                                         // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EPetState>                             EnterPetState;                                            // 0x0039(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EPetState>                             LeavePetState;                                            // 0x003A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x5];                                       // 0x003B(0x0005) MISSED OFFSET
	class UBehaviorTree*                               BehaviorTree;                                             // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AnimationAssetId;                                         // 0x0048(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	TArray<struct FPetMontageConfig>                   MontageList;                                              // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	TArray<struct FPetMontageConfig>                   UnlockMontageList;                                        // 0x0060(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPetMontageConfig>                   RealPlayMontageList;                                      // 0x0070(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bIgnoreUnlock;                                            // 0x0080(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanInterrupt;                                            // 0x0081(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0082(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPetEventStartDelegate;                                  // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPetEventEndDelegate;                                    // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ASTExtraPetCharacter*                        PetCharacter;                                             // 0x00A8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetEventItem");
		return pStaticClass;
	}


	void UpdateCanPlayMontageList();
	void SelectRandomMontage();
	void OnEventStart(class ASTExtraPetCharacter* Pet);
	void OnEventEnd();
	bool IsSameEvent(class UPetWaitEventInfo* WaitEvent);
};


// Class ShadowTrackerExtra.PetEmotionEventItem
// 0x0008 (0x00B8 - 0x00B0)
class UPetEmotionEventItem : public UPetEventItem
{
public:
	int                                                EmotionId;                                                // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetEmotionEventItem");
		return pStaticClass;
	}


	void OnEventStart(class ASTExtraPetCharacter* Pet);
	void OnEventEnd();
	bool IsSameEvent(class UPetWaitEventInfo* WaitEvent);
};


// Class ShadowTrackerExtra.PlayerStateEventItem
// 0x0010 (0x00C0 - 0x00B0)
class UPlayerStateEventItem : public UPetEventItem
{
public:
	TArray<struct FPetEventPlayerStateTypeSt>          StateChangeTypes;                                         // 0x00B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlayerStateEventItem");
		return pStaticClass;
	}


	void OnEventStart(class ASTExtraPetCharacter* Pet);
	void OnEventEnd();
	bool IsSameEvent(class UPetWaitEventInfo* WaitEvent);
};


// Class ShadowTrackerExtra.RandomMontageEventItem
// 0x0000 (0x00B0 - 0x00B0)
class URandomMontageEventItem : public UPetEventItem
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.RandomMontageEventItem");
		return pStaticClass;
	}


	void OnEventStart(class ASTExtraPetCharacter* Pet);
};


// Class ShadowTrackerExtra.PetPlayerEmotionEventItem
// 0x0010 (0x00C0 - 0x00B0)
class UPetPlayerEmotionEventItem : public UPetEventItem
{
public:
	TArray<int>                                        PlayerEmotionIds;                                         // 0x00B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetPlayerEmotionEventItem");
		return pStaticClass;
	}


	bool IsSameEvent(class UPetWaitEventInfo* WaitEvent);
};


// Class ShadowTrackerExtra.PetEventManagerComponent
// 0x0080 (0x0190 - 0x0110)
class UPetEventManagerComponent : public UActorComponent
{
public:
	TArray<class UPetWaitEventInfo*>                   WaitEventList;                                            // 0x0110(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FPetEventItemIns>                    EventConfigs;                                             // 0x0120(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UBehaviorTree*                               DefaultBT;                                                // 0x0130(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                               CurrentBT;                                                // 0x0138(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPetController*                       PetController;                                            // 0x0140(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPetCharacter*                        PetCharacter;                                             // 0x0148(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPetEventItem*                               CurExecuteEvent;                                          // 0x0150(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxWaitEventNum;                                          // 0x0158(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x015C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPetEventDelegate;                                       // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0170(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PetEventManagerComponent");
		return pStaticClass;
	}


	void TriggerPetEvent(class UPetWaitEventInfo* Event);
	void StartEventExecTimer(float ExecTime);
	void ProcessWaitEvent(float Delta);
	bool GetPredictPetOwnerState(const struct FPetEventPlayerStateTypeSt& StateSt, TEnumAsByte<EPetState>* Enter, TEnumAsByte<EPetState>* Leave);
	class UPetEventItem* GetEventItem(class UPetWaitEventInfo* EventInfo);
	void EnqueueWaitEvent(class UPetWaitEventInfo* Info);
	void DequeueWaitEvent(bool bNeedExec);
	bool CheckCanInterruptCurEvent(class UPetEventItem* NextEventItem);
	bool CanResponseEvent();
};


// Class ShadowTrackerExtra.PickupInterface
// 0x0000 (0x0028 - 0x0028)
class UPickupInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PickupInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PickupManagerComponent
// 0x00A0 (0x01B0 - 0x0110)
class UPickupManagerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	float                                              CheckPickUpInterval;                                      // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PickUpZLimit;                                             // 0x011C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bApplyVisibleTrace;                                       // 0x0120(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0121(0x0007) MISSED OFFSET
	TArray<struct FVector2D>                           FindPutDownPointSearchRadiusGroupArray;                   // 0x0128(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int                                                FindPutDownPointCircleSplitNum;                           // 0x0138(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FindPutDownPointZThreshold;                               // 0x013C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FindPutDownPointZTraceOffset;                             // 0x0140(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   RegionXRange;                                             // 0x0144(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   RegionYRange;                                             // 0x014C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawDebugSearchLine;                                     // 0x0154(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawDebugSearchedPutDownPointsSphere;                    // 0x0155(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0156(0x0002) MISSED OFFSET
	struct FVector                                     DebugSearchedPutDownPointsBoxExtent;                      // 0x0158(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DebugSearchedPutDownPointsSphereRadius;                   // 0x0164(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DebugSearchedPutDownPointsPointSize;                      // 0x0168(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DrawTime;                                                 // 0x016C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugGetLocWithOutClamp;                                 // 0x0170(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0171(0x0007) MISSED OFFSET
	class AActor*                                      CacheRepActorForGetRandomLoc;                             // 0x0178(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AActor>>               PickupAvailableActorPool;                                 // 0x0180(0x0010) (ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class AActor*>                              ConfirmedPickupActorPool;                                 // 0x0190(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x10];                                      // 0x01A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PickupManagerComponent");
		return pStaticClass;
	}


	void ServerPutDownTargetWithLocation(class AActor* Target, const struct FVector& Loc);
	void ServerPutDownTarget(class AActor* Target);
	void ServerPickUpTarget(class AActor* Target, int AdditionalParam, int pickCount);
	void PutDownTargetWithLocation(class AActor* Target, const struct FVector& Loc);
	void PutDownTarget(class AActor* Target);
	void PickUpTarget(class AActor* Target, int AdditionalParam, int pickCount);
	void NotifyMissPickupAvailableActor(class AActor* Target);
	void NotifyMeetPickupAvailableActor(class AActor* Target);
	struct FVector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold, bool* IsHittedAttachableActor);
	void GetConfirmedPickupAvailableActors();
	class AActor* GetAttachableActor(const struct FVector& Loc);
	void ControlClientPutDownTargetWithLocation(class AActor* Target, const struct FVector& Loc);
	void ControlClientPutDownTarget(class AActor* Target);
	void ControlClientPickUpTarget(class AActor* Target, int AdditionalParam);
	void ClampWorldLocation(struct FVector* OutVector);
};


// Class ShadowTrackerExtra.PickUpPropContainerComponent
// 0x0010 (0x0120 - 0x0110)
class UPickUpPropContainerComponent : public UActorComponent
{
public:
	TArray<class AActor*>                              InventoryData;                                            // 0x0110(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PickUpPropContainerComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PickupProxyFactory
// 0x0000 (0x0028 - 0x0028)
class UPickupProxyFactory : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PickupProxyFactory");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PickupWrapperManagerComponent
// 0x0038 (0x0148 - 0x0110)
class UPickupWrapperManagerComponent : public UActorComponent
{
public:
	TArray<struct FPickupCountLimit>                   CountLimitConfig;                                         // 0x0110(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPickupCountLimit>                   CountLimitConfigInIOS;                                    // 0x0120(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class APickUpWrapperActor>>  PickupWrapperList;                                        // 0x0130(0x0010) (ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int                                                MaxEffectCount;                                           // 0x0140(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              TimeOutSecond;                                            // 0x0144(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PickupWrapperManagerComponent");
		return pStaticClass;
	}


	int GetEffectCount();
};


// Class ShadowTrackerExtra.PlaneAvatarComponent
// 0x0120 (0x0288 - 0x0168)
class UPlaneAvatarComponent : public UAvatarComponentBase
{
public:
	struct FItemDefineID                               DefaultPlaneCfg;                                          // 0x0168(0x0018) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    PlaneAvatarEqiuped;                                       // 0x0180(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMeshComponent*                              PlaneBodyMesh;                                            // 0x0190(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FItemDefineID                               synData;                                                  // 0x0198(0x0018) (Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0xD0];                                      // 0x01B0(0x00D0) MISSED OFFSET
	class UBackpackPlaneAvatarHandle*                  PlaneAvatarHandle;                                        // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlaneAvatarComponent");
		return pStaticClass;
	}


	void PreChangePlaneAvatar(int InItemID);
	void PostChangePlaneAvatar();
	void OnRep_PlaneAvatarChanged();
	class UObject* GetSoftRefObj(struct FSoftObjectPath* AssetRef);
	class UBackpackPlaneAvatarHandle* GetPlaneAvatarHandle(int ItemID);
	class UMaterialInterface* GetDynamicMaterial(class UMaterialInstance* MatInstance);
};


// Class ShadowTrackerExtra.PlaneCharacter
// 0x01A0 (0x0970 - 0x07D0)
class APlaneCharacter : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0xD8];                                      // 0x07D0(0x00D8) MISSED OFFSET
	class UTexture2D*                                  BannerTexture;                                            // 0x08A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFrontendHUD*                                FrontendHUD;                                              // 0x08B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x28];                                      // 0x08B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.PlaneCharacter.BannerSkeletalMesh
	unsigned char                                      UnknownData02[0x28];                                      // 0x08E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.PlaneCharacter.BannerAnim
	unsigned char                                      UnknownData03[0x28];                                      // 0x0908(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.PlaneCharacter.BannerStaticMesh
	class USkeletalMeshComponent*                      BannerComp;                                               // 0x0930(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                        BannerStaticComp;                                         // 0x0938(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    DynamicMaterial;                                          // 0x0940(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnablePlaneBanner;                                       // 0x0948(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0949(0x0007) MISSED OFFSET
	struct FString                                     HttpPlaneBannerLeftImgPath;                               // 0x0950(0x0010) (Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     HttpPlaneBannerRightImgPath;                              // 0x0960(0x0010) (Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlaneCharacter");
		return pStaticClass;
	}


	void OnRequestImgSuccess(class UTexture2D* Texture, const struct FString& RequestedURL);
	void OnRep_GetHttpPlaneBannerRightImg();
	void OnRep_GetHttpPlaneBannerLeftImg();
	void OnRep_EnableBanner();
};


// Class ShadowTrackerExtra.PlaneComponent
// 0x00D0 (0x01E0 - 0x0110)
class UPlaneComponent : public UActorComponent
{
public:
	struct FPlaneData                                  CurPlaneData;                                             // 0x0110(0x0090) (Protected, NativeAccessSpecifierProtected)
	class UClass*                                      PlaneClass;                                               // 0x01A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBehaviorTree*                               PlaneBT;                                                  // 0x01A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bEnabled;                                                 // 0x01B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01B1(0x0007) MISSED OFFSET
	TArray<class APlayerController*>                   CachedTotalPlayer;                                        // 0x01B8(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AAIController*>                       CachedTotalAI;                                            // 0x01C8(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x01D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlaneComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PlaneViewerPawn
// 0x0018 (0x0408 - 0x03F0)
class APlaneViewerPawn : public APawn
{
public:
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpringArmComponent*                         CameraBoom;                                               // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                            FollowCamera;                                             // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlaneViewerPawn");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PlayerAntiCheatManager
// 0x05C0 (0x06D0 - 0x0110)
class UPlayerAntiCheatManager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0110(0x0078) MISSED OFFSET
	struct FVerifySwitch                               VsHitDetail;                                              // 0x0188(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsFlyDist2D;                                              // 0x0194(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsFlyDist3D;                                              // 0x01A0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsFlyGravitySimple;                                       // 0x01AC(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsFlyGravityDetail;                                       // 0x01B8(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsRelMoveFailed;                                          // 0x01C4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsPureMoveSpeed;                                          // 0x01D0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsNoHitDetail;                                            // 0x01DC(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsFakeTraceMissMatch;                                     // 0x01E8(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsSilentProtect01;                                        // 0x01F4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsSilentProtect02;                                        // 0x0200(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsLocusCheckHorizon;                                      // 0x020C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsLocusCheckZ;                                            // 0x0218(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsLocusCheckHorizonSingle;                                // 0x0224(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsLocusCheckHorizonBigBox;                                // 0x0230(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsMuzzleDataWrong;                                        // 0x023C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsMuzzleRangeCircle;                                      // 0x0248(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsMuzzleRangeUp;                                          // 0x0254(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsMuzzleRangeForward;                                     // 0x0260(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsMuzzleRangeRight;                                       // 0x026C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsDeConAndTimeOld;                                        // 0x0278(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsMaxWeaponToBaseFailed;                                  // 0x0284(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsBulletDirFailed;                                        // 0x0290(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsBulletBornFailed;                                       // 0x029C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsBoneScale;                                              // 0x02A8(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsHitBoneNameNone;                                        // 0x02B4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsHitBoneHitMissMatch;                                    // 0x02C0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsBulletID;                                               // 0x02CC(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsWeaponHasNoBase;                                        // 0x02D8(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsBlockStaticToDynamic;                                   // 0x02E4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsMoveTimeStampError;                                     // 0x02F0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsVehicleTimeStampError;                                  // 0x02FC(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsWatchTimeStampError;                                    // 0x0308(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	int                                                MaxShootPointPassWall;                                    // 0x0314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxMuzzleHeightTime;                                      // 0x0318(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxLocusFailTime;                                         // 0x031C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxBulletVictimClientPassWallTimes;                       // 0x0320(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxGunPosErrorTimes;                                      // 0x0324(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSkeletonLength;                                        // 0x0328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxAllowVehicleTimeSpeedRawTime;                          // 0x032C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxAllowVehicleTimeSpeedConvTime;                         // 0x0330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxAllowVehicleAccTime;                                   // 0x0334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxShooterDataNumErrorCnt;                                // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsBoneInfo;                                               // 0x033C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsJumpMaxHeight;                                          // 0x0348(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsJumpMaxHeight15;                                        // 0x0354(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsJumpMaxHeight2;                                         // 0x0360(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsTimeLineUpFailed;                                       // 0x036C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsTimeLineDnFailed;                                       // 0x0378(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsTimeLineBlock;                                          // 0x0384(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsSysTimeCheckNoBack;                                     // 0x0390(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsSysTimeRateCheck;                                       // 0x039C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootRpgShootTimeVerify;                                // 0x03A8(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootLockShootTimeVerify;                               // 0x03B4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootRpgHitNewVerify;                                   // 0x03C0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootGunInfoCheck;                                      // 0x03CC(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsDynamicBasePassWall;                                    // 0x03D8(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootTimeConDelta;                                      // 0x03E4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootTimeDeConMerged;                                   // 0x03F0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	int                                                MaxMergedStrategy1;                                       // 0x03FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxMergedStrategy2;                                       // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootTimeDeConFrameControl;                             // 0x0404(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootTimeServerNoConnSpan;                              // 0x0410(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsServerNoOldShoot;                                       // 0x041C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsSkeletonLengthCheck;                                    // 0x0428(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsParachuteVelocityCheck;                                 // 0x0434(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                              MaxFuelConsume;                                           // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0444(0x0080) MISSED OFFSET
	struct FVerifySwitch                               VsHighMuzzleShootDown;                                    // 0x04C4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsWeaponScopeHeightError;                                 // 0x04D0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsWeaponScopeDisError;                                    // 0x04DC(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsOwnerHeadAndMuzzlePassWall;                             // 0x04E8(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsImpactPointAndActorDisBig;                              // 0x04F4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsImpactPointAndBulletDisBig;                             // 0x0500(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShooterPosByNetdelayInvalid;                            // 0x050C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsVictmPosByNetdelayInvalid;                              // 0x0518(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootVerifyInvalid;                                     // 0x0524(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bOpenDetailDataCollect;                                   // 0x0530(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOpenSocialIslandJump2;                                   // 0x0531(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0532(0x0002) MISSED OFFSET
	struct FVerifySwitch                               VsClientImpactActorOffset;                                // 0x0534(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsClientBulletOffset;                                     // 0x0540(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsClientBulletDir;                                        // 0x054C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsClientWeaponHeight;                                     // 0x0558(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsClientDownShoot;                                        // 0x0564(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsImpactActorPosWithNoHisPos;                             // 0x0570(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               FarJump;                                                  // 0x057C(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsShootAngleInVaild;                                      // 0x0588(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsMuzzleAndTailPosInVaild;                                // 0x0594(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsMuzzleAndImpactPassWall;                                // 0x05A0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsMuzzleAndTailPassWall;                                  // 0x05AC(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsImpactActorPosOffsetBig;                                // 0x05B8(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsImpactPointChangeSmall;                                 // 0x05C4(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsImpactBulletPosOffsetBig;                               // 0x05D0(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               VsTotalImactCharacterNum;                                 // 0x05DC(0x000C) (Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FAntiCheatDetailData                        CatchReportAntiCheatDetailData;                           // 0x05E8(0x0028) (NativeAccessSpecifierPublic)
	int                                                MaxCatchWeaponAntiDataNLength;                            // 0x0610(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               ClientTimeSpeedAcc;                                       // 0x0614(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x1C];                                      // 0x0620(0x001C) MISSED OFFSET
	struct FVerifySwitch                               SpeedCheatOver10;                                         // 0x063C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               SpeedCheatOver15;                                         // 0x0648(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               SpeedCheatOver20;                                         // 0x0654(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	struct FVerifySwitch                               SpeedQuickCheck;                                          // 0x0660(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x64];                                      // 0x066C(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlayerAntiCheatManager");
		return pStaticClass;
	}


	void ReportAntiCheatDetailData();
	void PushWeaponAntiData(struct FWeaponAntiData* NewWeaponAntiData);
	void OnRecoverOnServer();
	void OnPreReconnectOnServer();
};


// Class ShadowTrackerExtra.STExtraProp
// 0x0070 (0x0400 - 0x0390)
class ASTExtraProp : public AActor
{
public:
	bool                                               bKeepRelevantWhenHiddenInGame;                            // 0x0390(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0391(0x0007) MISSED OFFSET
	class ASTExtraBaseCharacter*                       OwnerPlayer;                                              // 0x0398(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       LastOwnerPlayer;                                          // 0x03A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03A8(0x0008) MISSED OFFSET
	struct FTransform                                  OriginTrans;                                              // 0x03B0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FName                                       PropAttachSocket;                                         // 0x03E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               EquipSound;                                               // 0x03E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               UnEquipSound;                                             // 0x03F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraProp");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PlayerEquipmentProp
// 0x0000 (0x0400 - 0x0400)
class APlayerEquipmentProp : public ASTExtraProp
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlayerEquipmentProp");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PlayerGunCollosionComp
// 0x00B8 (0x01C8 - 0x0110)
class UPlayerGunCollosionComp : public UActorComponent
{
public:
	float                                              DetectInterval;                                           // 0x0110(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                DetectThreshold;                                          // 0x0114(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FoldFactor;                                               // 0x0118(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	class ASTExtraBaseCharacter*                       pCharOwner;                                               // 0x0120(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	struct FVector                                     BoxHalfSize;                                              // 0x0130(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     QEoffsetPeekLeftOnVehicle;                                // 0x013C(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     QEoffsetPeekRightOnVehicle;                               // 0x0148(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     QEoffsetPeekLeft;                                         // 0x0154(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     QEoffsetPeekRight;                                        // 0x0160(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StaticTraceLengthOffset;                                  // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     QEoffsetPeekStandAdd;                                     // 0x0170(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     QEoffsetPeekCrouchAdd;                                    // 0x017C(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     QEoffsetPeekProneAdd;                                     // 0x0188(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FoldFactorDelt;                                           // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FoldFactorDeltChange;                                     // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TraceDis;                                                 // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TickDeltTime;                                             // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsDrawDebugLine;                                          // 0x01A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0xB];                                       // 0x01A5(0x000B) MISSED OFFSET
	TArray<TWeakObjectPtr<class AActor>>               SweepIgnoreActors;                                        // 0x01B0(0x0010) (ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                               IsUseCollision;                                           // 0x01C0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x01C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlayerGunCollosionComp");
		return pStaticClass;
	}


	void SetEffect(bool Visbile, const struct FVector& EffectLoc);
	void CheckCollision(int InFoldFactor, const struct FVector& FoldPoint, const struct FVector& FoldNormal);
};


// Class ShadowTrackerExtra.PlayerRespawnComponent
// 0x01C0 (0x02D0 - 0x0110)
class UPlayerRespawnComponent : public UActorComponent
{
public:
	float                                              DefaultPlayerRespawnTime;                                 // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DefaultRespawnInvincibleTime;                             // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERespawnPointType                                  RespawnPointType;                                         // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               RespawnKeepAllItems;                                      // 0x0119(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x6];                                       // 0x011A(0x0006) MISSED OFFSET
	TArray<int>                                        RespawnIgnoreKeepItemTypes;                               // 0x0120(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int>                                        RespawnIgnoreKeepItemIds;                                 // 0x0130(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int>                                        RespawnNeedReplaceWeaponIds;                              // 0x0140(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<uint32_t, struct FReplaceWeaponDataMap>       RespawnReplaceWeaponMap;                                  // 0x0150(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FRespawnKeepAllItemData                     CustomRespawnItemData;                                    // 0x01A0(0x0020) (Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<int>                                        DefaultWeaponList;                                        // 0x01C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                              bRestoreDataDelay;                                        // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bReCreatePawn;                                            // 0x01D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0xFB];                                      // 0x01D5(0x00FB) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlayerRespawnComponent");
		return pStaticClass;
	}


	void HandlePlayerDisuseItem(uint32_t PlayerKey, const struct FItemDefineID& DefineID);
	void HandleCacheWeapon(uint32_t PlayerKey, class ASTExtraWeapon* Weapon);
};


// Class ShadowTrackerExtra.PlayerRevivalComponent
// 0x00B0 (0x01C0 - 0x0110)
class UPlayerRevivalComponent : public UActorComponent
{
public:
	int                                                RevivalCountDownTime;                                     // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GotoSpectatingTime;                                       // 0x0114(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64_t                                            FinishRevivalTime;                                        // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64_t                                            StartObserverTime;                                        // 0x0120(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    OwningPC;                                                 // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ARevivalPointActor>           CurServerRevivalPoint;                                    // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameBaseInfo                               GameBaseInfo;                                             // 0x0138(0x0080) (NativeAccessSpecifierPublic)
	struct FDateTime                                   BePickupTime;                                             // 0x01B8(0x0008) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlayerRevivalComponent");
		return pStaticClass;
	}


	void TryToLeaveRevival();
	void TickRevival(float DeltaSeconds);
	void SetRemainingRevivalTime(int InValue);
	void SetCaptureIDCardStatus(bool InValue);
	void OnPlayerRevived(class ASTExtraPlayerController* SaviorPC);
	void OnPlayerQuitSpectating();
	void OnPlayerGotoSpectating();
	void OnPlayerExitGame();
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);
	void LeaveRevivalState(uint32_t SaviorKey);
	bool IsInWaittingRevivalState();
	int GetRevivalCountDownTime();
	int GetRemainingRevivalTime();
	bool GetCaptureIDCardStatus();
	int64_t FindPlayerUIDFromKey(uint32_t PlayerKey);
	void EnterRevivalState();
	void CaptureIDCard(const struct FRevivalCardItemPickData& InPickupData);
	void BePickupRevivalCard(const struct FRevivalCardItemPickData& InPickupData);
};


// Class ShadowTrackerExtra.PlayerSecurityInfoCollector
// 0x0920 (0x0A30 - 0x0110)
class UPlayerSecurityInfoCollector : public UActorComponent
{
public:
	TArray<int>                                        EnergyItemIDList;                                         // 0x0110(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int>                                        EnergySpeedUpPhaseIndexList;                              // 0x0120(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                               bEnableDetailFlowLog;                                     // 0x0130(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableDetailHurtFlowLog;                                 // 0x0131(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0132(0x0006) MISSED OFFSET
	struct FClientCircleFlow                           CurCircleFlow;                                            // 0x0138(0x0138) (NativeAccessSpecifierPublic)
	struct FClientCircleFlow                           CollectCircleFlow;                                        // 0x0270(0x0138) (NativeAccessSpecifierPublic)
	struct FHurtFlow                                   CurHurtFlow;                                              // 0x03A8(0x0120) (NativeAccessSpecifierPublic)
	struct FClientJumpFlow                             JumpFlow;                                                 // 0x04C8(0x00C0) (NativeAccessSpecifierPublic)
	struct FClientSecPlayerKillFlow                    SecPlayerKillFlow;                                        // 0x0588(0x0090) (NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x238];                                     // 0x0618(0x0238) MISSED OFFSET
	struct FInexistentAvatarFlow                       InexistentAvatarFlow;                                     // 0x0850(0x01E0) (NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlayerSecurityInfoCollector");
		return pStaticClass;
	}


	void StartOnPlane();
	void PlayerCanJump();
	void HandleSyncCircleInfo(int Index);
	void HandleCharacterSafeZoneTips(float SafeZoneTime);
	void HandleCharacterCircleWaveOver(int Index);
	void HandleCharacterCircleSizeAndPosition(const struct FVector& BlueCircleSync, const struct FVector& WhiteCircleSync, int Index);
	void HandleCharacterBlueCircleRun(float BlueCircleRunTime);
	void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);
	void HandleCharacterAttrChangedWithDetail(class AActor* nowActor, const struct FString& AttrName, float ValueDelta, float ResultValue);
	void ExitParachute();
	void EnterParachute();
	void EnterJumping();
};


// Class ShadowTrackerExtra.PlayerSwimComponent
// 0x0090 (0x01A0 - 0x0110)
class UPlayerSwimComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerTouchWater;                                       // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                              MaxBreathAmount;                                          // 0x0128(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DrowningHurtHight;                                        // 0x012C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SwimWaterSufaceOffset;                                    // 0x0130(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              BreathVauleChangeoffset;                                  // 0x0134(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              OpBreathVauleChangeoffset;                                // 0x0138(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              BreathDeltaTime;                                          // 0x013C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxSpeedScaleHeightOffset;                                // 0x0140(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MinSpeedScale;                                            // 0x0144(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxCrouchWaterHeight;                                     // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MaxProneWaterHeight;                                      // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DeadInWaterLocZOffset;                                    // 0x0150(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              RollMaxAngle;                                             // 0x0154(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DistoVolume;                                              // 0x0158(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x015C(0x001C) MISSED OFFSET
	class UCharacterMovementComponent*                 CharaterMovement;                                         // 0x0178(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0180(0x0004) MISSED OFFSET
	float                                              downWaterHeight;                                          // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0188(0x0008) MISSED OFFSET
	float                                              nowTickTime;                                              // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0194(0x0004) MISSED OFFSET
	class AActor*                                      WaterObjectCpp;                                           // 0x0198(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlayerSwimComponent");
		return pStaticClass;
	}


	void UpdateSwimCollisionHeightCpp();
	void LeaveWater();
	class AActor* GetWaterObject();
	void EnterWater_BluePrint();
	void EnterWater(class AActor* WaterObject);
	void BP_UnderWaterStateChanged(bool bEnterWater);
};


// Class ShadowTrackerExtra.PlayerTombBox
// 0x0090 (0x0420 - 0x0390)
class APlayerTombBox : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0390(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPickUpListWrapperDataEmptyDelegate;                     // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FName                                       tombName;                                                 // 0x03A8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       TargetPlayer;                                             // 0x03B0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       DamageCauser;                                             // 0x03B8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDefineID                               KillByItemDefineID;                                       // 0x03C0(0x0018) (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                DeadTime;                                                 // 0x03D8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BoxLifeSpan;                                              // 0x03DC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableCollision;                                        // 0x03E0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03E1(0x0003) MISSED OFFSET
	struct FVector                                     AttachedRelLoc;                                           // 0x03E4(0x000C) (BlueprintVisible, Net, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      AttachedActor;                                            // 0x03F0(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsLastDiedInTeam;                                        // 0x03F8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPickUpBoxType                                     BoxType;                                                  // 0x03F9(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03FA(0x0002) MISSED OFFSET
	uint32_t                                           OwnerUniqueID;                                            // 0x03FC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TargetPlayerKey;                                          // 0x0400(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirDropBoxNetCullDistanceSquaredRate;                     // 0x0404(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bBoxVisibility;                                           // 0x0408(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0409(0x0003) MISSED OFFSET
	int                                                AvatarID;                                                 // 0x040C(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APickUpListWrapperActor>      BoxPickupWrapperActor;                                    // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APickUpListWrapperActor*                     PickupListWrapper;                                        // 0x0418(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlayerTombBox");
		return pStaticClass;
	}


	void SwitchToDeadTombBox();
	void SetVisible(bool IsVisible);
	void RegisterToPlayerPickUpList();
	void OnRep_VisibilityChange();
	void OnRep_BoxLifeSpan();
	void OnRep_AvatarId();
	void OnRep_AttachmentReplication();
	void OnRep_AttachedActor();
	void HideDeadTombApparence();
	int GetUniqueInstanceID();
	int GetTombboxLifespan();
	class APickUpListWrapperActor* GetBoxPickupWrapperActor();
	int GetAvatarId();
	void GenerateTreasureBoxWrappers(TArray<struct FAirDropBoxGenerateWrapperItemData> DataList, const struct FName& AirBoxName);
	void GeneratePlayerBackpackWrappers();
	class APickUpListWrapperActor* GenerateBoxWrappersInner(class UClass* WrapperClass, TArray<struct FPickUpItemData> DataList, const struct FName& BoxName, bool AttachToBox);
	void GenerateBoxWrappersByPickUpItemDataList(TArray<struct FPickUpItemData> DataList, const struct FName& BoxName);
	void GenerateAirDropBoxWrappers(TArray<struct FAirDropBoxGenerateWrapperItemData> DataList, const struct FName& AirBoxName, int AirdropboxID);
};


// Class ShadowTrackerExtra.PlayerVaultComponent
// 0x0098 (0x01A8 - 0x0110)
class UPlayerVaultComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	bool                                               isInVaultingCpp;                                          // 0x0118(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               hasSendStopVault;                                         // 0x0119(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x011A(0x0006) MISSED OFFSET
	TMap<unsigned char, struct FVaultAnimData>         VaultAnimSoftPtrMap;                                      // 0x0120(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                                VaultMontage;                                             // 0x0170(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                TeamVaultMontage;                                         // 0x0178(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0180(0x0008) MISSED OFFSET
	class ASTExtraPlayerCharacter*                     OwnerCharacter;                                           // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0190(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PlayerVaultComponent");
		return pStaticClass;
	}


	bool VaultFromCPP();
	void UpdateVault_BluePrint();
	void StartAsyncLoadVaultAnimRes(bool IsTDM);
	void StartAsyncLoadTeamVaultAnimRes();
	struct FString GetVaultKeyByBlockHeight(float Height);
	struct FRotator GetRelicateRotator();
	void FpsVaultToAll(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, const struct FRotator& movedir, float blobkthick);
	void FpsVaultServer(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, const struct FRotator& movedir, float blobkthick);
	void AsyncLoadVaultAnimResFinish(unsigned char PawnSubType);
};


// Class ShadowTrackerExtra.PoisonFogArea
// 0x0000 (0x0390 - 0x0390)
class APoisonFogArea : public AActor
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PoisonFogArea");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PoseWithFriendComponent
// 0x0028 (0x0138 - 0x0110)
class UPoseWithFriendComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0110(0x0010) MISSED OFFSET
	bool                                               bPoseWithFriend;                                          // 0x0120(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0121(0x0007) MISSED OFFSET
	class UAnimSequence*                               PoseWithFriendAnimSeq;                                    // 0x0128(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUAEDataTable*                               FriendPoseTable;                                          // 0x0130(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PoseWithFriendComponent");
		return pStaticClass;
	}


	void PoseWithFriend(bool IsSelfMale, bool IsRight, bool IsFriendMale);
	void OnPoseWithFriendLoaded(class UObject* LoadedObject);
	void CancelPoseWithFriend();
};


// Class ShadowTrackerExtra.PostProcessManager
// 0x0080 (0x0410 - 0x0390)
class APostProcessManager : public AActor
{
public:
	struct FLinearColor                                OutlineColor;                                             // 0x0390(0x0010) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OutlineThickness;                                         // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsPPEnabled;                                              // 0x03A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03A5(0x0003) MISSED OFFSET
	struct FLinearColor                                FresnelColor;                                             // 0x03A8(0x0010) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FresnelIntensity;                                         // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsOutlineEnabled;                                         // 0x03BC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsFresnelEnabled;                                         // 0x03BD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03BE(0x0002) MISSED OFFSET
	TMap<EOutlineType, struct FOutlineConfig>          DifferentOutline;                                         // 0x03C0(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PostProcessManager");
		return pStaticClass;
	}


	void SetMobileCustomDepth(bool IsEnable, int Depth);
	class APostProcessVolume* GetPPVByTag(const struct FName& TagName);
	static class APostProcessManager* GetInstance();
	class APostProcessVolume* GetActivePPV();
	void EnableDrawOutlineEffect(bool IsEnable);
};


// Class ShadowTrackerExtra.PostureRecognitionComponent
// 0x0080 (0x0340 - 0x02C0)
class UPostureRecognitionComponent : public USceneComponent
{
public:
	struct FScriptMulticastDelegate                    OnAccelerateMoveUpdate;                                   // 0x02C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDecelerateMoveUpdate;                                   // 0x02D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnUniformMoveUpdate;                                      // 0x02E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnChangeMovingState;                                      // 0x02F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                              MinAccelerationThreshold;                                 // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinDccelerationThreshold;                                 // 0x0304(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     CurMoveSpeed;                                             // 0x0308(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     CurMoveAcc;                                               // 0x0314(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EObjectMovingType>                     CurMovingType;                                            // 0x0320(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0321(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PostureRecognitionComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ProduceDropItemComponent
// 0x0080 (0x0190 - 0x0110)
class UProduceDropItemComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	struct FString                                     DropItemCfgTableName;                                     // 0x0118(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ProduceID;                                                // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DropGroundItemLifeSpan;                                   // 0x012C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                GridStep;                                                 // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	class ASTExtraCharacter*                           OwnerPawn;                                                // 0x0138(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     DropItemRuleTableName;                                    // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int>                                        DropPlanIDList;                                           // 0x0150(0x0010) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int>                                        NightDropPlanIDList;                                      // 0x0160(0x0010) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int>                                        DayDropPlanIDList;                                        // 0x0170(0x0010) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UClass*                                      DeadInventoryBoxTemplate;                                 // 0x0180(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0188(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ProduceDropItemComponent");
		return pStaticClass;
	}


	void SetNightDropPlanIDList(TArray<int>* DayIdList, TArray<int>* NightIdList);
	void SetDropPlanIDList(TArray<int>* IDList);
	void SetDropItemLifeSpan(int ItemTime);
	int PickItemByUnionRandom(int WeightCount, TArray<struct FRandomPropData>* WeightMap);
	int PickItemByIndependentRandom(int Weight);
	void OnOwnerPawnDead(class ASTExtraSimpleCharacter* DeadCharacter, class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType);
	void NineGridDrop(TArray<struct FPickUpItemData> PropDatas, const struct FTransform& PawnTrans, float ZOffset);
	struct FString GetWrapperActorPath(const struct FItemDefineID& DefineID);
	class UClass* GetWrapperActorClass(const struct FItemDefineID& DefineID);
	struct FString GetDropItemCfgList(TArray<struct FDropItemConfig>* DropList);
	void GenerateDropItemByOwner(TArray<struct FDropPropData>* FinalDropItems);
	struct FString GenerateDropItemByCfg(TArray<struct FDropPropData>* FinalDropItems);
	bool DropToTreasureBox(TArray<struct FDropPropData> PropData, class AActor* TargetActor, const struct FString& BoxName, EPickUpBoxType BoxType, const struct FVector& Offset);
	void DropToTombBox(TArray<struct FPickUpItemData> PropData, class ACharacter* DeadPawn);
	void DropToTarget(const struct FItemDefineID& DefineID, int count, class UBackpackComponent* Backpack);
	void DropToGround(const struct FPickUpItemData& PropData, const struct FTransform& WrapperTrans);
	void DropOutProps(TArray<struct FDropPropData> PropData, class ACharacter* KillerPawn, class ACharacter* DeadPawn);
	void CalcDropItemListByDropRuleByCfg(const struct FDropItemConfig& DropRuleCfg, TArray<struct FDropPropData>* DropItemList);
	void CalcDropItemListByDropRule(int DropPlanId, TArray<struct FDropPropData>* DropItemList);
};


// Class ShadowTrackerExtra.PropDropOutMethodInterface
// 0x0000 (0x0028 - 0x0028)
class UPropDropOutMethodInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PropDropOutMethodInterface");
		return pStaticClass;
	}


	void NineGridDrop(TArray<struct FPickUpItemData> PropDatas, const struct FTransform& PawnTrans, float ZOffset);
	bool DropToTreasureBox(TArray<struct FDropPropData> PropData, class AActor* TargetActor, const struct FString& BoxName, EPickUpBoxType BoxType, const struct FVector& Offset);
	void DropToTombBox(TArray<struct FPickUpItemData> PropData, class ACharacter* DeadPawn);
	void DropToTarget(const struct FItemDefineID& DefineID, int count, class UBackpackComponent* Backpack);
	void DropToGround(const struct FPickUpItemData& PropData, const struct FTransform& WrapperTrans);
	void DropOutProps(TArray<struct FDropPropData> PropData, class ACharacter* KillerPawn, class ACharacter* DeadPawn);
};


// Class ShadowTrackerExtra.PUBGDoor
// 0x0100 (0x04A0 - 0x03A0)
class APUBGDoor : public AUAENetActor
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x03A0(0x0058) MISSED OFFSET
	int                                                iRegionDoor;                                              // 0x03F8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableForceAutoOpenDoor;                                  // 0x03FC(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableCheckDoorState;                                     // 0x03FD(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03FE(0x0002) MISSED OFFSET
	float                                              MaxNetCullDistanceSquared;                                // 0x0400(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableRPCCheckDoorState;                                  // 0x0404(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugDraw;                                               // 0x0405(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0406(0x0002) MISSED OFFSET
	float                                              autoOpenDistanceSquared;                                  // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              autoOpenAngel;                                            // 0x040C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              forwardSpeedRatio;                                        // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                doorState;                                                // 0x0414(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DoorBroken;                                               // 0x0418(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0419(0x0003) MISSED OFFSET
	float                                              DoorOperateTime;                                          // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                        doorMesh;                                                 // 0x0420(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                               interactionBox;                                           // 0x0428(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                               interForceBox;                                            // 0x0430(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDoubleDoor;                                              // 0x0438(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	int                                                DoorStateEx;                                              // 0x043C(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DoorBrokenEx;                                             // 0x0440(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0441(0x0007) MISSED OFFSET
	class UStaticMeshComponent*                        doorMeshEx;                                               // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                               interactionBoxEx;                                         // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                               interForceBoxEx;                                          // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseDoorWaitPush;                                         // 0x0460(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0461(0x0007) MISSED OFFSET
	TArray<EDamageableGameObjectType>                  DamageableGameObjectTypeList;                             // 0x0468(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              NetCullingDistanceOnVeryLowDevice;                        // 0x0478(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoOpenTriggered;                                       // 0x047C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bAutoOpenStated;                                          // 0x047D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bTriggeredDoor;                                           // 0x047E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bAutoOpenTriggeredEx;                                     // 0x047F(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bAutoOpenStatedEx;                                        // 0x0480(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bTriggeredDoorEx;                                         // 0x0481(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData07[0x6];                                       // 0x0482(0x0006) MISSED OFFSET
	class ACharacter*                                  PlayerCharacter;                                          // 0x0488(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              autoOpenAngelCosinValue;                                  // 0x0490(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData08[0xC];                                       // 0x0494(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PUBGDoor");
		return pStaticClass;
	}


	void SetDoorBroken(bool bExtraDoor);
	void RefreshUIOnClient();
	void OpenDoorBy(class ACharacter* Character, bool extraDoor);
	void OnRep_RepDoorStateEx();
	void OnRep_RepDoorState();
	void OnRep_RepDoorBrokenEx();
	void OnRep_RepDoorBroken();
	void OnEndOverlapEx(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnEndOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnDoorRPC(class ACharacter* Character, bool bAimingExtraDoor);
	void OnBeginOverlapEx(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnBeginOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void On_DoorAniFinsih(class UBoxComponent* InDoorCheckBox, bool extraDoor);
	bool IsSameDoorState(int ClientState);
	void Init(class UBoxComponent* interactionBox, class UStaticMeshComponent* doorMesh, bool inDoubleDoor, class UBoxComponent* interactionBoxEx, class UStaticMeshComponent* doorMeshEx, class UBoxComponent* interForceBox, class UBoxComponent* interForceBoxEx);
	TArray<EDamageableGameObjectType> GetDamageableGameObjectType();
	void ForceNetUpdate();
	void CloseDoorBy(class ACharacter* Character, bool extraDoor);
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);
};


// Class ShadowTrackerExtra.PubgmAutoRun
// 0x0028 (0x0138 - 0x0110)
class UPubgmAutoRun : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    PubgmAutoRunSimulateAction;                               // 0x0110(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bRoutePointInited;                                        // 0x0120(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0121(0x0007) MISSED OFFSET
	TArray<class AXTPoint*>                            RoutePoints;                                              // 0x0128(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PubgmAutoRun");
		return pStaticClass;
	}


	void VehicleTowardTo(float X, float Y, float Z);
	void VehicleMoveTo(float X, float Y, float Z);
	void VehicleMoveAndTowardTo(float X, float Y, float Z, float X1, float Y1, float Z1);
	void OnPubgmAutoRunSimulateAction__DelegateSignature(int SimActionType);
	static bool NeedCmdAutoRun();
	void NativeSimulateAction(int SimActionType);
	void InitRoutePoint();
	void GMGotoPosition(int X, int Y, int Z);
	TArray<struct FVector> GetRangeActorsPostions(int ActorType, const struct FVector& OriginPos, float RangeRadius);
	struct FVector GetPoisonCircleLocation();
	static float GetPlayerSpeed(int SpeedIdx);
	bool GetNearestXTPointToVehicle(bool bNext, struct FTransform* FirstPoint, struct FTransform* SecendPoint);
	float ForceVehiclePosPull(bool bNext);
};


// Class ShadowTrackerExtra.PVEAutoRunTest
// 0x0048 (0x0158 - 0x0110)
class UPVEAutoRunTest : public UActorComponent
{
public:
	TArray<struct FVector>                             DstPointArray;                                            // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                MaxMoveTime;                                              // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDstStayTime;                                           // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                KillAllTime;                                              // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                StatRecordTime;                                           // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0130(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVEAutoRunTest");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PVECircleMgrComponent
// 0x00F0 (0x0318 - 0x0228)
class UPVECircleMgrComponent : public UCircleMgrComponent
{
public:
	int                                                CircleIndex;                                              // 0x0228(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET
	TMap<int, int>                                     CircleIDToCircleIndexMap;                                 // 0x0230(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FCirCleCfg                                  PrevCircleCfg;                                            // 0x0280(0x0090) (NativeAccessSpecifierPrivate)
	bool                                               IsFirstCircle;                                            // 0x0310(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0311(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVECircleMgrComponent");
		return pStaticClass;
	}


	void OnCircleMoveEnd(int Index);
	void NextCircleWithCircleID(int CircleID);
	void NextCircle();
	void InitPVECircleDeployConfig(struct FGameLevelDesc* LevelDesc, struct FLevelData* LevelData);
};


// Class ShadowTrackerExtra.PVEDecorator
// 0x0010 (0x03A0 - 0x0390)
class APVEDecorator : public AActor
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0390(0x000C) MISSED OFFSET
	int                                                Health;                                                   // 0x039C(0x0004) (Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVEDecorator");
		return pStaticClass;
	}


	void OnDie();
	bool IsDead();
};


// Class ShadowTrackerExtra.PVELagCompensationComponent
// 0x0000 (0x15F0 - 0x15F0)
class UPVELagCompensationComponent : public ULagCompensationComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVELagCompensationComponent");
		return pStaticClass;
	}


	TEnumAsByte<EShootVertifyRes> VerifyShootPoint(class ASTExtraCharacter* Victim, const struct FVector& MuzzlePos, class APawn* AttackPawn);
	float SimulatedCharacterServerTime();
	TEnumAsByte<EShootVertifyRes> ShootSimpleCharacterVerify(class ASTExtraShootWeapon* Weapon, class ASTExtraBaseCharacter* shooter, const struct FBulletHitInfoUploadData& ShootData);
	TEnumAsByte<EShootVertifyRes> GetHitType(class ASTExtraCharacter* Victim, const struct FVector& ShootMuzzlePos, const struct FVector& ImpactPoint);
};


// Class ShadowTrackerExtra.PVEProjectileBase
// 0x00F8 (0x0488 - 0x0390)
class APVEProjectileBase : public AActor
{
public:
	class UPVEProjectileMovementComponent*             PMComp;                                                   // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDestroyAfterHit;                                         // 0x0398(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIgnoreOwner;                                             // 0x0399(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x039A(0x0006) MISSED OFFSET
	class AUTSkill*                                    OwnerSkill;                                               // 0x03A0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class AActor*, int>                           ActorImpactTimes;                                         // 0x03A8(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                     TargetActorLocation;                                      // 0x03F8(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     TargetActorOffset;                                        // 0x0404(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     InitLocation;                                             // 0x0410(0x000C) (Net, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LastLocation;                                             // 0x041C(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TraceGroundDepth;                                         // 0x0428(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseHighArc;                                              // 0x042C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsRay;                                                   // 0x042D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsHorizontal;                                            // 0x042E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeedCheckMaxDistance;                                    // 0x042F(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayFlyTime;                                             // 0x0430(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0434(0x0004) MISSED OFFSET
	struct FName                                       AttachSocketName;                                         // 0x0438(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsHoming;                                                // 0x0440(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0441(0x0003) MISSED OFFSET
	float                                              HomingAccelerationMagnitude;                              // 0x0444(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Speed;                                                    // 0x0448(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDistance;                                              // 0x044C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProjectileGravityScale;                                   // 0x0450(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	class AActor*                                      TargetActor;                                              // 0x0458(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitDamage;                                                // 0x0460(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasBeenThrowedOut;                                       // 0x0464(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0465(0x0003) MISSED OFFSET
	TArray<struct FHighArcParam>                       HighArcGravityScales;                                     // 0x0468(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0478(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVEProjectileBase");
		return pStaticClass;
	}


	void StartFly(const struct FVector& Velocity, float GravityScale);
	void OnStartFly();
	void OnRep_AttachSocketName();
	void OnProjectileDestroy();
	void OnImpact(const struct FHitResult& _ImpactResult);
	void CauseDamageToActor(class AActor* ImpactActor);
};


// Class ShadowTrackerExtra.PVEProjectileMovementComponent
// 0x0018 (0x01D0 - 0x01B8)
class UPVEProjectileMovementComponent : public UProjectileMovementComponent
{
public:
	class USceneComponent*                             LastUpdateComponentBeforeStop;                            // 0x01B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x01C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVEProjectileMovementComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PVPBossComponent
// 0x0090 (0x01A0 - 0x0110)
class UPVPBossComponent : public UActorComponent
{
public:
	TArray<struct FBossBornPoint>                      BossBornPointArray;                                       // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                Radius;                                                   // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<class UPVPBossFlow*>                        BossFlowGroup;                                            // 0x0128(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	class UPVPBossFlow*                                CurBossFlow;                                              // 0x0138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     StartBornPosition;                                        // 0x0140(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CountDownValue;                                           // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurBossCount;                                             // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	TArray<struct FRepBossBornPoint>                   AliveBossArray;                                           // 0x0158(0x0010) (Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    BossBeginFlow;                                            // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    BossBeginCountDown;                                       // 0x0178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    BossCurCountChanged;                                      // 0x0188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int                                                BaseFlowId;                                               // 0x0198(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x4];                                       // 0x019C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVPBossComponent");
		return pStaticClass;
	}


	void StartBornBoss(int BossID, int WaitTime, int CountTime, int BossIndex);
	void SetStartBornPosition(const struct FVector& InPos);
	void SetCountDownValue(int Value);
	void OnRep_CurBossChange();
	void OnReconnected(int InCountDown, const struct FVector& InStartBornPosition);
	void OnBossSpawn(int ID);
	void OnBossDead(int ID);
	struct FVector GetStartBornPosition();
	int GetCountDownValue();
	void ClearBossPoint();
	bool CheckIsInBossArea(const struct FVector& CheckPos, float CheckPosRadius);
	void BroadStartBossFlow(const struct FVector& StartPosition, int FlowId);
	void BroadBeginCountDown(int CountTime);
	void AddBossBornPoint(const struct FVector& BornPoint);
};


// Class ShadowTrackerExtra.PVPBossFlow
// 0x0030 (0x0058 - 0x0028)
class UPVPBossFlow : public UObject
{
public:
	int                                                FlowId;                                                   // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     BornPosition;                                             // 0x002C(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BossID;                                                   // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurCountDownTime;                                         // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPVPBossComponent*                           BossComponent;                                            // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVPBossFlow");
		return pStaticClass;
	}


	void StartFlow(int InBossId, int WaitTime, int CountTime, class UPVPBossComponent* BossComp);
	void ProduceBossCarrier();
	void CountDown();
	void BeginCountDown();
};


// Class ShadowTrackerExtra.PVPBossMgr
// 0x0000 (0x0110 - 0x0110)
class UPVPBossMgr : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVPBossMgr");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ZombieBaseGameMode
// 0x0080 (0x1998 - 0x1918)
class AZombieBaseGameMode : public ABattleRoyaleGameModeTeam
{
public:
	bool                                               IsEnableBackupPlane;                                      // 0x1918(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsGMEnablePoisonFog;                                      // 0x1919(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xE];                                       // 0x191A(0x000E) MISSED OFFSET
	TArray<int>                                        WeatherPhases;                                            // 0x1928(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                CurWeatherPhaseIndex;                                     // 0x1938(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurWeatherPhase;                                          // 0x193C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EWeatherDayState>                           WeatherProcessArray;                                      // 0x1940(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ENightStatus                                       CurrentNightStatus;                                       // 0x1950(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x1951(0x0003) MISSED OFFSET
	float                                              AIAttackZombieScale;                                      // 0x1954(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsForbidNightVehicle;                                     // 0x1958(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsConfigRegionItemGenerate;                               // 0x1959(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsConfigZombieDestroyActor;                               // 0x195A(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      ConfigLastCircleCountToDestroyActor;                      // 0x195B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsConfigRefreshWorldActiveRange;                          // 0x195C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsConfigPoisonFog;                                        // 0x195D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x195E(0x0002) MISSED OFFSET
	TArray<class AActor*>                              OccupiedPlayerStartGroupList;                             // 0x1960(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ASTExtraPlayerStartGroup*>            UnOccupiedPlayerStartGroupList;                           // 0x1970(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                VehicleExplosionLifeSpan;                                 // 0x1980(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CaculateCatchUpByMonsterInterFrame;                       // 0x1984(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TmpCatchUpInterTimes;                                     // 0x1988(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bMapLoaded;                                               // 0x198C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData03[0x3];                                       // 0x198D(0x0003) MISSED OFFSET
	int                                                iRandomPolicestationIndex;                                // 0x1990(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData04[0x4];                                       // 0x1994(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ZombieBaseGameMode");
		return pStaticClass;
	}


	void SetNightStatus(ENightStatus Status);
	void SetGameEndReportData();
	void SetForbidNightVehicle(bool isForbid);
	void NotifyGameModeInit();
	void NextWeatherPhaseByType(EWeatherDayState DayPhase);
	void NextWeatherPhase();
	void LoadMapFinished();
	bool IsInNight();
	int GetWeatherPhase();
	TArray<class AActor*> GetOccupiedPlayerStartGroupList();
	int GetCurWeatherStateTimes();
	EWeatherDayState GetCurWeatherState();
	int GetCurWeatherPhaseIndex();
	void GenerateCatchupByMonsterDistance();
};


// Class ShadowTrackerExtra.PVPZombieBaseGameMode
// 0x0000 (0x1998 - 0x1998)
class APVPZombieBaseGameMode : public AZombieBaseGameMode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVPZombieBaseGameMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PVPZombieGameMode
// 0x0010 (0x19A8 - 0x1998)
class APVPZombieGameMode : public APVPZombieBaseGameMode
{
public:
	struct FString                                     InfectionAreaLevel;                                       // 0x1998(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVPZombieGameMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.PVPZombieStandardGameMode
// 0x0000 (0x19A8 - 0x19A8)
class APVPZombieStandardGameMode : public APVPZombieGameMode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.PVPZombieStandardGameMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.QuickSignComponent
// 0x0410 (0x0520 - 0x0110)
class UQuickSignComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnAddSignMarkDelegate;                                    // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDelSignMarkDelegate;                                    // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                               IsBlockWhomInVoiceBlackList;                              // 0x0130(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	int                                                TextID_OutRange;                                          // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PreFix_Command;                                           // 0x0138(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PreFix_Command_Res;                                       // 0x0148(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PreFix_Mark;                                              // 0x0158(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MinTraceDist;                                             // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxTraceDist;                                             // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ItemTraceDist;                                            // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MarkMutualExclusionDist;                                  // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MiniMapAttentionIconID;                                   // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MiniMapThingIconID;                                       // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPickupManagerComponent*                     PickupMgrComp;                                            // 0x0180(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<int, struct FString>                          CommandTypeIDMap;                                         // 0x0188(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FString, class UClass*>                MarkNameClassMap;                                         // 0x01D8(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FString, struct FQuickSignMark>        MarkInfoMap;                                              // 0x0228(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FString, float>                        MarkLifeTimeMap;                                          // 0x0278(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FString, struct FQuickSignIDArray>     MarkTypeArrayMap;                                         // 0x02C8(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FString, int>                          MsgIDActorNetGUIDMap;                                     // 0x0318(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int>                                        ActorNetGUIDTrashArray;                                   // 0x0368(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FString>                             TempIDArray;                                              // 0x0378(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x58];                                      // 0x0388(0x0058) MISSED OFFSET
	TMap<struct FString, int>                          MsgKey2MiniMapID;                                         // 0x03E0(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FString, int>                          MsgKey2MiniMapIconTypeID;                                 // 0x0430(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FString, int>                          ConfigKeyToTextID;                                        // 0x0480(0x0050) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FString, EQuickSignSubType>            ConfigKeyToSignSubType;                                   // 0x04D0(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.QuickSignComponent");
		return pStaticClass;
	}


	void SwitchAndLoadBankAndPlay(const struct FName& SwitchGroup, const struct FName& SwitchState, const struct FString& BankName, const struct FString& EventName);
	void ShowMsgTipsVoice(const struct FQuickSignMsg& msgItem, bool isSelf);
	void ServerSendMsg(const struct FQuickSignMsg& msgItem, unsigned char SignType);
	void ServerDelMsg(const struct FString& msgID);
	void ReportQuickSign(const struct FQuickSignMsg& msgItem);
	void RemoveActorMask(int ActorNetGUID);
	void OperMark(const struct FString& msgID);
	void MakeQuickNeed(EQuickSignSubType SignSubType);
	void MakeQuickMark_PickupActor(class APickUpWrapperActor* PickUpActor);
	void MakeQuickMark();
	void MakeQuickCommand(unsigned char SignType);
	bool IsSelfMark(const struct FString& msgID);
	int GetVoiceAudioID(EQuickSignSubType MsgType);
	bool GenerateMarkInfo(const struct FQuickSignMsg& msgItem, struct FQuickSignMark* MarkInfo);
	void DelMarkFromPool(const struct FString& MsgMark);
	void DealWithNewMsg(const struct FQuickSignMsg& msgItem, bool isSelf, bool ShowChat);
	void ClientReceiveMsg(const struct FQuickSignMsg& msgItem, bool isSelf);
	void ClientDelMsg(const struct FString& msgID);
	void AnalysisConfigKeyClass(const struct FString& ConfigID, const struct FString& ConfigScriptParam);
	void AddMarkToPool(const struct FQuickSignMark& MsgMark);
	void AddActorMask(int ActorNetGUID);
};


// Class ShadowTrackerExtra.QuickSignMarkWidget
// 0x0098 (0x0440 - 0x03A8)
class UQuickSignMarkWidget : public UUAEUserWidget
{
public:
	bool                                               IsSelfMark;                                               // 0x03A8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03A9(0x0003) MISSED OFFSET
	float                                              MaxAlpha;                                                 // 0x03AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinAlpha;                                                 // 0x03B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0xC];                                       // 0x03B4(0x000C) MISSED OFFSET
	struct FVector4                                    Limit;                                                    // 0x03C0(0x0010) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   UIOffset;                                                 // 0x03D0(0x0008) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03D8(0x0008) MISSED OFFSET
	struct FVector4                                    ActiveCenterRect;                                         // 0x03E0(0x0010) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     DistAppendix;                                             // 0x03F0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsInActiveCenter;                                         // 0x0400(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0401(0x0007) MISSED OFFSET
	class UTextBlock*                                  TextBlock_Distance;                                       // 0x0408(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                            SelfCanvasSlot;                                           // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0418(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x20];                                      // 0x0420(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.QuickSignMarkWidget");
		return pStaticClass;
	}


	void SetWorldPos(const struct FVector& Loc);
	void OnWidgetAlphaChange(float NewAlpha);
	void OnCenterOffsetChange(const struct FVector2D& CenterOffset);
};


// Class ShadowTrackerExtra.RadiationCircle
// 0x0038 (0x03C8 - 0x0390)
class ARadiationCircle : public AActor
{
public:
	class UStaticMeshComponent*                        CylinderMesh;                                             // 0x0390(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                        CylinderMeshBase;                                         // 0x0398(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraGameStateBase*                       SGameStatNew;                                             // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03A8(0x0010) MISSED OFFSET
	class UMaterialInstanceDynamic*                    DynamicMat;                                               // 0x03B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*                    DynamicMatBase;                                           // 0x03C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.RadiationCircle");
		return pStaticClass;
	}


	void InitRadiationCircle();
	void HandleOnSafeZoneTips(float Val);
};


// Class ShadowTrackerExtra.RefitVehicleHandle
// 0x0060 (0x0088 - 0x0028)
class URefitVehicleHandle : public UObject
{
public:
	TMap<int, struct FString>                          SlotConfig;                                               // 0x0028(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              Scale;                                                    // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     Location;                                                 // 0x007C(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.RefitVehicleHandle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ReloadWeaponState
// 0x0008 (0x01B8 - 0x01B0)
class UReloadWeaponState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ReloadWeaponState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ReplayUIManager
// 0x0138 (0x0160 - 0x0028)
class UReplayUIManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class ASTExtraPlayerController*                    pSTExtraPC;                                               // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTExtraGameInstance*                        pExtraInst;                                               // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerState*                         pExtraPS;                                                 // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       pViewCharacter;                                           // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0050(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.ReplayUIManager.ReplayUIPath
	class UReplayUserWidget*                           pReplayUserWidget;                                        // 0x0078(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FReplayTeammateInfo>                 SavedTeammateInfoArray;                                   // 0x0080(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<uint32_t, struct FString>                     AssumedMap_Key2name;                                      // 0x0090(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FString, struct FString>               AssumedMap_Name2name;                                     // 0x00E0(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0130(0x0018) MISSED OFFSET
	int                                                ReplayTargetTeamID;                                       // 0x0148(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	struct FString                                     ReplayTargetName;                                         // 0x0150(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ReplayUIManager");
		return pStaticClass;
	}


	void UpdateReplayUI();
	void ReplayUnbindBulletNumChangedDelegate(class ASTExtraBaseCharacter* InCharacter);
	void ReplayOnWeaponChanged();
	void ReplayOnSimulatedWeaponChanged();
	void ReplayOnBulletNumChanged();
	void ReplayBindBulletNumChangedDelegate(class ASTExtraBaseCharacter* InCharacter);
	void ReleaseManager();
	void InitManager();
	void ChangeProgress();
};


// Class ShadowTrackerExtra.ReplayUserWidget
// 0x0088 (0x0430 - 0x03A8)
class UReplayUserWidget : public UUAEUserWidget
{
public:
	TEnumAsByte<EDemoType>                             DemoType;                                                 // 0x03A8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET
	struct FString                                     ReplayNameStr;                                            // 0x03B0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ReplayTeamID;                                             // 0x03C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	class UReplayUIManager*                            pReplayUIManager;                                         // 0x03C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     UIOffsetVec;                                              // 0x03D0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET
	TMap<int, struct FReplayEnemyUIInfo>               CurEnemyUIMapTable;                                       // 0x03E0(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ReplayUserWidget");
		return pStaticClass;
	}


	void UpdateWeaponUI();
	void UpdateReplayUI();
	void UpdateOneEnemyUI(int _Index, const struct FReplayEnemyUIInfo& inUIInfo);
	void UpdateBulletUI();
	void OnReplayProgressChange();
	void InitIngameUI();
	void HideUnnecessaryUI();
	void HideOneEnemyUI(int _Index);
	void ForceUpdateUI();
	void ClearLastReplayUI();
	int AddOneEnemyUI(class ASTExtraPlayerState* InPlayerState);
};


// Class ShadowTrackerExtra.RespawnItemConfig
// 0x0010 (0x0040 - 0x0030)
class URespawnItemConfig : public UDataAsset
{
public:
	TArray<struct FRespawnItemMajorGroup>              MajorGroupList;                                           // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.RespawnItemConfig");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.RevivalCardItemHandle
// 0x0020 (0x00E8 - 0x00C8)
class URevivalCardItemHandle : public UBattleItemHandleBase
{
public:
	uint32_t                                           DroperPlayerKey;                                          // 0x00C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	struct FString                                     DroperPlayerName;                                         // 0x00D0(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBackpackComponent*                          pBackpackComp;                                            // 0x00E0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.RevivalCardItemHandle");
		return pStaticClass;
	}


	void TimerUseSelf();
	bool HandleUse(const struct FBattleItemUseTarget& Target, EBattleItemUseReason Reason);
	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& pickupInfo, EBattleItemPickupReason Reason);
};


// Class ShadowTrackerExtra.RevivalModeComponent
// 0x0050 (0x0170 - 0x0120)
class URevivalModeComponent : public UGameModeBaseComponent
{
public:
	TMap<uint32_t, int>                                DynamicBattleRank;                                        // 0x0120(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.RevivalModeComponent");
		return pStaticClass;
	}


	void RemoveDynamicRank(uint32_t PlayerKey);
	void OnPlayerEscape(class ASTExtraPlayerState* PlayerState, bool bIsPlayerAlive);
	bool IsAllTeamInRevival(int TeamID);
	TArray<struct FDynamicBattleRankInfo> GetDynamicBattleRankInfoList();
	void AddDynamicRankWinner(uint32_t PlayerKey);
	void AddDynamicRank(uint32_t PlayerKey);
};


// Class ShadowTrackerExtra.RevivalPointActor
// 0x0110 (0x04A0 - 0x0390)
class ARevivalPointActor : public AActor
{
public:
	class USceneComponent*                             DefaultRoot;                                              // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SmokeStartScaleDistance;                                  // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SmokeEndScaleDistance;                                    // 0x039C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SmokeStartScaleValue;                                     // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SmokeEndScaleValue;                                       // 0x03A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERevivalPointState                                 CurState;                                                 // 0x03A8(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERevivalPointState                                 PreState;                                                 // 0x03A9(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03AA(0x0002) MISSED OFFSET
	int                                                RevivalTime;                                              // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurRevivalTime;                                           // 0x03B0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               CanBeShowSmoking;                                         // 0x03B4(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03B5(0x0003) MISSED OFFSET
	int                                                OperationalDistance;                                      // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	TMap<ERevivalPointState, class UParticleSystem*>   RevivalPointPS;                                           // 0x03C0(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<ERevivalPointState, class UAkAudioEvent*>     RevivalPointSounds;                                       // 0x0410(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               RevivalInterruptSound;                                    // 0x0460(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SmokingdisappearTime;                                     // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                IconID;                                                   // 0x046C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32_t>                                   CurrentRevivingPlayers;                                   // 0x0470(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASTExtraPlayerController>     CurRevivalPC;                                             // 0x0480(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0488(0x0010) MISSED OFFSET
	TWeakObjectPtr<class UParticleSystemComponent>     DestoryStatePSCom;                                        // 0x0498(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.RevivalPointActor");
		return pStaticClass;
	}


	void StartRevival();
	bool RevivalPlayers(class ASTExtraPlayerController* InPC);
	bool RecheckCurrentRevivingPlayers();
	void OnRep_ShowSmoking();
	void OnRep_RevivalPointState(ERevivalPointState LastPreState);
	void OnRep_CurrentRevivingPlayers();
	bool IsPlayerRevivedCurrently(uint32_t PlayerKey);
	bool GiveUpRevivalPlayers(class ASTExtraPlayerController* InPC);
	void DistanceChangedEvent(float Scale);
};


// Class ShadowTrackerExtra.RevivalPointInteractionWidget
// 0x0040 (0x03E8 - 0x03A8)
class URevivalPointInteractionWidget : public UUAEUserWidget
{
public:
	class ASTExtraPlayerController*                    MyPC;                                                     // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                      Image_ItemCDBar;                                          // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                                  TextBlock_ItemCDTime;                                     // 0x03B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TimeToShowDigist;                                         // 0x03C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03C4(0x0008) MISSED OFFSET
	bool                                               bShowRevivalCountDown;                                    // 0x03CC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bResetCountDownTime;                                      // 0x03CD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x1A];                                      // 0x03CE(0x001A) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.RevivalPointInteractionWidget");
		return pStaticClass;
	}


	void ShowHideTowerUI(bool isFreeCameraInOB);
};


// Class ShadowTrackerExtra.SeasonStatueBase
// 0x0000 (0x0390 - 0x0390)
class ASeasonStatueBase : public AActor
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SeasonStatueBase");
		return pStaticClass;
	}


	void SetStatueBaseInfo(const struct FStatueBaseParam& Param, TArray<struct FSeasonStatueData> StatueInfo);
};


// Class ShadowTrackerExtra.SecretRoom
// 0x0010 (0x03B0 - 0x03A0)
class ASecretRoom : public AUAERegionActor
{
public:
	class USceneComponent*                             Root;                                                     // 0x03A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SecretRoom");
		return pStaticClass;
	}


	void SpawnItems();
};


// Class ShadowTrackerExtra.SecurityLogWeaponCollector
// 0x02B8 (0x03C8 - 0x0110)
class USecurityLogWeaponCollector : public UActorComponent
{
public:
	class ASTExtraBaseCharacter*                       OwnerCH;                                                  // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USecuryInfoComponent*                        SecurityLogSender;                                        // 0x0118(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x2A8];                                     // 0x0120(0x02A8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SecurityLogWeaponCollector");
		return pStaticClass;
	}


	void OnCharacterWeaponStartFire();
	void OnCharacterWeaponShootHit(const struct FShootWeaponDamageEvent& DamageDetail, const struct FBulletHitInfoUploadData& HitData, const struct FLocalShootHitData& LocalHitData);
	void OnCharacterUsingWeaponChanged(TEnumAsByte<ESurviveWeaponPropSlot> TargetChangeSlot);
	void OnCharacterShootTarget(class AActor* InHitActor, const struct FSecurityLogHitTargetInfo& TargetInfo);
	void OnCharacterAimModeChanged(TEnumAsByte<EPlayerCameraMode> Mode);
	bool IsInADSAimState();
	void CheckReportSecAttackFlowWithAttackFlow(const struct FAttackFlow& AttackFlow);
	void CheckReportSecAttackFlow();
};


// Class ShadowTrackerExtra.SecuryInfoComponent
// 0x00C8 (0x01D8 - 0x0110)
class USecuryInfoComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0xC8];                                      // 0x0110(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SecuryInfoComponent");
		return pStaticClass;
	}


	void ReportVerifyInfoFlow();
	void ReportSecAttackFlow(const struct FSecAttackFlow& SecAttackFlow);
	void ReportPlayerKillFlow(const struct FClientSecPlayerKillFlow& PlayerKillFlow);
	void ReportMrpcsFlow(const struct FClientSecMrpcsFlow& MrpcsFlow);
	void ReportJumpFlow(const struct FClientJumpFlow& JumpFlow);
	void ReportHurtFlow(const struct FHurtFlow& HurtFlow);
	void ReportGvoiceTeamQuit(const struct FGvoiceTeamQuit& teamQuit);
	void ReportGvoiceTeamCreate(const struct FGvoiceTeamCreate& teamCreate);
	void ReportGameStartFlow(const struct FClientGameStartFlow& GameStartFlow);
	void ReportGameSetting(const struct FGameSetting& GameSetting);
	void ReportGameEndFlow(const struct FClientGameEndFlow& GameEndFlow);
	void ReportGameBaseInfo(const struct FGameBaseInfo& BaseInfo);
	void ReportCircleFlow(const struct FClientCircleFlow& CircleFlow);
	void ReportAttackFlow(const struct FAttackFlow& AttackFlow);
	void ReportAimFlow(const struct FAimFlow& AimFlow);
	void GetWeaponProperty(class ASTExtraBaseCharacter* Character, class ASTExtraWeapon* TWeapon, int* WeaponID, int* BulletID, int* BulletNum);
};


// Class ShadowTrackerExtra.SeekAndLockCrossHairComponent
// 0x0080 (0x02B8 - 0x0238)
class USeekAndLockCrossHairComponent : public UCrossHairComponent
{
public:
	struct FString                                     BoxFrameUIPath;                                           // 0x0238(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   LockFrameCornerLineSize;                                  // 0x0248(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESeekAndLockStage, struct FLinearColor>       LockFrameColorConfig;                                     // 0x0250(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                               bDrawDebugSeekAndLockFrame;                               // 0x02A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasShowSeekAndLock3DUI;                                  // 0x02A1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x02A2(0x0006) MISSED OFFSET
	class USeekAndLockWeaponComponent*                 SeekAndLockWeaponComponent;                               // 0x02A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                                  BoxFrameTexture;                                          // 0x02B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SeekAndLockCrossHairComponent");
		return pStaticClass;
	}


	void DrawHUD(class UHUDWidgetBase* WeaponHudWidget, class UCanvas* Canvas);
};


// Class ShadowTrackerExtra.SeekAndLockProjectileComponent
// 0x0070 (0x04E0 - 0x0470)
class USeekAndLockProjectileComponent : public UNormalProjectileComponent
{
public:
	float                                              ShootDirectFlyTime;                                       // 0x0470(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TurnDirectionRadSpeed;                                    // 0x0474(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESeekAndLockStage, float>                     FollowTargetTimeByStageMap;                               // 0x0478(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSeekAndLockRPGBulletUploadData             SeekAndLockRPGBulletUploadData;                           // 0x04C8(0x0010) (BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SeekAndLockProjectileComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.SeekAndLockRPGBullet
// 0x00C0 (0x0800 - 0x0740)
class ASeekAndLockRPGBullet : public AExplosionProjectileBullet
{
public:
	float                                              MaxHp;                                                    // 0x0740(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpeedAcceleration;                                        // 0x0744(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxFlySpeed;                                              // 0x0748(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayBurstSpeedUpTime;                                    // 0x074C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeekAndLockRPGBulletLaunchParams           ServerSeekAndLockLaunchParams;                            // 0x0750(0x0080) (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FRPGBulletSeekAndLockData                   SeekAndLockData;                                          // 0x07D0(0x0014) (NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                              CurFlyTime;                                               // 0x07E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CurHP;                                                    // 0x07E8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CurDelayBurstSpeedUpTime;                                 // 0x07EC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bHasBurstSpeedUp;                                         // 0x07F0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0xF];                                       // 0x07F1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SeekAndLockRPGBullet");
		return pStaticClass;
	}


	float TakeDamage(float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void SetSeekAndLockData(const struct FRPGBulletSeekAndLockData& Data);
	void RPC_Multicast_StartSeekAndLockLaunch(float Speed, const struct FTransform& Trans, class AActor* InOwningWeapon, class AActor* InInstigator, uint32_t _ShootID, const struct FRPGBulletSeekAndLockData& Data);
	void OnRep_ServerSeekAndLockLaunchParams(const struct FSeekAndLockRPGBulletLaunchParams& OldParam);
	void LaunchOnServer(float Speed, class AActor* InOwningWeapon, class AActor* InInstigator, uint32_t _ShootID, struct FTransform* Trans);
	float GetMaxBulletFlySpeed();
	void BPOnStartBurstSpeedUp();
};


// Class ShadowTrackerExtra.SeekAndLockWeapon3DWidget
// 0x0068 (0x0410 - 0x03A8)
class USeekAndLockWeapon3DWidget : public UUAEUserWidget
{
public:
	float                                              LandscapeRotation;                                        // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Offset;                                                   // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Width;                                                    // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	struct FName                                       materialXParameterName;                                   // 0x03B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CPPNavigatorTickRate;                                     // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    CompassMat;                                               // 0x03C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	int                                                DisplayCharRotation;                                      // 0x03D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET
	class USeekAndLockWeaponComponent*                 SeekAndLockWeaponComponent;                               // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USeekAndLockCrossHairComponent*              SeekAndLockCrossHairComponent;                            // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	class UCustomWidgetComponent*                      CustomWidgetComp;                                         // 0x03F8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0400(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraPlayerCharacter*                     OwnerPlayer;                                              // 0x0408(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SeekAndLockWeapon3DWidget");
		return pStaticClass;
	}


	void UpdateRT();
	void Show3DUI();
	void SetCompassMat(class UMaterialInstanceDynamic* InCompassMat);
	void OnPostInitWidget();
	bool IsTextNotEqualTo(const struct FText& SelfValue, const struct FText& OtherText, bool ReverseResult);
	bool IsStrNotEqualToText(const struct FString& InValue, const struct FText& InText, bool ReverseResult);
	bool IsModToZero(int InValue, int ModValue);
	bool IsIntNotEqualToText(int InValue, const struct FText& InText, bool ReverseResult);
	void InitCustomWidget(class AActor* OwnerActor, class UWidgetComponent* WidgetComponent);
	void Hide3DUI();
	void HandleWeaponScopeOut(bool bIsBegin);
	void HandleWeaponScopeIn(bool bIsBegin);
	void HandleWeaponGetOwner(class AActor* OwnerActor);
	void HandleChangeTraceTarget(const struct FHitResult& HitInfo);
	void HandleChangeSeekAndLockStageTip(const struct FString& Tip);
	struct FRotator GetPlayerLookRotation();
	void ExtraForGuidedMissileRenderStyle(bool bSet);
	void BPChangeTraceTargetDis(float Distance);
	void BPChangeSeekAndLockStageTip(const struct FString& Tip);
	void BindCustomUserEvent(class AActor* OwnerActor, class UWidgetComponent* WidgetComponent);
};


// Class ShadowTrackerExtra.SeekAndLockOwnerInterface
// 0x0000 (0x0028 - 0x0028)
class USeekAndLockOwnerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SeekAndLockOwnerInterface");
		return pStaticClass;
	}


	void StopPlayedLockedByEnemy2DSound();
	void StopPlayedEnemyLaunchRocket2DSound();
	void PlayLockedByEnemy2DSound();
	void PlayEnemyLaunchRocket2DSound();
	bool NeedPlayLockedByEnemy2DSoundOnSimulatedClient();
	struct FVector GetLocationForSeekAndLock();
	bool CanBeSeekAndLocked(class USeekAndLockWeaponComponent* TargetComponent);
};


// Class ShadowTrackerExtra.SeekAndLockWeaponComponent
// 0x0238 (0x0370 - 0x0138)
class USeekAndLockWeaponComponent : public UWeaponLogicBaseComponent
{
public:
	TArray<class UClass*>                              SeekAndLockTargetClassConfigList;                         // 0x0138(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                              SeekAreaPixelSize;                                        // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeekAndLockStageConfig                     Stage1Confog;                                             // 0x014C(0x0008) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSeekAndLockStageConfig                     Stage2Confog;                                             // 0x0154(0x0008) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                              ScopeInDelayTime;                                         // 0x015C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InitialLockFrameLength;                                   // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FinalLockFrameLength;                                     // 0x0164(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSeekDeistance;                                         // 0x0168(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LineTraceTargetMaxDistance;                               // 0x016C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HistoryLockDataMaxCacheTime;                              // 0x0170(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TrySeekAndGetLockTargetInterval;                          // 0x0174(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckSeekAndGetLockTargetVisibilityInterval;              // 0x0178(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TraceTargetInterval;                                      // 0x017C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESeekAndLockStage, struct FString>            SeekAndLockStageTipsMap;                                  // 0x0180(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ESeekAndLockStage, class UAkAudioEvent*>      LockStageBeginSoundConfig;                                // 0x01D0(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ESeekAndLockStage, class UAkAudioEvent*>      EnemyLockStageBeginSoundConfig;                           // 0x0220(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               LockStopSoundConfig;                                      // 0x0270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               EnemyLockStopSoundConfig;                                 // 0x0278(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               EnemyLaunchRocketSound;                                   // 0x0280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               EnemyLaunchRocketStopSound;                               // 0x0288(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0290(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeedDrawUI;                                              // 0x0298(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0299(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSeekAndLockStageEnterDelegate;                          // 0x02A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnChangeTraceTargetLocDelegate;                           // 0x02B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnChangeSeekAndLockStageTipDelegate;                      // 0x02C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x02D0(0x0010) MISSED OFFSET
	float                                              CurTrySeekAndGetLockTargetInterval;                       // 0x02E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurCheckSeekAndGetLockTargetVisibilityInterval;           // 0x02E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurTraceTargetCountTime;                                  // 0x02E8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasShowSeekAndLock3DUI;                                  // 0x02EC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x83];                                      // 0x02ED(0x0083) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SeekAndLockWeaponComponent");
		return pStaticClass;
	}


	void ShowEnemyLaunchRocketTips();
	void RPC_Server_NotifyServerEnterNewStage(class AActor* LockTarget, ESeekAndLockStage Stage);
	void RPC_Server_NotifyServerCancelLock(class AActor* LockTarget);
	void RPC_Client_NotifyServerEnterNewStage(class AActor* LockTarget, ESeekAndLockStage Stage);
	void RPC_Client_NotifyServerCancelLock(class AActor* LockTarget);
	void RemoveTargetList(TArray<class AActor*> TargetList);
	void RemoveTarget(class AActor* Target);
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(ESeekAndLockStage Stage);
	void OnChangeTraceTargetLocDelegate__DelegateSignature(const struct FHitResult& HitInfo);
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(const struct FString& Tip);
	void InitComplete();
	void HandleTargetOutOfSeekArea();
	void HandleReconnectOnServer(class ASTExtraWeapon* Weapon);
	void HandleDisconnectOnServer(class ASTExtraWeapon* Weapon);
	ESeekAndLockStage GetCurrentSeekAndLockStage();
	class AActor* GetCurrentLockTarget();
	bool CheckTargetIsVisible(class AActor* Target);
	bool CheckTargetClassIsIncluedByClassMap(class AActor* Target);
	void AddTarget(class AActor* Target);
};


// Class ShadowTrackerExtra.ServerSwitchComponent
// 0x0068 (0x0178 - 0x0110)
class UServerSwitchComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnFPSMonitorConfigSwitchRecv;                             // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnFPSLowWarning;                                          // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FFPSMonitorConfigSwitch                     FPSMonitorConfigSwitch;                                   // 0x0130(0x0014) (Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                              LowFPSWarningTipsLastTime;                                // 0x0144(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             FPSLowWarningSDKMatch;                                    // 0x0148(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                               bLocalSwitcherFPSLowWarning;                              // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0159(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ServerSwitchComponent");
		return pStaticClass;
	}


	void RequireConfigRPC();
	void OnUserQualitySettingChanged(int renderlevel);
	void MakeLowFPSWarningEx();
	void MakeLowFPSWarning(float targetFPS, float currentFPS);
	void CountingDown();
	void CloseFPSCheck();
	void AnswerconfigRPC(const struct FFPSMonitorConfigSwitch& configswitch);
};


// Class ShadowTrackerExtra.ShootingPracticeTarget
// 0x0060 (0x03F0 - 0x0390)
class AShootingPracticeTarget : public AActor
{
public:
	float                                              MaxHealth;                                                // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UpDownChangeSpeed;                                        // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    HorizontalMeshRelativeRot;                                // 0x0398(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    VerticalMeshRelativeRot;                                  // 0x03A4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              ResetAndGetUpTimeAfterShootDown;                          // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurHealth;                                                // 0x03B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsUp;                                                    // 0x03B8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasActivatedMove;                                        // 0x03B9(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03BA(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    DestroyShootingPracticeTargetDelegate;                    // 0x03C0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                        StaticMeshComp;                                           // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USmoothActorMoveComponent*                   MoveComp;                                                 // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x03E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ShootingPracticeTarget");
		return pStaticClass;
	}


	void SetUpOrDownOnServer(bool bUp);
	void RPC_NetMulticast_SetUpOrDownOnServer(bool bUp);
	void RPC_NetMulticast_NotifyBroken();
	void ResetAndGetUpOnServer();
	void OnRep_bIsUp();
	void OnRep_bHasActivatedMove();
	void HandleBroken(bool bFromClientBeginPlay);
};


// Class ShadowTrackerExtra.ShootingUIWidget
// 0x00B8 (0x0460 - 0x03A8)
class UShootingUIWidget : public UUAEUserWidget
{
public:
	float                                              ReloadingCD;                                              // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	struct FText                                       ReloadCountDownText;                                      // 0x03B0(0x0018) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FText                                       GunBulletText;                                            // 0x03C8(0x0018) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FText                                       BulletLeftCount;                                          // 0x03E0(0x0018) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UImage*                                      ReloadCDMask;                                             // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                      ReloadBtnBG;                                              // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                     SprintBtn;                                                // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                     ReloadBtn;                                                // 0x0410(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                      FireBtn;                                                  // 0x0418(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       CurPlayerBaseCharacter;                                   // 0x0420(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnReloadCountDownChangeDelegate;                          // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnGunBulletNumChangeDelegate;                             // 0x0438(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBulletLeftNumChangeDelegate;                            // 0x0448(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ShootingUIWidget");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ShootVerifyBaseComp
// 0x0000 (0x0300 - 0x0300)
class UShootVerifyBaseComp : public ULagCompensationComponentBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ShootVerifyBaseComp");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WeaponEffectComponent
// 0x0060 (0x0198 - 0x0138)
class UWeaponEffectComponent : public UWeaponLogicBaseComponent
{
public:
	TMap<TEnumAsByte<EWeaponAction>, class UAkAudioEvent*> SoundDataMap;                                             // 0x0138(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               ShellDropSound;                                           // 0x0188(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               SilencerShootSound;                                       // 0x0190(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponEffectComponent");
		return pStaticClass;
	}


	void HandleWeaponAction(TEnumAsByte<EWeaponAction> Action);
};


// Class ShadowTrackerExtra.ShootWeaponEffectComponent
// 0x0220 (0x03B8 - 0x0198)
class UShootWeaponEffectComponent : public UWeaponEffectComponent
{
public:
	class UClass*                                      CameraShakeTemplate_NormalCameraMode;                     // 0x0198(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      CameraShakeTemplate_NearCameraMode;                       // 0x01A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      CameraShakeTemplate_AimCameraMode;                        // 0x01A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraShakeInnerRadius;                                   // 0x01B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraShakeOuterRadius;                                   // 0x01B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraShakFalloff;                                        // 0x01B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeedRefreshMuzzle;                                       // 0x01BC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeedDisableMuzzleFX;                                     // 0x01BD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01BE(0x0002) MISSED OFFSET
	class UParticleSystem*                             MuzzleFX;                                                 // 0x01C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocalMuzzelFXScale;                                       // 0x01C8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	class UParticleSystem*                             ScopeMuzzleFX;                                            // 0x01D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ScopeMuzzelFXScale;                                       // 0x01E0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01EC(0x0004) MISSED OFFSET
	class UParticleSystem*                             RemoteMuzzleFX;                                           // 0x01F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RemoteMuzzelFXScale;                                      // 0x01F8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFXDistancaScaleStruct                      RemoteMuzzleFXDistanceScale;                              // 0x0204(0x0010) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0214(0x0004) MISSED OFFSET
	class UParticleSystem*                             LocalSilencerMuzzleFX;                                    // 0x0218(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocalSilencerMuzzelFXScale;                               // 0x0220(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x022C(0x0004) MISSED OFFSET
	class UParticleSystem*                             ScopeSilencerMuzzleFX;                                    // 0x0230(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ScopeSilencerMuzzelFXScale;                               // 0x0238(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0244(0x0004) MISSED OFFSET
	class UParticleSystem*                             RemoteSilencerMuzzleFX;                                   // 0x0248(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RemoteSilencerMuzzelFXScale;                              // 0x0250(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFXDistancaScaleStruct                      RemoteSilencerMuzzleFXDistanceScale;                      // 0x025C(0x0010) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x4];                                       // 0x026C(0x0004) MISSED OFFSET
	class UParticleSystem*                             LocalFiringSuppressorMuzzleFX;                            // 0x0270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocalFiringSuppressorMuzzelFXScale;                       // 0x0278(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0284(0x0004) MISSED OFFSET
	class UParticleSystem*                             ScopeFiringSuppressorMuzzleFX;                            // 0x0288(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ScopeFiringSuppressorMuzzelFXScale;                       // 0x0290(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x4];                                       // 0x029C(0x0004) MISSED OFFSET
	class UParticleSystem*                             RemoteFiringSuppressorMuzzleFX;                           // 0x02A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RemoteFiringSuppressorMuzzelFXScale;                      // 0x02A8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFXDistancaScaleStruct                      RemoteSuppressorMuzzleFXDistanceScale;                    // 0x02B4(0x0010) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x4];                                       // 0x02C4(0x0004) MISSED OFFSET
	class UParticleSystem*                             LocalCompensatorMuzzleFX;                                 // 0x02C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocalCompensatorMuzzelFXScale;                            // 0x02D0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x4];                                       // 0x02DC(0x0004) MISSED OFFSET
	class UParticleSystem*                             ScopeCompensatorMuzzleFX;                                 // 0x02E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ScopeCompensatorMuzzelFXScale;                            // 0x02E8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x4];                                       // 0x02F4(0x0004) MISSED OFFSET
	class UParticleSystem*                             RemoteCompensatorMuzzleFX;                                // 0x02F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RemoteCompensatorMuzzelFXScale;                           // 0x0300(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsActiveShellDropFXWhenShoot;                            // 0x030C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x3];                                       // 0x030D(0x0003) MISSED OFFSET
	class UParticleSystem*                             ShellDropFX;                                              // 0x0310(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ShellDropFXScale;                                         // 0x0318(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0324(0x0004) MISSED OFFSET
	class UParticleSystem*                             FPPShellDropFX;                                           // 0x0328(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     FPPShellDropFXScale;                                      // 0x0330(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	class UClass*                                      OBEffectBulletTemplate;                                   // 0x0340(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxOBBulletTrackCompNum;                                  // 0x0348(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0350(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    MuzzleFXComp;                                             // 0x0358(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UParticleSystemComponent*>            OBBulletTrackFXCompsArray;                                // 0x0360(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FVector                                     MuzzleFXOriginalScale;                                    // 0x0370(0x000C) (IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MuzzleFXPrevDistanceScaler;                               // 0x037C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    ShellDropFXComp;                                          // 0x0380(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    FPPShellDropFXComp;                                       // 0x0388(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData16[0x10];                                      // 0x0390(0x0010) MISSED OFFSET
	TArray<class AOBEffectBullet*>                     OBEffectBulletsCachePool;                                 // 0x03A0(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData17[0x8];                                       // 0x03B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ShootWeaponEffectComponent");
		return pStaticClass;
	}


	void ReloadAttr(int WeaponID);
	void OnWeaponUnEquiped();
	void OnWeaponEuiped();
	void HandleWeaponAction(TEnumAsByte<EWeaponAction> Action);
	class AOBEffectBullet* GetOBEffectBullet();
	int GetAvailableOBEffectBulletNum();
	void ActiveLocalShellDropFX();
};


// Class ShadowTrackerExtra.WeaponEntity
// 0x0298 (0x03D0 - 0x0138)
class UWeaponEntity : public UWeaponLogicBaseComponent
{
public:
	int                                                WeaponID;                                                 // 0x0138(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EWeaponType>                           WeaponType;                                               // 0x013C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EWeaponTypeNew>                        WeaponTypeNew;                                            // 0x013D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EWeaponHoldType>                       WeaponHoldType;                                           // 0x013E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x013F(0x0001) MISSED OFFSET
	struct FName                                       WeaponAttachSocket;                                       // 0x0140(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseCustomWeaponBackpackAttachSocket;                     // 0x0148(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0149(0x0007) MISSED OFFSET
	struct FName                                       CustomWeaponBackpackAttachSocket;                         // 0x0150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShowBulletTraceWhenScoped;                                // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	int                                                MaxNoGravityRange;                                        // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LaunchGravityScale;                                       // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableProneHolding;                                      // 0x0164(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0165(0x0003) MISSED OFFSET
	int                                                UnableProneHoldingTipID;                                  // 0x0168(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableVehicleHolding;                                    // 0x016C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableLeanOutHolding;                                    // 0x016D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableShovelHolding;                                     // 0x016E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x1];                                       // 0x016F(0x0001) MISSED OFFSET
	int                                                UnableShovelHoldingTipID;                                 // 0x0170(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnablePeek;                                              // 0x0174(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0175(0x0003) MISSED OFFSET
	int                                                UnablePeekTipID;                                          // 0x0178(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableVehicleShoot;                                      // 0x017C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GuidedMissileVehicleRenderIsOpen;                         // 0x017D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x2];                                       // 0x017E(0x0002) MISSED OFFSET
	TMap<TEnumAsByte<EWeaponComponentType>, bool>      PlugComponentSlotMap;                                     // 0x0180(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<TEnumAsByte<EWeaponComponentType>, struct FWeaponComponentItemData> PlugComponentSlotDataMap;                                 // 0x01D0(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              SwitchFromIdleToBackpackTime;                             // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SwitchFromBackpackToIdleTime;                             // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPawnState>                                 DisableWeaponPlayerStateList;                             // 0x0228(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0238(0x0008) MISSED OFFSET
	struct FTransform                                  AttachToBackRelativeTransform_NoBagL;                     // 0x0240(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  AttachToBackRelativeTransform_NoBagR;                     // 0x0270(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  AttachToBackRelativeTransform_Lv1BagL;                    // 0x02A0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  AttachToBackRelativeTransform_Lv1BagR;                    // 0x02D0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  AttachToBackRelativeTransform_Lv2BagL;                    // 0x0300(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  AttachToBackRelativeTransform_Lv2BagR;                    // 0x0330(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  AttachToBackRelativeTransform_Lv3BagL;                    // 0x0360(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  AttachToBackRelativeTransform_Lv3BagR;                    // 0x0390(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInstance*                           WeaponMaterialUsedForDisplay;                             // 0x03C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsShieldWeapon;                                          // 0x03C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanBeHoldedWithShield;                                   // 0x03C9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x6];                                       // 0x03CA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponEntity");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ShootWeaponEntity
// 0x0540 (0x0910 - 0x03D0)
class UShootWeaponEntity : public UWeaponEntity
{
public:
	class UClass*                                      BulletTemplate;                                           // 0x03D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BulletFireSpeed;                                          // 0x03D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAddOwnerOffsetVelocity;                                  // 0x03DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03DD(0x0003) MISSED OFFSET
	float                                              MaxVelocityOffsetAddRate;                                 // 0x03E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxBulletNumInOneClip;                                    // 0x03E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxBulletNumInBarrel;                                     // 0x03E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ExtendMaxBulletNumInOneClip;                              // 0x03EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExtendBulletNumAttachment>          ReplaceExtendMaxBulletNumList;                            // 0x03F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              ShootInterval;                                            // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasSingleFireMode;                                       // 0x0404(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasAutoFireMode;                                         // 0x0405(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasBurstFireMode;                                        // 0x0406(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0407(0x0001) MISSED OFFSET
	int                                                BurstShootBulletsNum;                                     // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BurstShootInterval;                                       // 0x040C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BurstShootCD;                                             // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BulletNumSingleShot;                                      // 0x0414(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       MuzzleSocketName;                                         // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       DefaultMuzzleSocketName;                                  // 0x0420(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SilencerSocketName;                                       // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       FiringSuppressorSocketName;                               // 0x0430(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ShellDropSocketName;                                      // 0x0438(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ScopeAimCameraSocketName;                                 // 0x0440(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactEffectSkipDistance;                                 // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxImpactEffectSkipTime;                                  // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ESTEWeaponShootType>                   shootType;                                                // 0x0450(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0451(0x0003) MISSED OFFSET
	int                                                ShootTotalType;                                           // 0x0454(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ADSManualStop;                                            // 0x0458(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	float                                              WeaponWarnUpTime;                                         // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponHitPartCoff                          WeaponHitPartCoff;                                        // 0x0460(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponHitPartCoff                          WeaponHitPartCoffZombie;                                  // 0x0474(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                              BaseImpactDamage;                                         // 0x0488(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BulletRange;                                              // 0x048C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ImpactActorTemplate;                                      // 0x0490(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EBulletImpactDir>                      ImpactDirType;                                            // 0x0498(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0499(0x0007) MISSED OFFSET
	TArray<struct FSRangeAttenuateConfig>              RangeAttenuate;                                           // 0x04A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              RangeModifier;                                            // 0x04B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReferenceDistance;                                        // 0x04B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IgnoreRangeAttenuatDis;                                   // 0x04B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET
	class UClass*                                      DamageType;                                               // 0x04C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDefineID                               BulletType;                                               // 0x04C8(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDefineID                               ReplaceBulletType;                                        // 0x04E0(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasInfiniteClips;                                        // 0x04F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bClipHasInfiniteBullets;                                  // 0x04F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x2];                                       // 0x04FA(0x0002) MISSED OFFSET
	int                                                InitBulletInClip;                                         // 0x04FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoReload;                                              // 0x0500(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0501(0x0003) MISSED OFFSET
	float                                              TraceDistance;                                            // 0x0504(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxValidHitTime;                                          // 0x0508(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x4];                                       // 0x050C(0x0004) MISSED OFFSET
	TMap<TEnumAsByte<EPhysicalSurface>, float>         BreakThroughDampRateConfig;                               // 0x0510(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              MaxDamageRate;                                            // 0x0560(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasOBBulletTrack;                                        // 0x0564(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0565(0x0003) MISSED OFFSET
	class UCurveFloat*                                 OBBulletSpeedScaleCurve;                                  // 0x0568(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponVisualBulletClientModeConfig         VisualBulletTrackConfig;                                  // 0x0570(0x0070) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                                   LocalOBBulletLaunchRangeFromMuzzle;                       // 0x05E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageImpulse;                                            // 0x05E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EWeaponReloadType>                     ReloadType;                                               // 0x05EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x3];                                       // 0x05ED(0x0003) MISSED OFFSET
	float                                              PreFireTime;                                              // 0x05F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PostFireTime;                                             // 0x05F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PostReloadTime;                                           // 0x05F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReloadDurationStart;                                      // 0x05FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReloadDurationLoop;                                       // 0x0600(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReloadTime;                                               // 0x0604(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReloadTimeTactical;                                       // 0x0608(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReloadTimeMagOut;                                         // 0x060C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReloadTimeMagIn;                                          // 0x0610(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0614(0x0004) MISSED OFFSET
	struct FName                                       ReloadAllTIDName;                                         // 0x0618(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ReloadTacticalTIDName;                                    // 0x0620(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseSpecificBulletNumOnReload;                            // 0x0628(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0629(0x0003) MISSED OFFSET
	int                                                ReloadSpecificBulletNum;                                  // 0x062C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ReloadWithNoCost;                                         // 0x0630(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0631(0x0007) MISSED OFFSET
	struct FAutoAimingConfig                           AutoAimingConfig;                                         // 0x0638(0x0108) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FAutoAimingConfig>                   AutoAimingConfigList;                                     // 0x0740(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0750(0x0008) MISSED OFFSET
	bool                                               IsSupportAutoAim;                                         // 0x0758(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x7];                                       // 0x0759(0x0007) MISSED OFFSET
	struct FSRecoilInfo                                RecoilInfo;                                               // 0x0760(0x0070) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                              AccessoriesVRecoilFactor;                                 // 0x07D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AccessoriesHRecoilFactor;                                 // 0x07D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AccessoriesRecoveryFactor;                                // 0x07D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSDeviation                                 DeviationInfo;                                            // 0x07DC(0x0040) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                              ShotGunVerticalSpread;                                    // 0x081C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShotGunHorizontalSpread;                                  // 0x0820(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GameDeviationFactor;                                      // 0x0824(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GameDeviationAccuracy;                                    // 0x0828(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AccessoriesDeviationFactor;                               // 0x082C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      CrossHairType;                                            // 0x0830(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0831(0x0003) MISSED OFFSET
	float                                              CrossHairInitialSize;                                     // 0x0834(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CrossHairBurstSpeed;                                      // 0x0838(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CrossHairBurstIncreaseSpeed;                              // 0x083C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VehicleWeaponDeviationAngle;                              // 0x0840(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawCrosshairWhenScope;                                  // 0x0844(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData17[0x3];                                       // 0x0845(0x0003) MISSED OFFSET
	struct FName                                       DefaultScopeSocket;                                       // 0x0848(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       DefaultGripSocket;                                        // 0x0850(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       DefaultGunStockSocket;                                    // 0x0858(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       DefaultMagSocket;                                         // 0x0860(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WeaponBodyLength;                                         // 0x0868(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData18[0x4];                                       // 0x086C(0x0004) MISSED OFFSET
	TArray<struct FName>                               OpticalSightAttachmentSocketNameList;                     // 0x0870(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData19[0x4];                                       // 0x0880(0x0004) MISSED OFFSET
	float                                              WeaponAimFOV;                                             // 0x0884(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WeaponAimInTime;                                          // 0x0888(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WeaponAimPitchRate;                                       // 0x088C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WeaponAimYawRate;                                         // 0x0890(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GameMotionYawRate;                                        // 0x0894(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GameMotionPitchRate;                                      // 0x0898(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForegripParam;                                            // 0x089C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MagParam;                                                 // 0x08A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               SimulateMagParam;                                         // 0x08A4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData20[0x3];                                       // 0x08A5(0x0003) MISSED OFFSET
	float                                              SensitiveFireYawRate;                                     // 0x08A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SensitiveFirePitchRate;                                   // 0x08AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ESightType>                            SightType;                                                // 0x08B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData21[0x7];                                       // 0x08B1(0x0007) MISSED OFFSET
	struct FItemDefineID                               DefaultScopeID;                                           // 0x08B8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxBulletImpactFXClampDistance;                           // 0x08D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxBulletImpactFXSpawnNum;                                // 0x08D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RecoilKickADS;                                            // 0x08D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExtraHitPerformScale;                                     // 0x08DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HUDAlphaDecreaseSpeedScale;                               // 0x08E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoExitScopeAfterFire;                                  // 0x08E4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReleaseToFireType                                 ReleaseFireType;                                          // 0x08E5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableScopeIn;                                           // 0x08E6(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLock90DirWhenPitchAbove75;                               // 0x08E7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LockAnimPitchDegree;                                      // 0x08E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LockAnimPitchDegreeCrouch;                                // 0x08EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimationKick;                                            // 0x08F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ReloadAnimSlot;                                           // 0x08F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ReloadAnimAdditive;                                       // 0x08F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShowBarrelBulletNumUI;                                   // 0x08F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bRecordHitDetail;                                         // 0x08FA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData22[0x5];                                       // 0x08FB(0x0005) MISSED OFFSET
	TArray<unsigned char>                              CoronaEffectCfg;                                          // 0x0900(0x0010) (Edit, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ShootWeaponEntity");
		return pStaticClass;
	}


	void ReloadNoEncodeAttr();
	void ReloadEncodeAttr();
	void ReloadCanModifyInGameAttr(const struct FString& AttrName, float NewValue);
	void ReloadAttr();
	struct FItemDefineID GetBulletType();
	struct FString GetAttrReloadTableName();
	void EncodeAttr();
};


// Class ShadowTrackerExtra.WeaponStateManager
// 0x0060 (0x0198 - 0x0138)
class UWeaponStateManager : public UWeaponLogicBaseComponent
{
public:
	class UWeaponStateBase*                            CurrentState;                                             // 0x0138(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWeaponStateBase*                            DefaultState;                                             // 0x0140(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0148(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponStateManager");
		return pStaticClass;
	}


	class UWeaponStateBase* GetCurrentState();
	TEnumAsByte<EFreshWeaponStateType> GetCurrentFreshWeaponStateType();
};


// Class ShadowTrackerExtra.ShootWeaponStateManager
// 0x0000 (0x0198 - 0x0198)
class UShootWeaponStateManager : public UWeaponStateManager
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ShootWeaponStateManager");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ShowActorFrameComponent
// 0x00D0 (0x0390 - 0x02C0)
class UShowActorFrameComponent : public USceneComponent
{
public:
	struct FFrameUITransformData                       FrameUITransformData;                                     // 0x02C0(0x0040) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMaterialBillboardComponent>  FrameUI;                                                  // 0x0300(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TranslucentSortPriority;                                  // 0x0308(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x030C(0x0004) MISSED OFFSET
	class UMaterialInterface*                          Material;                                                 // 0x0310(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 DistanceToOpacityCurve;                                   // 0x0318(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSizeIsInScreenSpace;                                     // 0x0320(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0321(0x0007) MISSED OFFSET
	class UCurveFloat*                                 DistanceToSizeCurve;                                      // 0x0328(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     FrameDetailsUIPath;                                       // 0x0330(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     FrameDetailsParentWidgetName;                             // 0x0340(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     FrameDetailsParentOuterName;                              // 0x0350(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     BPFunction_WhenWidgetCreate;                              // 0x0360(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     BPFunction_WhenWidgetDestroy;                             // 0x0370(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorPositionWidget*                        DetailsWidget;                                            // 0x0380(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0388(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ShowActorFrameComponent");
		return pStaticClass;
	}


	class UActorPositionWidget* GetDetailsWidget();
	void DestroyFrameUI();
	bool CreateFrameUI(int ParamIfNecessary);
};


// Class ShadowTrackerExtra.STVehicleAnimInstance
// 0x00A0 (0x0950 - 0x08B0)
class USTVehicleAnimInstance : public UVehicleAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x08B0(0x0004) MISSED OFFSET
	struct FVector                                     MoveInput;                                                // 0x08B4(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     MoveInputExt;                                             // 0x08C0(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               HelicopterEngineStarted;                                  // 0x08CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x08CD(0x0003) MISSED OFFSET
	float                                              HelicopterStartAnimationRate;                             // 0x08D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               HelicopterWingStartFinish;                                // 0x08D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               HelicopterWingEndFinish;                                  // 0x08D5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               HelicopterMoveStartUp;                                    // 0x08D6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               HelicopterMoveStartUpStop;                                // 0x08D7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               HelicopterIsinIdle;                                       // 0x08D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               MotorcycleHandleStand;                                    // 0x08D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x08DA(0x0002) MISSED OFFSET
	struct FRotator                                    MotorcycleHandleDirOrg;                                   // 0x08DC(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FName                                       MotorcycleHandleBoneName;                                 // 0x08E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MotorcycleHandleMaxAngle;                                 // 0x08F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RotSpeedLeft;                                             // 0x08F4(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                                    RotSpeedRight;                                            // 0x0900(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                              SpeedMax;                                                 // 0x090C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                                    RotRPMLeft;                                               // 0x0910(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                                    RotRPMRight;                                              // 0x091C(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                              RPMMax;                                                   // 0x0928(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               TickIndicator;                                            // 0x092C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x3];                                       // 0x092D(0x0003) MISSED OFFSET
	struct FRotator                                    MPHNeedleRot;                                             // 0x0930(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                                    RPMNeedleRot;                                             // 0x093C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0948(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STVehicleAnimInstance");
		return pStaticClass;
	}


	void UpdateHelicopterEffect(bool IsShow);
};


// Class ShadowTrackerExtra.SimulatedSlidingAnimInstance
// 0x00A0 (0x09F0 - 0x0950)
class USimulatedSlidingAnimInstance : public USTVehicleAnimInstance
{
public:
	class USimulatedSlidingMovementComponent*          SimulatedSlidingMovementComp;                             // 0x0950(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_ForwardSpeed;                                           // 0x0958(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnowBoardState                                    C_SnowBoardState;                                         // 0x095C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_HandleBrake;                                            // 0x095D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               PlayingBrakeMontage;                                      // 0x095E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x095F(0x0001) MISSED OFFSET
	class UAnimSequence*                               Ski_CurrentPlayingLandAnim;                               // 0x0960(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_CurrentPlayingJumpAnim;                               // 0x0968(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiJumping;                                            // 0x0970(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiFalling;                                            // 0x0971(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiLanding;                                            // 0x0972(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiPlayingLandAnimEnd;                                 // 0x0973(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiPlayingJumpAnimEnd;                                 // 0x0974(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0975(0x0003) MISSED OFFSET
	class UAnimSequence*                               Ski_JumpStationary;                                       // 0x0978(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_DownTurnLR;                                           // 0x0980(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_DownTurnRL;                                           // 0x0988(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_DownTurnFD;                                           // 0x0990(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_Falling;                                              // 0x0998(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_DownFallLandingAdditive;                              // 0x09A0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_DownFallLandingHard;                                  // 0x09A8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 SkiSpeedToMaxTurnCurve;                                   // 0x09B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 SkiSpeedToMaxCrouchCurve;                                 // 0x09B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiBlendSpaceXInput;                                      // 0x09C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiBlendSpaceYInput;                                      // 0x09C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiPlayJumpAnimRate;                                      // 0x09C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiPlayJumpAnimRateMin;                                   // 0x09CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiPlayJumpAnimRateMax;                                   // 0x09D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiJumpStationaryRiseRate;                                // 0x09D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiDownTurnLRRate;                                        // 0x09D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiDownTurnRLRate;                                        // 0x09DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiDownTurnFDRate;                                        // 0x09E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0xC];                                       // 0x09E4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SimulatedSlidingAnimInstance");
		return pStaticClass;
	}


	void PlayLoopBrakeMontage();
	void PlayEndBrakeMontage();
};


// Class ShadowTrackerExtra.STExtraVehicleMovementComponent4W
// 0x00F0 (0x0540 - 0x0450)
class USTExtraVehicleMovementComponent4W : public UWheeledVehicleMovementComponent4W
{
public:
	TArray<struct FWheelHubSetup>                      WheelHubSetups;                                           // 0x0450(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FName>                               ExtraOptBoneNames;                                        // 0x0460(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0470(0x0010) MISSED OFFSET
	bool                                               bHideWheelPhyBodyOnServer;                                // 0x0480(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0481(0x0007) MISSED OFFSET
	TArray<class UVehicleWheel*>                       WheelHubs;                                                // 0x0488(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0xA8];                                      // 0x0498(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraVehicleMovementComponent4W");
		return pStaticClass;
	}


	void OnExpoldeStopWheel();
	void HandleOnSeatDetached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void HandleOnSeatChanged(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType LastSeatType, int LastSeatIdx, ESTExtraVehicleSeatType NewSeatType, int NewSeatIdx);
	void HandleOnSeatAttached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void ForceWheelsRotate(float DriveTorque);
	void ClearDestroyedWheel();
};


// Class ShadowTrackerExtra.SimulatedSlidingMovementComponent
// 0x0180 (0x06C0 - 0x0540)
class USimulatedSlidingMovementComponent : public USTExtraVehicleMovementComponent4W
{
public:
	float                                              SpeedThresholds;                                          // 0x0540(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpeedUpImpulse;                                           // 0x0544(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpImpulse;                                              // 0x0548(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpImpulseBig;                                           // 0x054C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpulseMinusGradeCompensate;                              // 0x0550(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxStayAirTimeUseServerCtr;                               // 0x0554(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StayAirTimer;                                             // 0x0558(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FallingLandHardThreshold;                                 // 0x055C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0560(0x0010) MISSED OFFSET
	float                                              JumpRiseBaseTime;                                         // 0x0570(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AutoExitHeightThreshold;                                  // 0x0574(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitTestToSeaLevelBias;                                    // 0x0578(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnowBoardState                                    SnowBoardState;                                           // 0x057C(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x057D(0x0003) MISSED OFFSET
	float                                              BigJumpAnimReadyTime;                                     // 0x0580(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnowBoardState                                    BigJumpAnimSnowBoardState;                                // 0x0584(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableFppCameraJumpChange;                                // 0x0585(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0586(0x0002) MISSED OFFSET
	float                                              FppCameraJumpChangeTimer;                                 // 0x0588(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0xC];                                       // 0x058C(0x000C) MISSED OFFSET
	float                                              FallingEnterTime;                                         // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x059C(0x0004) MISSED OFFSET
	float                                              FlyingEnterTime;                                          // 0x05A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsEnableExitAnim;                                         // 0x05A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0xB];                                       // 0x05A5(0x000B) MISSED OFFSET
	float                                              DisToLand;                                                // 0x05B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ImpactPoint;                                              // 0x05B4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ImpactNormal;                                             // 0x05C0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EPhysicalSurface>                      LastSurfaceType;                                          // 0x05CC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x05CD(0x0003) MISSED OFFSET
	class UPhysicalMaterial*                           LastSurfacePhysicalMaterial;                              // 0x05D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x4];                                       // 0x05D8(0x0004) MISSED OFFSET
	float                                              SpeedUpJumpDelay;                                         // 0x05DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpeedUpForwardParm;                                       // 0x05E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x1C];                                      // 0x05E4(0x001C) MISSED OFFSET
	TMap<TEnumAsByte<EPhysicalSurface>, float>         VehiclePhysicalSurfaceDragConfig;                         // 0x0600(0x0050) (Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                              NoMappingLinearDamping;                                   // 0x0650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AirLinearDamping;                                         // 0x0654(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              GravityMaxLandDis;                                        // 0x0658(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              InitPowerTime;                                            // 0x065C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              InitPowerCD;                                              // 0x0660(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0664(0x0004) MISSED OFFSET
	class UCurveFloat*                                 InitPowerCurve;                                           // 0x0668(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SlideThrottleFactor;                                      // 0x0670(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              BackoffThrottleFactor;                                    // 0x0674(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              InitPowerSpeed;                                           // 0x0678(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LandTraceMaxHeight;                                       // 0x067C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              LandTraceForwardOffset;                                   // 0x0680(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                SlidingWheelNotInAirMinNum;                               // 0x0684(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SlidingSpeedTolerate;                                     // 0x0688(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SlidingSpeedCosAngle;                                     // 0x068C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              PlayAnimDisToLand;                                        // 0x0690(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              InitPowerTimeCounter;                                     // 0x0694(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData10[0x14];                                      // 0x0698(0x0014) MISSED OFFSET
	bool                                               RepValidInitPower;                                        // 0x06AC(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData11[0x3];                                       // 0x06AD(0x0003) MISSED OFFSET
	float                                              MinRotatorSteerInput;                                     // 0x06B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SecondRotatorYaw;                                         // 0x06B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinRotatorSpeed;                                          // 0x06B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StandRotatingSteerInput;                                  // 0x06BC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SimulatedSlidingMovementComponent");
		return pStaticClass;
	}


	void ServerSetSnowBoardState(ESnowBoardState InState);
	void ServerInitPower(bool IsEnterVehicle);
	void ServerDoJumpRoll(ESnowBoardState State);
	void ServerDoJump();
	void OnRep_SnowBoardState();
	void OnExitVehicle();
	void OnEnterVehicle(bool IsSucc);
	bool IsSpeedReachJumpThreshold();
	void EnterOrExitVehicleJump(bool IsEnter);
	void DelaySpeedUpJump();
	void ClientSetSnowBoardState(ESnowBoardState InState);
	void BroadcastClientSpeedUp(bool IsEnterVehicle);
};


// Class ShadowTrackerExtra.SimulateSyncSmoothComponent
// 0x0178 (0x0288 - 0x0110)
class USimulateSyncSmoothComponent : public UActorComponent
{
public:
	struct FRepSnapshot                                RepSnapshot;                                              // 0x0110(0x0038) (Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FRepSnapshot                                Snapshot;                                                 // 0x0148(0x0038) (NoDestructor, NativeAccessSpecifierPublic)
	float                                              TolerateLocationDiffSqAtServer;                           // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateRotationInDegreeAtServer;                         // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateLinearVelocityDiffSqAtServer;                     // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TolerateAngularVelocityDiffSqAtServer;                    // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForceUpdateLocationDiffSqAtServer;                        // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForceUpdateLinearVelocityDiffSqAtServer;                  // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimulateSyncSmooth                         SimulateSyncSmooth;                                       // 0x0198(0x00D4) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bOpenDebugDraw;                                           // 0x026C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOpenServerForceUpdate;                                   // 0x026D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNoPredict;                                               // 0x026E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x026F(0x0001) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActorTeleportFinish;                                    // 0x0270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0280(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SimulateSyncSmoothComponent");
		return pStaticClass;
	}


	void TeleportNextSync();
	void StopPredict();
	void SetVelocity(const struct FVector& Velocity);
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);
	void OnRep_Snapshot();
	struct FVector GetVelocity();
};


// Class ShadowTrackerExtra.SingleBackpackComp
// 0x0020 (0x0130 - 0x0110)
class USingleBackpackComp : public UActorComponent
{
public:
	TArray<struct FPickUpItemData>                     ItemList;                                                 // 0x0110(0x0010) (BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	float                                              Capacity;                                                 // 0x0120(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EGroupBackpackScheme>                  scheme;                                                   // 0x0124(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0125(0x0003) MISSED OFFSET
	class UGroupBackpackComp*                          GroupBack;                                                // 0x0128(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SingleBackpackComp");
		return pStaticClass;
	}


	void RemoveGroupItem(const struct FItemDefineID& ItemID);
	void OnRep_Scheme();
	void OnRep_ItemList();
	void OnRep_Capacity();
	void AddGroupItem(const struct FItemDefineID& ItemID, int count, TArray<struct FBattleItemAdditionalData> AdditionalDataList);
};


// Class ShadowTrackerExtra.SingleIDComponent
// 0x0008 (0x0118 - 0x0110)
class USingleIDComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SingleIDComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.SkillUtils
// 0x0000 (0x0028 - 0x0028)
class USkillUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SkillUtils");
		return pStaticClass;
	}


	static bool IsCurUseGrenade(class ASTExtraBaseCharacter* pChar);
	static class ASTExtraPlayerController* GetPlayerController(class APawn* OwnerPawn);
	static void GetParticleComps(class AActor* UserActor, const struct FName& ParticleTagName, TArray<class UParticleSystemComponent*>* OutParArr);
	static class UMeshComponent* GetMeshCompFromCharacter(class ASTExtraBaseCharacter* pChar, const struct FName& MeshTagName);
};


// Class ShadowTrackerExtra.SkirtAnimInstanceBase
// 0x0040 (0x0410 - 0x03D0)
class USkirtAnimInstanceBase : public UAvatarDynamicAnimInstance
{
public:
	TEnumAsByte<ESkirtPoseType>                        CurrentPoseType;                                          // 0x03D0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsOnMotorbike;                                            // 0x03D1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xE];                                       // 0x03D2(0x000E) MISSED OFFSET
	bool                                               IsBackpackEquipped;                                       // 0x03E0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET
	class ASTExtraPlayerCharacter*                     OwnerCharacter;                                           // 0x03E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraLobbyCharacter*                      OwnerLobbyCharacter;                                      // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x18];                                      // 0x03F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SkirtAnimInstanceBase");
		return pStaticClass;
	}


	void OnStateInterrupted(int stateID, int InterruptedBy);
	bool isCothAnimEnable();
	void HandleStateChanged(EPawnState EnteredState);
	void EnableClothAnim();
	void DisableClothAnim();
};


// Class ShadowTrackerExtra.SmoothActorMoveComponent
// 0x0020 (0x0130 - 0x0110)
class USmoothActorMoveComponent : public UActorComponent
{
public:
	TArray<struct FSegamentData>                       MoveData;                                                 // 0x0110(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bAutoMoveWhenStart;                                       // 0x0120(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoopMoveMode                                      LoopMoveMode;                                             // 0x0121(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsMoving;                                                // 0x0122(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xD];                                       // 0x0123(0x000D) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SmoothActorMoveComponent");
		return pStaticClass;
	}


	void StopMove();
	void StartMove();
};


// Class ShadowTrackerExtra.SpotGroupLocSceneComponent
// 0x0000 (0x02C0 - 0x02C0)
class USpotGroupLocSceneComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SpotGroupLocSceneComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.SpotLocSceneComponent
// 0x0010 (0x02D0 - 0x02C0)
class USpotLocSceneComponent : public USceneComponent
{
public:
	bool                                               bNearItem;                                                // 0x02C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xF];                                       // 0x02C1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SpotLocSceneComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.SRadarChartUserWidget
// 0x0060 (0x0160 - 0x0100)
class USRadarChartUserWidget : public UWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET
	class USlateBrushAsset*                            RadarBrush;                                               // 0x0110(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                      CenterPointImg;                                           // 0x0118(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                              VertexColor;                                              // 0x0120(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UImage*>                              VertexFarPointImg;                                        // 0x0130(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<float>                                      VertexScale;                                              // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                           VertexUV;                                                 // 0x0150(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SRadarChartUserWidget");
		return pStaticClass;
	}


	void OnHide();
	void FreshChartDataToContent();
};


// Class ShadowTrackerExtra.STAISense_Hearing
// 0x0068 (0x00E8 - 0x0080)
class USTAISense_Hearing : public UAISense
{
public:
	TArray<struct FSTAINoiseEvent>                     NoiseEvents;                                              // 0x0080(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                              SpeedOfSoundSq;                                           // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x54];                                      // 0x0094(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STAISense_Hearing");
		return pStaticClass;
	}


	static void ReportNoiseEventByParams(class UObject* WorldContextObject, const struct FVector& NoiseLocation, class AActor* Instigator, const struct FESTAINoiseEventParams& Params);
	static void ReportNoiseEvent(class UObject* WorldContextObject, const struct FVector& NoiseLocation, ESTAINoiseType noiseType, float Loudness, class AActor* Instigator, float MaxRange, float StartAttenuationDist, float EndAttenuationDist, const struct FName& Tag);
};


// Class ShadowTrackerExtra.STAISenseConfig_Hearing
// 0x0018 (0x0060 - 0x0048)
class USTAISenseConfig_Hearing : public UAISenseConfig
{
public:
	class UClass*                                      Implementation;                                           // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HearingRange;                                             // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LoSHearingRange;                                          // 0x0054(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseLoSHearing : 1;                                       // 0x0058(0x0001) (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	struct FAISenseAffiliationFilter                   DetectionByAffiliation;                                   // 0x005C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STAISenseConfig_Hearing");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STAISenseEvent_Hearing
// 0x0038 (0x0060 - 0x0028)
class USTAISenseEvent_Hearing : public UAISenseEvent
{
public:
	struct FSTAINoiseEvent                             Event;                                                    // 0x0028(0x0038) (Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STAISenseEvent_Hearing");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.State
// 0x0008 (0x0030 - 0x0028)
class UState : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.State");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StateMachineComponent
// 0x0028 (0x0138 - 0x0110)
class UStateMachineComponent : public UActorComponent
{
public:
	TArray<class UState*>                              AllStateList;                                             // 0x0110(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	EStateType                                         StartStateType;                                           // 0x0120(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStateType                                         FinishStateType;                                          // 0x0121(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0122(0x0006) MISSED OFFSET
	class UState*                                      CurrentState;                                             // 0x0128(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EStateType                                         CurrentStateType;                                         // 0x0130(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EStateType                                         LastStateType;                                            // 0x0131(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0132(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StateMachineComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StatePC
// 0x0000 (0x0030 - 0x0030)
class UStatePC : public UState
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StatePC");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StatePC_Dead
// 0x0000 (0x0030 - 0x0030)
class UStatePC_Dead : public UStatePC
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StatePC_Dead");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StatePC_Fight
// 0x0000 (0x0030 - 0x0030)
class UStatePC_Fight : public UStatePC
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StatePC_Fight");
		return pStaticClass;
	}


	void DelayStopSound();
};


// Class ShadowTrackerExtra.StatePC_Finish
// 0x0000 (0x0030 - 0x0030)
class UStatePC_Finish : public UStatePC
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StatePC_Finish");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StatePC_InExPlane
// 0x0008 (0x0038 - 0x0030)
class UStatePC_InExPlane : public UStatePC
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StatePC_InExPlane");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StatePC_Initial
// 0x0000 (0x0030 - 0x0030)
class UStatePC_Initial : public UStatePC
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StatePC_Initial");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StatePC_InPlane
// 0x0008 (0x0038 - 0x0030)
class UStatePC_InPlane : public UStatePC
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StatePC_InPlane");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StatePC_ParachuteJump
// 0x0020 (0x0050 - 0x0030)
class UStatePC_ParachuteJump : public UStatePC
{
public:
	float                                              JumpRadius;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              JumpHeight;                                               // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              JumpHeightMin;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              JumpHeightMax;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StatePC_ParachuteJump");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StatePC_ParachuteOpen
// 0x0020 (0x0050 - 0x0030)
class UStatePC_ParachuteOpen : public UStatePC
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET
	float                                              ForwardDiffHeightThreshold;                               // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StatePC_ParachuteOpen");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StatHUD
// 0x0000 (0x0478 - 0x0478)
class AStatHUD : public AHUD
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StatHUD");
		return pStaticClass;
	}


	void ToggleSlateStat();
};


// Class ShadowTrackerExtra.StaticMeshActorFM
// 0x0008 (0x0398 - 0x0390)
class AStaticMeshActorFM : public AActor
{
public:
	class UHierarchicalInstancedStaticMeshComponent*   InstancedMeshComponent;                                   // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StaticMeshActorFM");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.StaticMeshLoaderComponent
// 0x0140 (0x0400 - 0x02C0)
class UStaticMeshLoaderComponent : public USceneComponent
{
public:
	struct FVector                                     LocationOffset;                                           // 0x02C0(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     RotationOffset;                                           // 0x02CC(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ScaleOffset;                                              // 0x02D8(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableInLowLevelDevice;                                   // 0x02E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02E5(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x02E5(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.StaticMeshLoaderComponent.StaticMeshPtr
	class UStaticMeshComponent*                        LoadedComponent;                                          // 0x0310(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0xE8];                                      // 0x0318(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StaticMeshLoaderComponent");
		return pStaticClass;
	}


	class UStaticMeshComponent* GetLoadedComponent();
};


// Class ShadowTrackerExtra.STBuffAction_AddRemoveBuff
// 0x0030 (0x0070 - 0x0040)
class USTBuffAction_AddRemoveBuff : public USTBuffAction
{
public:
	bool                                               IsAdd;                                                    // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	int                                                BuffID;                                                   // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SkillID;                                                  // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CauseSkillConfigArrayNum;                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffTargetSourceType                              TargetSourceType;                                         // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              AreaOfRadiusSqr;                                          // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Interval;                                                 // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x14];                                      // 0x005C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_AddRemoveBuff");
		return pStaticClass;
	}


	void OnTick(float DetalTime);
	void OnInitialize();
	void OnExecute();
	void HandleAreaOfMonster(class ASTExtraCharacter* Character, class USTBuff* Buff);
	void ExecuteTarget(class ASTExtraCharacter* Target, class ASTExtraCharacter* Character, class USTBuff* Buff);
};


// Class ShadowTrackerExtra.STBuffAction_AIMoveToLocation
// 0x0010 (0x0050 - 0x0040)
class USTBuffAction_AIMoveToLocation : public USTBuffAction
{
public:
	struct FVector                                     TargetLocation;                                           // 0x0040(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_AIMoveToLocation");
		return pStaticClass;
	}


	void OnTakeDamageEvent(float Damage, const struct FDamageEvent& DamageEvent, class AActor* Victim, class AActor* Causer);
	void OnInitialize();
	void OnForceMoveToLocationEvent(const struct FVector& MoveToPos);
	void OnExecute();
	void OnDestroy();
	void DoForceMoveToLocation(bool bStart);
};


// Class ShadowTrackerExtra.STBuffAction_Attachment
// 0x0158 (0x0198 - 0x0040)
class USTBuffAction_Attachment : public USTBuffAction
{
public:
	TArray<struct FBuffAttachmentItem>                 Attachments;                                              // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xE0];                                      // 0x0050(0x00E0) MISSED OFFSET
	TMap<struct FString, class UParticleSystem*>       DecentParticles;                                          // 0x0130(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0180(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_Attachment");
		return pStaticClass;
	}


	void OnExecute();
	void OnEnd();
	void DestroyAttachment();
	void CreateAttachment();
	void AsyncLoadFinish();
	void AsyncLoad();
};


// Class ShadowTrackerExtra.STBuffAction_AttrModifier
// 0x0020 (0x0060 - 0x0040)
class USTBuffAction_AttrModifier : public USTBuffAction
{
public:
	struct FString                                     AttrName;                                                 // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ModifyValue;                                              // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               MultiplyOnLayer;                                          // 0x0054(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttrModifyRefType                                 AttrRefValueType;                                         // 0x0055(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttrModifyChannel                                 DoActionNetRole;                                          // 0x0056(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x9];                                       // 0x0057(0x0009) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_AttrModifier");
		return pStaticClass;
	}


	void OnInitialize();
	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_BaseHitFilter
// 0x00A8 (0x00E8 - 0x0040)
class USTBuffAction_BaseHitFilter : public USTBuffAction
{
public:
	EHitFilterType                                     FilterType;                                               // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData01[0x50];                                      // 0x0041(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.STBuffAction_BaseHitFilter.FilterGunIDs
	unsigned char                                      UnknownData02[0x50];                                      // 0x0098(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.STBuffAction_BaseHitFilter.FilterBulletIDs

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_BaseHitFilter");
		return pStaticClass;
	}


	bool FilterGun(class AActor* shooter);
	bool FilterBullet(class AActor* shooter);
	bool CheckFilter(class AActor* shooter);
};


// Class ShadowTrackerExtra.STBuffAction_BPCallEvent
// 0x0020 (0x0060 - 0x0040)
class USTBuffAction_BPCallEvent : public USTBuffAction
{
public:
	struct FScriptMulticastDelegate                    OnExecuteDelegate;                                        // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEndDelegate;                                            // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_BPCallEvent");
		return pStaticClass;
	}


	void OnInitialize();
	void OnExecute();
	void OnEnd();
	void BPInitialize();
	class AActor* BPGetOwner();
};


// Class ShadowTrackerExtra.STBuffAction_CameraAnim
// 0x0020 (0x0060 - 0x0040)
class USTBuffAction_CameraAnim : public USTBuffAction
{
public:
	class UClass*                                      CameraShakeClass;                                         // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CameraShakeScale;                                         // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ECameraAnimPlaySpace>                  CameraShakePlaySpace;                                     // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FRotator                                    CameraShakeUserPlaySpaceRot;                              // 0x0050(0x000C) (Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_CameraAnim");
		return pStaticClass;
	}


	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_ColorfulGrenade
// 0x0060 (0x00A0 - 0x0040)
class USTBuffAction_ColorfulGrenade : public USTBuffAction
{
public:
	float                                              DyeingWaterEffectKeepTime;                                // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	class UParticleSystem*                             DyeingWaterEffect;                                        // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       EffectColorParamName;                                     // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomMatConfig                            MatConfig;                                                // 0x0058(0x0038) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0090(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_ColorfulGrenade");
		return pStaticClass;
	}


	void UpdateMatParams(bool End);
	void SetMatParameter(class UMeshComponent* meshComp, bool isHemlet, bool End);
	void PlayDyeingWaterEffect();
	void OnTick(float DetalTime);
	void OnInitialize();
	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_Dot
// 0x0028 (0x0068 - 0x0040)
class USTBuffAction_Dot : public USTBuffAction
{
public:
	float                                              DotValue;                                                 // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Interval;                                                 // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               MultiplyOnLayer;                                          // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffDotValueType                                  DotValueType;                                             // 0x0049(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UsePercent;                                               // 0x004A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x5];                                       // 0x004B(0x0005) MISSED OFFSET
	struct FString                                     ValueAttrRateRef;                                         // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_Dot");
		return pStaticClass;
	}


	void TakeDotValue();
	void OnTick(float DetalTime);
	void OnInitialize();
	void OnExecute();
	void HandleShootWeaponDamage(class USTBuff* Buff, float RealDotValue);
	void HandlePoisonFogDamage(class USTBuff* Buff, float RealDotValue);
	void HandleBurningDamage(class USTBuff* Buff, float RealDotValue);
	void HandleAddHelmet(class USTBuff* Buff, float RealDotValue);
	void HandleAddHealth(class USTBuff* Buff, float RealDotValue);
	void HandleAddBulletNum(class USTBuff* Buff, float RealDotValue);
	void HandleAddArmor(class USTBuff* Buff, float RealDotValue);
};


// Class ShadowTrackerExtra.STBuffAction_DotBullet
// 0x0070 (0x00B0 - 0x0040)
class USTBuffAction_DotBullet : public USTBuffAction
{
public:
	float                                              Interval;                                                 // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               MultiplyOnLayer;                                          // 0x0044(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UsePercent;                                               // 0x0045(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0046(0x0002) MISSED OFFSET
	TArray<struct FBuffDotBulletItem>                  DotBullets;                                               // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x58];                                      // 0x0058(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_DotBullet");
		return pStaticClass;
	}


	void TakeDotValue();
	void OnTick(float DetalTime);
	void OnInitialize();
	void OnExecute();
	void HandleAddBulletNum(class USTBuff* Buff);
	float CaculateDotValue(float OriginValue);
};


// Class ShadowTrackerExtra.STBuffAction_EnterState
// 0x0008 (0x0048 - 0x0040)
class USTBuffAction_EnterState : public USTBuffAction
{
public:
	EPawnState                                         State;                                                    // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	ESTEAIState                                        MonsterState;                                             // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_EnterState");
		return pStaticClass;
	}


	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_GenBulletHitEffect
// 0x0090 (0x0178 - 0x00E8)
class USTBuffAction_GenBulletHitEffect : public USTBuffAction_BaseHitFilter
{
public:
	float                                              GenProbility;                                             // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GenProtectTime;                                           // 0x00EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PreGenEffectTime;                                         // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	class UClass*                                      ActorTemplate;                                            // 0x00F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPropSkillExplodeParam                      ExplodeParam;                                             // 0x0100(0x0024) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	class UClass*                                      ActorExplodeTemplate;                                     // 0x0128(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultDamage;                                            // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	TArray<class UCurveFloat*>                         CurveLevelTimeArray;                                      // 0x0138(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                               bImmediatelyTriggerAtOrigin;                              // 0x0148(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAddScreenEdgeEff;                                        // 0x0149(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x2];                                       // 0x014A(0x0002) MISSED OFFSET
	int                                                ScreenEdgeEffBuffID;                                      // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ActorOffect;                                              // 0x0150(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x14];                                      // 0x0154(0x0014) MISSED OFFSET
	class AActor*                                      SpawnedActor;                                             // 0x0168(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                      SpawnedExplodeActor;                                      // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_GenBulletHitEffect");
		return pStaticClass;
	}


	void SpawnExplodeActor(const struct FVector& SpawnEffActorPos);
	void SpawnEffectActor(const struct FVector& SpawnEffActorPos);
	void OnServerBulleteHitEvent(class AActor* Causer, class AActor* Victim, const struct FVector& HitPos);
	void OnInitialize();
	void OnExecute();
	void OnDestroy();
	void OnClientBulleteHitEvent(class AActor* Causer, class AActor* Victim, const struct FVector& HitPos);
	void AddScreenEdgeEff();
};


// Class ShadowTrackerExtra.STBuffAction_GenBulletHitExplode
// 0x0038 (0x0120 - 0x00E8)
class USTBuffAction_GenBulletHitExplode : public USTBuffAction_BaseHitFilter
{
public:
	float                                              GenExplodeHurtRadius;                                     // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckInterval;                                            // 0x00EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPropSkillExplodeParam>              ExplodeDamageParam;                                       // 0x00F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UClass*                                      ActorTemplate;                                            // 0x0100(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAddScreenEdgeEff;                                        // 0x0108(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	int                                                ScreenEdgeEffBuffID;                                      // 0x010C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	class AActor*                                      SpawnedActor;                                             // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_GenBulletHitExplode");
		return pStaticClass;
	}


	void RemoveExplodeEffect();
	void OnServerBulleteHitEvent(class AActor* Causer, class AActor* Victim, const struct FVector& HitPos);
	void OnInitialize();
	void OnDestroy();
	void OnClientBulleteHitEvent(class AActor* Causer, class AActor* Victim, const struct FVector& HitPos);
	void AddScreenEdgeEff();
};


// Class ShadowTrackerExtra.STBuffAction_GenBulletPosionHitEffect
// 0x0010 (0x00F8 - 0x00E8)
class USTBuffAction_GenBulletPosionHitEffect : public USTBuffAction_BaseHitFilter
{
public:
	TArray<struct FPropSkillPosionParam>               BulletHitPosionParam;                                     // 0x00E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_GenBulletPosionHitEffect");
		return pStaticClass;
	}


	void OnServerBulleteHitEvent(class AActor* Causer, class AActor* Victim, const struct FVector& HitPos);
	void OnInitialize();
	void OnDestroy();
	void OnClientBulleteHitEvent(class AActor* Causer, class AActor* Victim, const struct FVector& HitPos);
};


// Class ShadowTrackerExtra.STBuffAction_GenCureAmplifier
// 0x0020 (0x0060 - 0x0040)
class USTBuffAction_GenCureAmplifier : public USTBuffAction
{
public:
	struct FPropSkillCureRangeParam                    PusleCureRangeParam;                                      // 0x0040(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UClass*                                      ActorTemplate;                                            // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      SpawnedActor;                                             // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_GenCureAmplifier");
		return pStaticClass;
	}


	void OnInitialize();
	void OnExecute();
	void OnDestroy();
	void GenCureEffect();
};


// Class ShadowTrackerExtra.STBuffAction_GenEffectAtPosition
// 0x0020 (0x0108 - 0x00E8)
class USTBuffAction_GenEffectAtPosition : public USTBuffAction_BaseHitFilter
{
public:
	bool                                               IsActive;                                                 // 0x00E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffTargetType                                    TargetType;                                               // 0x00E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EDamageType>                           KillDamageType;                                           // 0x00EA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterType                                       MonsterType;                                              // 0x00EB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckInterval;                                            // 0x00EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             TemplateParticle_Effect;                                  // 0x00F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_GenEffectAtPosition");
		return pStaticClass;
	}


	void OnParticleSystemFinished(class UParticleSystemComponent* PSC);
	void OnInitialize();
	void OnDestroy();
	void OnClientTakeDamageEvent(float Damage, const struct FDamageEvent& DamageEvent, class AActor* Victim, class AActor* Causer);
	void OnClientPushDamageEvent(float Damage, const struct FDamageEvent& DamageEvent, class AActor* Causer, class AActor* Victim);
	void GenDieEffect(const struct FVector& GenPosition);
};


// Class ShadowTrackerExtra.STBuffAction_GenNoiseAmplifier
// 0x0028 (0x0110 - 0x00E8)
class USTBuffAction_GenNoiseAmplifier : public USTBuffAction_BaseHitFilter
{
public:
	TArray<struct FPropSkillNoiseRangeParam>           NoiseRangeParam;                                          // 0x00E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UClass*                                      ActorTemplate;                                            // 0x00F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bImmediatelyTriggerAtOrigin;                              // 0x0100(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAddScreenEdgeEff;                                        // 0x0101(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0102(0x0002) MISSED OFFSET
	int                                                ScreenEdgeEffBuffID;                                      // 0x0104(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      SpawnedActor;                                             // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_GenNoiseAmplifier");
		return pStaticClass;
	}


	void SpawnEffectActor(const struct FVector& SpawnEffActorPos);
	void OnServerBulleteHitEvent(class AActor* Causer, class AActor* Victim, const struct FVector& HitPos);
	void OnInitialize();
	void OnExecute();
	void OnDestroy();
	void OnClientBulleteHitEvent(class AActor* Causer, class AActor* Victim, const struct FVector& HitPos);
	void GenBulletHitEffect(const struct FVector& GenPosition);
	void AddScreenEdgeEff();
};


// Class ShadowTrackerExtra.STBuffAction_GenPosionExtractor
// 0x0000 (0x0040 - 0x0040)
class USTBuffAction_GenPosionExtractor : public USTBuffAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_GenPosionExtractor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STBuffAction_GenSmokeAmplifier
// 0x0020 (0x0060 - 0x0040)
class USTBuffAction_GenSmokeAmplifier : public USTBuffAction
{
public:
	TArray<struct FPropSkillSmokeDamageParam>          SmokeDamageParam;                                         // 0x0040(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UClass*                                      ActorTemplate;                                            // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      SpawnedActor;                                             // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_GenSmokeAmplifier");
		return pStaticClass;
	}


	void RemoveSmokeEffect();
	void OnInitialize();
	void OnExecute();
	void OnDestroy();
	void GenSmokeEffect();
};


// Class ShadowTrackerExtra.STBuffAction_InGameUIMsg
// 0x0018 (0x0058 - 0x0040)
class USTBuffAction_InGameUIMsg : public USTBuffAction
{
public:
	struct FString                                     UIMessage;                                                // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AppendShowAndHide;                                        // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_InGameUIMsg");
		return pStaticClass;
	}


	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_Invincible
// 0x0000 (0x0040 - 0x0040)
class USTBuffAction_Invincible : public USTBuffAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_Invincible");
		return pStaticClass;
	}


	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_ModifyDuration
// 0x0070 (0x00B0 - 0x0040)
class USTBuffAction_ModifyDuration : public USTBuffAction
{
public:
	EBuffMofifyDurationType                            ModifyType;                                               // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	class UCurveFloat*                                 CurveDistanceRef;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int, float>                                   MonsterTypeTimeRef;                                       // 0x0050(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FString                                     OtherAttrTimeRef;                                         // 0x00A0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_ModifyDuration");
		return pStaticClass;
	}


	void OnInitialize();
};


// Class ShadowTrackerExtra.STBuffAction_MPCSpeedScale
// 0x0028 (0x0068 - 0x0040)
class USTBuffAction_MPCSpeedScale : public USTBuffAction
{
public:
	TArray<float>                                      SpeedScales;                                              // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAttrModifyRefType                                 AttrRefenceValeType;                                      // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsChangeByState;                                          // 0x0051(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsTickCatchState;                                         // 0x0052(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x11];                                      // 0x0053(0x0011) MISSED OFFSET
	EMobWalkType                                       LastMobWalkType;                                          // 0x0064(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_MPCSpeedScale");
		return pStaticClass;
	}


	void OnTick(float DetalTime);
	void OnInitialize();
	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_MultiAttrModifier
// 0x0030 (0x0070 - 0x0040)
class USTBuffAction_MultiAttrModifier : public USTBuffAction
{
public:
	TArray<struct FBuffAttrModifierItem>               MultiAttrModifiers;                                       // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               MultiplyOnLayer;                                          // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttrModifyChannel                                 DoActionNetRole;                                          // 0x0051(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0052(0x0006) MISSED OFFSET
	TArray<struct FAttrDynamicModifyItem>              MultiAttrModifyItems;                                     // 0x0058(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                       TargetActor;                                              // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_MultiAttrModifier");
		return pStaticClass;
	}


	void OnInitialize();
	void OnExecute();
	void OnEnd();
	class UAttrModifyComponent* GetAttrModify();
};


// Class ShadowTrackerExtra.STBuffAction_PetVisible
// 0x0008 (0x0048 - 0x0040)
class USTBuffAction_PetVisible : public USTBuffAction
{
public:
	bool                                               bPetVisible;                                              // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_PetVisible");
		return pStaticClass;
	}


	void OnInitialize();
	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_PlayAkAudio
// 0x0040 (0x0080 - 0x0040)
class USTBuffAction_PlayAkAudio : public USTBuffAction
{
public:
	class UAkAudioEvent*                               NormalSound;                                              // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               FemaleSound;                                              // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       RTPCName;                                                 // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RTPCValue;                                                // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TickInterval;                                             // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                                AkComponent;                                              // 0x0060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FString                                     DummyString;                                              // 0x0068(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_PlayAkAudio");
		return pStaticClass;
	}


	void OnTick(float DeltaTime);
	void OnInitialize();
	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_PlayAnimation
// 0x0008 (0x0048 - 0x0040)
class USTBuffAction_PlayAnimation : public USTBuffAction
{
public:
	class UUAESkillAction_PlayMontage*                 PlayMontage;                                              // 0x0040(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_PlayAnimation");
		return pStaticClass;
	}


	void OnTick(float DetalTime);
	void OnInitialize();
	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.UAESkillAction
// 0x0000 (0x0190 - 0x0190)
class UUAESkillAction : public UUTSkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction
// 0x0000 (0x0190 - 0x0190)
class USTExtraBuffAction : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STBuffAction_PlaySCAppearance
// 0x0028 (0x01B8 - 0x0190)
class USTBuffAction_PlaySCAppearance : public USTExtraBuffAction
{
public:
	struct FString                                     AppearanceKeyString;                                      // 0x0190(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          AppearanceMaterial;                                       // 0x01A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LifeSpan;                                                 // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    DynamicMat;                                               // 0x01B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_PlaySCAppearance");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STBuffAction_PlayScreenEffect
// 0x0020 (0x0060 - 0x0040)
class USTBuffAction_PlayScreenEffect : public USTBuffAction
{
public:
	struct FString                                     AppearanceKeyString;                                      // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          AppearanceMaterial;                                       // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LifeSpan;                                                 // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_PlayScreenEffect");
		return pStaticClass;
	}


	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_SetEyeEffect
// 0x0028 (0x0068 - 0x0040)
class USTBuffAction_SetEyeEffect : public USTBuffAction
{
public:
	float                                              LightSwitch;                                              // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LightColor;                                               // 0x0044(0x0010) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultSwitch;                                            // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                DefaultColor;                                             // 0x0058(0x0010) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_SetEyeEffect");
		return pStaticClass;
	}


	void OnInitialize();
	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_SetMaterialParameter
// 0x0010 (0x0050 - 0x0040)
class USTBuffAction_SetMaterialParameter : public USTBuffAction
{
public:
	TArray<struct FCustomMatConfig>                    MatConfigs;                                               // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_SetMaterialParameter");
		return pStaticClass;
	}


	void SetMatParameter(class UMeshComponent* meshComp, const struct FCustomMatConfig& Config, bool End);
	void OnExecute();
	void OnEnd();
};


// Class ShadowTrackerExtra.STBuffAction_SpawnActor
// 0x00F0 (0x0130 - 0x0040)
class USTBuffAction_SpawnActor : public USTBuffAction
{
public:
	TArray<struct FBuffSpawnActorItem>                 SpawnActorItems;                                          // 0x0040(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xE0];                                      // 0x0050(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_SpawnActor");
		return pStaticClass;
	}


	void OnInitialize();
	void OnExecute();
	void OnEnd();
	void AsyncLoadFinish();
};


// Class ShadowTrackerExtra.TslDamageField
// 0x0008 (0x0398 - 0x0390)
class ATslDamageField : public AActor
{
public:
	class AActor*                                      ParentGrenade;                                            // 0x0390(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TslDamageField");
		return pStaticClass;
	}


	void SetParentGrenade(class AActor* Val);
	class AActor* GetParentGrenade();
};


// Class ShadowTrackerExtra.STBuffApplifierSpreading
// 0x0128 (0x04B8 - 0x0390)
class ASTBuffApplifierSpreading : public AActor
{
public:
	class AActor*                                      ParentGrenade;                                            // 0x0390(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0398(0x0010) MISSED OFFSET
	class USceneComponent*                             SceneRoot;                                                // 0x03A8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FRotator>                            InitialTraceArray;                                        // 0x03B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int                                                StepsPerTick;                                             // 0x03C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                SpreadDirectionCount;                                     // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                MaxInstanceCount;                                         // 0x03C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                MaxMaterialAdditiveInstanceCount;                         // 0x03CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              InitialTraceLenClamp;                                     // 0x03D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03D4(0x0004) MISSED OFFSET
	struct FName                                       BlockingTag;                                              // 0x03D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              NormalLimitZ;                                             // 0x03E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              GroundTraceNormalScale_Start;                             // 0x03E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              InitialGroundTraceHeightZ;                                // 0x03E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              ConcurrentGroundTraceHeightZ;                             // 0x03EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              ProcessedHitLenClamp;                                     // 0x03F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              SphereRadius;                                             // 0x03F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              SpreadXY;                                                 // 0x03F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              SpreadZ;                                                  // 0x03FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UClass*                                      DamageFieldClass;                                         // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              DamageTickInterval;                                       // 0x0408(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bModifyEffectLifetime;                                    // 0x040C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x3];                                       // 0x040D(0x0003) MISSED OFFSET
	float                                              InitialEffectLifetime;                                    // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              MinEffectLifetimeForStart;                                // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              EffectLifetimeVariation;                                  // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData03[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EPhysicalSurface>>              InterestedSurfaceTypes;                                   // 0x0420(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                              DamageFieldOffGround;                                     // 0x0430(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bMergeTwoBurningGrenade;                                  // 0x0434(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData04[0x83];                                      // 0x0435(0x0083) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffApplifierSpreading");
		return pStaticClass;
	}


	void TickDamageFields();
	void SetParentGrenade(class AActor* Val);
	void SetMaxMaterialAdditiveInstanceCount(int Val);
	void SetLastImpactVelocity(const struct FVector& InVelocity);
	void SetInitialEffectLifetime(float Val);
	class AActor* GetParentGrenade();
	int GetMaxMaterialAdditiveInstanceCount();
	float GetInitialEffectLifetime();
	void Client_ShowDebugString(const struct FVector& InLocation, const struct FString& InText, class AActor* InActor, const struct FColor& InColor, float InTime);
	void Client_ShowDebugSphere(const struct FVector& InLocation, float InRadius, const struct FColor& InColor, float InTime);
	void Client_ShowDebugLine(const struct FVector& InStart, const struct FVector& InEnd, const struct FColor& InColor, float InTime);
};


// Class ShadowTrackerExtra.STBuffCondition_Drowning
// 0x0008 (0x0050 - 0x0048)
class USTBuffCondition_Drowning : public USTBuffCondition
{
public:
	class ASTExtraBaseCharacter*                       Target;                                                   // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_Drowning");
		return pStaticClass;
	}


	void OnInitialize();
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_InPoisonFog
// 0x0010 (0x0058 - 0x0048)
class USTBuffCondition_InPoisonFog : public USTBuffCondition
{
public:
	int                                                MaxFogStage;                                              // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	class ASTExtraBaseCharacter*                       Target;                                                   // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_InPoisonFog");
		return pStaticClass;
	}


	void OnInitialize();
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_IsHealthOn
// 0x0018 (0x0060 - 0x0048)
class USTBuffCondition_IsHealthOn : public USTBuffCondition
{
public:
	float                                              MaxValue;                                                 // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsUsePercent;                                             // 0x004C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              MinPercValue;                                             // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxPercValue;                                             // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraCharacter*                           OwnerChar;                                                // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_IsHealthOn");
		return pStaticClass;
	}


	void OnInitialize();
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_IsHit
// 0x0068 (0x00B0 - 0x0048)
class USTBuffCondition_IsHit : public USTBuffCondition
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0048(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.STBuffCondition_IsHit.FilterBulletIDs
	EBuffEnabledRole                                   Role;                                                     // 0x0098(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ConditionResult;                                          // 0x0099(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x16];                                      // 0x009A(0x0016) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_IsHit");
		return pStaticClass;
	}


	void OnTakeDamageEvent(float Damage, const struct FDamageEvent& DamageEvent, class AActor* Victim, class AActor* Causer);
	void OnPushDamageEvent(float Damage, const struct FDamageEvent& DamageEvent, class AActor* Causer, class AActor* Victim);
	void OnPostTakeDamageEvent(float Damage, const struct FDamageEvent& DamageEvent, class AController* Controller, class AActor* DamageCauser);
	void OnInitialize();
	void OnDestroy();
	bool IsFilterBullet(class AActor* shooter);
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_IsKeepInState
// 0x0040 (0x0088 - 0x0048)
class USTBuffCondition_IsKeepInState : public USTBuffCondition
{
public:
	TArray<EPawnState>                                 States;                                                   // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              KeepTime;                                                 // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FString                                     KeepTimeAttrRef;                                          // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsFalseOnHit;                                             // 0x0070(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	class ASTExtraBaseCharacter*                       OwnerChar;                                                // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               KeepInState;                                              // 0x0080(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              EnabledTime;                                              // 0x0084(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_IsKeepInState");
		return pStaticClass;
	}


	void OnTakeDamageEvent(float Damage, const struct FDamageEvent& DamageEvent, class AController* Controller, class AActor* DamageCauser);
	void OnInitialize();
	void OnDestroy();
	bool IsInState();
	void HandlePlayerStateChanged(EPawnState NewState);
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_IsKill
// 0x00B8 (0x0100 - 0x0048)
class USTBuffCondition_IsKill : public USTBuffCondition
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0048(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.STBuffCondition_IsKill.FilterGunIDs
	unsigned char                                      UnknownData01[0x50];                                      // 0x0098(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.STBuffCondition_IsKill.FilterBulletIDs
	bool                                               ConditionResult;                                          // 0x00E8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x17];                                      // 0x00E9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_IsKill");
		return pStaticClass;
	}


	void OnTakeDamageEvent(float Damage, const struct FDamageEvent& DamageEvent, class AActor* Victim, class AActor* Causer);
	void OnPushDamageEvent(float Damage, const struct FDamageEvent& DamageEvent, class AActor* Causer, class AActor* Victim);
	void OnInitialize();
	void OnDestroy();
	bool IsFilterGun(class AActor* shooter);
	bool IsFilterBullet(class AActor* shooter);
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_IsNearDeath
// 0x0000 (0x0048 - 0x0048)
class USTBuffCondition_IsNearDeath : public USTBuffCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_IsNearDeath");
		return pStaticClass;
	}


	void OnInitialize();
	void OnDestroy();
	void IsEnterNearDeath(bool IsEnter);
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_IsOnVehicle
// 0x0010 (0x0058 - 0x0048)
class USTBuffCondition_IsOnVehicle : public USTBuffCondition
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_IsOnVehicle");
		return pStaticClass;
	}


	void OnInitialize();
	void OnEnterVehicle(bool IsEnter, class AActor* Vehicle);
	void OnDestroy();
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_IsRescueFinish
// 0x0000 (0x0048 - 0x0048)
class USTBuffCondition_IsRescueFinish : public USTBuffCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_IsRescueFinish");
		return pStaticClass;
	}


	void OnInitialize();
	void OnDestroy();
	void IsRescueFinish();
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_IsStartRescue
// 0x0010 (0x0058 - 0x0048)
class USTBuffCondition_IsStartRescue : public USTBuffCondition
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_IsStartRescue");
		return pStaticClass;
	}


	void OnInitialize();
	void OnDestroy();
	void IsStartRescue(class AActor* BeRescue, bool bIsStart);
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_IsWeaponEquip
// 0x0010 (0x0058 - 0x0048)
class USTBuffCondition_IsWeaponEquip : public USTBuffCondition
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_IsWeaponEquip");
		return pStaticClass;
	}


	void OnInitialize();
	void OnDestroy();
	void IsUnEquipWeapon(class ASTExtraWeapon* Weapon);
	void IsEquipWeapon(class ASTExtraWeapon* Weapon, TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_LayerMax
// 0x0000 (0x0048 - 0x0048)
class USTBuffCondition_LayerMax : public USTBuffCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_LayerMax");
		return pStaticClass;
	}


	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_LayerSpecific
// 0x0008 (0x0050 - 0x0048)
class USTBuffCondition_LayerSpecific : public USTBuffCondition
{
public:
	int                                                LastLayerCount;                                           // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_LayerSpecific");
		return pStaticClass;
	}


	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffCondition_TeammateDistance
// 0x0018 (0x0060 - 0x0048)
class USTBuffCondition_TeammateDistance : public USTBuffCondition
{
public:
	float                                              MinTeammateDistanceSqr;                                   // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NeedTeamateNum;                                           // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0050(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffCondition_TeammateDistance");
		return pStaticClass;
	}


	bool CheckIsTrue();
};


// Class ShadowTrackerExtra.STBuffConditionACtion_PoisonFog
// 0x0040 (0x0080 - 0x0040)
class USTBuffConditionACtion_PoisonFog : public USTBuffAction
{
public:
	TArray<struct FPoisonFogStageConfig>               PoisonFogStageConfigs;                                    // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                MaxTraceTimes;                                            // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              GetFPAreaIntervalTime;                                    // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET
	class ASTExtraBaseCharacter*                       Target;                                                   // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STBuffConditionACtion_PoisonFog");
		return pStaticClass;
	}


	bool IsInFobidPoisonArea(struct FVector* TargetPos);
	int GetPoisonFogStage(int Progress);
	bool GetIsInFobidPoisonAreaInterval(struct FVector* TargetPos);
};


// Class ShadowTrackerExtra.STCharacterFollowComp
// 0x0098 (0x01A8 - 0x0110)
class USTCharacterFollowComp : public UActorComponent
{
public:
	class UTargetJumpOperation*                        CurRecordingVaultOperation;                               // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetJumpOperation*                        CurPlayingVaultOperation;                                 // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0120(0x0008) MISSED OFFSET
	class ASTExtraBaseCharacter*                       Target;                                                   // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CanFollowDist;                                            // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              QuitFollowAngleInput;                                     // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              QuitFollowDist;                                           // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PointDensityTimeInterval;                                 // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistThrehold;                                             // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsEnableAutoFollow;                                       // 0x0144(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0145(0x0003) MISSED OFFSET
	TWeakObjectPtr<class ASTExtraBaseCharacter>        PawnOwner;                                                // 0x0148(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTCharacterNearDeathComp*                   ParentNDComp;                                             // 0x0150(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x38];                                      // 0x0158(0x0038) MISSED OFFSET
	TArray<class UTargetKeyOperation*>                 TargetOps;                                                // 0x0190(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	class UTargetKeyOperation*                         CurOp;                                                    // 0x01A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STCharacterFollowComp");
		return pStaticClass;
	}


	bool WaitingConfirmState_IsConditionSatisfied();
	void WaitingConfirmState_ActOnUnsatisfied();
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);
	class UTargetJumpOperation* TargetStartVault(const struct FVector& vaultStartPos);
	void SetInterruptAutoFollowByInput(int InterrupteReason);
	void SelectedPickedTargetChangeNotifyHUD(class APawn* previousTarget);
	bool PlayerStopFollow();
	bool PlayerConfirmToFollow();
	void InitializeOwner(class APawn* _TempPawn);
	void FollowingTargetChangeNotifyHUD(class APawn* previousTarget);
	bool FollowingState_IsConditionSatisfied();
	void FollowingState_ActOnUnsatisfied();
	void FollowingState_ActOnSatisfied(float DeltaTime);
};


// Class ShadowTrackerExtra.STCharacterMovementComponent
// 0x0370 (0x0AA0 - 0x0730)
class USTCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0730(0x0028) MISSED OFFSET
	bool                                               bServerMoveCheckPassWall;                                 // 0x0758(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheckPassWallUseSweep;                                   // 0x0759(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x075A(0x0002) MISSED OFFSET
	float                                              CheckPassWallShapeShrinkScale;                            // 0x075C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustRadiusScaleWhenPassWall;                            // 0x0760(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RadiusScaleWhenCheckPassWall;                             // 0x0764(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxPrisonmentMove;                                        // 0x0768(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               NoPrisonReport;                                           // 0x076C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIgnoreClientRotationErrorChecksAndCorrection;            // 0x076D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x16];                                      // 0x076E(0x0016) MISSED OFFSET
	bool                                               bIsServerPriorityControlShoveling;                        // 0x0784(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0785(0x0003) MISSED OFFSET
	float                                              ShovelingStopMaxRelianceClientTime;                       // 0x0788(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnterShovelCD;                                            // 0x078C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DSEnterShovelCD;                                          // 0x0790(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShovelingCollisionHalfHeight;                             // 0x0794(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxShovelFloorAngle;                                      // 0x0798(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StandMinEnterShovelingSpeed;                              // 0x079C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CrounchMinEnterShovelingSpeed;                            // 0x07A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultShovelingSpeed;                                    // 0x07A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultShovelingDCC;                                      // 0x07A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExtraShovelingDCC1;                                       // 0x07AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExtraShovelingDCC2;                                       // 0x07B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExtraShovelingDCC3;                                       // 0x07B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinusGradeShovelingACC;                                   // 0x07B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinusGradeShovelingDCC;                                   // 0x07BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxShovelingSpeed;                                        // 0x07C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x07C4(0x0004) MISSED OFFSET
	float                                              StopShovelingSpeed;                                       // 0x07C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinNoDCCInShovelingSlopeAngle;                            // 0x07CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MAxNoDCCInShovelingSlopeAngle;                            // 0x07D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnterShovelingMinHeightInFalling;                         // 0x07D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShovelingFPPFovVaule;                                     // 0x07D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnterShovelingFPPFovChangeSpeed;                          // 0x07DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExitShovelingFPPFovChangeSpeed;                           // 0x07E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShovelingTPPFovVaule;                                     // 0x07E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnterShovelingTPPFovChangeSpeed;                          // 0x07E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExitShovelingTPPFovChangeSpeed;                           // 0x07EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShovelingLegBodyMaxAngle;                                 // 0x07F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShovelingLegStartFollowBodyMinAngle;                      // 0x07F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShovelingLegFollowBodySpeed;                              // 0x07F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAngleShovelingLegFollowBodySpeed;                      // 0x07FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShovelingLegFollowFloorSpeed;                             // 0x0800(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0804(0x0004) MISSED OFFSET
	struct FSoftObjectPath                             ShovelingEffectPath;                                      // 0x0808(0x0018) (Edit, BlueprintVisible, Config, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               EnterShovelingSound;                                      // 0x0820(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               ExitShovelingSound;                                       // 0x0828(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               InterruptShovelingSound;                                  // 0x0830(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              nowShovelingSpeed;                                        // 0x0838(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    ShovelingRotation;                                        // 0x083C(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               ShovelingIsTrigger;                                       // 0x0848(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShovelingIsHold;                                          // 0x0849(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x1];                                       // 0x084A(0x0001) MISSED OFFSET
	TEnumAsByte<ESTEPoseState>                         ShovelingPrePoseState;                                    // 0x084B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PreShovelFov;                                             // 0x084C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x68];                                      // 0x0850(0x0068) MISSED OFFSET
	class UParticleSystemComponent*                    ShovelingParticleSystemComponent;                         // 0x08B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               StopTick;                                                 // 0x08C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x3];                                       // 0x08C1(0x0003) MISSED OFFSET
	float                                              TimeSpeedFactor;                                          // 0x08C4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               CheatCheckSumFailed;                                      // 0x08C8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanSendCmdAck;                                           // 0x08C9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheatClientLocation;                                     // 0x08CA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x1];                                       // 0x08CB(0x0001) MISSED OFFSET
	float                                              MaxPenetrationAdjustmentSize;                             // 0x08CC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpOffVelocityFactor;                                    // 0x08D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               mb_UseVehiclePushSwim;                                    // 0x08D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               mb_UseVehiclePushUp;                                      // 0x08D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x2];                                       // 0x08D6(0x0002) MISSED OFFSET
	float                                              MaxDecideClientTimeSpeedDeltaTime;                        // 0x08D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseTimeSpeedAntiCheatCheck : 1;                          // 0x08DC(0x0001) (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bUseUserCmdDeltaCompress : 1;                             // 0x08DC(0x0001) (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x3];                                       // 0x08DD(0x0003) MISSED OFFSET
	float                                              SimulatedNearDistanceSqAtClient;                          // 0x08E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SimulatedNearTickIntervalAtClient;                        // 0x08E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SimulatedMiddleDistanceSqAtClient;                        // 0x08E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SimulatedMiddleTickIntervalAtClient;                      // 0x08EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SimulatedFarDistanceSqAtClient;                           // 0x08F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SimulatedFarTickIntervalAtClient;                         // 0x08F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WalkSpeedCurveScale;                                      // 0x08F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x4];                                       // 0x08FC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 MaxWalkSpeedCurve;                                        // 0x0900(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProneFloorAngle;                                          // 0x0908(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProneFloorZ;                                              // 0x090C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpFloorAngle;                                           // 0x0910(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpFloorZ;                                               // 0x0914(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ResolvePenetrationPosDiffSq;                              // 0x0918(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ResolvePenetrationAdjustment;                             // 0x091C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bOpenLocationSmoothOnDynamicMovementBase;                 // 0x0920(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0921(0x0003) MISSED OFFSET
	float                                              DistSqOnDynamicMovementBaseAtSimulateProxy;               // 0x0924(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DistAngleOnDynamicMovementBaseAtSimulateProxy;            // 0x0928(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x18];                                      // 0x092C(0x0018) MISSED OFFSET
	unsigned char                                      bProcessDeltaRotationWhenKnockedDown : 1;                 // 0x0944(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnabledResetPredictionData;                               // 0x0945(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEnableAdjustWhenStepUpFailed : 1;                        // 0x0946(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x1];                                       // 0x0947(0x0001) MISSED OFFSET
	float                                              AdjustDistanceWhenStepUpFailed;                           // 0x0948(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0xFC];                                      // 0x094C(0x00FC) MISSED OFFSET
	bool                                               bFixParachuteEnabled;                                     // 0x0A48(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData17[0x3];                                       // 0x0A49(0x0003) MISSED OFFSET
	float                                              CheckDistanceAhead;                                       // 0x0A4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bPrintMoveStatusDataDebugs;                               // 0x0A50(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData18[0x3];                                       // 0x0A51(0x0003) MISSED OFFSET
	int                                                PrintMoveStatusDataDebugsMaxNum;                          // 0x0A54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData19[0x18];                                      // 0x0A58(0x0018) MISSED OFFSET
	class ASTExtraBaseCharacter*                       STCharacter_PRIVATE;                                      // 0x0A70(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData20[0x19];                                      // 0x0A78(0x0019) MISSED OFFSET
	bool                                               bOpenServerControlPunish;                                 // 0x0A91(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData21[0xE];                                       // 0x0A92(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STCharacterMovementComponent");
		return pStaticClass;
	}


	void ToggleUserCmdDelta(bool Val);
	void TimeSpeedCheck(bool Val);
	void SeverAddRotationVelocity(const struct FVector& RotationVelocity);
	void SetProneFloorZ(float InProneFloorZ);
	void SetProneFloorAngle(float InProneFloorAngle);
	void SetJumpFloorZ(float InJumpFloorZ);
	void SetJumpFloorAngle(float InJumpFloorAngle);
	void ServerUserMoveCmdOld(int ClientApplySequence, TArray<unsigned char> UserCmdDelta);
	void ServerUserMoveCmdDual(uint32_t Sequence, uint32_t CheckSum, class UPrimitiveComponent* ClientMovementBase, TArray<unsigned char> UserCmd, TArray<unsigned char> UserCmdDelta);
	void ServerUserMoveCmd(uint32_t Sequence, uint32_t CheckSum, class UPrimitiveComponent* ClientMovementBase, TArray<unsigned char> UserCmd);
	void Ping2Server(float ServerTime, float ClientTime);
	void Ping2Client(float ServerTime);
	void PhysicsFlyDistance(float DeltaTime, const struct FVector& flyVelocity);
	void OnRecoverOnServer();
	void OnPreReconnectOnServer();
	void OnClientCloseUserCmdDelta();
	float K2_GetProneFloorZ();
	float K2_GetProneFloorAngle();
	float K2_GetJumpFloorZ();
	float K2_GetJumpFloorAngle();
	bool IsWalkable(const struct FHitResult& Hit);
	bool IsProning();
	class ASTExtraBaseCharacter* GetSTCharacter();
	float GetLastServerMoveTime();
	bool GetIsOpenShovelingAbility();
	bool DragOnGround(float DeltaTime);
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, const struct FVector& NewLoc, const struct FRotator& NewRot, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientUserMoveCmdAck(int Sequence);
	void ClientAdjustPositionAndRotation(float TimeStamp, const struct FVector& NewLoc, const struct FRotator& NewRot, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ChangePhysxShapeFlag();
};


// Class ShadowTrackerExtra.STCharacterNearDeathComp
// 0x0078 (0x0188 - 0x0110)
class USTCharacterNearDeathComp : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	float                                              BreathMax;                                                // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AssistAccountableDuration;                                // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnterNearDeathDamageInvincibleTime;                       // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsTurnOnDebugSameTeamAccountable;                         // 0x0124(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0125(0x0003) MISSED OFFSET
	class UCurveFloat*                                 CurveLayeredDeathInterval;                                // 0x0128(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxDeathTimes;                                            // 0x0130(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsDebugging;                                              // 0x0134(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0xB];                                       // 0x0135(0x000B) MISSED OFFSET
	class ASTExtraBaseCharacter*                       PawnOwner;                                                // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              EnterNearDeathSeconds;                                    // 0x0148(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Breath;                                                   // 0x014C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                NearDeathRestoredOrignalHealth;                           // 0x0150(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                NearDeathRestoredOrignalBreathAmount;                     // 0x0154(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0158(0x0008) MISSED OFFSET
	class AController*                                 EventInstigatorRecorded;                                  // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                      DamageCauserRecorded;                                     // 0x0168(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0170(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STCharacterNearDeathComp");
		return pStaticClass;
	}


	float SetHealthSafety(float AddVal);
	void S2C_HelpOther(class ACharacter* HelpWho, bool IsTurnInfo, float RemainingRescueTime);
	void S2C_BeHelpedByOther(class ACharacter* ByWho, bool IsTurnInfo, float RemainingRescueTime);
	void ResetDataOnRespawn();
	void RescueFinishSuccessfully();
	void OnRep_BreathChanged();
	bool IsNearDeathInvincible();
	bool IsHealthAlive();
	bool IsHaveLastBreathStatus();
	bool IsFinishedLastBreathStatus();
	void InitializeOwner(class APawn* TempPawn);
	bool GotoLastBreathStatus(class AController* EventInstigator, class AActor* DamageCauser, const struct FDamageEvent& DamageEvent, float _finalDamage, bool IsHeadShot);
	float GetBreathMax();
	float GetBreath();
	void EnterSwimWhileDying();
	void DoFinishLastBreath();
	void ClearNearDeathTeammate();
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);
	void AddDeadBuff();
};


// Class ShadowTrackerExtra.STCharacterRescueOtherComp
// 0x0098 (0x01A8 - 0x0110)
class USTCharacterRescueOtherComp : public UActorComponent
{
public:
	int                                                WanderingRadius;                                          // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReturnToCheckConditionCDTimeSetting;                      // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FanPickerData                               FanData;                                                  // 0x0118(0x0014) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x012C(0x001C) MISSED OFFSET
	class ASTExtraBaseCharacter*                       RescueWho;                                                // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RescueingStatusStartTimeSeconds;                          // 0x0150(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0154(0x0018) MISSED OFFSET
	float                                              RestoringDuration;                                        // 0x016C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     DurationAttrModifyRef;                                    // 0x0170(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASTExtraBaseCharacter>        PawnOwner;                                                // 0x0180(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTCharacterNearDeathComp*                   ParentNDComp;                                             // 0x0188(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0190(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STCharacterRescueOtherComp");
		return pStaticClass;
	}


	bool WaitingConfirmState_IsConditionSatisfied();
	void WaitingConfirmState_ActOnUnsatisfied();
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);
	void TickAsHelper(float DeltaTime);
	void ServerPlayerConfirm(class ASTExtraBaseCharacter* _RescueWho);
	void SelectedPickedTargetChangeNotifyHUD(class APawn* previousTarget);
	bool RescueingState_IsConditionSatisfied();
	void RescueingState_ActOnUnsatisfied();
	void RescueingState_ActOnSatisfied(float DeltaTime);
	void RescueingProcessFinished();
	bool PlayerConfirmToRescueClientSide();
	bool PickTargetsAsHelper(TArray<class ASTExtraBaseCharacter*>* pickedTargets);
	void OnRep_IsRescueingOtherStatusChange();
	bool IsInRescueingStatus();
	void InitializeOwner(class APawn* _TempPawn, class USTCharacterNearDeathComp* _Outer);
	float GetRestoringDuration();
	void DrawDebugFan();
};


// Class ShadowTrackerExtra.STClothAnimInstance
// 0x0040 (0x0400 - 0x03C0)
class USTClothAnimInstance : public UAnimInstance
{
public:
	class ASTExtraBaseCharacter*                       C_OwnerCharacter;                                         // 0x03C0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsFPPMode;                                              // 0x03C8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsSimulatCloth;                                         // 0x03C9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03CA(0x0002) MISSED OFFSET
	float                                              C_BlendFactorInLobby;                                     // 0x03CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_BlendFactorInBattle;                                    // 0x03D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_MoveThreshold;                                          // 0x03D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_BlendScaleThreshold;                                    // 0x03D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_BlendScale;                                             // 0x03DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03E0(0x0008) MISSED OFFSET
	class USkeletalMeshComponent*                      ParentMesh;                                               // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LastLocation;                                             // 0x03F0(0x000C) (IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STClothAnimInstance");
		return pStaticClass;
	}


	class USkeletalMeshComponent* TryGetParentMeshComponent();
	bool isCothAnimEnable();
	void EnableClothAnim();
	void DisableClothAnim();
};


// Class ShadowTrackerExtra.STCustomMeshComponent
// 0x0020 (0x0740 - 0x0720)
class USTCustomMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0720(0x0008) MISSED OFFSET
	TArray<struct FName>                               ObjectsNamesForIgnore;                                    // 0x0728(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TEnumAsByte<ECollisionTraceFlag>                   InitCollisionType;                                        // 0x0738(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0739(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STCustomMeshComponent");
		return pStaticClass;
	}


	void SetCollisionTraceFlag(TEnumAsByte<ECollisionTraceFlag> Flag);
	void RebuildBodyWithCollisionTraceFlag(TEnumAsByte<ECollisionTraceFlag> Flag);
	bool CheckAnyOverlappingActor(class UWorld* World, const struct FTransform& tranx);
};


// Class ShadowTrackerExtra.STDamageCameraShake
// 0x0000 (0x0160 - 0x0160)
class USTDamageCameraShake : public UCameraShake
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STDamageCameraShake");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STEActorCacheComponent
// 0x0058 (0x0168 - 0x0110)
class USTEActorCacheComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0110(0x0050) MISSED OFFSET
	int                                                PoolSizeLimit_Bullet;                                     // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PoolSizeLimit_BulletImpactEffect;                         // 0x0164(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STEActorCacheComponent");
		return pStaticClass;
	}


	bool PushActorToPool(TEnumAsByte<EActorCacheID> ID, class ASTECachableActor* Target);
	class ASTECachableActor* GetActorFromPool(TEnumAsByte<EActorCacheID> ID);
};


// Class ShadowTrackerExtra.STECachableActor
// 0x0008 (0x0398 - 0x0390)
class ASTECachableActor : public AActor
{
public:
	class USTEActorCacheComponent*                     ActorCacheComponent;                                      // 0x0390(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STECachableActor");
		return pStaticClass;
	}


	void RegisterCachePool(class USTEActorCacheComponent* Pool);
	bool PushToPool(TEnumAsByte<EActorCacheID> ID);
};


// Class ShadowTrackerExtra.STEFlareGuntProjectComponent
// 0x0000 (0x0370 - 0x0370)
class USTEFlareGuntProjectComponent : public USTEShootWeaponProjectComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STEFlareGuntProjectComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STEShootWeaponBulletImpactEffect
// 0x0710 (0x0AA0 - 0x0390)
class ASTEShootWeaponBulletImpactEffect : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0390(0x0008) MISSED OFFSET
	class UParticleSystem*                             DefaultFX;                                                // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             ConcreteFX;                                               // 0x03A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             DirtFX;                                                   // 0x03A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             WaterFX;                                                  // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             MetalFX;                                                  // 0x03B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             WoodFX;                                                   // 0x03C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             GlassFX;                                                  // 0x03C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             GrassFX;                                                  // 0x03D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             FleshFX;                                                  // 0x03D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             SteelFX;                                                  // 0x03E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             SandbagFX;                                                // 0x03E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             SandFX;                                                   // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             ClothFX;                                                  // 0x03F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             PlasticFX;                                                // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             LeatherFX;                                                // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             CeramicsFX;                                               // 0x0410(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             PaperFX;                                                  // 0x0418(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             StoneFX;                                                  // 0x0420(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             SnowFX;                                                   // 0x0428(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             PopCanFX;                                                 // 0x0430(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             PyreflyFX;                                                // 0x0438(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             LeafFX;                                                   // 0x0440(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             CarFX;                                                    // 0x0448(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             AsphaltFX;                                                // 0x0450(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             IceFX;                                                    // 0x0458(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0460(0x0008) MISSED OFFSET
	bool                                               bForceDefaultFX;                                          // 0x0468(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0469(0x0007) MISSED OFFSET
	class UAkAudioEvent*                               DefaultSound;                                             // 0x0470(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               ConcreteSound;                                            // 0x0478(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               DirtSound;                                                // 0x0480(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               WaterSound;                                               // 0x0488(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               MetalSound;                                               // 0x0490(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               WoodSound;                                                // 0x0498(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               GlassSound;                                               // 0x04A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               GrassSound;                                               // 0x04A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               FleshSound;                                               // 0x04B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               SteelSound;                                               // 0x04B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               SandbagSound;                                             // 0x04C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               SandSound;                                                // 0x04C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               ClothSound;                                               // 0x04D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               PlasticSound;                                             // 0x04D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               LeatherSound;                                             // 0x04E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               CeramicsSound;                                            // 0x04E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               PaperSound;                                               // 0x04F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               StoneSound;                                               // 0x04F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               SnowSound;                                                // 0x0500(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               PopCanSound;                                              // 0x0508(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               PyreflySound;                                             // 0x0510(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               LeafSound;                                                // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               CarSound;                                                 // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               AsphaltSound;                                             // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               IceSound;                                                 // 0x0530(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDecalData                                  DefaultDecal;                                             // 0x0538(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  ConcreteDecal;                                            // 0x0558(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  DirtDecal;                                                // 0x0578(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  WaterDecal;                                               // 0x0598(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  MetalDecal;                                               // 0x05B8(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  WoodDecal;                                                // 0x05D8(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  GrassDecal;                                               // 0x05F8(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  GlassDecal;                                               // 0x0618(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  FleshDecal;                                               // 0x0638(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  SteelDecal;                                               // 0x0658(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  SandbagDecal;                                             // 0x0678(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  SandDecal;                                                // 0x0698(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  ClothDecal;                                               // 0x06B8(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  PlasticDecal;                                             // 0x06D8(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  LeatherDecal;                                             // 0x06F8(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  CeramicsDecal;                                            // 0x0718(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  PaperDecal;                                               // 0x0738(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  StoneDecal;                                               // 0x0758(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  SnowDecal;                                                // 0x0778(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  PopCanDecal;                                              // 0x0798(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  PyreflyDecal;                                             // 0x07B8(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  LeafDecal;                                                // 0x07D8(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  CarDecal;                                                 // 0x07F8(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  AsphaltDecal;                                             // 0x0818(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalData                                  IceDecal;                                                 // 0x0838(0x0020) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0858(0x0008) MISSED OFFSET
	struct FBulletHitInfoUploadData                    SurfaceHit;                                               // 0x0860(0x00F0) (BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                               bAudioOnly;                                               // 0x0950(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAttachToTarget;                                          // 0x0951(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x6];                                       // 0x0952(0x0006) MISSED OFFSET
	TMap<float, float>                                 DamageScaleMap;                                           // 0x0958(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UDecalComponent*                             ImpactDecalComp;                                          // 0x09A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*                    ImpactParticleComp;                                       // 0x09B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x28];                                      // 0x09B8(0x0028) MISSED OFFSET
	class USceneComponent*                             TargetImpactComp;                                         // 0x09E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x50];                                      // 0x09E8(0x0050) MISSED OFFSET
	class UParticleSystem*                             GreenBloodFleshFX;                                        // 0x0A38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int, class UParticleSystem*>                  WeaponAvatarSpecialFleshFX;                               // 0x0A40(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x10];                                      // 0x0A90(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STEShootWeaponBulletImpactEffect");
		return pStaticClass;
	}


	void TimerHideDecal();
};


// Class ShadowTrackerExtra.STEShootWeaponInstantComponent
// 0x0000 (0x0360 - 0x0360)
class USTEShootWeaponInstantComponent : public USTExtraShootWeaponComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STEShootWeaponInstantComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraFloatingVehicleMovementComponent
// 0x0060 (0x01F0 - 0x0190)
class USTExtraFloatingVehicleMovementComponent : public UPawnMovementComponent
{
public:
	float                                              MaxAcceleration;                                          // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StartAccelerationRate;                                    // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StopAccelerationRate;                                     // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxRotationYawAngle;                                      // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RotationYawRate;                                          // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BackwardForceScale;                                       // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Acceleration;                                             // 0x01A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RotationYawAngle;                                         // 0x01AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ApplyForceSocketName;                                     // 0x01B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 SlideCompensationCurve;                                   // 0x01B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01C0(0x0008) MISSED OFFSET
	float                                              STThrottleInput;                                          // 0x01C8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              STSteeringInput;                                          // 0x01CC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x01D0(0x0008) MISSED OFFSET
	class UBuoyancyForceComponent*                     buoyancyForce;                                            // 0x01D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01E0(0x0004) MISSED OFFSET
	bool                                               DisableWhenTurnOver;                                      // 0x01E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x01E5(0x0003) MISSED OFFSET
	float                                              MinTurnOverDegree;                                        // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x01EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraFloatingVehicleMovementComponent");
		return pStaticClass;
	}


	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);
	float GetThrottleInput();
	float GetSteeringInput();
};


// Class ShadowTrackerExtra.STExtraAdavancedFloatingMovementComp
// 0x0048 (0x0238 - 0x01F0)
class USTExtraAdavancedFloatingMovementComp : public USTExtraFloatingVehicleMovementComponent
{
public:
	float                                              RotationMinRateForceAcc;                                  // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RotationMinSpeed;                                         // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DrawDebug;                                                // 0x01F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01F9(0x0007) MISSED OFFSET
	TArray<float>                                      PointDensityOverrideLeft;                                 // 0x0200(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<float>                                      PointDensityOverrideRight;                                // 0x0210(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0220(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraAdavancedFloatingMovementComp");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraVehicleBase
// 0x0C50 (0x1040 - 0x03F0)
class ASTExtraVehicleBase : public APawn
{
public:
	unsigned char                                      UnknownData00[0xE8];                                      // 0x03F0(0x00E8) MISSED OFFSET
	int                                                iRegionVehicle;                                           // 0x04D8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AutoEnterVehicle;                                         // 0x04DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESTExtraVehicleType                                VehicleType;                                              // 0x04DD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESTExtraVehicleShapeType                           VehicleShapeType;                                         // 0x04DE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1];                                       // 0x04DF(0x0001) MISSED OFFSET
	struct FItemDefineID                               AvatarDefaultCfg;                                         // 0x04E0(0x0018) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                          BrokenMat;                                                // 0x04F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             PS_Explosion;                                             // 0x0500(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             PS_OnHitObstacles;                                        // 0x0508(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FParticleSoftWrapperArray> ParticleSoftWrapperMap;                                   // 0x0510(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FName, struct FParticleRuntimeDataArray> ParticleRuntimeDataMap;                                   // 0x0560(0x0050) (ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTexture2D*                                  VehicleIcon;                                              // 0x05B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ECameraDataType>                       CameraDataType;                                           // 0x05B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShowUpDownGUI;                                            // 0x05B9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShowHeightUI;                                             // 0x05BA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AdjustViewDistanceByHeight;                               // 0x05BB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustViewDistanceBaseDist;                               // 0x05BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdjustViewDistanceBaseFactor;                             // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsUnmannedVehicle;                                        // 0x05C4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanChangeSeatAccurately;                                 // 0x05C5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x05C6(0x0002) MISSED OFFSET
	float                                              ShowGrainyScreenMinDist;                                  // 0x05C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FuelConsumptionModifierBoost;                             // 0x05CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanBoostSpeed;                                           // 0x05D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseSyncAtClient;                                         // 0x05D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheckOnGround;                                           // 0x05D2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x1];                                       // 0x05D3(0x0001) MISSED OFFSET
	float                                              LanscapeCheckDistance;                                    // 0x05D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLockZeroAngularDamping;                                  // 0x05D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x05D9(0x0003) MISSED OFFSET
	float                                              LockZeroAngularDampingValue;                              // 0x05DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bInvulnerableWhenHasRiders;                               // 0x05E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x05E1(0x0003) MISSED OFFSET
	int                                                MainMaterialIndex;                                        // 0x05E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FText                                       VehicleDisplayName;                                       // 0x05E8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector                                     AirDropVelocity;                                          // 0x0600(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x4];                                       // 0x060C(0x0004) MISSED OFFSET
	class UStaticMesh*                                 AirdropParachuteMesh;                                     // 0x0610(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       AirDropParachuteSocketName;                               // 0x0618(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAllowDifferentTeam;                                      // 0x0620(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               SupportMusicGame;                                         // 0x0621(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               VehicleBackpack;                                          // 0x0622(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x1];                                       // 0x0623(0x0001) MISSED OFFSET
	float                                              BackpackCapacity;                                         // 0x0624(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       BackpackName;                                             // 0x0628(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             BackpackSupportModeIDList;                                // 0x0630(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        marr_MidIndexes;                                          // 0x0640(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              EnterVehicleCameraBlendTime;                              // 0x0650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExitVehicleCameraBlendTime;                               // 0x0654(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NetCullingDistanceOnVeryLowDevice;                        // 0x0658(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DisableTickVehicleJump;                                   // 0x065C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x3];                                       // 0x065D(0x0003) MISSED OFFSET
	float                                              StaticForceFixInterval;                                   // 0x0660(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              voiceCheckCD;                                             // 0x0664(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              voiceCheckShowCD;                                         // 0x0668(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VoiceCheckDis;                                            // 0x066C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              voiceUsingHornCheckDis;                                   // 0x0670(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              voiceCheckSpeed;                                          // 0x0674(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x28];                                      // 0x0678(0x0028) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSeatAttached;                                           // 0x06A0(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSeatDetached;                                           // 0x06B0(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSeatChange;                                             // 0x06C0(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	bool                                               mb_ZeroLocked;                                            // 0x06D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bDebugDrawEnterVehicle;                                   // 0x06D1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x2];                                       // 0x06D2(0x0002) MISSED OFFSET
	float                                              PassengerInjuryAvoidance;                                 // 0x06D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x1C];                                      // 0x06D8(0x001C) MISSED OFFSET
	ESTExtraVehicleHealthState                         VehicleHealthState;                                       // 0x06F4(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsEngineStarted;                                         // 0x06F5(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsUsingHorn;                                             // 0x06F6(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsBoosting;                                              // 0x06F7(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsVehicleSpringArmAutoReturn;                            // 0x06F8(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData12[0x3];                                       // 0x06F9(0x0003) MISSED OFFSET
	struct FVector                                     BloodEffectScale;                                         // 0x06FC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0708(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVehicleSeatComponent*                       VehicleSeats;                                             // 0x0710(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVehicleDamageComponent*                     VehicleDamage;                                            // 0x0718(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVehicleCommonComponent*                     VehicleCommon;                                            // 0x0720(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x0728(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVehicleSyncComponent*                       VehicleSyncComponent;                                     // 0x0730(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULagCompensationComponentBase*               VehicleShootAntiCheat;                                    // 0x0738(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UVehicleComponent*>                   VehicleComps;                                             // 0x0740(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData13[0x18];                                      // 0x0750(0x0018) MISSED OFFSET
	float                                              VehicleHitThreshold;                                      // 0x0768(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              VehicleHitCharacterThreshold;                             // 0x076C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData14[0xC];                                       // 0x0770(0x000C) MISSED OFFSET
	float                                              AndroidGLES2TailLightScale;                               // 0x077C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0780(0x0008) MISSED OFFSET
	TArray<struct FVehBackpackItem>                    VehicleBackpackItems;                                     // 0x0788(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData16[0x8];                                       // 0x0798(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnClientEnterVehicleEvent;                                // 0x07A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnClientExitVehicleEvent;                                 // 0x07B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData17[0x4];                                       // 0x07C0(0x0004) MISSED OFFSET
	float                                              VehicleEnterDistance;                                     // 0x07C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TickEnterSphereInterval;                                  // 0x07C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              EnterSphereExtraHeight;                                   // 0x07CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData18[0x9];                                       // 0x07D0(0x0009) MISSED OFFSET
	bool                                               EnableTickEnterSphereAsyncLoadRes;                        // 0x07D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData19[0x2];                                       // 0x07DA(0x0002) MISSED OFFSET
	float                                              AsyncLoadResDistance;                                     // 0x07DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TickEnterSphereAsyncLoadResInterval;                      // 0x07E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData20[0x5];                                       // 0x07E4(0x0005) MISSED OFFSET
	bool                                               EnableCullWater;                                          // 0x07E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData21[0x2];                                       // 0x07EA(0x0002) MISSED OFFSET
	float                                              TickEnterCullWaterSphereInterval;                         // 0x07EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              EnterCullWaterDistanceSq;                                 // 0x07F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     CullWaterCapsuleA;                                        // 0x07F4(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     CullWaterCapsuleB;                                        // 0x0800(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CullWaterCapsuleRadius;                                   // 0x080C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CullWaterCapsuleBlendWidth;                               // 0x0810(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData22[0x8];                                       // 0x0814(0x0008) MISSED OFFSET
	bool                                               bPeneTerrainProtectionEnabled;                            // 0x081C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData23[0x3];                                       // 0x081D(0x0003) MISSED OFFSET
	float                                              PeneTerrainProtectionInterval;                            // 0x0820(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              SaveValidTransformInterval;                               // 0x0824(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     PeneTerrainProtectionFixOffset;                           // 0x0828(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData24[0x28];                                      // 0x0834(0x0028) MISSED OFFSET
	bool                                               bIsAirdroppingVehicle;                                    // 0x085C(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData25[0x3];                                       // 0x085D(0x0003) MISSED OFFSET
	class UStaticMeshComponent*                        AirDropParachuteMeshComp;                                 // 0x0860(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_EngineLoop;                                           // 0x0868(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_EngineLoop_Team;                                      // 0x0870(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_Boost;                                                // 0x0878(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_FireLoop;                                             // 0x0880(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_Landing;                                              // 0x0888(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_Explosion;                                            // 0x0890(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_HitBody;                                              // 0x0898(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_HitMetal;                                             // 0x08A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_Horn;                                                 // 0x08A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_Throttle;                                             // 0x08B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_UnderWater_In;                                        // 0x08B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_UnderWater_Out;                                       // 0x08C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_CannotThrottle;                                       // 0x08C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_BodyOverlapDamage;                                    // 0x08D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAkAudioEvent*>                       SfxArr_MusicLoops;                                        // 0x08D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                              EngineSfxEndDelayTime;                                    // 0x08E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bAudioLogEnabled;                                         // 0x08EC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData26[0x3];                                       // 0x08ED(0x0003) MISSED OFFSET
	float                                              OverrideCullingSizeWithPlayer;                            // 0x08F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              OverrideCullingSizeWithoutPlayer;                         // 0x08F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData27[0x1F4];                                     // 0x08F8(0x01F4) MISSED OFFSET
	float                                              RPMSfxScale;                                              // 0x0AEC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ThrottleSfxMinSpeed;                                      // 0x0AF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData28[0x8];                                       // 0x0AF4(0x0008) MISSED OFFSET
	float                                              PlayMusicChance;                                          // 0x0AFC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                CurMusicIndex;                                            // 0x0B00(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData29[0x15];                                      // 0x0B04(0x0015) MISSED OFFSET
	ESTExtraVehicleSyncState                           VehicleSyncTag;                                           // 0x0B19(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData30[0x2];                                       // 0x0B1A(0x0002) MISSED OFFSET
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;             // 0x0B1C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData31[0x8];                                       // 0x0B20(0x0008) MISSED OFFSET
	struct FVehicleSimViewData                         SimulateViewData;                                         // 0x0B28(0x0004) (Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FVehicleSimViewData                         SimulateFreeCameraViewData;                               // 0x0B2C(0x0004) (Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	class UVehicleSpringArmComponent*                  mp_VehicleSpringArm;                                      // 0x0B30(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnVehicleHealthStateChanged;                              // 0x0B38(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bAlwaysIgnoreRideCheck;                                   // 0x0B48(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData32[0x3];                                       // 0x0B49(0x0003) MISSED OFFSET
	float                                              MinRideAngleDgree;                                        // 0x0B4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData33[0x8];                                       // 0x0B50(0x0008) MISSED OFFSET
	bool                                               bCanUseSpeculativeCCD;                                    // 0x0B58(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseSpeculativeCCDOnServer;                               // 0x0B59(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData34[0x2];                                       // 0x0B5A(0x0002) MISSED OFFSET
	float                                              VehicleRadiusImulseScale;                                 // 0x0B5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VehicleAdditionalBlowUp;                                  // 0x0B60(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData35[0x1C];                                      // 0x0B64(0x001C) MISSED OFFSET
	bool                                               bResolvingStuckEnabled;                                   // 0x0B80(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData36[0x3];                                       // 0x0B81(0x0003) MISSED OFFSET
	float                                              StuckMinImpulse;                                          // 0x0B84(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ContinuousStuckInterval;                                  // 0x0B88(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ContinuousStuckTimeBeforeResoving;                        // 0x0B8C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              StuckResovingTime;                                        // 0x0B90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData37[0x4];                                       // 0x0B94(0x0004) MISSED OFFSET
	float                                              ContinuousStuckTimer;                                     // 0x0B98(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              StuckResovingTimer;                                       // 0x0B9C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData38[0x8];                                       // 0x0BA0(0x0008) MISSED OFFSET
	bool                                               bServerPrecentPenetratingEnabled;                         // 0x0BA8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData39[0x47];                                      // 0x0BA9(0x0047) MISSED OFFSET
	bool                                               bShouldRespawnSelfWhenUnusable;                           // 0x0BF0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData40[0x3];                                       // 0x0BF1(0x0003) MISSED OFFSET
	float                                              RespawnWaitingTime;                                       // 0x0BF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              RespawnTickInterval;                                      // 0x0BF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bDrawDebug;                                               // 0x0BFC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData41[0x87];                                      // 0x0BFD(0x0087) MISSED OFFSET
	bool                                               bServerDetachEveryoneWhenRespawn;                         // 0x0C84(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData42[0x13];                                      // 0x0C85(0x0013) MISSED OFFSET
	bool                                               bEnableAntiCheat;                                         // 0x0C98(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData43[0x7];                                       // 0x0C99(0x0007) MISSED OFFSET
	TArray<class UClass*>                              VACTaskSetups;                                            // 0x0CA0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UVehicleAntiCheatTask*>               VACTasks;                                                 // 0x0CB0(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UVehicleAntiCheatTask*>               VacInstancedTasks;                                        // 0x0CC0(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData44[0x30];                                      // 0x0CD0(0x0030) MISSED OFFSET
	bool                                               bEnableServerAuthorize;                                   // 0x0D00(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData45[0x1F];                                      // 0x0D01(0x001F) MISSED OFFSET
	float                                              LandTraceMaxHeight;                                       // 0x0D20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableSkeletalMeshOptimizationDS;                        // 0x0D24(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData46[0x3];                                       // 0x0D25(0x0003) MISSED OFFSET
	struct FVector                                     SeekLockOffset;                                           // 0x0D28(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData47[0x4];                                       // 0x0D34(0x0004) MISSED OFFSET
	struct FName                                       SeekLockSocket;                                           // 0x0D38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProduceSoundInterval;                                     // 0x0D40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData48[0x4];                                       // 0x0D44(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    VehicleAnimEventDelegate;                                 // 0x0D48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UBattleItemHandleBase*                       BindingHandle;                                            // 0x0D58(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEnterVehicle;                                           // 0x0D60(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData49[0x10];                                      // 0x0D70(0x0010) MISSED OFFSET
	class USkeletalMeshComponent*                      FPPMeshComponent;                                         // 0x0D80(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    FPPDynamicMat;                                            // 0x0D88(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData50[0x28];                                      // 0x0D90(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.STExtraVehicleBase.MeshAssetRef
	class USkeletalMesh*                               TPPMesh;                                                  // 0x0DB8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData51[0xD0];                                      // 0x0DC0(0x00D0) MISSED OFFSET
	float                                              OverlapCameraShakeInterval;                               // 0x0E90(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData52[0x4];                                       // 0x0E94(0x0004) MISSED OFFSET
	float                                              OverlapDamageRate;                                        // 0x0E98(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OverlapImpulseRate;                                       // 0x0E9C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OverlapImpulseRateZ;                                      // 0x0EA0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxOverlapImpulse;                                        // 0x0EA4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinOverlapSpeed;                                          // 0x0EA8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OverlapSimpleCharacterInterval;                           // 0x0EAC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData53[0x4];                                       // 0x0EB0(0x0004) MISSED OFFSET
	float                                              OverlapVehicleDamageRate;                                 // 0x0EB4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxOverlapVehicleDamageRange;                             // 0x0EB8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData54[0x4];                                       // 0x0EBC(0x0004) MISSED OFFSET
	struct FESTAINoiseEventParams                      EngineParams;                                             // 0x0EC0(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                              EngineSoundCheckInterval;                                 // 0x0ED0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData55[0x4];                                       // 0x0ED4(0x0004) MISSED OFFSET
	float                                              EngineSoundMinCheckSpeed;                                 // 0x0ED8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FESTAINoiseEventParams                      LoudspeakerParams;                                        // 0x0EDC(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData56[0x1];                                       // 0x0EEC(0x0001) MISSED OFFSET
	bool                                               IsForbidNightVehicle;                                     // 0x0EED(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData57[0x2];                                       // 0x0EEE(0x0002) MISSED OFFSET
	class UAttrModifyComponent*                        AttrModifyComp;                                           // 0x0EF0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTBuffSystemComponent*                      BuffSystemComp;                                           // 0x0EF8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EDamageableGameObjectType>                  DamageableGameObjectTypeList;                             // 0x0F00(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bEnterSocketChanged;                                      // 0x0F10(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData58[0x7];                                       // 0x0F11(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnVehicleAvatarDataCopied;                                // 0x0F18(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UVehicleAvatarComponent*                     VehicleAvatar;                                            // 0x0F28(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleAdvanceAvatarComponent*              VehicleAdvanceAvatar;                                     // 0x0F30(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAdvanceAvatar;                                           // 0x0F38(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData59[0x3];                                       // 0x0F39(0x0003) MISSED OFFSET
	int                                                nAvatarID;                                                // 0x0F3C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bNeedDelayProcessAvatarOutline;                           // 0x0F40(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData60[0x7];                                       // 0x0F41(0x0007) MISSED OFFSET
	bool                                               bEnableWeakTickComponent;                                 // 0x0F48(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData61[0x3];                                       // 0x0F49(0x0003) MISSED OFFSET
	float                                              WeakTickDoSomethingDuration;                              // 0x0F4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData62[0x18];                                      // 0x0F50(0x0018) MISSED OFFSET
	float                                              VehicleGoStraight;                                        // 0x0F68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxLinearVelocity;                                        // 0x0F6C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bInBuffSpeedState;                                        // 0x0F70(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData63[0x3];                                       // 0x0F71(0x0003) MISSED OFFSET
	int                                                TeamID;                                                   // 0x0F74(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CampID;                                                   // 0x0F78(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData64[0x4];                                       // 0x0F7C(0x0004) MISSED OFFSET
	class UWeaponManagerBaseComponent*                 WeaponManagerComponent;                                   // 0x0F80(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData65[0x8];                                       // 0x0F88(0x0008) MISSED OFFSET
	struct FSoftObjectPath                             VehicleStatesConfigClass;                                 // 0x0F90(0x0018) (Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                             VehicleBloodMaxHpConfigClass;                             // 0x0FA8(0x0018) (Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                CurrentVehicleStatesData;                                 // 0x0FC0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData66[0x14];                                      // 0x0FC4(0x0014) MISSED OFFSET
	TArray<class APlayerTombBox*>                      TombBoxOnVehicle;                                         // 0x0FD8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class ASTExtraBaseCharacter*>               StandingVehiclePlayers;                                   // 0x0FE8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                               IsExploded;                                               // 0x0FF8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData67[0x7];                                       // 0x0FF9(0x0007) MISSED OFFSET
	struct FName                                       ExplodedTombBoxPlaceSocket;                               // 0x1000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              TombBoxTraceLength;                                       // 0x1008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              PlayerOutAngleCosin;                                      // 0x100C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bInHouseSpawn;                                            // 0x1010(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData68[0x3];                                       // 0x1011(0x0003) MISSED OFFSET
	float                                              SleepVehicleTolerance;                                    // 0x1014(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SleepVehicleTickTime;                                     // 0x1018(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData69[0x4];                                       // 0x101C(0x0004) MISSED OFFSET
	bool                                               bFrozenStatic;                                            // 0x1020(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeedFrozenStatic;                                        // 0x1021(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData70[0x2];                                       // 0x1022(0x0002) MISSED OFFSET
	struct FVector                                     AttachedRelLoc;                                           // 0x1024(0x000C) (BlueprintVisible, Net, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      AttachedActor;                                            // 0x1030(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData71[0x8];                                       // 0x1038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraVehicleBase");
		return pStaticClass;
	}


	void WeakTick(float DeltaTime);
	void VehicleBeenDestroyedCleanInfoDisplay(ESTExtraVehicleHealthState InVehicleHealthState);
	void UpdateHeightToLand();
	void StartFireSimple(TEnumAsByte<EShootWeaponShootMode> ShootMode);
	void StartAirDrop();
	void SpawnItemForVehicleBackpack(TArray<struct FPickUpItemData> ItemList);
	void SetVehicleStates(int ID, bool bEnable, float fTime);
	void ServerSetUsingHorn(bool bUse);
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);
	void ServerSetBoosting(bool bEnalbed);
	void ServerSetAirControlF(float Rate);
	void ServerSetAirControlB(float Rate);
	void SendVehicleInAirChangedTimeToServer();
	void SendTriggerEventToServer(class UVehicleTriggerComponent* VTComp);
	void SendCreateDamage(class ASTExtraSimpleCharacter* Target);
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();
	bool RemoveBuffBySkill(int SkillID, int LayerCount, class AActor* Causer);
	bool RemoveBuffByID(int BuffID, class AActor* Causer, int LayerCount, int CauserSkillID);
	void RemoveAntiStuckBox();
	void RegisterItemHandle(class UBattleItemHandleBase* BindingHandle);
	void ProcessAvatarOutline();
	void PrintStats();
	bool PreChangeVehicleFPPAvatar();
	bool PreChangeVehicleBrokenMat();
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);
	void PostLoadFPPMesh();
	void PlaySfxOneShot(class UAkAudioEvent* AkEvent);
	void OnUpdateEffects();
	void OnSkeletalMeshSleep(class UPrimitiveComponent* WakingComponent, const struct FName& BoneName);
	void OnSkeletalMeshAwake(class UPrimitiveComponent* WakingComponent, const struct FName& BoneName);
	void OnSetTailLightValue(float LightValue);
	void OnRep_VehicleSyncFlag();
	void OnRep_VehicleHealthState();
	void OnRep_TeamID();
	void OnRep_SimulateViewData();
	void OnRep_SimulateFreeCameraViewData();
	void OnRep_ServerLastReplicatedServer();
	void OnRep_IsVehicleSpringArmAutoReturn();
	void OnRep_IsForbidNightVehicle();
	void OnRep_IsEngineStarted();
	void OnRep_IsBoosting();
	void OnRep_IsAirdroppingVehicle();
	void OnRep_FrozenStatic();
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);
	void OnRep_CampID();
	void OnRep_AttachedRelLoc();
	void OnRep_AttachedActor();
	void OnPlayerExitVehicle(bool IsDriver);
	void OnPlayerEnterVehicle(bool isSuccess, ESTExtraVehicleSeatType SeatType);
	void OnMeshLoaded(const struct FSoftObjectPath& AssetRef);
	void OnEngineStop();
	void OnEngineStart();
	void OnBoostingChanged();
	void MultiCast_ApplyImpulse(const struct FVector& Origin, float DamageOuterRadius, float BaseMomentumMag);
	void LoadFPPVehicleModel();
	bool IsUsingFPPModel();
	bool IsUCAV();
	bool IsUAV();
	bool IsSpawnedInReady();
	bool IsNotInWater();
	bool IsMotorbike();
	bool IsInMidAir();
	bool IsInBuffSpeedState();
	bool IsHelicopter();
	bool IsEntirelyUnderWater();
	bool IsElectronic_Failure();
	bool IsArmedVehicle();
	bool IsAmphibiousVehicle();
	bool IsAlive();
	bool IsAirVehicle();
	void InitVehicle(int FuelPercent, bool bEngineOn);
	class USkeletalMeshComponent* InitSkeletalMesh(const struct FName& SubobjectName);
	bool HasVehicleStates(int ID, int srcVehicleStatesData);
	bool HasSkillID(int SkillID);
	bool HasBuffID(int BuffID);
	void HandleOnVehicleHealthStateChanged(ESTExtraVehicleHealthState InVehicleHealthState);
	void HandleOnVehicleAvatarDataCopied();
	void HandleOnSeatDetached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void HandleOnSeatChanged(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType LastSeatType, int LastSeatIdx, ESTExtraVehicleSeatType NewSeatType, int NewSeatIdx);
	void HandleOnSeatAttached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void HandleOnMeshHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void HandleLocalPlayerLeaveVehicle(class ASTExtraPlayerCharacter* Player);
	void HandleLocalPlayerEnterVehicle(class ASTExtraPlayerCharacter* Player);
	void HandleLocalPlayerDeadth(class ASTExtraBaseCharacter* Player);
	class UWeaponManagerBaseComponent* GetWeaponManagerBase();
	class AVehicleShootWeapon* GetVehicleWeapon(int SeatID, int WeaponListID);
	int GetVehicleSkinItemID();
	class UVehicleAvatarComponent* GetVehicleAvatar();
	class UVehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();
	int GetTeamId();
	class UObject* GetSoftRefObj(struct FSoftObjectPath* AssetRef);
	struct FVector GetRotationInputDir();
	class ULagCompensationComponentBase* GetLagCompensationComponent();
	class UBattleItemHandleBase* GetItemHandle();
	struct FVector GetGunOwnerHeadLocation();
	float GetForwardSpeed();
	class ASTExtraPlayerCharacter* GetFirstPassenger();
	bool GetEnableTickEnterSphereAsyncLoadRes();
	class ASTExtraPlayerCharacter* GetDriver();
	void GetCurrentOverlapActors(TArray<class ASTExtraSimpleCharacter*>* Result);
	void GetCullWaterCapsule(struct FVector* OutCapsulePointA, struct FVector* OutCapsulePointB, float* OutCullWaterCapsuleRadius, float* OutCullWaterCapsuleBlendWidth);
	int GetCampId();
	int GetAvatarId();
	void GetAllVehicleWeaponList(TArray<class AVehicleShootWeapon*>* OutList);
	void ExitFPPVehicle();
	void EnterFPPVehicle();
	void EnableWeakTick(bool Enabled);
	void EnableAvatarOutline(EOutlineType OutlineType);
	void DestroyAndRespawnSelf();
	void DeactiveEffect(const struct FName& EffectName);
	void CreateAntiStuckBox();
	void ClientPlayVehicleCameraShake();
	void ClearInputs();
	void ClearBuff();
	bool CheckHaveSpecialAttachActor();
	void CheckEnableAvatarOutline();
	void CheckAvatarModifyEnterSocket(class ASTExtraBaseCharacter* InCharacter);
	bool ChangeVehicleAvatar(class ASTExtraPlayerController* MainPlayerController);
	bool CanVehicleJump();
	bool CanBeSeekAndLocked(class USeekAndLockWeaponComponent* TargetComponent);
	void BroadCastEnterVehicleEvent(bool IsSucc, ESTExtraVehicleSeatType SeatType);
	void BroadcastClientVehicleExplosionEffect();
	void BPPostLoadFPPMesh();
	void BPPlayOverlapDamageCameraShake();
	void BPOnSetAttachedActor(class AActor* InAttachTarget);
	void AutoLoadEffect();
	bool ApplyAnimation();
	void AfterBeginPlay();
	bool AddBuffBySkill(int SkillID, int LayerCount, class AActor* Causer);
	bool AddBuffByID(int BuffID, class AActor* Causer, int LayerCount, int CauserSkillID);
	void ActiveEffectAsync(const struct FName& EffectName);
	void ActiveEffect(const struct FName& EffectName);
};


// Class ShadowTrackerExtra.STExtraFloatingVehicle
// 0x0010 (0x1050 - 0x1040)
class ASTExtraFloatingVehicle : public ASTExtraVehicleBase
{
public:
	class USTExtraFloatingVehicleMovementComponent*    FloatingVehicleMovement;                                  // 0x1040(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x1048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraFloatingVehicle");
		return pStaticClass;
	}


	void HandleOnMeshAwake(class UPrimitiveComponent* WakingComponent, const struct FName& BoneName);
	struct FVector GetRotationInputDir();
};


// Class ShadowTrackerExtra.STExtraAdvancedFloatingVehicle
// 0x0020 (0x1070 - 0x1050)
class ASTExtraAdvancedFloatingVehicle : public ASTExtraFloatingVehicle
{
public:
	class UClass*                                      LogicControllerType;                                      // 0x1050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bUseOldLogic;                                             // 0x1058(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x7];                                       // 0x1059(0x0007) MISSED OFFSET
	class UFloatLogic*                                 FloatLogicControl;                                        // 0x1060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x1068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraAdvancedFloatingVehicle");
		return pStaticClass;
	}


	void PlaySfxUnderWater_Out();
	void PlaySfxUnderWater_In();
};


// Class ShadowTrackerExtra.STExtraAirborne
// 0x0160 (0x0930 - 0x07D0)
class ASTExtraAirborne : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x07D0(0x0008) MISSED OFFSET
	struct FVector                                     CurrentForwardSpeedV2;                                    // 0x07D8(0x000C) (Edit, BlueprintVisible, Net, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     CurrentTurnSpeedV2;                                       // 0x07E4(0x000C) (Edit, BlueprintVisible, Net, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAirborneSpeed                              FallSpeed2;                                               // 0x07F0(0x0040) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAirborneSpeed                              OpenSpeed2;                                               // 0x0830(0x0040) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<EAirborne2>                            AirborneState2;                                           // 0x0870(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0871(0x0003) MISSED OFFSET
	float                                              CurrentAltitude2;                                         // 0x0874(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraSettings                             FreefallCameraSetting2;                                   // 0x0878(0x0014) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraSettings                             OpeningCameraSetting2;                                    // 0x088C(0x0014) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UAkComponent*                                AkComponent;                                              // 0x08A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                         SpringArmFromBP;                                          // 0x08A8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimelineComponent*                          LerpCameraTimeline;                                       // 0x08B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 CameraCurve;                                              // 0x08B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x10];                                      // 0x08C0(0x0010) MISSED OFFSET
	class UCameraSettingComponentFromBP*               CameraSettingComponentFromBP;                             // 0x08D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               FreeFallAkEvent;                                          // 0x08D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               OpeningAkEvent;                                           // 0x08E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnim*                                 AirborneCameraAnim;                                       // 0x08E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAirborneJump;                                           // 0x08F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class APawn*                                       GroundPawnFromBP;                                         // 0x0900(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HaveToOpenAltitude;                                       // 0x0908(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x090C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    AirborneStateChangeDelegate;                              // 0x0910(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0920(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraAirborne");
		return pStaticClass;
	}


	void SwitchCameraFromBP(struct FCameraSettings* CameraSetting);
	void StateChangeServerFromBP();
	void StateChangeClientFromBP();
	void ServerSetStateFromBP(TEnumAsByte<EAirborne2> AirborneStateBP);
	void ServerAndAirbornAfterLand();
	void RotateMulticastFromBP(const struct FRotator& Rotator);
	void OnStateChangeServerFromBP();
	void OnStateChangeMultiCastFromBP();
	void OnRep_AirbornStateChange();
	void OnCameraSettingLerp(float LerpAlpha);
	struct FVector NormalSpeedFromBP();
	void MoveRight(float Rate);
	void MoveForward(float Rate);
	bool IsAutonomousFromBP();
	struct FVector GetVerticalSpeed2();
	struct FVector GetAirborneVelocity2();
	void DoMoveRight(float Rate);
	void DoMoveForward(float Rate);
	void ChangeCurForwardSpeedVFromBP(const struct FVector& Speed);
};


// Class ShadowTrackerExtra.STExtraWeapon
// 0x0480 (0x0810 - 0x0390)
class ASTExtraWeapon : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0390(0x0010) MISSED OFFSET
	int                                                iRegionWeapon;                                            // 0x03A0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxWaitHandleAvatarMeshChangedTime;                       // 0x03A4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_DisableHandleAvatarMeshChanged;                        // 0x03A8(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_UseAsyncMeshLoad;                                      // 0x03A9(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_EnableNewWeaponInit;                                   // 0x03AA(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_EnableCheckReInitWeaponOwnerData;                      // 0x03AB(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	struct FMainWeaponTableStruct                      WeaponCfg;                                                // 0x03B0(0x0018) (BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03C8(0x0008) MISSED OFFSET
	struct FTransform                                  FPPWeaponOffset;                                          // 0x03D0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  FPPWeaponOffsetNonShooting;                               // 0x0400(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  FPPWeaponOffsetSprint;                                    // 0x0430(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  TDModeFPPWeaponOffset;                                    // 0x0460(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  TDModeFPPWeaponOffsetNonShooting;                         // 0x0490(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  TDModeFPPWeaponOffsetSprint;                              // 0x04C0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                CrossHairType;                                            // 0x04F0(0x0004) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              UnMatchStateSyncCheckInterval;                            // 0x04F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponAvatarComponent*                      WeaponAvatarComponent;                                    // 0x04F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       WeaponStaticMeshCompTag;                                  // 0x0500(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponOwnerProxy*                           OwnerProxy;                                               // 0x0508(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    WeaponEffectActionDelegate;                               // 0x0510(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    FireOneShotEffectDelegate;                                // 0x0520(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnShootWeaponChangeState;                                 // 0x0530(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponAttachToBackDelegate;                             // 0x0540(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponDrawHUDDelegate;                                  // 0x0550(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWeaponEntity*                               WeaponEntityComp;                                         // 0x0560(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EFreshWeaponStateType>                 CurFreshWeaponState;                                      // 0x0568(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0569(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDisconnectToClientOnServerDelegate;                     // 0x0570(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnReconnectToClientOnServerDelegate;                      // 0x0580(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRecoverOnClientDelegate;                                // 0x0590(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnGetOwnerActorDelegate;                                  // 0x05A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TEnumAsByte<EFreshWeaponStateType>                 SyncFreshWeaponStateForRep;                               // 0x05B0(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x7];                                       // 0x05B1(0x0007) MISSED OFFSET
	struct FName                                       WeaponAttachSocketName;                                   // 0x05B8(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeedReconnct;                                            // 0x05C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               GM_CloseMaxWeaponReconnetTimeLimit;                       // 0x05C1(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x2];                                       // 0x05C2(0x0002) MISSED OFFSET
	float                                              MaxReconnectTime;                                         // 0x05C4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StartReconnectTime;                                       // 0x05C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x4];                                       // 0x05CC(0x0004) MISSED OFFSET
	struct FWeaponReconnectReplicateData               WeaponReconnectReplicateData;                             // 0x05D0(0x0070) (BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0640(0x0008) MISSED OFFSET
	TArray<class USceneComponent*>                     UpdateOptimizationList;                                   // 0x0648(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                               bEnableCompUpdateOptimization;                            // 0x0658(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0659(0x0007) MISSED OFFSET
	struct FSpawnAndBackpackWeaponReplicatedData       OwnerClientCreateWeaponData;                              // 0x0660(0x0058) (Net, RepNotify, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x8];                                       // 0x06B8(0x0008) MISSED OFFSET
	class UStaticMeshComponent*                        WeaponStaticMeshComp;                                     // 0x06C0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TEnumAsByte<EWeaponState>                          CurWeaponState;                                           // 0x06C8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData10[0x7];                                       // 0x06C9(0x0007) MISSED OFFSET
	class AActor*                                      SimulatedOwnerActor;                                      // 0x06D0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                       SimulatedOwnerPawn;                                       // 0x06D8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData11[0x8];                                       // 0x06E0(0x0008) MISSED OFFSET
	TMap<class USceneComponent*, struct FSceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;                                 // 0x06E8(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData12[0x10];                                      // 0x0738(0x0010) MISSED OFFSET
	class UWeaponStateManager*                         _WeaponStateManager;                                      // 0x0748(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMeshSynData>                        synData;                                                  // 0x0750(0x0010) (Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPublic)
	bool                                               IsMeshInit;                                               // 0x0760(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0761(0x0003) MISSED OFFSET
	float                                              MaxWaitMeshInitTime;                                      // 0x0764(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WaitMeshInitTime;                                         // 0x0768(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UseReplaceBulletType;                                     // 0x076C(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeedUpdateWeaponAvatar;                                  // 0x076D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x2];                                       // 0x076E(0x0002) MISSED OFFSET
	TArray<class UWeaponLogicBaseComponent*>           TickComponentList;                                        // 0x0770(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0780(0x0008) MISSED OFFSET
	bool                                               IsNeedReInitWeaponOwnerData;                              // 0x0788(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0x7];                                       // 0x0789(0x0007) MISSED OFFSET
	class UGrenadeAvatarComponent*                     GrenadeAvatarComponent;                                   // 0x0790(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsInit;                                                   // 0x0798(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData17[0x7];                                       // 0x0799(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    ForceHideWeaponWidget;                                    // 0x07A0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bNeedHiddenWhenCameraModeChanged;                         // 0x07B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EExtraWeaponUIType>                    WeaponUIType;                                             // 0x07B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData18[0xE];                                       // 0x07B2(0x000E) MISSED OFFSET
	struct FTransform                                  DefaultRelativeTransform;                                 // 0x07C0(0x0030) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    RotForSimulate;                                           // 0x07F0(0x000C) (Net, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int                                                FuncFlag;                                                 // 0x07FC(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData19[0x10];                                      // 0x0800(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraWeapon");
		return pStaticClass;
	}


	void WeaponNotifyChangeStateDelegate__DelegateSignature(TEnumAsByte<EFreshWeaponStateType> State);
	void WeaponEffectActionDelegate__DelegateSignature(TEnumAsByte<EWeaponAction> Action);
	void UpdateWeaponAvatar(float DeltaTime);
	void SpecialResetForWeaponCrosshair();
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);
	void RPC_ClientChangeFreshWeaponState(TEnumAsByte<EFreshWeaponStateType> State);
	void PlayLocalShellDropFX();
	void OnWeaponDrawHUD__DelegateSignature(class UHUDWidgetBase* WeaponHudWidget, class UCanvas* Canvas);
	void OnWeaponAttachToBackDelegate__DelegateSignature(const struct FName& SocketName);
	void OnShootWeaponChangeStateDelegate__DelegateSignature(TEnumAsByte<EFreshWeaponStateType> LastState, TEnumAsByte<EFreshWeaponStateType> NewState);
	void OnRep_WeaponReconnectReplicateData();
	void OnRep_WeaponAttachSocketName();
	void OnRep_SimulatedOwnerPawn();
	void OnRep_OwnerClientCreateWeaponData();
	void OnRep_AvatarMeshChanged();
	void OnRep_AttachmentReplication();
	void OnReleaseTrigger();
	void OnRecoverOnClientDelegate__DelegateSignature(class ASTExtraWeapon* Weapon);
	void OnReconnectToClientOnServerDelegate__DelegateSignature(class ASTExtraWeapon* Weapon);
	void OnPushTrigger();
	void OnGetOwnerActorDelegate__DelegateSignature(class AActor* OwnerActor);
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(class ASTExtraWeapon* Weapon);
	void NewInitWeapon();
	bool JudgeHasEquipedComponentSlot(TEnumAsByte<EWeaponComponentType> Slot);
	bool IsLocalOrSpectorPlayer();
	void InitWeapon();
	bool HasComponentSlot(TEnumAsByte<EWeaponComponentType> Slot);
	void HandleReconnectNew(class AActor* WeaponOwner);
	class UStaticMeshComponent* GetWeaponStaticMeshComponent();
	TEnumAsByte<EFreshWeaponStateType> GetWeaponStateType();
	class USkeletalMeshComponent* GetWeaponSkeletalMeshComponent();
	EObserverType GetWeaponOwnerObserverType();
	struct FString GetWeaponName();
	class UMeshComponent* GetWeaponMeshComponent();
	class UWeaponEntity* GetWeaponEntityComponent();
	struct FName GetWeaponAttachSocket();
	class UWeaponSpecificHandler* GetSpecificHandler();
	struct FString GetOwnerPlayerName();
	class APlayerController* GetOwnerPlayerController();
	class APawn* GetOwnerPawn();
	struct FString GetOwnerName();
	class AController* GetOwnerController();
	class AActor* GetOwnerActor();
	struct FItemDefineID GetItemDefineID();
	class UGrenadeAvatarComponent* GetGrenadeAvatar();
	struct FWeaponComponentItemData GetComponentSlotTarget(TEnumAsByte<EWeaponComponentType> Slot);
	struct FLinearColor GetColorByTeamID(int TeamID);
	class UItemHandleBase* GetBackpackItemHandle();
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);
	void DelayHandleAvatarMeshChanged();
	void CheckNeedReInitWeaponOwnerData(class AActor* OwnerActor);
	void ChangeSequenceState(TEnumAsByte<EFreshWeaponStateType> StateType);
	void CallForceHideWeaponWidgetDel();
};


// Class ShadowTrackerExtra.STExtraShootWeapon
// 0x0510 (0x0D20 - 0x0810)
class ASTExtraShootWeapon : public ASTExtraWeapon
{
public:
	bool                                               CloseLowLevelDeviceHitEffect;                             // 0x0810(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0811(0x0003) MISSED OFFSET
	float                                              voiceCheckCD;                                             // 0x0814(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              voiceCheckShowCD;                                         // 0x0818(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               isDefaultSlienceWeapon;                                   // 0x081C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1B];                                      // 0x081D(0x001B) MISSED OFFSET
	struct FWeaponVerifyConfig                         ShootVerifyConfig;                                        // 0x0838(0x003C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bIsPistol;                                                // 0x0874(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsAIOwner;                                               // 0x0875(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0876(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnShootWeaponAutoReloadDel;                               // 0x0878(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCurBulletChange;                                        // 0x0888(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCurBarrelBulletChangeDelegate;                          // 0x0898(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStartFireDelegate;                                      // 0x08A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStopFireDelegate;                                       // 0x08B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponShootDelegate;                                    // 0x08C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponShootHitDelegate;                                 // 0x08D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponReloadStartDelegate;                              // 0x08E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponReloadEndDelegage;                                // 0x08F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponEquipDelegate;                                    // 0x0908(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponUnEquipDelegate;                                  // 0x0918(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponEquipAnimProcessDelegate;                         // 0x0928(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponUnEquipAnimProcessDelegate;                       // 0x0938(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLeftLastBulletWhenReloadOneByOneDelegate;               // 0x0948(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBulletNumChangeDelegate;                                // 0x0958(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0968(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWeaponShootPlayerNotifyDelegate;                        // 0x0978(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponSecurityLogShootActorDelegate;                    // 0x0988(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCrossHairComponent*                         CachedCrossHairComponent;                                 // 0x0998(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBulletHitInfoUploadComponent*               CachedBulletHitInfoUploadComponent;                       // 0x09A0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnScopeIn;                                                // 0x09A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnScopeOut;                                               // 0x09B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnScopeInContinue;                                        // 0x09C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USTExtraShootWeaponComponent*                ShootWeaponComponent;                                     // 0x09D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurBulletNumInClip;                                       // 0x09E0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurMaxBulletNumInOneClip;                                 // 0x09E4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurBulletNumInBarrel;                                     // 0x09E8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EShootWeaponShootMode>                 ShootMode;                                                // 0x09EC(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ESTEWeaponShootType>                   CurShootType;                                             // 0x09ED(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x2];                                       // 0x09EE(0x0002) MISSED OFFSET
	int                                                CurShootTotalType;                                        // 0x09F0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VoiceCheckDis;                                            // 0x09F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SilenceVoiceCheckDis;                                     // 0x09F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              nowVoiceCheckDis;                                         // 0x09FC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ShootTargetLoc;                                           // 0x0A00(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0A0C(0x0004) MISSED OFFSET
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                             // 0x0A10(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0A11(0x0003) MISSED OFFSET
	struct FVector                                     LastImpactEffectLocation;                                 // 0x0A14(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LastImpactEffectTime;                                     // 0x0A20(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0A24(0x0004) MISSED OFFSET
	int                                                CurBurstShootIndex;                                       // 0x0A28(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0A2C(0x0004) MISSED OFFSET
	struct FTransform                                  BoltActionTransform;                                      // 0x0A30(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bHasFinishConfirmedFromServer;                            // 0x0A60(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0A61(0x0003) MISSED OFFSET
	int                                                ClientShootTimes;                                         // 0x0A64(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               BulletFlySound;                                           // 0x0A68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               LoadBulletSound;                                          // 0x0A70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               ChangeMagazineSound;                                      // 0x0A78(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               MagazineINSound;                                          // 0x0A80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               MagazineOUTSound;                                         // 0x0A88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               PullBoltSound;                                            // 0x0A90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     BulletDecalScale;                                         // 0x0A98(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CurBulletNumInClipOnSimulatedClients;                     // 0x0AA4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0AA8(0x0008) MISSED OFFSET
	class UNormalProjectileComponent*                  NormalProjectileComponent;                                // 0x0AB0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AIShootLoudness;                                          // 0x0AB8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AIShootStartAttenuationDis;                               // 0x0ABC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AIShootMaxDis;                                            // 0x0AC0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AISilenceShootLoudness;                                   // 0x0AC4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AISilenceShootStartAttenuationDis;                        // 0x0AC8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AISilenceShootMaxDis;                                     // 0x0ACC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EShootWeaponState>                     CurShootWeaponState;                                      // 0x0AD0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData11[0xF];                                       // 0x0AD1(0x000F) MISSED OFFSET
	class UShootWeaponEntity*                          ShootWeaponEntityComp;                                    // 0x0AE0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UShootWeaponEffectComponent*                 ShootWeaponEffectComp;                                    // 0x0AE8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                md_MaxBulletArraySize;                                    // 0x0AF0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               IsEquipSilencer;                                          // 0x0AF4(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsEquipFiringSuppressor;                                  // 0x0AF5(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsEquipCompensator;                                       // 0x0AF6(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x1];                                       // 0x0AF7(0x0001) MISSED OFFSET
	struct FVector                                     OffsetFPPLocation;                                        // 0x0AF8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    OffsetFPPRotation;                                        // 0x0B04(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     OffsetFPPCrouchLocation;                                  // 0x0B10(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    OffsetFPPCrouchRotation;                                  // 0x0B1C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     OffsetFPPProneLocation;                                   // 0x0B28(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    OffsetFPPProneRotation;                                   // 0x0B34(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    OffsetFPPScopeRotation;                                   // 0x0B40(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     OffsetAngledFPPLocation;                                  // 0x0B4C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    OffsetAngledFPPRotation;                                  // 0x0B58(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     OffsetAngledFPPCrouchLocation;                            // 0x0B64(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    OffsetAngledFPPCrouchRotation;                            // 0x0B70(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     OffsetAngledFPPProneLocation;                             // 0x0B7C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    OffsetAngledFPPProneRotation;                             // 0x0B88(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    OffsetAngledFPPScopeRotation;                             // 0x0B94(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               DefaultScopeVisiable;                                     // 0x0BA0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0BA1(0x0007) MISSED OFFSET
	TArray<EWeaponAttachmentSocketType>                AvailableWeaponAttachmentSocketTypeList;                  // 0x0BA8(0x0010) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UAttrModifyComponent*                        AttrModifierCompoment;                                    // 0x0BB8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FWeaponAttrModifyConfig>             WeaponAttrModifyConfigList;                               // 0x0BC0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<int>                                        AttachedAttachmentID;                                     // 0x0BD0(0x0010) (Net, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x10];                                      // 0x0BE0(0x0010) MISSED OFFSET
	TArray<struct FBulletHitInfoUploadData>            HitDataArray;                                             // 0x0BF0(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSimulateBulletHitInfoData>          SimulateHitDataArray;                                     // 0x0C00(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                               UseNewSimulateHitInfoData;                                // 0x0C10(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x7];                                       // 0x0C11(0x0007) MISSED OFFSET
	bool                                               bNeedForceSyncSimulatedClientsBulletsNumAfterReload;      // 0x0C18(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsInitAttr;                                               // 0x0C19(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsRegisterCanModifyAttr;                                  // 0x0C1A(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0xA5];                                      // 0x0C1B(0x00A5) MISSED OFFSET
	bool                                               bIsResettedMaxBulletNum;                                  // 0x0CC0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData17[0x57];                                      // 0x0CC1(0x0057) MISSED OFFSET
	bool                                               bEnableReloadADS;                                         // 0x0D18(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData18[0x7];                                       // 0x0D19(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraShootWeapon");
		return pStaticClass;
	}


	void UpdateComponentTick();
	bool StopFireFilter();
	void StopFire(TEnumAsByte<EFreshWeaponStateType> ToState);
	int StartReload();
	bool StartFireFilter();
	void StartFire();
	void StartDoPreBarrel(float HandledTime);
	void StartDoBarrel();
	void ShowDefaultScope(bool bShow);
	void ShowDefaultAttachmentComponentByType(EWeaponAttachmentSocketType Type, bool bVisible);
	void ShootIDIsNotValid();
	void SetWeaponAttrModifierEnable(const struct FString& AttrModifierID, bool Enable);
	void SetCurShootType(TEnumAsByte<ESTEWeaponShootType> shootType);
	void SetCurrentBulletNumInClipOnServer(int count);
	void SetCurrentBulletNumInClipOnClient(int count);
	void SetCurReloadMethod(TEnumAsByte<EWeaponReloadMethod> method);
	void SetBaseImpactDamageEntity(float Damage);
	void SetAvailableWeaponAttachmentSocketTypeList(TArray<EWeaponAttachmentSocketType>* List);
	bool ScopeOut();
	void ScopeInContinue();
	bool ScopeIn();
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);
	void RPC_ServerSetMaxBulletNum();
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);
	void RPC_ClientSetCurShootType(TEnumAsByte<ESTEWeaponShootType> shootType);
	void RPC_ClientSetCurReloadMethod(TEnumAsByte<EWeaponReloadMethod> method);
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);
	void RPC_Client_SetBulletNumInClip(int count);
	void RotateCrossHair(const struct FRotator& rot);
	void ResetInitialBulletNumInClip(bool bSetZero);
	void OnWeaponUnEquipDelegate__DelegateSignature();
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();
	void OnWeaponShootHitDelegate__DelegateSignature(const struct FShootWeaponDamageEvent& DamageDetail, const struct FBulletHitInfoUploadData& HitData, const struct FLocalShootHitData& LocalHitData);
	void OnWeaponShootDelegate__DelegateSignature();
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(class AActor* InHitActor, const struct FSecurityLogHitTargetInfo& TargetInfo);
	void OnWeaponReloadStartDelegate__DelegateSignature();
	void OnWeaponReloadEndDelegage__DelegateSignature();
	void OnWeaponEquipDelegate__DelegateSignature();
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();
	void OnStopFireDelegate__DelegateSignature();
	void OnStartFireDelegate__DelegateSignature();
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(class ASTExtraShootWeapon* ShootWeapon);
	void OnScopeInContinue__DelegateSignature();
	void OnRep_SimulateHitDataArray();
	void OnRep_HitDataArray();
	void OnRep_CurMaxBulletNumChange();
	void OnRep_CurBulletNumInClipOnSimulatedClients();
	void OnMaxBulletChange__DelegateSignature();
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);
	void OnCurBulletChange__DelegateSignature();
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();
	void OnBulletNumChangeDelegate__DelegateSignature();
	void NotifyServerNoneShootAction();
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);
	void NotifyClientNoneShootAction();
	void LocalSetBulletNumInClip(int count);
	bool IsWeaponAttachmentFullEquiped();
	bool IsVehicleWeapon();
	bool IsSupportAutoAim();
	bool IsInPreFire();
	bool IsEnableReloadADS();
	bool IsDriverVehicleWeapon();
	void HandleWeaponScopeEquiped(EWeaponAttachmentSocketType Type);
	TEnumAsByte<EWeaponReloadType> GetWeaponReloadType();
	int GetWeaponIDFromEntity();
	int GetWeaponID();
	float GetWeaponBodyLength();
	class UParticleSystem* GetVisualBulletTrackFX();
	bool GetVisualBulletTrackEnabled();
	struct FWeaponVisualBulletItemConfig GetVisualBulletItemConfig();
	struct FName GetVerifyScopeSocketNameFromEntity();
	bool GetUseSpecificBulletNumOnReloadFromEntity();
	float GetTraceDistanceFromEntity();
	struct FName GetSilencerSocketNameFromEntity();
	class UShootWeaponEntity* GetShootWeaponEntityComponent();
	class UShootWeaponEffectComponent* GetShootWeaponEffectComponent();
	TEnumAsByte<ESTEWeaponShootType> GetShootTypeFromEntity();
	float GetShootIntervalFromEntity();
	struct FName GetShellDropSocketNameFromEntity();
	int GetScopeID(bool bIsAngledOpticalSight);
	class UMeshComponent* GetScopeAimCameraTransform(const struct FName& SocketName, int SocketIndex);
	bool GetReloadWithNoCostFromEntity();
	float GetReloadTimeMagOutFromEntity();
	float GetReloadTimeFromEntity();
	struct FName GetReloadTIDName(TEnumAsByte<EWeaponReloadMethod> method);
	float GetReloadTacticalTimeFromEntity();
	int GetReloadSpecificBulletNumFromEntity();
	float GetReloadDurationStartFromEntity();
	float GetReloadDurationLoopFromEntity();
	struct FTransform GetRelativeMuzzleTransform();
	float GetReferenceDistance();
	float GetRangeModifier();
	TArray<struct FSRangeAttenuateConfig> GetRangeAttenuateFromEntity();
	float GetPreFireTimeFromEntity();
	float GetPostReloadTimeFromEntity();
	float GetPostFireTimeFromEntity();
	struct FTransform GetMuzzleTransform();
	struct FName GetMuzzleSocketNameFromEntity();
	float GetMaxVelocityOffsetAddRateFromEntity();
	float GetMaxValidHitTimeFromEntity();
	float GetMaxImpactEffectSkipTimeFromEntity();
	int GetMaxBulletNumInOneClipFromEntity();
	int GetMaxBulletNumInBarrelFromEntity();
	bool GetIsNeedOffsetVelocityFromEntity();
	bool GetIsEnableScopeInFromEntity();
	float GetImpactEffectSkipDistanceFromEntity();
	float GetIgnoreRangeAttenuatDis();
	struct FWeaponHitPartCoff GetHitPartCoff(class AActor* Victim);
	float GetGameDeviationFactor();
	struct FName GetFiringSuppressorSocketNameFromEntity();
	float GetFireSensitiveYawRate();
	float GetFireSensitivePitchRate();
	TMap<int, bool> GetEquipAttachSlotMap();
	class UMeshComponent* GetDefaultAttachmentComponentByType(EWeaponAttachmentSocketType Type);
	TEnumAsByte<ESightType> GetCurSightType();
	float GetCurReloadTime();
	TEnumAsByte<EWeaponReloadMethod> GetCurReloadMethod();
	float GetCrossHairInitSize();
	float GetCrossHairBurstSpeed();
	float GetCrossHairBurstIncreaseSpeed();
	TEnumAsByte<ENetRole> GetControllerRole();
	bool GetClipHasInfiniteBulletsFromEntity();
	class UMeshComponent* GetChildMeshComp(const struct FName& compTag);
	bool GetCanRecordHitDetailFromEntity();
	float GetBurstShootIntervalFromEntity();
	float GetBurstShootCDFromEntity();
	int GetBurstShootBulletsNumFromEntity();
	struct FItemDefineID GetBulletTypeFromEntity();
	float GetBulletRangeEntity();
	float GetBulletNumSingleShotFromEntity();
	float GetBulletFireSpeedFromEntity();
	float GetBaseImpactDamageEntity();
	TArray<EWeaponAttachmentSocketType> GetAvailableWeaponAttachmentSocketTypeList();
	bool GetAutoReloadFromEntity();
	bool GetADSManualStop();
	float GetAccessoriesVRecoilFactor();
	float GetAccessoriesRecoveryFactor();
	float GetAccessoriesHRecoilFactor();
	float GetAccessoriesDeviationFactor();
	void ForceSyncSimulatedClientsBulletsNumAfterReload(int InCurBulletNum);
	void ForceSyncAllClientsBulletsNumOnServer();
	void FixBulletNumWithValideData();
	void EnableInfiniteBullets(bool bEnable);
	void ClearWeaponAttrModifier();
	void CheckReloadAttr();
	bool CheckNeedClientSetMaxBulletNum();
	void BP_OnActiveLocalShellDropFX();
	void AddOwnerOffsetVelocity(struct FVector* OrginalVelocity);
};


// Class ShadowTrackerExtra.STExtraAIShootWeapon
// 0x0000 (0x0D20 - 0x0D20)
class ASTExtraAIShootWeapon : public ASTExtraShootWeapon
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraAIShootWeapon");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraWheeledVehicle
// 0x0240 (0x1280 - 0x1040)
class ASTExtraWheeledVehicle : public ASTExtraVehicleBase
{
public:
	class UParticleSystemComponent*                    DustPSC[0x4];                                             // 0x1040(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UParticleSystemComponent*>            PSCs;                                                     // 0x1060(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x28];                                      // 0x1070(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.STExtraWheeledVehicle.TrailMarkClass
	TWeakObjectPtr<class ATrailMarkActor>              WeakTrailMarkActor;                                       // 0x1098(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USTExtraVehicleMovementComponent4W*          VehicleMovement;                                          // 0x10A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x10A8(0x0004) MISSED OFFSET
	float                                              TorqueMultiplierforBoosting;                              // 0x10AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              WheelEffectUpdateInterval;                                // 0x10B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               PreLoadStreamingLevel;                                    // 0x10B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3];                                       // 0x10B5(0x0003) MISSED OFFSET
	int                                                ValidTransformMinWheelNum;                                // 0x10B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x4];                                       // 0x10BC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnVehicleWheelLanded;                                     // 0x10C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	float                                              MinLandingWheelSuspensionOffset;                          // 0x10D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x4];                                       // 0x10D4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnVehicleGearChanged;                                     // 0x10D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData05[0x10];                                      // 0x10E8(0x0010) MISSED OFFSET
	class UAkAudioEvent*                               Sfx_MoveConcrete;                                         // 0x10F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_MoveMud;                                              // 0x1100(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_MoveWater;                                            // 0x1108(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_Slip;                                                 // 0x1110(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_TireExplosion;                                        // 0x1118(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_GearUp;                                               // 0x1120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                               Sfx_GearDown;                                             // 0x1128(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                                 Sfx_RPMRelativeCurve;                                     // 0x1130(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWheelSfxConfig*                             WheelSfxConfig;                                           // 0x1138(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSTExtraVehicleSfxLoop                      WheelSlipSfxLoop;                                         // 0x1140(0x0070) (ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FSTExtraVehicleWheelSfxOnSurface            WheelSfxOnSurface;                                        // 0x11B0(0x0070) (ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData06[0x18];                                      // 0x1220(0x0018) MISSED OFFSET
	float                                              RTPC_Throttle_InterpSpeed_Up;                             // 0x1238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              RTPC_Throttle_InterpSpeed_Down;                           // 0x123C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData07[0x24];                                      // 0x1240(0x0024) MISSED OFFSET
	float                                              WheelSfxUpdateInterval;                                   // 0x1264(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData08[0x4];                                       // 0x1268(0x0004) MISSED OFFSET
	struct FSTReplicatedVehicleState                   STReplicatedState;                                        // 0x126C(0x0005) (Net, Transient, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               ShouldDestroyPhysxWhileFreeze;                            // 0x1271(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0xE];                                       // 0x1272(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraWheeledVehicle");
		return pStaticClass;
	}


	void STServerUpdateState(int8_t InSteeringInput, int8_t InThrottleInput, int8_t InBrakeInput, int8_t InHandbrakeInput, int8_t CurrentGear);
	void PostLoadFPPMesh();
	void OnWheelsLanded();
	void OnRep_ReplicatedState();
	void OnGearChanged(bool bIsUp);
	float GetVehicleSpeed();
	float GetVehicleSlip();
	struct FVector GetRotationInputDir();
	void BroadcastClientVehicleWheelDestroyEffect();
};


// Class ShadowTrackerExtra.STExtraAmphibiousVehicle
// 0x0090 (0x1310 - 0x1280)
class ASTExtraAmphibiousVehicle : public ASTExtraWheeledVehicle
{
public:
	class UAkAudioEvent*                               Sfx_WaterLoop;                                            // 0x1280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x70];                                      // 0x1288(0x0070) MISSED OFFSET
	float                                              InOutSoundCD;                                             // 0x12F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x12FC(0x0004) MISSED OFFSET
	bool                                               RepUseSyncatClient;                                       // 0x1300(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x1301(0x0003) MISSED OFFSET
	int                                                DisableBuoyancyDistance;                                  // 0x1304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DisableBuoyancyTickInLowPlatform;                         // 0x1308(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      DisableBuoyancyPlatformLevel;                             // 0x1309(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x6];                                       // 0x130A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraAmphibiousVehicle");
		return pStaticClass;
	}


	void SendServerIntoWater(const struct FVector& InWaterLocation);
	void OnRep_UseSyncatClient();
	void HandleOnMeshAwake(class UPrimitiveComponent* WakingComponent, const struct FName& BoneName);
	struct FVector GetRotationInputDir();
};


// Class ShadowTrackerExtra.STPawnAnimInstanceBase
// 0x0000 (0x03C0 - 0x03C0)
class USTPawnAnimInstanceBase : public UAnimInstance
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STPawnAnimInstanceBase");
		return pStaticClass;
	}


	void HandlePlayerAnimMontagePlayDelegate(class UAnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, const struct FName& StartSection, float StartPos);
	void HandleOwnerAnimEvent(const struct FName& EventMsg);
	void HandleAnimPlaySlotAnimDelegate(class UAnimSequenceBase* AnimSequence, bool bWantsPlay, const struct FName& SlotName, float PlayRate, float blendTime);
};


// Class ShadowTrackerExtra.STExtraAnimInstanceBase
// 0x0290 (0x0650 - 0x03C0)
class USTExtraAnimInstanceBase : public USTPawnAnimInstanceBase
{
public:
	bool                                               C_Move;                                                   // 0x03C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_MovementChanged;                                        // 0x03C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsTurning;                                              // 0x03C2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Scoping;                                                // 0x03C3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsJumping;                                              // 0x03C4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_SightSlow;                                              // 0x03C5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ShouldPlayTurnAnim;                                     // 0x03C6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ShouldSlowMoveAnimX;                                    // 0x03C7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ShouldSlowMoveAnimY;                                    // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IdleAddtiveValid;                                       // 0x03C9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsHoldGrenade;                                          // 0x03CA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsGrenadeTypeHigh;                                      // 0x03CB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsCastingGenerate;                                      // 0x03CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Hurting;                                                // 0x03CD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsPeeking;                                              // 0x03CE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsPistolPeekAim;                                        // 0x03CF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_WalkToUnarmedFalling;                                   // 0x03D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_WalkToRifleJumpStationStart;                            // 0x03D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_IsFallingReload;                                      // 0x03D2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_Move_PistolOrRifleGun;                                  // 0x03D3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_PeekFrameRate_NEQ_1;                                  // 0x03D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;                   // 0x03D5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;              // 0x03D6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsNearDeathStatus;                                      // 0x03D7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_WeaponState_EQ_SwitchWeapon;                            // 0x03D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_WeaponState_NEQ_SwitchWeapon;                           // 0x03D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_Crouch_SwitchWeapon_Move;                               // 0x03DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ForegripAnimValid;                                      // 0x03DB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_EnableForegripAnim;                                     // 0x03DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_P_AimOffsetActive;                                      // 0x03DD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_PoseType_NEQ_Prone;                                   // 0x03DE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_LODLevel_Bigger_1;                                    // 0x03DF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_LODLevel_Bigger_2;                                    // 0x03E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ShouldAdditiveForegrip;                                 // 0x03E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_NoAimOffset;                                            // 0x03E2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ShouldIK;                                               // 0x03E3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsEnteringNearDeathAnim;                                // 0x03E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_UseHairAnimDynamics;                                    // 0x03E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bWalkToJumpStart;                                         // 0x03E6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bJumpStartToWalk;                                         // 0x03E7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFallingToLand;                                           // 0x03E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Reload_Or_PickUp;                                       // 0x03E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_TurningBack;                                            // 0x03EA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_SightSlowMoveForward;                                   // 0x03EB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_SightSlowMoveAround;                                    // 0x03EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_AWTNoneWeaponType;                                      // 0x03ED(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ScopingAndAutonomousProxy;                              // 0x03EE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Walk2RiflejumpStationStart;                             // 0x03EF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      C_LODLevel;                                               // 0x03F0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	float                                              f_C_MoveVelocityLengthSquard;                             // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_MoveVelocityLengthSquard_Bigger_1;                    // 0x03F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F9(0x0003) MISSED OFFSET
	struct FVector                                     C_MoveVelocityInWorldSpaceReverse;                        // 0x03FC(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ECharacterPoseType>                    C_PoseType;                                               // 0x0408(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EMovementMode>                         C_LastMovementMode;                                       // 0x0409(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EWeaponType>                           C_WeaponType;                                             // 0x040A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EWeaponHoldType>                       C_WeaponHoldType;                                         // 0x040B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EFreshWeaponStateType>                 C_WeaponState;                                            // 0x040C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_WeaponState_EQ_Reload;                                // 0x040D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x040E(0x0002) MISSED OFFSET
	float                                              f_C_WeaponState_EQ_Reload;                                // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_WeaponState_NEQ_Reload;                               // 0x0414(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsReloadAnimAdditive;                                   // 0x0415(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsOnVehicle;                                            // 0x0416(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0417(0x0001) MISSED OFFSET
	float                                              C_IsReloadAnimAdditive_Alpha;                             // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_CharacterYawRotateRate;                                 // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_CharacterYawRotateRate_Reverse;                         // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_MaxFallingSpeed;                                        // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_FireAlpha;                                              // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              b_WalkAdditiveAlpha;                                      // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              f_FallingVelocityZFactor;                                 // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              f_C_MoveVelocity_X_FallingZFactor;                        // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PeekFrameRate;                                            // 0x0438(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PeekSpeed;                                                // 0x043C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              f_C_ViewRotation_IN_C_Scoping;                            // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_ForegripAnimParam;                                      // 0x0444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_HandleFolderFactor;                                     // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     C_MoveVelocity;                                           // 0x044C(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     C_MoveDir;                                                // 0x0458(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     C_HurtDir;                                                // 0x0464(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     C_FirstAnimSpine_StandAndCrouch;                          // 0x0470(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     C_FirstAnimSpine_Prone;                                   // 0x047C(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     C_FPPStandOffsetLocation;                                 // 0x0488(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ScopeAimSpine03TranslationModify;                         // 0x0494(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    ScopeAimSpine03RotationModifiy;                           // 0x04A0(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    r_C_FPPStandOffsetRotation_half;                          // 0x04AC(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    r_C_FPPCrouchOffsetRotation_half;                         // 0x04B8(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    r_C_FPPProneOffsetRotation_half;                          // 0x04C4(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    C_OwnerRotation;                                          // 0x04D0(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    C_ControlRotation;                                        // 0x04DC(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    C_ViewRotation;                                           // 0x04E8(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    C_FPPStandOffsetRotation;                                 // 0x04F4(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    C_FPPCrouchOffsetRotation;                                // 0x0500(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    C_FPPProneOffsetRotation;                                 // 0x050C(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     C_MoveVelocityInWorldSpace;                               // 0x0518(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     C_FPPCrouchOffsetLocation;                                // 0x0524(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     C_FPPProneOffsetLocation;                                 // 0x0530(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    C_UpShpvelingRotationAddZOnly;                            // 0x053C(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    C_ScopeAimOffsetStand;                                    // 0x0548(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0554(0x0004) MISSED OFFSET
	class UCurveFloat*                                 C_FallingIKCurve;                                         // 0x0558(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    OwnerRotation;                                            // 0x0560(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               Shoveling;                                                // 0x056C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x056D(0x0003) MISSED OFFSET
	struct FRotator                                    ShovelingRotation;                                        // 0x0570(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              ShovelingRotationoffset;                                  // 0x057C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    UpShovelingRotationAdd;                                   // 0x0580(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    FloorRotation;                                            // 0x058C(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x0598(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AutonomousProxy;                                          // 0x0599(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShovelingToCrouch;                                        // 0x059A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShovelMelee;                                              // 0x059B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShovelGenade;                                             // 0x059C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x059D(0x0003) MISSED OFFSET
	class UAimOffsetBlendSpace*                        C_AimBlendSpace;                                          // 0x05A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 C_MovementBSCache;                                        // 0x05A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 C_MovementBSCache_Dest;                                   // 0x05B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_IdleAddtive;                                            // 0x05B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                               C_FallingBS;                                              // 0x05C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_JumpStart;                                              // 0x05C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_LandLight;                                              // 0x05D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_LandHeavy;                                              // 0x05D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_TurnAnim;                                               // 0x05E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 C_HitBlendSpace;                                          // 0x05E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                               C_PeekAnim;                                               // 0x05F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                               C_ForegripAnim;                                           // 0x05F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                        C_PeekAnimLeftRight;                                      // 0x0600(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_MontageRescue;                                          // 0x0608(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_MontageDead;                                            // 0x0610(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_MontageDead_Stand;                                      // 0x0618(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_MontageDead_Crouch;                                     // 0x0620(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_MontageDead_Prone;                                      // 0x0628(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimBPType                                        AnimInstanceType;                                         // 0x0630(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x1F];                                      // 0x0631(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraAnimInstanceBase");
		return pStaticClass;
	}


	void RefreshPeekState();
	void PlaySwitchWeaponAnimation(bool bWantsEquip);
	void PlayPostReloadWeaponAnimation();
	void PlayPlayerDeadAnimation();
	void PlayAnimationByEventType(TEnumAsByte<ECharAnimEventType> Type);
	void HandlePlayerWeaponStateChanged(TEnumAsByte<EFreshWeaponStateType> NewState);
	void HandlePlayerPoseChange(TEnumAsByte<ESTEPoseState> LastPose, TEnumAsByte<ESTEPoseState> NewPose);
	void HandlePlayerPickUp();
	void HandlePlayerEnterRescueState(bool bBeginRescueing);
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);
	void HandlePlayerAnimMontagePlayDelegate(class UAnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, const struct FName& StartSection, float StartPos);
	void HandleOwnerAnimEvent(const struct FName& EventMsg);
	void HandleAnimPlaySlotAnimDelegate(class UAnimSequenceBase* AnimSequence, bool bWantsPlay, const struct FName& SlotName, float PlayRate, float blendTime);
	TEnumAsByte<ENetRole> GetRole();
	void EnableAnimFlag(EAnimPlayFlag PlayFlag);
	void DisableAnimFlag(EAnimPlayFlag PlayFlag);
};


// Class ShadowTrackerExtra.STExtraAnimInstance
// 0x0650 (0x0CA0 - 0x0650)
class USTExtraAnimInstance : public USTExtraAnimInstanceBase
{
public:
	struct FSTExtraAnimInstanceProxy                   Proxy;                                                    // 0x0650(0x04E0) (BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0B30(0x0004) MISSED OFFSET
	struct FRotator                                    OwnerAimRotation;                                         // 0x0B34(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    C_SightAngledRotOffset;                                   // 0x0B40(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               C_bIsAngledOpticalSight;                                  // 0x0B4C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_MovingOnGround;                                         // 0x0B4D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_MovingOnGroundAndMovbale;                               // 0x0B4E(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsSwimUp;                                               // 0x0B4F(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ReloadProne;                                            // 0x0B50(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsObstructed;                                           // 0x0B51(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsGrenadeModeHigh;                                      // 0x0B52(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsWeaponBolting;                                        // 0x0B53(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    SwimRotate;                                               // 0x0B54(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               C_ShouldPauseAnim;                                        // 0x0B60(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsHealing;                                              // 0x0B61(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0B62(0x0002) MISSED OFFSET
	float                                              C_SwimSpeed;                                              // 0x0B64(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_ProneHandleAlpha;                                       // 0x0B68(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsLeanOutVehicle;                                       // 0x0B6C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0B6D(0x0003) MISSED OFFSET
	float                                              LeftHandShouldNotIKAlpha;                                 // 0x0B70(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_SkipOpenParachute;                                      // 0x0B74(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EVHSeatSpecialType>                    C_SeatSpecialType;                                        // 0x0B75(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0B76(0x0002) MISSED OFFSET
	int                                                WeaponReloadSlotIndex;                                    // 0x0B78(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsDoingPickUp;                                          // 0x0B7C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsDoingReaload;                                         // 0x0B7D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0B7E(0x0002) MISSED OFFSET
	float                                              NeckTurnUILeftAngle;                                      // 0x0B80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckTurnUIRightAngle;                                     // 0x0B84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckTurnUIUPAngle;                                        // 0x0B88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckTurnUIDownAngle;                                      // 0x0B8C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckNotTurnAngle;                                         // 0x0B90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapAngleDefault_Horizon;                              // 0x0B94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapAngleDefault_Portrait;                             // 0x0B98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapAngleLeft;                                         // 0x0B9C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapAngleRight;                                        // 0x0BA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapAngleUp;                                           // 0x0BA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapAngleDown;                                         // 0x0BA8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapCrouchAngleDefault_Horizon;                        // 0x0BAC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapCrouchAngleDefault_Portrait;                       // 0x0BB0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapCrouchAngleLeft;                                   // 0x0BB4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapCrouchAngleRight;                                  // 0x0BB8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapCrouchAngleUp;                                     // 0x0BBC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckMapCrouchAngleDown;                                   // 0x0BC0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NeckTurnSpeed;                                            // 0x0BC4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EParachuteState>                       C_ParachuteState;                                         // 0x0BC8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0BC9(0x0003) MISSED OFFSET
	struct FRotator                                    C_HeadRotOffset;                                          // 0x0BCC(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               C_UseFlareGun;                                            // 0x0BD8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ShouldAdditiveFlare;                                    // 0x0BD9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ShouldAdditiveForegripObstructed;                       // 0x0BDA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ShouldPlayObstructedAnim;                               // 0x0BDB(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsFPPMode;                                              // 0x0BDC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0BDD(0x0003) MISSED OFFSET
	float                                              C_HoldingShieldAlpha;                                     // 0x0BE0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_HoldingShieldAdditive;                                  // 0x0BE4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 C_ObstructedAnim;                                         // 0x0BE8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_ShieldAddtive;                                          // 0x0BF0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_RevivalMontage;                                         // 0x0BF8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsHelicoptorDirver;                                      // 0x0C00(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0C01(0x0003) MISSED OFFSET
	struct FVector                                     C_MoveDirExt;                                             // 0x0C04(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                C_DebugAnimBPBranch;                                      // 0x0C10(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    r_C_OwnerAimRotation_SUB_C_OwnerRotation;                 // 0x0C14(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;             // 0x0C20(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               b_C_IsOnVehicle_AND_C_IsCastingGenerate;                  // 0x0C2C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_PoseType_EQ_Prone;                                    // 0x0C2D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_Move_OR_C_IsOnVehicle;                                // 0x0C2E(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_OnVehicle_LeanOut_NarrowSeat_Reload;                    // 0x0C2F(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_OnVehicle_LeanOut_SwitchWeapon;                         // 0x0C30(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_ParachuteState_EQ_FreeFall;                           // 0x0C31(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_ParachuteState_NEQ_FreeFall;                          // 0x0C32(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_ParachuteState_EQ_Landing;                            // 0x0C33(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_UnarmedFallingToRifleFallLandingHard;                   // 0x0C34(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_UnarmedFallingToRifleCombatFallLanding;                 // 0x0C35(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_LastMovementMode_EQ_Falling;                          // 0x0C36(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_LastMovementMode_NEQ_Falling;                         // 0x0C37(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              f_C_MoveVelocity_Div_SwimSpeed_X;                         // 0x0C38(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              f_C_MoveVelocity_Div_SwimSpeed_Y;                         // 0x0C3C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_NotUseGeneralHeadAim;                                 // 0x0C40(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0C41(0x0007) MISSED OFFSET
	TArray<EPawnState>                                 DisallowedEyeRotationWithHeadList;                        // 0x0C48(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              C_LeanOut_AimAngle;                                       // 0x0C58(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsReloadingWhilePoseChanged;                            // 0x0C5C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0C5D(0x0007) MISSED OFFSET
	float                                              LeanOutL_AimAngle;                                        // 0x0C64(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LeanOutR_AimAngle;                                        // 0x0C68(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsLandingHard;                                           // 0x0C6C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x23];                                      // 0x0C6D(0x0023) MISSED OFFSET
	bool                                               bForcePlayMontage;                                        // 0x0C90(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0xF];                                       // 0x0C91(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraAnimInstance");
		return pStaticClass;
	}


	void TryToFireFlareGun();
	void SetVelocityZFactor(float NewFactor);
	void SetC_ViewRotation(const struct FRotator& NewRotator, float DeltaTime);
	void PostCacheParamList(float DeltaSeconds);
	void DumpAllProperties();
	void DumpAllAnimInstancesInThisWorld();
	struct FAnimParamList CacheParamList(float DeltaSeconds);
	struct FPlayerAnimList CacheAnimVarList();
};


// Class ShadowTrackerExtra.STExtraAnimInstance_TDM
// 0x04E0 (0x0B30 - 0x0650)
class USTExtraAnimInstance_TDM : public USTExtraAnimInstanceBase
{
public:
	struct FSTExtraAnimInstanceProxy                   Proxy;                                                    // 0x0650(0x04E0) (BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraAnimInstance_TDM");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBagPetAnimInstance
// 0x0030 (0x03F0 - 0x03C0)
class USTExtraBagPetAnimInstance : public UAnimInstance
{
public:
	class USkeletalMeshComponent*                      C_OwnerSkeletalMesh;                                      // 0x03C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckPlayAnimDuration;                                    // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AimAtAngleToPlayAnim;                                     // 0x03CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RandomIndex;                                              // 0x03D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RandomIndexDuration;                                      // 0x03D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShowDebugMaxDistanceFactor;                               // 0x03D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x17];                                      // 0x03D9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBagPetAnimInstance");
		return pStaticClass;
	}


	void UpdateCheckAdjustAnimFromOwnerCharacter(float DeltaTime);
};


// Class ShadowTrackerExtra.STExtraCharacter
// 0x0310 (0x0BE0 - 0x08D0)
class ASTExtraCharacter : public AUAECharacter
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x08D0(0x0080) MISSED OFFSET
	struct FScriptMulticastDelegate                    CharacterAnimEventDelegate;                               // 0x0950(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0xC8];                                      // 0x0960(0x00C8) MISSED OFFSET
	float                                              Health;                                                   // 0x0A28(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HealthMax;                                                // 0x0A2C(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int>                                        TypeIds;                                                  // 0x0A30(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              SwimSpeedDynamicScale;                                    // 0x0A40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDead : 1;                                                // 0x0A44(0x0001) (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0A45(0x0003) MISSED OFFSET
	float                                              threatenValue;                                            // 0x0A48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HurtParticleOffset;                                       // 0x0A4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraVehicleBase*                         CurrentVehicle;                                           // 0x0A50(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FUnmannedVehicleSyncData                    CurrentUnmannedVehicleSyncData;                           // 0x0A58(0x0010) (Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FUnmannedVehicleSyncData                    LastUnmannedVehicleSyncData;                              // 0x0A68(0x0010) (NoDestructor, Protected, NativeAccessSpecifierProtected)
	class ASTExtraVehicleBase*                         CurrentRemoteControlledVehicle;                           // 0x0A78(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWeaponOwnerProxy*                           WeaponOwnerProxy;                                         // 0x0A80(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScriptMulticastDelegate                    OnHandleSkillStartDelegate;                               // 0x0A88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnHandleSkillEndDelegate;                                 // 0x0A98(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x20];                                      // 0x0AA8(0x0020) MISSED OFFSET
	class USTBaseBuffSystemComponent*                  BuffSystemComponent;                                      // 0x0AC8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTBuffSystemComponent*                      BuffSystem;                                               // 0x0AD0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUTSkillManagerComponent*                    SkillManager;                                             // 0x0AD8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttrModifyComponent*                        AttrModifyComp;                                           // 0x0AE0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorAttributeComponent*                    ActorAttribute;                                           // 0x0AE8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EDamageableGameObjectType>                  DamageableGameObjectTypeList;                             // 0x0AF0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    StateEnterHandler;                                        // 0x0B00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    StateLeaveHandler;                                        // 0x0B10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x28];                                      // 0x0B20(0x0028) MISSED OFFSET
	struct FScriptMulticastDelegate                    StateInterruptedHandlerBP;                                // 0x0B48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPartHitComponent*                           PartHitComponent;                                         // 0x0B58(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsGunADS;                                                // 0x0B60(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0xB];                                       // 0x0B61(0x000B) MISSED OFFSET
	bool                                               bUseModifiedTargetLocIfNeeded;                            // 0x0B6C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanBePickByPicker;                                       // 0x0B6D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x12];                                      // 0x0B6E(0x0012) MISSED OFFSET
	TEnumAsByte<ETeamNumber>                           TeamNum;                                                  // 0x0B80(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0B81(0x0003) MISSED OFFSET
	float                                              VehicleDetailedTraceDist;                                 // 0x0B84(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpringArmTraceDist;                                       // 0x0B88(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0B8C(0x0004) MISSED OFFSET
	TMap<TEnumAsByte<ESTEPoseState>, struct FCharacterBodyOffset> BodyRelativeOffsetConfig;                                 // 0x0B90(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraCharacter");
		return pStaticClass;
	}


	bool TriggerEntryEvent_Implementation(EUTSkillEntry EntryEvent);
	void TriggerCustomEvent_Implementation(TEnumAsByte<EUAESkillEvent> EventType);
	bool SetBuffExpiry(const struct FName& BuffName, float ExpirySecondsFromNow);
	bool RemoveBuffBySkill(int SkillID, int LayerCount, class AActor* Causer);
	bool RemoveBuffByID(int BuffID, class AActor* Causer, int LayerCount, int CauserSkillID);
	bool RemoveBuff(const struct FName& BuffName, bool RemoveLayerOnly, class AActor* BuffApplierActor);
	float PlayAnimMontageWithStartPos(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName, float StartPos);
	void OnRep_UnmannedVehicleSyncData();
	void OnRep_HealthMax();
	void OnRep_Health();
	void OnHandleSkillStart__DelegateSignature(class ACharacter* OwnerCharacter, int SkillID);
	void OnHandleSkillEnd__DelegateSignature(class ACharacter* OwnerCharacter, EUTSkillStopReason StopReason, int SkillID);
	bool IsPawnStateDisabledByWeapon(EPawnState State);
	bool IsCanDamageTeammate(const struct FDamageEvent& DamageEvent);
	bool IsCanDamageSelf(const struct FDamageEvent& DamageEvent);
	bool IsAlive();
	bool HasBuffID(int BuffID);
	bool HasBuff(const struct FName& BuffName);
	class ASTExtraVehicleBase* GetUnmannedVehicle();
	struct FString GetPlayerNameSafety();
	class ASTExtraPlayerController* GetPlayerControllerSafety();
	EObserverType GetObserverType();
	TArray<EDamageableGameObjectType> GetDamageableGameObjectType();
	class AUTSkill* GetCurSkill();
	class ASTExtraVehicleBase* GetCurrentVehicle();
	TArray<class USTBuff*> GetBuffsByID(int BuffID);
	int ExtractDamageParams(const struct FDamageEvent& DamageEvent, class AActor* DamagetCauser, int* DamageType);
	void DelayHidden();
	void ClearBuff();
	void BPReceiveDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	bool AddBuffBySkill(int SkillID, int LayerCount, class AActor* Causer);
	bool AddBuffByID(int BuffID, class AActor* Causer, int LayerCount, int CauserSkillID);
	int AddBuff(const struct FName& BuffName, class AController* BuffCauser, int LayerCount, class AActor* BuffApplierActor, class AActor* CauserActor);
};


// Class ShadowTrackerExtra.STExtraBaseCharacter
// 0x1AA0 (0x2680 - 0x0BE0)
class ASTExtraBaseCharacter : public ASTExtraCharacter
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0BE0(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerTeleport;                                         // 0x0C00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerPawnHPChange;                                     // 0x0C10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDeath;                                                  // 0x0C20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBulletChange;                                           // 0x0C30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerPoseChange;                                       // 0x0C40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerEnterRescueingStatus;                             // 0x0C50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerEnterCallingForRevivalStatus;                     // 0x0C60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerPickUp;                                           // 0x0C70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerWeaponChangeState;                                // 0x0C80(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponFireModeChangeDelegate;                           // 0x0C90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnHideUIAfterPlayerDeadDelegate;                          // 0x0CA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerHandFoldedChanged;                                // 0x0CB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    IsEnterNearDeathDelegate;                                 // 0x0CC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0CD0(0x0038) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCharacterAimModeChanged;                                // 0x0D08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPerspectiveChanged;                                     // 0x0D18(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDoSomethingDelaySomeFrames;                             // 0x0D28(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDeathDelegate;                                          // 0x0D38(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnReconnectNotifyDelegate;                                // 0x0D48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStartInitDelegate;                                      // 0x0D58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0D68(0x0028) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCharacterShootHitServerDelegate;                        // 0x0D90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnUpdateForSleepComponent;                                // 0x0DA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x60];                                      // 0x0DB0(0x0060) MISSED OFFSET
	struct FScriptMulticastDelegate                    AnimMontagePlayDelegate;                                  // 0x0E10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    AnimPlaySlotAnimDelegate;                                 // 0x0E20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterStartFireDelegate;                             // 0x0E30(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterStopFireDelegate;                              // 0x0E40(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterShootDelegate;                                 // 0x0E50(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterBecomeViewTarget;                              // 0x0E60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterEndViewTarget;                                 // 0x0E70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterWeaponEquipDelegate;                           // 0x0E80(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterWeaponUnEquipDelegate;                         // 0x0E90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPawnRespawnDelegate;                                    // 0x0EA0(0x0010) (ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               DeathSound;                                               // 0x0EB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               PickupSound;                                              // 0x0EB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               ThrowawayWeaponSound;                                     // 0x0EC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               SwitchFireModeSound;                                      // 0x0EC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               SwitchSightSound;                                         // 0x0ED0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               MountAccessoriesSound;                                    // 0x0ED8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      IsInvincible : 1;                                         // 0x0EE0(0x0001) (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowName : 1;                                            // 0x0EE0(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShowDamageToOther : 1;                                   // 0x0EE0(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0EE1(0x0003) MISSED OFFSET
	float                                              NetDelayMinAniCompensate;                                 // 0x0EE4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsFPPOnVehicle;                                          // 0x0EE8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0EE9(0x0003) MISSED OFFSET
	float                                              Money;                                                    // 0x0EEC(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasHandleDead;                                           // 0x0EF0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bDying : 1;                                               // 0x0EF1(0x0001) (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bIgnoreInput : 1;                                         // 0x0EF1(0x0001) (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               FriendThread;                                             // 0x0EF2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseSameTeamDamage;                                       // 0x0EF3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSwimSprintSpeed;                                       // 0x0EF4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      IsFiveTimesWalkSpeed : 1;                                 // 0x0EF8(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSelfieMode;                                            // 0x0EF9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsDrawLocation;                                          // 0x0EFA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableReverseVerityBlock;                                 // 0x0EFB(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableBulletFlySound;                                     // 0x0EFC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0EFD(0x0003) MISSED OFFSET
	float                                              FallingTime;                                              // 0x0F00(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsShowRevivalPointIcon;                                   // 0x0F04(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsGiveupWhenMatchGoalAchieved;                           // 0x0F05(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x2];                                       // 0x0F06(0x0002) MISSED OFFSET
	class AActor*                                      MyConstActor;                                             // 0x0F08(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAllowToggleADS;                                          // 0x0F10(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0F11(0x0007) MISSED OFFSET
	float                                              AllowToggleADSCoolDownLength;                             // 0x0F18(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0F1C(0x0004) MISSED OFFSET
	float                                              PreviousValueToSetForHealthPredict;                       // 0x0F20(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ValueLimitForHealthPredict;                               // 0x0F24(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       HeadSocketName;                                           // 0x0F28(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       LFootSocketName;                                          // 0x0F30(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       RFootSocketName;                                          // 0x0F38(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoveAntiCheatComponent*                     MoveAntiCheatComponent;                                   // 0x0F40(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULagCompensationComponent*                   LagCompensationComponent;                                 // 0x0F48(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBaseCharacterEffectCom*                     EffectComponent;                                          // 0x0F50(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEffectComponent*                            NewEffectComponent;                                       // 0x0F58(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCharacterParachuteComponent*                ParachuteComponent;                                       // 0x0F60(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationInvokerComponent*                 NavigationInvokerComponent;                               // 0x0F68(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                           DeltaRotationTestCapusle;                                 // 0x0F70(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsWeaponFiring;                                          // 0x0F78(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0F79(0x0003) MISSED OFFSET
	struct FRotator                                    ServerControlRotation;                                    // 0x0F7C(0x000C) (BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<ESTEPoseState>                         PoseState;                                                // 0x0F88(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0F89(0x0003) MISSED OFFSET
	float                                              LastChangeCapsuleSizeTime;                                // 0x0F8C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      ThePlane;                                                 // 0x0F90(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ReplicatedNowShovelingSpeed;                              // 0x0F98(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    ReplicatedShovelingRotation;                              // 0x0F9C(0x000C) (Net, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               SkipOpenParachute;                                        // 0x0FA8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsDoingPickUp;                                            // 0x0FA9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0xE];                                       // 0x0FAA(0x000E) MISSED OFFSET
	bool                                               bIsHideCrossHairType;                                     // 0x0FB8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0FB9(0x0007) MISSED OFFSET
	float                                              RadialDamageScale;                                        // 0x0FC0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<ESTEPoseState>                         LastPoseState;                                            // 0x0FC4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnablePoseStateChangeOptimize;                           // 0x0FC5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x2];                                       // 0x0FC6(0x0002) MISSED OFFSET
	float                                              ConstPoseStateOptimizeOfflineTime;                        // 0x0FC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0FCC(0x0004) MISSED OFFSET
	bool                                               bUsePoseStateOfflineCheck;                                // 0x0FD0(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUpdateCameraWhenShootInMovePlat;                         // 0x0FD1(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableSwoop;                                             // 0x0FD2(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0x1];                                       // 0x0FD3(0x0001) MISSED OFFSET
	float                                              AnimDeathLifeSpan;                                        // 0x0FD4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      AutoEquipWeaponTemplate;                                  // 0x0FD8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWeaponSlotSwitchTimeData>           SwitchSlotTimeDataList;                                   // 0x0FE0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class AActor*>                              PlayerSlotData;                                           // 0x0FF0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                              InventoryData;                                            // 0x1000(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData17[0x50];                                      // 0x1010(0x0050) MISSED OFFSET
	class UAkComponent*                                SoundComp;                                                // 0x1060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                                AmbientSoundComp;                                         // 0x1068(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsAmbientSoundPlaying;                                    // 0x1070(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData18[0x7];                                       // 0x1071(0x0007) MISSED OFFSET
	class UAkAudioEvent*                               FootstepSound;                                            // 0x1078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               AmbientSound;                                             // 0x1080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FString, struct FSpecialAmbientData>   SpecialMapAmbientSoundConfig;                             // 0x1088(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class USceneComponent*                             MeshContainer;                                            // 0x10D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsUseFpsVault;                                           // 0x10E0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData19[0x7];                                       // 0x10E1(0x0007) MISSED OFFSET
	class AActor*                                      WaterObj;                                                 // 0x10E8(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HearRadius;                                               // 0x10F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVaultIsOpen;                                             // 0x10F4(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UseShootVerifyEx;                                         // 0x10F5(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EHitPartJugementType>                  ClientHitPartJudgment;                                    // 0x10F6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EHitPartJugementType>                  DSHitPartJudgment;                                        // 0x10F7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTCharacterNearDeathComp*                   NearDeatchComponent;                                      // 0x10F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTCharacterRescueOtherComp*                 RescueOtherComponent;                                     // 0x1100(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTCharacterFollowComp*                      AutoFollowComponent;                                      // 0x1108(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsRescueingOther;                                         // 0x1110(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData20[0x3];                                       // 0x1111(0x0003) MISSED OFFSET
	float                                              ReplciateRestoringDuraion;                                // 0x1114(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsBeingRescued;                                           // 0x1118(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData21[0x3];                                       // 0x1119(0x0003) MISSED OFFSET
	float                                              EnterNearDeathCDTimeInitValue;                            // 0x111C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData22[0x4];                                       // 0x1120(0x0004) MISSED OFFSET
	bool                                               bIsCallingForRevival;                                     // 0x1124(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData23[0x3];                                       // 0x1125(0x0003) MISSED OFFSET
	float                                              DistSquaredInterruptRevival;                              // 0x1128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                ProneBodyDef;                                             // 0x112C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                StandBodyDef;                                             // 0x1134(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                CrouchBodyDef;                                            // 0x113C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                DyingBodyDef;                                             // 0x1144(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                VechicleBodyDef;                                          // 0x114C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     NewStandHitBodyBoxScale;                                  // 0x1154(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     NewProneHitBodyBoxScale;                                  // 0x1160(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData24[0x4];                                       // 0x116C(0x0004) MISSED OFFSET
	TMap<struct FString, EAvatarDamagePosition>        NewHitBodyPosMap;                                         // 0x1170(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                     ScopeNewIdleLoc;                                          // 0x11C0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ScopeNewAimLoc;                                           // 0x11CC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScopeMoveInOutSpeed;                                      // 0x11D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ScopeAimShootSpreadDir;                                   // 0x11DC(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScopeAimShootSpreadAddDirValSpeed;                        // 0x11E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScopeAimShootSpreadDecDirValSpeed;                        // 0x11EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScopeAimShootSpreadDirValMax;                             // 0x11F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData25[0x4];                                       // 0x11F4(0x0004) MISSED OFFSET
	struct FRotator                                    ScopeAimShootSpreadRot;                                   // 0x11F8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              ScopeAimShootSpreadAddRotValSpeed;                        // 0x1204(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScopeAimShootSpreadDecRotValSpeed;                        // 0x1208(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScopeAimShootSpreadRotValMax;                             // 0x120C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData26[0x4];                                       // 0x1210(0x0004) MISSED OFFSET
	float                                              ScopeLagScale;                                            // 0x1214(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScopeAimCrosshairUIScale;                                 // 0x1218(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData27[0x4];                                       // 0x121C(0x0004) MISSED OFFSET
	class UClass*                                      DeadInventoryBoxTemplate;                                 // 0x1220(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DefaultDeadInventoryBoxTemplate;                          // 0x1228(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DeadInventoryBoxOverrideFindPutDownPointZThreshold;       // 0x1230(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FirstDamageTypeSpesificID;                                // 0x1234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RefreshUITimeAfterSpawn;                                  // 0x1238(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RefreshUITimeAfterSpawnInterval;                          // 0x123C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData28[0x8];                                       // 0x1240(0x0008) MISSED OFFSET
	struct FVector                                     ScopeNewTargetLoc;                                        // 0x1248(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMarkScopeLocDirty;                                       // 0x1254(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData29[0x3];                                       // 0x1255(0x0003) MISSED OFFSET
	class UCustomSpringArmComponent*                   SpringArmComp;                                            // 0x1258(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                            ThirdPersonCameraComponent;                               // 0x1260(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                         FPPSpringArmComp;                                         // 0x1268(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                            FPPCameraComp;                                            // 0x1270(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                         ScopeSpringArmComp;                                       // 0x1278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                            ScopeCameraComp;                                          // 0x1280(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                             ShoulderCameraRoot;                                       // 0x1288(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasStuckOperation;                                       // 0x1290(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData30[0x3];                                       // 0x1291(0x0003) MISSED OFFSET
	struct FSyncAKEvent                                SyncAKEvent;                                              // 0x1294(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData31[0x4];                                       // 0x12A4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnJoyStickInteruptDelegate;                               // 0x12A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerAttrChangeDelegate;                               // 0x12B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterAttrChangedWithDetail;                         // 0x12C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bIsDelayingMove;                                          // 0x12D8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugNewWeaponSystem;                                    // 0x12D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDebugPVEShoot;                                           // 0x12DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData32[0x5];                                       // 0x12DB(0x0005) MISSED OFFSET
	class UBoxComponent*                               ProneBoxComponent;                                        // 0x12E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ProneBoxRelativeLocation;                                 // 0x12E8(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData33[0x4];                                       // 0x12F4(0x0004) MISSED OFFSET
	TArray<struct FDamageCauserRecordData>             DamageCauserRecords;                                      // 0x12F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FDamageCauserRecordData>             DamageRecords;                                            // 0x1308(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USTCharacterMovementComponent*               STCharacterMovement;                                      // 0x1318(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PickUpRadius;                                             // 0x1320(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimViewData                                SimulateViewData;                                         // 0x1324(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSearchedTombBoxAndWrapperListResult> SearchTombBoxResult;                                      // 0x1328(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FAnchorPlatData                             AnchorPlat;                                               // 0x1338(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData34[0x8];                                       // 0x1340(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData35[0x28];                                      // 0x1340(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.STExtraBaseCharacter.ProneTrailMarkClass
	TWeakObjectPtr<class ATrailMarkActor>              WeakProneTrailMarkActor;                                  // 0x1370(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData36[0xC];                                       // 0x1378(0x000C) MISSED OFFSET
	float                                              MaxDispalyFootprintDistance;                              // 0x1384(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    DefaultMeshRot;                                           // 0x1388(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData37[0x4];                                       // 0x1394(0x0004) MISSED OFFSET
	struct FKilledTipsBlock                            BlockData;                                                // 0x1398(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	class UClass*                                      MainCharAnimClass;                                        // 0x13D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      MainCharFPPAnimClass;                                     // 0x13D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData38[0x8];                                       // 0x13E0(0x0008) MISSED OFFSET
	bool                                               IsFPP;                                                    // 0x13E8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData39[0x3];                                       // 0x13E9(0x0003) MISSED OFFSET
	int                                                CurrentEmoteIndex;                                        // 0x13EC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData40[0x8];                                       // 0x13F0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    EmoteMontageFinishedEvent;                                // 0x13F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData41[0x28];                                      // 0x1408(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.STExtraBaseCharacter.TempEmoteResource
	class UAnimSequenceBase*                           CurrentLoadedEmoteSequence;                               // 0x1430(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurrentLoadedEmoteBlendTime;                              // 0x1438(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData42[0x4];                                       // 0x143C(0x0004) MISSED OFFSET
	TMap<struct FName, EPawnState>                     PawnStateRelatedBuffMap;                                  // 0x1440(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                               IsInWater;                                                // 0x1490(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsAutoFollow;                                             // 0x1491(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData43[0x6];                                       // 0x1492(0x0006) MISSED OFFSET
	class ASTExtraBaseCharacter*                       WhoFollowMe;                                              // 0x1498(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     CurInputVector;                                           // 0x14A0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData44[0x4];                                       // 0x14AC(0x0004) MISSED OFFSET
	class UStaticMeshComponent*                        ScopComp;                                                 // 0x14B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData45[0x10];                                      // 0x14B8(0x0010) MISSED OFFSET
	class UPhysicsAsset*                               PhysicsAssetOverride_Dead;                                // 0x14C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              voiceCheckCD;                                             // 0x14D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              voiceCheckShowCD;                                         // 0x14D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VoiceCheckDis;                                            // 0x14D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                voiceBeginCheckDisWhenUAV;                                // 0x14DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData46[0x18];                                      // 0x14E0(0x0018) MISSED OFFSET
	unsigned char                                      UnknownData47[0x50];                                      // 0x14E0(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.STExtraBaseCharacter.DanyinCompletedIDSet
	class UPlayerGunCollosionComp*                     PlayerGunCollosionComp;                                   // 0x1548(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData48[0x10];                                      // 0x1550(0x0010) MISSED OFFSET
	class ASTExtraPlayerState*                         STExtraPlayerState;                                       // 0x1560(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EMovementMode>                         MovementModeBeforeNearDeath;                              // 0x1568(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData49[0x3];                                       // 0x1569(0x0003) MISSED OFFSET
	float                                              MoveableSwitchPoseTime;                                   // 0x156C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPlayerState*                         WhoKillMeRecord;                                          // 0x1570(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                HandFolderRatio;                                          // 0x1578(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SwimUpRate;                                               // 0x157C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsSwimUpWater;                                            // 0x1580(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData50[0x3];                                       // 0x1581(0x0003) MISSED OFFSET
	float                                              UpWaterHeight;                                            // 0x1584(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerSwimComponent*                        swimComponet;                                             // 0x1588(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableWorldPawnCollisionDisabled;                        // 0x1590(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableWorldPawnCollisionEnable;                          // 0x1591(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData51[0x42];                                      // 0x1592(0x0042) MISSED OFFSET
	struct FVector_NetQuantize                         MoveInputState;                                           // 0x15D4(0x000C) (Net, NoDestructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData52[0x40];                                      // 0x15E0(0x0040) MISSED OFFSET
	bool                                               hHasCallGameModeKill;                                     // 0x1620(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData53[0x1F];                                      // 0x1621(0x001F) MISSED OFFSET
	float                                              CollideByTeammateCDConfig;                                // 0x1640(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData54[0x4];                                       // 0x1644(0x0004) MISSED OFFSET
	struct FPoseChangeTime                             SwitchPoseTime;                                           // 0x1648(0x0010) (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData55[0x8];                                       // 0x1658(0x0008) MISSED OFFSET
	struct FTransform                                  HitBoxLeanTransL;                                         // 0x1660(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FTransform                                  HitBoxLeanTransR;                                         // 0x1690(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData56[0x18];                                      // 0x16C0(0x0018) MISSED OFFSET
	class UBaseCharacterPickupProxy*                   PickupProxy;                                              // 0x16D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterWeaponManagerComponent*            WeaponManagerComponent;                                   // 0x16E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              DelayHideDuration;                                        // 0x16E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              DelayHideDuration_SimulatePhysicsDead;                    // 0x16EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               bEnableRagdollAfterDead;                                  // 0x16F0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData57[0x3];                                       // 0x16F1(0x0003) MISSED OFFSET
	float                                              MaxRagdollActiveDuration;                                 // 0x16F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCircleMgrComponent*                         CircleMgr;                                                // 0x16F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData58[0x8];                                       // 0x1700(0x0008) MISSED OFFSET
	bool                                               bEnableAnimFrameCounter;                                  // 0x1708(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData59[0x7];                                       // 0x1709(0x0007) MISSED OFFSET
	struct FPlayerAnimList                             CurPlayerAnimList;                                        // 0x1710(0x00F8) (BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FAnimParamList                              CurAnimParamList;                                         // 0x1808(0x0114) (BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData60[0x4];                                       // 0x191C(0x0004) MISSED OFFSET
	struct FPlayerVehAnimList                          CurPlayerVehAnimList;                                     // 0x1920(0x00D8) (BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimVehParamList                           CurAnimVehParamList;                                      // 0x19F8(0x0030) (BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimStatusKeyList                          LastUpdateStatusKeyList;                                  // 0x1A28(0x0028) (NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimStatusKeyList                          CurUpdateStatusKeyList;                                   // 0x1A50(0x0028) (NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<EThrowGrenadeMode>                     ThrowGrenadeMode;                                         // 0x1A78(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData61[0xF];                                       // 0x1A79(0x000F) MISSED OFFSET
	bool                                               IsPeekLeft;                                               // 0x1A88(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsEnablePeek;                                             // 0x1A89(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData62[0x2];                                       // 0x1A8A(0x0002) MISSED OFFSET
	float                                              PeekCheckCollisionTimer;                                  // 0x1A8C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData63[0x4];                                       // 0x1A90(0x0004) MISSED OFFSET
	bool                                               PeekHasCollision;                                         // 0x1A94(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData64[0x3];                                       // 0x1A95(0x0003) MISSED OFFSET
	float                                              AutoScopeDelayTimeWhenPeek;                               // 0x1A98(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                IsEnableReportPlayerBehavior;                             // 0x1A9C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData65[0x14];                                      // 0x1AA0(0x0014) MISSED OFFSET
	float                                              HighWalkSpeed;                                            // 0x1AB4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WalkSpeedChangeRate;                                      // 0x1AB8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WalkSpeedThreshold;                                       // 0x1ABC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxCrouchSpeed;                                           // 0x1AC0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxProneSpeed;                                            // 0x1AC4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSprintSpeed;                                           // 0x1AC8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSprintCrouchSpeed;                                     // 0x1ACC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSwimSpeed;                                             // 0x1AD0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HealthPredict;                                            // 0x1AD4(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BreathAmount;                                             // 0x1AD8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldDrowningHurt;                                      // 0x1ADC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData66[0x3];                                       // 0x1ADD(0x0003) MISSED OFFSET
	int                                                PoisonSmogStage;                                          // 0x1AE0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PoisonSmogProgress;                                       // 0x1AE4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AntidoteExeTime;                                          // 0x1AE8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AntidoteMaxTime;                                          // 0x1AEC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpeedDynamicScale;                                        // 0x1AF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TurnInPlaceAngel;                                         // 0x1AF4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    PoisonFogStageUpdatedDelegate;                            // 0x1AF8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TEnumAsByte<ECharacterHealthStatus>                HealthStatus;                                             // 0x1B08(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData67[0x7];                                       // 0x1B09(0x0007) MISSED OFFSET
	TMap<EAvatarDamagePosition, struct FBodyPartCfg>   BodyPartConfigMap;                                        // 0x1B10(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                               bIsLastTwoCircle;                                         // 0x1B60(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData68[0x3];                                       // 0x1B61(0x0003) MISSED OFFSET
	float                                              SpeedScale;                                               // 0x1B64(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkillSpeedScale;                                          // 0x1B68(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnergySpeedScale;                                         // 0x1B6C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultSpeedValue;                                        // 0x1B70(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpeedValue;                                               // 0x1B74(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PawnBackpackCapacity;                                     // 0x1B78(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData69[0x4];                                       // 0x1B7C(0x0004) MISSED OFFSET
	struct FCharacterEnergyData                        Energy;                                                   // 0x1B80(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                               bCheckRelevantWithFOV;                                    // 0x1BB8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData70[0x3];                                       // 0x1BB9(0x0003) MISSED OFFSET
	float                                              FarDistanceAimFOV;                                        // 0x1BBC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FarRelevantDistanceSqured;                                // 0x1BC0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MiddleDistanceAimFOV;                                     // 0x1BC4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MiddleRelevantDistanceSqured;                             // 0x1BC8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData71[0x4];                                       // 0x1BCC(0x0004) MISSED OFFSET
	float                                              VerticalSpeedFallingDamageThrehod;                        // 0x1BD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              VerticalFallingDamageCoefficient;                         // 0x1BD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              HorizontalSpeedFallingDamageThrehod;                      // 0x1BD8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData72[0x4];                                       // 0x1BDC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 CurveHorizontalSpeedFallingDamage;                        // 0x1BE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                      DamageShakeClass;                                         // 0x1BE8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              StandHalfHeight;                                          // 0x1BF0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CrouchHalfHeight;                                         // 0x1BF4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ProneHalfHeight;                                          // 0x1BF8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CrouchEnableCheckTolerance;                               // 0x1BFC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              StandRadius;                                              // 0x1C00(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              DyingRadius;                                              // 0x1C04(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FHealthPredictShowData>              HealthPredictShowDataList;                                // 0x1C08(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class USecuryInfoComponent*                        SecuryComponent;                                          // 0x1C18(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData73[0x10];                                      // 0x1C20(0x0010) MISSED OFFSET
	bool                                               bWasOnVehicle;                                            // 0x1C30(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData74[0xF];                                       // 0x1C31(0x000F) MISSED OFFSET
	float                                              LastVehicleDamageCD;                                      // 0x1C40(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData75[0x4];                                       // 0x1C44(0x0004) MISSED OFFSET
	int                                                VehicleSeatIdx;                                           // 0x1C48(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData76[0x6];                                       // 0x1C4C(0x0006) MISSED OFFSET
	bool                                               bForceSetRepMovLocationOnAttachmentRep;                   // 0x1C52(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData77[0x1];                                       // 0x1C53(0x0001) MISSED OFFSET
	float                                              LeaveVehicleVelocityKeepTime;                             // 0x1C54(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData78[0x18];                                      // 0x1C58(0x0018) MISSED OFFSET
	bool                                               UseAvatarComponent2;                                      // 0x1C70(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData79[0x7];                                       // 0x1C71(0x0007) MISSED OFFSET
	class UCharacterAvatarComponent2*                  AvatarComponent2;                                         // 0x1C78(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EAvatarSlotType, int>                         AvatarRectifyData;                                        // 0x1C80(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHalloweenVampireCloth                      HalloweenVampireCloth;                                    // 0x1CD0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAttachedToVehicle;                                      // 0x1CD8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDetachedFromVehicle;                                    // 0x1CE8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnChangedVehicleSeat;                                     // 0x1CF8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerStateUpdated;                                     // 0x1D08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData80[0x40];                                      // 0x1D18(0x0040) MISSED OFFSET
	TArray<struct FPawnStateDisable>                   DisabledPawnStates;                                       // 0x1D58(0x0010) (Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	uint64_t                                           CurrentStates;                                            // 0x1D68(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData81[0xB8];                                      // 0x1D70(0x00B8) MISSED OFFSET
	class ASTExtraWeapon*                              CurrentReloadWeapon;                                      // 0x1E28(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData82[0x8];                                       // 0x1E30(0x0008) MISSED OFFSET
	bool                                               EnableStatesInterruptRPC;                                 // 0x1E38(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               EnableSprintSync;                                         // 0x1E39(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData83[0x2];                                       // 0x1E3A(0x0002) MISSED OFFSET
	float                                              NetCullingDistanceOnVeryLowDevice;                        // 0x1E3C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData84[0x4];                                       // 0x1E40(0x0004) MISSED OFFSET
	struct FSTParachuteState                           STReplicateParchuteState;                                 // 0x1E44(0x0018) (Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FSTReplicatedMoveState                      STReplicatedMoveState;                                    // 0x1E5C(0x0020) (Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bReplicatedIsStartParachute;                              // 0x1E7C(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData85[0x3];                                       // 0x1E7D(0x0003) MISSED OFFSET
	float                                              MoveForwardInputValue;                                    // 0x1E80(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MoveRightInputValue;                                      // 0x1E84(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsParachuteLandingAnimEnabled;                           // 0x1E88(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData86[0x3];                                       // 0x1E89(0x0003) MISSED OFFSET
	float                                              ParachuteLandingHeightAdded;                              // 0x1E8C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsParachuteLanding;                                      // 0x1E90(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData87[0x3];                                       // 0x1E91(0x0003) MISSED OFFSET
	float                                              TargetPlayerAIPolicyDecisionLogInterval;                  // 0x1E94(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RelevantPlayerAIPolicyDecisionLogInterval;                // 0x1E98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData88[0x4];                                       // 0x1E9C(0x0004) MISSED OFFSET
	class UParachuteFollowComponent*                   ParachuteFollowComp;                                      // 0x1EA0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASTExtraBaseCharacter*>               FlyingTeam;                                               // 0x1EA8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       Leader;                                                   // 0x1EB8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFollowState                                       FollowState;                                              // 0x1EC0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData89[0x7];                                       // 0x1EC1(0x0007) MISSED OFFSET
	TArray<struct FParachuteFollowState>               TeammateParachuteFollowState;                             // 0x1EC8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<class ASTExtraBaseCharacter*>               Inviters;                                                 // 0x1ED8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ASTExtraPlayerState*>                 InviterStateArr;                                          // 0x1EE8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData90[0x4];                                       // 0x1EF8(0x0004) MISSED OFFSET
	float                                              MaxTemporaryNotAllowInvitedTime;                          // 0x1EFC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData91[0x4];                                       // 0x1F00(0x0004) MISSED OFFSET
	float                                              maxShowAlpha;                                             // 0x1F04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MoveMaxShowDis;                                           // 0x1F08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WeaponMaxShowDis;                                         // 0x1F0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VehicleMaxShowDis;                                        // 0x1F10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData92[0x3C];                                      // 0x1F14(0x003C) MISSED OFFSET
	float                                              FPPPutDownWeaponCoolingStart;                             // 0x1F50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FPPPutDownWeaponCoolingEnd;                               // 0x1F54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FPPSprintWeaponSmoothTime;                                // 0x1F58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData93[0xE0];                                      // 0x1F5C(0x00E0) MISSED OFFSET
	int                                                IsEnableReportRoute;                                      // 0x203C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData94[0x38];                                      // 0x2040(0x0038) MISSED OFFSET
	struct FVector                                     EmoteColBox;                                              // 0x2078(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CompVisionOpDis;                                          // 0x2084(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CompVisionOpDelay;                                        // 0x2088(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bHasAppliedVisionCompOp;                                  // 0x208C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData95[0x13];                                      // 0x208D(0x0013) MISSED OFFSET
	TMap<class USceneComponent*, struct FCharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;              // 0x20A0(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                               bEnableCompVisionOptimization;                            // 0x20F0(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNightVisionUse;                                          // 0x20F1(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData96[0x6];                                       // 0x20F2(0x0006) MISSED OFFSET
	float                                              MaxRelavantDistance;                                      // 0x20F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                IsEnableReportPlayerKillFlow;                             // 0x20FC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                IsEnableReportGameSetting;                                // 0x2100(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EnableReportGameSettingLevel;                             // 0x2104(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                IsEnableReportMrpcsInCircleFlow;                          // 0x2108(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                IsEnableReportMrpcsInPartCircleFlow;                      // 0x210C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                IsEnableReportMrpcsFlow;                                  // 0x2110(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               CrowdAgentConsidered;                                     // 0x2114(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData97[0x13];                                      // 0x2115(0x0013) MISSED OFFSET
	class UUAECharacterAnimListComponent*              OwnedCharacterAnimComp;                                   // 0x2128(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData98[0x4];                                       // 0x2130(0x0004) MISSED OFFSET
	bool                                               bIsSwapingMainWeapon;                                     // 0x2134(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData99[0x3];                                       // 0x2135(0x0003) MISSED OFFSET
	float                                              EquipingScopeDelay;                                       // 0x2138(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData100[0x1];                                      // 0x213C(0x0001) MISSED OFFSET
	bool                                               bClientHasFinishedReloadWeapon;                           // 0x213D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData101[0x2];                                      // 0x213E(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEquipZoomScope;                                         // 0x2140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData102[0x4];                                      // 0x2150(0x0004) MISSED OFFSET
	struct FWeaponOverrideAttrs                        WeaponOverrideAttrs;                                      // 0x2154(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterOverrideAttrs                     CharacterOverrideAttrs;                                   // 0x216C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                              CharacterFallingVelocityZFactor;                          // 0x217C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData103[0x50];                                     // 0x2180(0x0050) MISSED OFFSET
	bool                                               IsPveShootVerify;                                         // 0x21D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsOpenCommonShootVerify;                                  // 0x21D1(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData104[0x6];                                      // 0x21D2(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    CharacterDisplayFinalDamageDelegate;                      // 0x21D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<TEnumAsByte<ECharacterPoseType>, float>       DamagePosOffsetZ;                                         // 0x21E8(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                AloneDistance;                                            // 0x2238(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                NearTeamPlayerDistance;                                   // 0x223C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData105[0x8];                                      // 0x2240(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData106[0x28];                                     // 0x2240(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.STExtraBaseCharacter.ChangeWearingMontage
	float                                              ChangeWearingLastTime;                                    // 0x2270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ChangeWearingPromptTextID;                                // 0x2274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ChangeWearingPromptText;                                  // 0x2278(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                ChangeWearingAnimMontage;                                 // 0x2288(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    WearingMontageFinishedEvent;                              // 0x2290(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData107[0x3C];                                     // 0x22A0(0x003C) MISSED OFFSET
	struct FVector                                     ChangeWearingColBox;                                      // 0x22DC(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              PaintDecalMaxDistance;                                    // 0x22E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PuzzlePaintDecalMaxDistance;                              // 0x22EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDetectingPaintDecalTarget;                               // 0x22F0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bValidPaintDecalTarget;                                   // 0x22F1(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData108[0x2];                                      // 0x22F2(0x0002) MISSED OFFSET
	float                                              RequestPaintDecalCD;                                      // 0x22F4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxRequestPaintDecalCD;                                   // 0x22F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData109[0x4];                                      // 0x22FC(0x0004) MISSED OFFSET
	class UChildActorComponent*                        DecalComponent;                                           // 0x2300(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      DecalActor;                                               // 0x2308(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                        PuzzleLineTraceComponent;                                 // 0x2310(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      PuzzleTraceLineActor;                                     // 0x2318(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bInBattleState;                                           // 0x2320(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData110[0x3];                                      // 0x2321(0x0003) MISSED OFFSET
	float                                              OutBattleStateTime;                                       // 0x2324(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData111[0x8];                                      // 0x2328(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBattleStateChange;                                      // 0x2330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterPlayEmote;                                     // 0x2340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterWin;                                           // 0x2350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterFallingModeChange;                             // 0x2360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FVector                                     LastServerHitImpactPoint;                                 // 0x2370(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      RemainUseSupplySpotTimes;                                 // 0x237C(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      RemainUseEnhancerSpotTimes;                               // 0x237D(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsShowHealthBar;                                          // 0x237E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData112[0x1];                                      // 0x237F(0x0001) MISSED OFFSET
	TArray<int>                                        UseEnhanceSpotTip;                                        // 0x2380(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                MonsterDamageReduceSkillID;                               // 0x2390(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData113[0x4];                                      // 0x2394(0x0004) MISSED OFFSET
	TMap<int, struct FInteractionEmoteConfig>          InteractionEmoteConfig;                                   // 0x2398(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       InteractionEmoteSender;                                   // 0x23E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData114[0x11];                                     // 0x23F0(0x0011) MISSED OFFSET
	bool                                               IsInitCharacterSkill;                                     // 0x2401(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData115[0x6];                                      // 0x2402(0x0006) MISSED OFFSET
	struct FString                                     CharacterSkillTableName;                                  // 0x2408(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASTExtraVehicleBase*                         RelevantVehicleInReady;                                   // 0x2418(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                               DeathCachePhysicsAsset;                                   // 0x2420(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAutoAimingConfig                           AutoAimingConfig;                                         // 0x2428(0x0108) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<EMeleeAutoAimType>                     MeleeAutoAimType;                                         // 0x2530(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData116[0xF];                                      // 0x2531(0x000F) MISSED OFFSET
	float                                              LastSprintTriggerTime;                                    // 0x2540(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData117[0x4];                                      // 0x2544(0x0004) MISSED OFFSET
	bool                                               bIsInObjectPool;                                          // 0x2548(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData118[0x7];                                      // 0x2549(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    ZombieModePropSkillUIShowDelegate;                        // 0x2550(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int                                                ZombieModeCurrentSkillPropLevel;                          // 0x2560(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ZombieModeCurrentSkillPropID;                             // 0x2564(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    MarkPlayerPosDelegate;                                    // 0x2568(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPlayerVaultComponent*                       VaultControllerComp;                                      // 0x2578(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPlayerRespawnData                          PlayerRespawnData;                                        // 0x2580(0x001C) (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	ECharacterMainType                                 CharacterMainType;                                        // 0x259C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterSubType                                  CharacterSubType;                                         // 0x259D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnterSnowArea;                                            // 0x259E(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData119[0x1];                                      // 0x259F(0x0001) MISSED OFFSET
	TArray<TEnumAsByte<EPhysicalSurface>>              ShowSnowAreaTypes;                                        // 0x25A0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              TickCanDriveSnowBoardInterval;                            // 0x25B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData120[0x4];                                      // 0x25B4(0x0004) MISSED OFFSET
	class AActor*                                      LastShootActor;                                           // 0x25B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RTNoDamageTime;                                           // 0x25C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RealtimeVerifyInterval;                                   // 0x25C4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RealtimeVerifyIntervalRandomOffset;                       // 0x25C8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData121[0x4];                                      // 0x25CC(0x0004) MISSED OFFSET
	bool                                               bAddPoseStateCheckResponse;                               // 0x25D0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bTemperoryDisableFallingDamage;                           // 0x25D1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData122[0x2];                                      // 0x25D2(0x0002) MISSED OFFSET
	float                                              FixMovementOnVehicleInterval;                             // 0x25D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData123[0x4];                                      // 0x25D8(0x0004) MISSED OFFSET
	float                                              voiceCheckUAVOperatorDeltaTime;                           // 0x25DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData124[0x10];                                     // 0x25E0(0x0010) MISSED OFFSET
	struct FTransform                                  DefaultParticleAttachTransform;                           // 0x25F0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<EAttachLocation>                       DefaultParticleAttachLocationType;                        // 0x2620(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData125[0x7];                                      // 0x2621(0x0007) MISSED OFFSET
	TArray<struct FInjuryParticleAttachOffset>         ParticleAttachOffsetArray;                                // 0x2628(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              ParticleShowingInterval;                                  // 0x2638(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData126[0x4];                                      // 0x263C(0x0004) MISSED OFFSET
	bool                                               bIsShowingInjuryEffect;                                   // 0x2640(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsShowingToxicEffect;                                    // 0x2641(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData127[0x6];                                      // 0x2642(0x0006) MISSED OFFSET
	unsigned char                                      UnknownData128[0x28];                                     // 0x2642(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.STExtraBaseCharacter.InjuryAndToxicParticleEffect
	float                                              WaitRefreshShootDetailInfoTime;                           // 0x2670(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurWaitRefreshShootDetailInfoTime;                        // 0x2674(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData129[0x8];                                      // 0x2678(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBaseCharacter");
		return pStaticClass;
	}


	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, class ASTExtraBaseCharacter* vaultCharacter, const struct FVector& StartPos);
	void VaultFailPawnCPP(const struct FString& Content);
	void VaultFailPawnBluePrint(const struct FString& Content);
	void UseVehWeaponView(class ASTExtraShootWeapon* OldVehWeapon, class ASTExtraShootWeapon* NewVehWeapon);
	void UserCancelRescue();
	bool UpdateShovelingState();
	void UpdateShovelingHoldStateRelease();
	void UpdateShovelingHoldStatePressed();
	void UpdatePoseCollisionCpp(TEnumAsByte<ESTEPoseState> CurState, TEnumAsByte<ESTEPoseState> PreState);
	void UpdateFallingTime(float Delta);
	void UpdateDeathReplayInitTrans(float DeltaTime);
	void UpdateCurrentShootWeaponTick();
	void UpdateAllInstanceBodyTransform(int Type);
	void UnequipWeaponFinish();
	void UnequipWeapon(TEnumAsByte<ESurviveWeaponPropSlot> Slot, bool bSwitchWeapon);
	void TryToBroadcastFatalDamageEvent(class AController* Causer, int HSChangeMargin, const struct FDamageEvent& DamageEvent, bool IsHeadShot, class AActor* DamageCauser);
	void TryPeek(bool IsLeft, bool ButtonDown);
	bool TriggerEntryEvent_Implementation(EUTSkillEntry EntryEvent);
	void TakeDamageWhenThrowedDelegate__DelegateSignature();
	void SyncWaterObjectServer(class AActor* WaterObject);
	void SyncWaterObject(class AActor* WaterObject);
	void SyncServerTagsChange(TArray<struct FName> newTags, TArray<struct FName> oldTags);
	void SyncDeadTombBoxToController(class APlayerTombBox* _DeadTombBox);
	bool SwitchWeaponCheck(TEnumAsByte<ESurviveWeaponPropSlot> Slot, bool bIgnoreState);
	void SwitchWeaponBySlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);
	void SwitchToLastNoneMeleeWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);
	bool SwitchPoseState(TEnumAsByte<ESTEPoseState> State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);
	void SwapMainWeapon();
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8_t State, const struct FRotator& CameraRotation);
	float StopSlotAnim(class UAnimSequenceBase* AnimSequence, const struct FName& SlotName, float blendTime);
	bool StopPlayEmoteAnim(int EmoteIndex);
	bool StopFireFilter();
	void StopFire();
	bool StopChangeWearingAnim();
	void StartWaitRefreshShootDetailInfo();
	bool StartPlayEmoteAnim(int EmoteIndex);
	void StartFireSimple();
	bool StartFireFilter(class ASTExtraShootWeapon* ExtraWeapon);
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, TEnumAsByte<EShootWeaponShootMode> ShootMode, const struct FVector& SimpleShootTarget, bool DoCheck, class ASTExtraShootWeapon* ExtraWeapon);
	bool StartChangeWearingAnim();
	void SpawnFootprint(EFootprintType FootprintType);
	void SpawnAndSwithToGrenadeServerCall(TEnumAsByte<EGrenadeType> grenadeType, float SentTime);
	class ASTExtraWeapon* SpawnAndSwitchToGrenadeOnServer(const struct FName& SpesificLogicGrenadeSlot);
	class ASTExtraWeapon* SpawnAndSwitchToGrenadeOnClient(const struct FName& SpesificLogicGrenadeSlot);
	class ASTExtraWeapon* SpawnAndBackpackWeaponOnServer(class UClass* Template, const struct FItemDefineID& ID, const struct FName& LogicSocket, bool bAutoUse, bool bResetBulletNum);
	void ShowNightVisionFrame();
	void ShowDebugRole();
	void ShowDebugRecordData();
	void ShowDebugPickUpFlow();
	void ShowDebugEquipOrUnequipFlow();
	void ShowDebugBornLandFlow();
	void ShowConfirmDialogOfMisKill();
	bool ShouldUpdateHPOnUI();
	bool ShouldShowCorp();
	bool ShouldShowAnchor();
	bool ShouldAutoScopeWhenPeek();
	TEnumAsByte<EShootVertifyRes> ShootCharacterVertify(const struct FBulletHitInfoUploadData& ShootData, const struct FLocalShootHitData& LocalShootHitData, class ASTExtraShootWeapon* Weapon);
	void SetWeaponShootType(TEnumAsByte<ESTEWeaponShootType> shootType);
	void SetViewTargetAgainForOB();
	void SetThrowGrenadeMode(TEnumAsByte<EThrowGrenadeMode> ThrowMode);
	void SetRTNoDamageTimer(float Timer);
	void SetReloadMethod(TEnumAsByte<EWeaponReloadMethod> reloadMethod, class ASTExtraShootWeapon* ShootWeapon);
	void SetPawnStateDisabled(EPawnState PawnState, bool bNewDisabled);
	void SetPawnReloadWeaponFinished(bool IsFinished);
	void SetIsAutoFollow(bool Val, class ASTExtraBaseCharacter* IFollowWho);
	void SetHighWalkSpeed(float WalkSpeed);
	void SetHealthSafety(float NewHealth, TEnumAsByte<ERecoveryReasonType> Reason);
	void SetHandFoldRatio(int Ratio);
	void SetExitingParachute(bool ExitParachute);
	void SetEnterSnowArea(bool IsEnterSnowArea);
	void SetDelayStateSwitchTime(float DelayTime);
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);
	void SetComponentsActive(class UClass* ComponentClass, bool IsActive);
	void SetCheatSpeedModifier(float NewModifier);
	void SetChangeWearingPromptEnable(bool bShow);
	void SetAntidoteMaxTime(float MaxTime);
	void SetAntidoteExeTime(float ExeTime);
	void SetAnimParamIsRescueing(bool Val);
	void SetAnimParamIsNearDeathStatus(bool Val);
	void SetAnimParamCallingForRevival(bool bIsCalling);
	void SetAnimMontagePlayRate(class UAnimMontage* AnimMontage, float InPlayRate);
	void SetAmbientRTPC(const struct FString& RTPC, float Value);
	void ServerUpdateShovelingHoldState(bool ishold);
	void ServerTriggerJump();
	void ServerSetPoisonSmogStage(int SmogStage);
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);
	void ServerSetPeekCollision(bool HasCollision);
	void ServerSetPawnStateDisabled(EPawnState PawnState, bool bNewDisabled);
	void ServerSetMovementState(const struct FVector& Input);
	void ServerSendToLobbyServerUseItem(int ItemID, int count);
	void ServerResponseInvite(class ASTExtraPlayerState* SomeOne, EInviteResponceType res, bool NotAllowInvitedLater);
	void ServerRequestPaintDecal(int DecalId, const struct FPlayerDecalData& DecalData);
	void ServerNightVisionUse(bool bUse);
	void ServerInviteTeammate(TArray<struct FString> Names);
	void ServerHandleBulletHitData(class ASTExtraWeapon* OwnerWeapon, struct FBulletHitInfoUploadData* Data);
	void ServerFollowTeammate(const struct FString& Name);
	void ServerEndZombieModePropSkill();
	void ServerChangeThrowGrenadeMode(TEnumAsByte<EThrowGrenadeMode> ThrowMode);
	void ServerCancelFollow();
	void SendServerMoveToClientUnreliaby(float TimeStamp, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Velocity);
	void SendClientMoveToServerUnreliaby(float TimeStamp, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Velocity);
	void SendClientMoveToServerReliaby(float TimeStamp, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Velocity);
	TArray<struct FSearchedTombBoxAndWrapperListResult> SearchTombBoxes();
	TArray<struct FSearchedPickUpItemResult> SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);
	void Scoping(TEnumAsByte<ESTEScopeType> NewType);
	void ScopeOut(TEnumAsByte<ESTEScopeType> NewType);
	void ScopeInterrupt(TEnumAsByte<ESTEScopeType> NewType);
	void ScopeIn(TEnumAsByte<ESTEScopeType> NewType);
	void SaveMeshUpdateFlag();
	void S2C_InterruptState(int stateID, int InterruptedBy);
	void RspSetInteractionEmoteSender(class ASTExtraBaseCharacter* Sender);
	void RspPlayInteractionEmote(int EmoteId);
	void RspClientSureLeaveVehicle(bool bCanLeave);
	void RPC_Server_UseZombieModeSkill();
	void RPC_Server_TriggerEntryEvent(EUTSkillEntry EntryEvent);
	void RPC_Server_SwitchWeapon(TEnumAsByte<ESurviveWeaponPropSlot> Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);
	void RPC_Server_SwitchSkillProp(int SkillPropID);
	void RPC_Server_SwapMainWeapon();
	void RPC_Server_SpawnAndSwitchToGrenade(const struct FName& SpesificLogicGrenadeSlot);
	void RPC_Server_SetHandFoldRatio(int Ratio);
	void RPC_Server_EnableCurrentWeaponInfiniteBullets(bool bEnable);
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();
	void RPC_ReliableOwnerClientDie(float Damage, const struct FDamageEvent& DamageEvent, class APawn* DamageInstigatorPawn, float CurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);
	void RPC_CollideByTeamMate(class ASTExtraBaseCharacter* pOtherChar);
	void RPC_Client_SwitchWeapon(TEnumAsByte<ESurviveWeaponPropSlot> Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);
	void RPC_Client_SwapMainWeapon();
	void RPC_Client_SpawnAndSwitchToGrenade(const struct FName& SpesificLogicGrenadeSlot);
	void RPC_Client_ShowZombieModeSkillCD(int InCDType, float InSkillInUseCD, float InNextUseCD);
	void RPC_Client_ShootVertifyRes(TEnumAsByte<EShootVertifyRes> VertifyRes, const struct FBulletHitInfoUploadData& HistoryShootData, const struct FCharacterHistoryData& HistoryChData, const struct FVector& ServerVictmPos);
	void RPC_Client_SetReloadCurWeapon(class ASTExtraWeapon* Weapon);
	void RPC_Client_ResetWeaponSlot();
	void RPC_Client_ReportPlayerKillFlow(class ASTExtraBaseCharacter* killedPlayer);
	void RPC_Client_OnSkillPropCountChanged(int SkillPropID);
	void RPC_Client_OnDeathStopRecordingNotify(const struct FName& SpectatorName, bool bSpectatorIsAI, bool bForce);
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, const struct FName& CauserName);
	void RPC_Client_MarkPlayersOnUI(TArray<struct FPlayerPosMarkerParam> PlayerMarkersParam);
	void RPC_Client_EnableCurrentWeaponInfiniteBullets(bool bEnable);
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();
	void RPC_Client_ChangeRectiftAvatar(EAvatarSlotType InSlotType, int InItemID, bool bWear);
	void RestoreMeshUpdateFlag();
	void ResponceInvite(class ASTExtraPlayerState* SomeOne, EInviteResponceType res, bool NotAllowInvitedLater);
	void ResetValueLimitForHealthPredict();
	void ResetCharacterEnergy();
	void ResetCamera();
	void RequestUserCancleRescue();
	void RequestPutOnHalloweenVampireCloth(int ClothItemID, bool bWear);
	bool RequestPaintDecal(int DecalId);
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand);
	void ReqStartPlayEmote(int EmoteIndex);
	void ReqStartChangeWearing();
	void ReqSetInteractionEmoteReceiver(class ASTExtraBaseCharacter* Receiver);
	void ReqPlayInteractionEmote(class ASTExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);
	void ReqInteruptPlayEmote(int EmoteIndex);
	void ReqInteruptChangeWearing();
	void ReqEmotePlayFinished(int EmoteIndex);
	void ReqChangeWearingFinished(int Index);
	void ReqAcceptInteractionEmote();
	void ReportAntiCheatInfo();
	bool ReloadWeaponFilter();
	bool ReloadCurrentWeapon();
	void RegisterPlayerPickUpList();
	void RefreshWeaponOwnerCollision(float CountDown);
	void RefreshPersonPerspective();
	void RefreshPawnVaultTypeServer();
	void RefreshPawnVaultTypeAll(bool isFpsEnable);
	void RefreshMoveAttrModifier();
	void RefreshAvatar(EAvatarSlotType slotType, bool isEquipped, int ItemID);
	void PrintAIPolicyDecisionData();
	void PostGetPlayerAnimation();
	void PlaySwitchSightSound();
	void PlaySwitchFireModeSound();
	void PlaySpecialAmbientSound(class UAkAudioEvent* TargetSound);
	float PlaySlotAnim(class UAnimSequenceBase* AnimSequence, const struct FName& SlotName, float InPlayRate, float blendTime);
	void PlaySelfThrowAwayWeaponSound();
	void PlayPumpkinAvatarEffect(class UParticleSystem* ParticleSystem);
	void PlayPullBoltSound();
	void PlayOperateItemSound(const struct FString& BankName, const struct FString& SoundName);
	void PlayMountAccessoriesSound();
	void PlayMagOUTSound();
	void PlayMagINSound();
	void PlayLocalShellDropFX();
	void PlayLoadBulletSound();
	void PlayFootstepSound(TEnumAsByte<EFootStepState> FootStepState);
	bool PlayerConfirmToRescue();
	void PlayChangeMagazineSound();
	void PlayAmbientSound();
	void PickUpWrapperActor(class AActor* Target, const struct FPickUpItemData& ItemData, int pickCount);
	void PickUpActor(class AActor* Target, int AdditionalParam, int pickCount);
	void PawnVaultStopCPP();
	void PawnVaultStopBluePrint();
	void PawnVaultServerStopCheckCPP();
	void PawnVaultServerStopCheckBluePrint();
	void PawnVaultServerCPP(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& HitPoint, class AActor* WindowActor, const struct FRotator& movedir);
	void PawnVaultServerBluePrint(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& HitPoint, class AActor* WindowActor, const struct FRotator& movedir);
	void PawnVaultAllCPP(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& HitPoint, const struct FRotator& movedir);
	void PawnVaultAllBluePrint(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& StartPos, class AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& HitPoint, const struct FRotator& movedir);
	void PawnLeaveState(EPawnState State);
	bool PawnHasState(EPawnState PawnState);
	bool PawnEnterState(EPawnState State);
	bool PawnAllowState(EPawnState State, bool withLog);
	void OnWeaponEquipmentUpdate();
	void OnUnEquipWeapon();
	void OnUIZombieModeSkillCDShowDelegate(int InCDType, float InSkillInUseCD, float InNextUseCD);
	void OnStopFire();
	void OnStateLeave(EPawnState EnteredState);
	void OnStateEnter(EPawnState EnteredState);
	void OnStartFire(TEnumAsByte<ESTEWeaponShootType> isAuto);
	void OnShowName(bool _IsShow, const struct FString& _Name);
	void OnServerCheckWarnSoundUAV(EUAVCharacterMsgType soundType);
	void OnScopeNotHandFold();
	void OnScopeHandFold();
	void OnRep_ZombieModeSkillPropLevel();
	void OnRep_ZombieModeSkillPropChanged();
	void OnRep_WaterObj();
	void OnRep_VehicleSeatIdx();
	void OnRep_UnmannedVehicleSyncData();
	void OnRep_ThrowGrenadeMode();
	void OnRep_StatusChanged(TEnumAsByte<ECharacterHealthStatus> prevStatus);
	void OnRep_ShowRevivalPointIcon();
	void OnRep_ResetDataOnRespawn();
	void OnRep_ReplicatedParachuteState();
	void OnRep_ReplicatedMoveState();
	void OnRep_ReplicatedIsStartParachute();
	void OnRep_RemainUseSupplySpotTimes();
	void OnRep_RemainUseEnhancerSpotTimes();
	void OnRep_PoseStateNotify(TEnumAsByte<ESTEPoseState> LastState);
	void OnRep_PoisonFogStageChange();
	void OnRep_PlayerKey();
	void OnRep_PeekHasCollision();
	void OnRep_MoneyNotify();
	void OnRep_KillTipsNotify();
	void OnRep_IsRescueingOtherStatusChange();
	void OnRep_IsInvincible();
	void OnRep_IsFPPChanged();
	void OnRep_IsBeingRescuedStatusChange();
	void OnRep_HealthPredict();
	void OnRep_Health();
	void OnRep_HandFolderRatio();
	void OnRep_FollowState();
	void OnRep_EnergyChange();
	void OnRep_DisabledPawnStates();
	void OnRep_CurrentVehicle(class ASTExtraVehicleBase* LastVehicle);
	void OnRep_CurrentStates(uint64_t prevStates);
	void OnRep_CharacterFallingVelocityZFactor();
	void OnRep_ChangeHalloweenVampireCloth();
	void OnRep_BreathAmmountChange();
	void OnRep_bNightVisionUseTest();
	void OnRep_bNightVisionUse();
	void OnRep_bIsCallingForRevival();
	void OnRep_AntidoteMaxTimeSync();
	void OnRep_AntidoteExeTimeSync();
	void OnRep_AnchorPlat();
	void OnRep_AKEventNotify();
	void OnPoseStateChange(TEnumAsByte<ESTEPoseState> LastState, TEnumAsByte<ESTEPoseState> CurState);
	bool OnPlayEmote(int EmoteId);
	void OnOpenDoor(class APUBGDoor* door, int doorState);
	void OnNotifyHurt();
	void OnLeaveStateInChangeWearing(EPawnState HasLeavedState);
	void OnLeaveStateForBp(EPawnState State);
	void OnInterruptCurrentEmote();
	void OnInterruptChangeWearing();
	void OnHealthChangeFromRPC(float InHealth);
	void OnFollowStateChange();
	void OnEquipWeapon(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	void OnEnterStateInChangeWearing(EPawnState HasEnteredState);
	void OnEnterStateForBp(EPawnState State);
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);
	void OnEndChangeWearing(int StopReason);
	void OnDetectPaintDecalTarget(bool bStart);
	void OnCurEquipedShootWeaponChangeState(TEnumAsByte<EFreshWeaponStateType> LastState, TEnumAsByte<EFreshWeaponStateType> State);
	void OnChangeWearingAnimFinishedEvent(int Reason);
	bool OnChangeWearing(int Index);
	void OnBPMoneyChange();
	void OnBPIsInvincibleChange();
	void OnBPHealthChange();
	void OnBeforeGetUp();
	void OnAsyncLoadEmoteAnim();
	void OnAsyncLoadChangeWearingAnim();
	void OnActorHitHandle(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void NM_SetPeekState(bool Enable, bool IsLeft);
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand);
	void MulticastStartPlayEmote(int EmoteIndex);
	void MulticastStartChangeWearing();
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);
	void MulticastInteruptPlayEmote(int EmoteIndex);
	void MulticastInteruptChangeWearingOnServer();
	void MulticastInteruptChangeWearing();
	bool Montage_IsPlaying(class UAnimMontage* AnimMontage);
	void MeleeServer();
	void MeleeReleased();
	void MeleeLocal();
	void MeleeBroadcastOtherClients();
	void Melee(bool IsForCE);
	void LogWeaponsDataInWeaponManagerAndBackpack();
	void LocalUnEquipWeapon(class ASTExtraWeapon* Weapon);
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);
	bool LocalStartPlayEmote(int EmoteIndex);
	bool LocalStartChangeWearing();
	bool LocalInteruptPlayEmote(int EmoteIndex);
	bool LocalInteruptChangeWearing();
	void LocalEquipWeapon(class ASTExtraWeapon* Weapon, TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	void LevaveFire(class ASTExtraShootWeapon* OwnerShootWeapon);
	void LeaveState(EPawnState State);
	void LeaveServerState(EPawnState State);
	void LeaveBattleState();
	bool IsWeaponOwnerLocallyControlled();
	bool IsValidPuzzleElementTarget(struct FHitResult* OutHitResult, struct FVector* OutStart, struct FVector* OutEnd);
	bool IsValidPaintDecalTarget_Simple();
	bool IsValidPaintDecalTarget(EPaintDecalTargetValidationType* OutvalidationType, struct FVector* OutStart, struct FVector* OutEnd);
	bool IsUsingGrenade();
	bool IsSameTeamWithPlayerState(class APlayerState* otherPS);
	bool IsSameTeamWithLocal();
	bool IsSameTeam(class APawn* Other);
	bool IsReplayViewTarget();
	bool IsProneMove();
	bool IsPawnStateDisabled(EPawnState State);
	bool IsOnVehicleNotUAV();
	bool IsOnVehicle();
	bool IsNowUpWater();
	bool IsNearDeath();
	bool IsLocalViewed();
	bool IsLocalControlorView();
	bool IsInFlyingTeam();
	bool IsInEditor();
	bool IsHealthyAlive();
	bool IsHandleInFold();
	bool IsGunADS();
	bool IsForbidDriveSnowBoard();
	bool IsFirstPerson();
	bool IsExitingParachute();
	bool IsEnableBulletFlySound();
	bool IsDetectingPaintDecalTarget();
	bool IsDeathPlayViewTarget();
	bool IsClient_WeaponOwner();
	bool IsCharacterSprinting();
	bool IsChangeWearingState();
	bool IsCanDriveSnowBoard();
	bool IsBattleState();
	bool IsAngledSight();
	bool IsAllowScopeIn();
	bool IsAlive();
	void InviteTeammate(TArray<struct FString> Names);
	void InsertDelayStateRelation(EPawnState OldState, EPawnState NewState);
	void InitCharacterSkillList();
	void InitBodyBoneMap();
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);
	void HidePlayerMagOnGunReload();
	void HideNightVisionFrame();
	bool HasState(EPawnState State);
	void HandleWeaponShootLost();
	void HandleWeaponOnShoot();
	void HandleUnmannedVehicleControlAnimLoadFinished(TEnumAsByte<ECharacterVehicleAnimType> InAnimType, class ASTExtraVehicleBase* Vehicle, float PlayRate);
	void HandleStartFireDelegate(class ASTExtraShootWeapon* OwnerShootWeapon);
	void HandleShootDelegate(class ASTExtraShootWeapon* OwnerShootWeapon);
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, EBattleItemOperationType ItemOperation);
	void HandlePlayerWeaponChangeState(TEnumAsByte<EFreshWeaponStateType> WeaponStateType);
	void HandlePlayerPoseChanged(TEnumAsByte<ESTEPoseState> LastPose, TEnumAsByte<ESTEPoseState> NewPose);
	void HandlePlayerPickUpActor(class AActor* WrapperActor, float TargetZLoc);
	void HandleOpenPickUpBoxAction();
	void HandleOnCharAnimLoadingFinished();
	void HandleMoveAntiShootVerifyMiss();
	void HandleConsumeItemSkillBreak();
	void HandleBulletHitEvent(class AActor* ImpactActor, const struct FVector& ImpactPoint);
	void HandleAutoSwitchWeaponDelay();
	void GrenadeBackToWeaponServerCall();
	void GMTestZengzuo();
	void GMShowName();
	class AActor* GetWeaponUserConst();
	float GetWeaponOwnerPawnHealth();
	class UWeaponManagerComponent* GetWeaponManager();
	struct FRotator GetViewRotation();
	class UPlayerVaultComponent* GetVaultComponent();
	float GetValueLimitForHealthPredict();
	struct FVector GetUIHelmetPosition();
	EUAVUseType GetUAVState();
	TEnumAsByte<EThrowGrenadeMode> GetThrowGrenadeMode();
	int GetTeamMateIndex(class ASTExtraBaseCharacter* Teammate);
	TArray<int> GetSkillIdListByCharaSkillID(TArray<int> CharSkillTableIDList);
	struct FString GetShootWeaponNameByWeapon(int ItemDefineID);
	TEnumAsByte<ENetRole> GetRole();
	class ASTExtraVehicleBase* GetRelevantVehicleInReady();
	int GetRedClothIDByEmote(int EmoteIndex);
	struct FVector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);
	void GetPumpkinAvatar(int ID, class UParticleSystem* ParticleSystem);
	class UBoxComponent* GetProneShapeComponent();
	TEnumAsByte<ESTEWeaponShootType> GetPlayerWeaponFireMode();
	TEnumAsByte<ESurviveWeaponPropSlot> GetPlayerWeaponEquipSlot();
	struct FAnimVehParamList GetPlayerVehAnimParam(float DeltaTime);
	struct FPlayerVehAnimList GetPlayerVehAnimation();
	int GetPlayerTeamIndex();
	class ASTExtraPlayerState* GetPlayerStateSafety();
	class ASTExtraPlayerState* GetPlayerState();
	struct FString GetPlayerPawnCollisionInfo();
	struct FString GetPlayerNameSafety();
	TEnumAsByte<ECharacterJumpType> GetPlayerJumpType();
	class ASTExtraPlayerController* GetPlayerControllerSafety();
	class ASTExtraPlayerController* GetPlayerControllerInReplay();
	class ASTExtraPlayerController* GetPlayerControllerInDeathReplay();
	struct FAnimParamList GetPlayerAnimParam(float DeltaTime);
	struct FPlayerAnimData GetPlayerAnimationByEventType(TEnumAsByte<ECharAnimEventType> AnimEventType);
	struct FPlayerAnimList GetPlayerAnimation();
	int GetNearTeamPlayerNum();
	class UMoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();
	class ASTExtraBaseCharacter* GetLatestInviter();
	class ASTExtraPlayerState* GetLastInviterPlayerState();
	class ULagCompensationComponentBase* GetLagCompensationComponent();
	bool GetIsPlayingEmote();
	bool GetIsFPP();
	bool GetIsChangeWearing();
	class UPrimitiveComponent* GetHitBoxByState(EPawnState InPoseState);
	EAvatarDamagePosition GetHitBodyTypeByHitPos(const struct FVector& InHitPos);
	EAvatarDamagePosition GetHitBodyTypeByBoneName(const struct FString& InBoneName);
	EAvatarDamagePosition GetHitBodyType(const struct FVector& InHitPos, const struct FVector& InImpactVec, const struct FString& InBoneName);
	struct FVector GetHeadLocation(bool bUseHeadBone);
	int GetHandFolderRatio();
	struct FVector GetGunOwnerHeadLocation();
	struct FString GetGrenadeNameByGrenadeType(TEnumAsByte<EGrenadeType> grenadeType);
	class UBaseFPPComponent* GetFPPComp();
	struct FVector GetFollowerLocOffset(class ASTExtraBaseCharacter* follower);
	struct FVector GetFollowerLoc(class ASTExtraBaseCharacter* follower);
	float GetFinalDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	class UBackpackEmoteHandle* GetEmoteHandle(int ItemID);
	struct FString GetEmote(int ItemDefineID);
	class ASTExtraWeapon* GetCurrentWeapon();
	class ASTExtraVehicleBase* GetCurrentVehicle();
	uint64_t GetCurrentStatesInterface();
	class ASTExtraShootWeapon* GetCurrentShootWeapon();
	class ASTExtraWeapon* GetCurrentShieldWeapon();
	TEnumAsByte<EHitPartJugementType> GetCurHitPartJugementType();
	struct FString GetCorpName();
	class AController* GetControllerSafety();
	float GetCharacterXYPlaneVelocity();
	ECharacterSubType GetCharacterSubType();
	ECharacterMainType GetCharacterMainType();
	struct FCharacterEnergyData GetCharacterEnergy();
	class UUAECharacterAnimListComponent* GetCharacterAnimComponent();
	class UCapsuleComponent* GetCapsuleComponentInterface();
	struct FRotator GetCachedControlRotation();
	float GetBodyhurtDamage(float Damage, const struct FDamageEvent& DamageEvent, bool* IsHeadShot, EAvatarDamagePosition* OutHitPos);
	class UCharacterAvatarComponent2* getAvatarComponent2();
	float GetAnimMontagePlayRate(class UAnimMontage* AnimMontage);
	float GetAdjustDurabilityReduce(float DurabilityReduce, EAvatarDamagePosition HitPos);
	class USpringArmComponent* GetActiveSpringArm();
	void GeneratePlayerBackpackWrappersToGround();
	void FpsPawnVaultToServer(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, const struct FRotator& movedir, float blobkthick);
	void FpsPawnVaultToAll(const struct FVector& StartPos, const struct FVector& topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, const struct FRotator& movedir, float blobkthick);
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);
	void ForceSwitchWeaponBySlotOnServer(TEnumAsByte<ESurviveWeaponPropSlot> Slot, bool bUseAnimation);
	void ForcePlayerUpdateAnimation();
	void ForceDestroyWeaponInventoryAndClearData(bool bKeepOnPlaneItems);
	void ForceCorrectClient(const struct FVector& Postion, const struct FRotator& Rotation, const struct FVector& Velocity);
	void FollowTeammate(const struct FString& Name);
	EPawnState FindBuffRelatedPawnState(const struct FName& _buffName);
	void FillPlayerAnimRate(struct FPlayerAnimList* InAnimList);
	void ExecFollowTeammate(const struct FString& Name);
	void EquipZoomScope(int WeaponID, int ScopeID);
	void EquipWeaponFinish();
	void EquipWeapon(TEnumAsByte<ESurviveWeaponPropSlot> Slot, bool bSwitchWeapon);
	bool EnterState(EPawnState State);
	void EnterServerState(EPawnState State);
	void EnterFire();
	void EnterBattleState();
	void EnableCurrentWeaponInfiniteBullets(bool bEnable);
	bool EmoteAnimFinishedSuccessfully();
	void DoPuzzleActorTickable(bool bStart);
	void DoDetectPaintDecalTarget(bool bStart);
	void DisappearOnDeath();
	void DettachWeapon();
	bool DestroyWeaponOnServerByPropSlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot, bool bEnableBroadcast);
	bool DestroyWeaponOnServer(const struct FName& LogicSocket, bool bEnableBroadcast);
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();
	void DelayMoveEnd();
	void DelayMove(float Time);
	void DelayHidden();
	void DelayCustomDepth(float Time);
	void DelayChangeRectiftAvatar(float InDelayTime, EAvatarSlotType InSlotType, int InItemID, bool bWear);
	bool CurrentStateHas(EPawnState State);
	class UCapsuleComponent* CreateCapsuleComponentForDeltaRotation(EDeltaRotationTest Why);
	TEnumAsByte<ECharacterAnimType> ConvertWeaponSlotToCharacterAnimType(TEnumAsByte<ESurviveWeaponPropSlot> WeaponSlot);
	TEnumAsByte<ECharacterAnimType> ConvertWeaponFireModeToWeaponAnimType(TEnumAsByte<ESTEWeaponShootType> FireMode);
	TEnumAsByte<ECharacterPoseType> ConvertCharacterPoseStateToPoseType(TEnumAsByte<ESTEPoseState> InPoseState);
	void ClientSyncServerTagsChange(TArray<struct FName> newTags, TArray<struct FName> oldTags);
	void ClientSomeOneResponseMe(const struct FString& BeInvitedName, EInviteResponceType res);
	void ClientSomeOneInviteMe(class ASTExtraPlayerState* SomeOne);
	void ClientSetLeaveVehicleLocation(const struct FVector& LeaveLocation);
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);
	void ClientResponseFeedback(EInviteResponceType res);
	void ClientPlayVehicleOverlapCameraShake();
	void ClientOnPossessBy(class AController* NewController);
	void ClientFeedbackZombiePointDamage(float BaseDamage, const struct FSTPointDamageEvent& PointDamageEvent, class APawn* DamageInstigatorPawn, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const struct FMeleeDamageEvent& MeleeDamageEvent, class APawn* DamageInstigatorPawn, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void ClientBulletLineTrace(const struct FVector_NetQuantize10& BornPos, const struct FVector_NetQuantize10& EndPos, class ASTExtraBaseCharacter* InstigatorCharacter);
	void ClearOnDeath(class AController* EventInstigater, class AActor* DamageCauser);
	void ClearHPUI();
	void ClearClientJump();
	bool CheckWeaponIsCurUsingWeapon(class ASTExtraWeapon* CurWeapon);
	bool CheckPlayerNeedUpdateAnimation(unsigned char* OutForceUpdateFlag);
	void CheckNeedReload(class ASTExtraShootWeapon* OwnerShootWeapon, class AActor* WeaponOwnerActor);
	bool CheckIsWearingThisCloth(int RedClothID);
	bool CheckCanAutoUseWeapon(class ASTExtraWeapon* Weapon);
	bool CheckBaseIsMoving();
	bool CheckBaseIsMoveable();
	static TEnumAsByte<ECharacterPoseType> CharacterPoseStateToPoseType(TEnumAsByte<ESTEPoseState> InPoseState);
	void CharacterMovementUpdatedCallback(float DeltaTime, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	bool ChangeWearingAnimFinishedSuccessfully();
	void ChangeVehWeaponCameraData(bool Enable);
	void ChangeRectiftAvatar(EAvatarSlotType InSlotType, int InItemID, bool bWear);
	bool CanPaintDecal(int DecalId);
	bool CanGetPumpkinAvatar(int ID);
	bool CanEnterWaterArea(TArray<EPawnState> disallowedState);
	bool CanEnterState(EPawnState NewState);
	bool CanChangeThrowMode();
	void CancelFollow();
	void CalculatePickUpItemFlowInstance();
	void CalculateBornLandThrowGrenade(int ID);
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);
	void BulletLineTrace(const struct FVector& BornPos, const struct FVector& EndPos, class UPrimitiveComponent* meshComp, class AActor* BulletActor);
	void BulletChange();
	void BroadcastOtherClientsDie(class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, const struct FDamageEvent& DamageEvent, bool bIsPointDamage);
	void BroadcastFatalDamageInfoWrapper(class AUAECharacter* Causer, class AUAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int PreviousHealthStatus, class AUAECharacter* WhoKillMe, int KillerKillCount);
	void BroadcastFatalDamageInfo(class AUAECharacter* Causer, class AUAECharacter* VictimName, const struct FClientFatalDamageRecordData& Data);
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const struct FVehicleDamageEvent& VehicleDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, unsigned char RespawnCount);
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const struct FVehicleDamageEvent& VehicleDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const struct FRadialDamageEvent& PointDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, unsigned char RespawnCount);
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const struct FRadialDamageEvent& PointDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const struct FPoisonDamageEvent& PoisonDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, unsigned char RespawnCount);
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const struct FPoisonDamageEvent& PoisonDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const struct FSTPointDamageEvent& PointDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, unsigned char RespawnCount);
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const struct FSTPointDamageEvent& PointDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const struct FMeleeDamageEvent& MeleeDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, unsigned char RespawnCount);
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const struct FMeleeDamageEvent& MeleeDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const struct FFallingDamageEvent& FallingDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, unsigned char RespawnCount);
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const struct FFallingDamageEvent& FallingDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const struct FDrowningDamageEvent& DrowningDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, unsigned char RespawnCount);
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const struct FDrowningDamageEvent& DrowningDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const struct FSTBurningDamageEvent& BurningDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, unsigned char RespawnCount);
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const struct FSTBurningDamageEvent& BurningDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const struct FSTAirAttackRadialDamageEvent& AirAttackDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, unsigned char RespawnCount);
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const struct FSTAirAttackRadialDamageEvent& AirAttackDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, EAvatarDamagePosition HitPosition);
	float BPTakeDamage(float Damage, class AController* EventInstigator, class AActor* DamageCauser, const struct FDamageEvent& DamageEvent);
	void BPResetCharacter();
	void BPReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, float Radius, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& ImpulseDir);
	void BPReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void BPReceiveMeleeDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void BPReceiveDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void BPNotifyStartDying(class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType);
	void BPNotifyDeathEnd(class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType);
	void BPDie(float KillingDamage, class AController* EventInstigator, class AActor* DamageCauser, const struct FDamageEvent& DamageEvent);
	void BP_SetInteractionEmoteSender(class ASTExtraBaseCharacter* Sender);
	void BleStopCurSkill();
	bool BleIsCastingSkill();
	void AutoScopeWhenPeek();
	void AttachWeapon();
	void AsyncAnimOpenDoorCallback(class UAnimationAsset* retAsset);
	bool AllowState(EPawnState State, bool withLog);
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, TEnumAsByte<EShootWeaponShootMode> ShootMode, const struct FVector& SimpleShootTarget);
	void AddOneDamageCauserRecord(class AController* Causer, int HSChangeMargin, const struct FDamageEvent& DamageEvent, bool IsHeadShot, class AActor* DamageCauser);
	void AddMoveOffSet(float Forward, float Right, float Up);
	void AddDamageRecord(class AController* Causer, float Damage, int HSChangeMargin, const struct FDamageEvent& DamageEvent, class AActor* DamageCauser);
};


// Class ShadowTrackerExtra.STExtraBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USTExtraBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBlueprintFunctionLibrary");
		return pStaticClass;
	}


	static struct FRotator Vector2Rotator(const struct FVector& ver);
	static bool TraceGround(class UObject* ContextObject, const struct FVector& AboveGroundLoc, float TraceDeepDis, bool bForceStatic, struct FHitResult* HitInfo);
	static bool TraceBlock(class UObject* ContextObject, const struct FVector& Start, const struct FVector& End, TArray<class AActor*> IgnoreActors, bool bForceStatic, struct FHitResult* HitInfo);
	static bool TraceAllBlocks(const struct FVector& End, class UObject* ContextObject, const struct FVector& Start, bool bForceStatic, TArray<class AActor*> IgnoreActors, struct FHitResult* HitInfo, TArray<struct FHitResult>* OutHits);
	static bool SphereTraceAllObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	static class UParticleSystemComponent* SpawnEmitterLocationWithMgr(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy);
	static class UParticleSystemComponent* SpawnEmitterAttachedWithMgr(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy);
	static class UCustomParticleSystemComponent* SpawnCustomEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy);
	static class UCustomParticleSystemComponent* SpawnCustomEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy);
	static TArray<struct FGameModeCorpsDetailData> SortCorpsByKilledPlayer(TArray<struct FGameModeCorpsDetailData> CorpsInfo);
	static void SetUpPostProcessSetting(class APostProcessVolume* PostProcessVolume, TArray<class UMaterialInstanceDynamic*>* Blends);
	static void SetPostProcessBlendEffectWeightByIndex(class APostProcessVolume* PostProcessVolume, unsigned char Index, float Weight);
	static void SetCollisionResponseForBodies(class USkeletalMeshComponent* SkelMesh, TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse, TArray<struct FName> BodyNames);
	static bool LuaRemoteEventWithObjects(class UObject* WorldContextObject, const struct FString& EventTag, const struct FString& CustomParam, class UObject* TObject01, class UObject* TObject02);
	static bool LuaRemoteEventWithObject(class UObject* WorldContextObject, const struct FString& EventTag, const struct FString& CustomParam, class UObject* TObject);
	static bool LuaRemoteEvent(class UObject* WorldContextObject, const struct FString& EventTag, const struct FString& CustomParam);
	static struct FVector LimitVector(const struct FVector& CurVec, const struct FVector& MaxVec);
	static struct FRotator LimitRotator(const struct FRotator& CurRot, const struct FRotator& MaxRot);
	static bool IsVeryLowMemoryDevice();
	static bool IsSlotHasEquipped(class ACharacter* Character, EAvatarSlotType InSlotType);
	static bool IsSamePlayerState(class AUAEPlayerState* stateA, class AUAEPlayerState* stateB);
	static bool IsPlayerCantBlock(class AActor* DamageCauser, struct FHitResult* HitResult);
	static bool IsHiddenByOtherSlot(class ACharacter* Character, int ItemResID);
	static bool HasTeammateAlive(class ASTExtraPlayerState* PS);
	static bool GetWorldToUIShowLocationRect(class UObject* WorldContextObject, const struct FVector& WorldLocation, const struct FVector4& Limit, const struct FVector2D& UIOffset, struct FVector2D* OutPosition, float* Angle);
	static float GetUIShowLocationAngle(class UObject* WorldContextObject, const struct FVector2D& InPosition, const struct FVector4& Limit);
	static struct FMargin GetUIAdaptation();
	static class UStaticMesh* GetStaticMeshFromString(const struct FString& Name);
	static TArray<class AActor*> GetSphereOverlappingPawns(class UObject* WorldContextObject, float Radius, float CollisionFreeRadius, const struct FVector& Origin, class AActor* DamageCauser, TArray<class AActor*> IgnoreActors, bool DrawVisibleTraceDebugLine);
	static TArray<class AActor*> GetSphereOverlappingActors(class UObject* WorldContextObject, float Radius, float CollisionFreeRadius, const struct FVector& Origin, class AActor* DamageCauser, TArray<class AActor*> IgnoreActors, bool DrawVisibleTraceDebugLine);
	static class USkeletalMesh* GetSkeletalMeshFromString(const struct FString& Name);
	static TArray<class USceneComponent*> GetSceneComponentAttachedChildren(class USceneComponent* SceneComponent);
	static float GetRadialDamageImpulseAtLocation(const struct FVector& Location, class UDamageType* DamageType, const struct FVector& Origin, float Radius);
	static class UQuickSignComponent* GetQuickSignComponentFromController(class AController* Controller);
	static struct FWeightedBlendable GetPostProcessBlendEffectWeightByIndex(class APostProcessVolume* PostProcessVolume, unsigned char Index);
	static class UParticleSystem* GetParticleSystemFromString(const struct FString& Name);
	static class UMaterialInterface* GetMaterialFromString(const struct FString& Name);
	static class ADynamicWeatherMgr* GetDynamicWeatherMgr(class UObject* WorldContextObject);
	static float GetDistanceToPlayer(class UObject* WorldContextObject, const struct FVector& Position, int PlayerIndex);
	static struct FString GetDeviceName();
	static void GetClassByAssetReferenceAsync(const struct FSoftObjectPath& AssetReference, const struct FScriptDelegate& ClassLoadSuccessDelegate);
	static class UClass* GetClassByAssetReference(const struct FSoftObjectPath& AssetReference);
	static class UChatComponent* GetChatComponentFromController(class AController* Controller);
	static class UChatComponent* GetChatComponentFromCharacter(class ACharacter* Character);
	static TArray<class AActor*> GetCapsuleOverlappingActors(class UObject* WorldContextObject, float CapsuleRadius, float CapsuleHalfHeight, const struct FQuat& RotQuat, const struct FVector& Origin, class AActor* DamageCauser, TArray<class AActor*> IgnoreActors, bool DrawVisibleTraceDebugLine);
	static void GetBuildConfiguration(struct FString* Configuration);
	static class UBackpackComponent* GetBackpackComponentFromPawn(class APawn* Character);
	static class UBackpackComponent* GetBackpackComponentFromController(class AController* Controller);
	static class UBackpackComponent* GetBackpackComponentFromCharacter(class ACharacter* Character);
	static void GetAssetByAssetReferenceAsyncWithID(const struct FSoftObjectPath& AssetReference, const struct FScriptDelegate& AssetLoadSuccessDelegate, int resID);
	static void GetAssetByAssetReferenceAsyncWithFuncName(const struct FSoftObjectPath& AssetReference, const struct FScriptDelegate& AssetLoadSuccessDelegate);
	static void GetAssetByAssetReferenceAsync(const struct FSoftObjectPath& AssetReference, const struct FScriptDelegate& AssetLoadSuccessDelegate, bool AtLeastOneFrame);
	static void GetAssetByAssetReferenceAndOneParamAsync(const struct FSoftObjectPath& AssetReference, class UObject* InputParam, const struct FScriptDelegate& AssetLoadSuccessDelegate);
	static class UObject* GetAssetByAssetReference(const struct FSoftObjectPath& AssetReference);
	static struct FString GetAlphaTexturePathByImgPath(const struct FString& imagepath);
	static struct FString GetAlphaSperateMatPathByImagePath(const struct FString& MatPath);
	static TArray<struct FVector> Generate3StageBezierPointsSrcToDst(const struct FVector& Src, const struct FVector& Ctl, const struct FVector& Dst, int Num);
	static bool GasolineCanExplosionApplyDamage(class UObject* WorldContextObject, const struct FApplyRadialDamageParams& ApplyRadialDamageParams);
	static void FlushSlateZBufferWriteState(class UWorld* World);
	static void FilterActorsByNumLimit(const struct FVector& Center, int MaxTargetNum, TMap<class AActor*, struct FHitResult>* OutActors);
	static void EventFunc_Client_OnStartWeakGuidForActor(class AActor* GuidActor, int GuidID);
	static void EventFunc_Client_InfectionOnCloseZombieSelectUI(class UObject* TriggerObj, int CloseCount);
	static void EventFunc_Client_InfectionCloseStageTip(class UObject* TriggerObj);
	static void EventFunc_Client_InfectionCloseFirstTimeTip(class UObject* TriggerObj);
	static void EventFunc_Client_HeavyWeaponCloseFirstTimeTip(class UObject* TriggerObj);
	static float DistanceSqToBox(const struct FVector& Location, const struct FVector& BoxCenter, const struct FRotator& BoxRotation, const struct FVector& BoxExtent, float DeltaTime, bool DebugDraw, class UWorld* World, struct FVector* ClosestPoint);
	static int DiffUTCTime();
	static void DestroyActorWithParam(class AActor* Target, bool bForce, bool bModifyLevel);
	static class UUserWidget* CreateWidgetByPathName(const struct FString& Name, class UObject* ContextObject);
	static bool CreateMyLandscape(class UObject* WorldContextObject, const struct FString& MatPath, const struct FString& GeoPath);
	static bool ComponentIsVisibleFromOrigin(class UPrimitiveComponent* VictimComp, const struct FVector& Origin, class AActor* IgnoredActor, TArray<class AActor*> IgnoreActors, TEnumAsByte<ECollisionChannel> TraceChannel, bool DrawVisibleTraceDebugLine, bool IsConsideringVehicleBlock);
	static bool ComponentIsVisibleFromExplosionWithEndPosition(class UPrimitiveComponent* VictimComp, const struct FVector& Origin, const struct FVector& EndPos, class AActor* IgnoredActor, TArray<class AActor*> IgnoreActors, TEnumAsByte<ECollisionChannel> TraceChannel, bool DrawVisibleTraceDebugLine, bool IsConsideringVehicleBlock);
	static bool ComponentIsVisibleFromExplosion(class UPrimitiveComponent* VictimComp, const struct FVector& Origin, class AActor* IgnoredActor, TArray<class AActor*> IgnoreActors, TEnumAsByte<ECollisionChannel> TraceChannel, bool DrawVisibleTraceDebugLine, bool IsConsideringVehicleBlock);
	static float CalculateKDRatio(int iKillNum, int iDeathNum);
	static bool ApplyRadiusDamageSTEWithMomentum(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, float BaseMomentumMag, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, float CollisionFreeRadius, TMap<TEnumAsByte<EAdditionDamageSubType>, float> AddtionalDamage, bool IsVehicleExplode, bool DrawVisibleTraceDebugLine, float BaseDamageForZombie, float MininumDamageForZombie, int Type, int TypeSpecificID, TEnumAsByte<EDamageType> InDamageType, int MaxTargetNum);
	static bool ApplyRadiusDamageSTEThroughWall(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, float BaseMomentumMag, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, float ThrowWallDamageScale, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, float CollisionFreeRadius, TMap<TEnumAsByte<EAdditionDamageSubType>, float> AddtionalDamage, bool DrawVisibleTraceDebugLine, TEnumAsByte<EDamageType> InDamageType, int MaxTargetNum);
	static bool ApplyRadiusDamageSTE(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, float CollisionFreeRadius, bool DrawVisibleTraceDebugLine);
	static bool ApplyRadialDamage(class UObject* WorldContextObject, const struct FApplyRadialDamageParams& RadialDamageParams);
	static void AddDistributedImpulseAtLocation(class USkeletalMeshComponent* SkelMesh, const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName, float DistriburedImpulseScale);
};


// Class ShadowTrackerExtra.STExtraBuffAction_AdjustSmokePostMat
// 0x0040 (0x01D0 - 0x0190)
class USTExtraBuffAction_AdjustSmokePostMat : public USTExtraBuffAction
{
public:
	class UCurveFloat*                                 CurveAlphaAlongTime;                                      // 0x0190(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 CurveAlphaAlongDistance;                                  // 0x0198(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ResetOnRemove;                                            // 0x01A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01A1(0x0007) MISSED OFFSET
	class UMaterialInterface*                          ParentMaterial;                                           // 0x01A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ShaderUniformName;                                        // 0x01B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x01B8(0x0010) MISSED OFFSET
	class USTScreenAppearanceComponent*                OwnerScreenAppearanceCompCache;                           // 0x01C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_AdjustSmokePostMat");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_AdjustStunPostMat
// 0x0038 (0x01C8 - 0x0190)
class USTExtraBuffAction_AdjustStunPostMat : public USTExtraBuffAction
{
public:
	float                                              FadeInDuration;                                           // 0x0190(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsUseBreathPercentageAsAlpha;                             // 0x0194(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0195(0x0003) MISSED OFFSET
	float                                              FadeOutDuration;                                          // 0x0198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ResetOnRemove;                                            // 0x019C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x019D(0x0003) MISSED OFFSET
	class UMaterialInterface*                          ParentMaterial;                                           // 0x01A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ShaderUniformName;                                        // 0x01A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    DynamicMat;                                               // 0x01B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsUniqueEffect;                                           // 0x01B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x01B9(0x0007) MISSED OFFSET
	class UStaticMeshComponent*                        CameraStaticMeshCom;                                      // 0x01C0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_AdjustStunPostMat");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_Attachment
// 0x0078 (0x0208 - 0x0190)
class USTExtraBuffAction_Attachment : public USTExtraBuffAction
{
public:
	TArray<struct FUTBuffAttachment>                   Attachments;                                              // 0x0190(0x0010) (Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<struct FString, class UParticleSystem*>       DecentParticles;                                          // 0x01A0(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x18];                                      // 0x01F0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_Attachment");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DamageType_BuffDot
// 0x0000 (0x0028 - 0x0028)
class UDamageType_BuffDot : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DamageType_BuffDot");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DamageTargetRate_BuffDot
// 0x0008 (0x0030 - 0x0028)
class UDamageTargetRate_BuffDot : public UDamageType_BuffDot
{
public:
	float                                              Percent;                                                  // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DamageTargetRate_BuffDot");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_Dot
// 0x0038 (0x01C8 - 0x0190)
class USTExtraBuffAction_Dot : public USTExtraBuffAction
{
public:
	float                                              IntervalTime;                                             // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DotValue;                                                 // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                itemType;                                                 // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ItemSpecificID;                                           // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseWeaponDamageType;                                     // 0x01A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               NeedMultiplyDamageForLayer;                               // 0x01A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x01A2(0x0006) MISSED OFFSET
	class UCurveFloat*                                 CurveLayeredDamage;                                       // 0x01A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDamageType_BuffDot*                         DamageType;                                               // 0x01B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DamageTypeClass;                                          // 0x01B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               HasEffectWhenNearDeath;                                   // 0x01C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_Dot");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_DrowningDamage
// 0x0018 (0x01A8 - 0x0190)
class USTExtraBuffAction_DrowningDamage : public USTExtraBuffAction
{
public:
	float                                              IntervalTime;                                             // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DotValue;                                                 // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BreathAmountThrehold;                                     // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x019C(0x0004) MISSED OFFSET
	class UClass*                                      DamageTypeClass;                                          // 0x01A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_DrowningDamage");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_EnableAttrModifier
// 0x0010 (0x01A0 - 0x0190)
class USTExtraBuffAction_EnableAttrModifier : public UUAESkillAction
{
public:
	struct FString                                     AttrConfigItemName;                                       // 0x0190(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_EnableAttrModifier");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_EnterState
// 0x0008 (0x0198 - 0x0190)
class USTExtraBuffAction_EnterState : public UUAESkillAction
{
public:
	EPawnState                                         TargetState;                                              // 0x0190(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0191(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_EnterState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_Invincible
// 0x0008 (0x0198 - 0x0190)
class USTExtraBuffAction_Invincible : public UUAESkillAction
{
public:
	bool                                               RunOnServer;                                              // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0191(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_Invincible");
		return pStaticClass;
	}


	void UndoAction_Internal();
	bool RealDoAction_Internal();
};


// Class ShadowTrackerExtra.STExtraBuffAction_ListenWeaponAttack
// 0x0008 (0x0198 - 0x0190)
class USTExtraBuffAction_ListenWeaponAttack : public USTExtraBuffAction
{
public:
	bool                                               ListenHit;                                                // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ListenLost;                                               // 0x0191(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0192(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_ListenWeaponAttack");
		return pStaticClass;
	}


	void UndoAction_Internal();
	bool RealDoAction_Internal();
	void NotifyHitLost();
	void NotifyHit(float BaseDamage, bool IsHeadShot, const struct FDamageEvent& DamageEvent, const struct FHitResult& HitResult, class AActor* Victim);
};


// Class ShadowTrackerExtra.STExtraBuffAction_Log
// 0x0010 (0x01A0 - 0x0190)
class USTExtraBuffAction_Log : public UUTSkillAction
{
public:
	struct FString                                     LogString;                                                // 0x0190(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_Log");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_PeriodAction
// 0x0010 (0x01A0 - 0x0190)
class USTExtraBuffAction_PeriodAction : public USTExtraBuffAction
{
public:
	class UUTSkillAction*                              Action;                                                   // 0x0190(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Interval;                                                 // 0x0198(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurrentTickDeltaTime;                                     // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_PeriodAction");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_PlayAnimation
// 0x00D0 (0x0260 - 0x0190)
class USTExtraBuffAction_PlayAnimation : public UUTSkillAction
{
public:
	struct FBuffAnimationItem                          BuffAnimations;                                           // 0x0190(0x00A8) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBuffAnimationTagItem                       BuffAnimationTags;                                        // 0x0238(0x0028) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_PlayAnimation");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_SpellSkill
// 0x0008 (0x0198 - 0x0190)
class USTExtraBuffAction_SpellSkill : public UUAESkillAction
{
public:
	int                                                SkillID;                                                  // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EBuffSkillSpellerType>                 SpellerType;                                              // 0x0194(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EBuffSpellerSourceType>                SourceType;                                               // 0x0195(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0196(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_SpellSkill");
		return pStaticClass;
	}


	void StartSkill(class AActor* Speller);
	bool RealDoAction_Internal();
};


// Class ShadowTrackerExtra.STExtraBuffAction_StopMovement
// 0x0000 (0x0190 - 0x0190)
class USTExtraBuffAction_StopMovement : public USTExtraBuffAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_StopMovement");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffApplierComponent
// 0x0068 (0x0178 - 0x0110)
class USTExtraBuffApplierComponent : public UActorComponent
{
public:
	struct FString                                     OverlapCheckComponnentName;                               // 0x0110(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxTargetNum;                                             // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<struct FBuffApplierConditionPair>           BuffConditionArray;                                       // 0x0128(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class ASTExtraCharacter*>                   Targets;                                                  // 0x0138(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                              CheckPeriod;                                              // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	class UShapeComponent*                             OverlapCheckComponnent;                                   // 0x0150(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0158(0x0001) MISSED OFFSET
	bool                                               IsCheckingBlock;                                          // 0x0159(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               IsIgnoreThrower;                                          // 0x015A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               IsIgnoreTeamate;                                          // 0x015B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               IsRemoveBuffWhenOutRange;                                 // 0x015C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bNeedRefreshBuffInRange;                                  // 0x015D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x2];                                       // 0x015E(0x0002) MISSED OFFSET
	struct FVector                                     ServerIsHeadVisibleOffsetForProne;                        // 0x0160(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0xC];                                       // 0x016C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffApplierComponent");
		return pStaticClass;
	}


	void SetIsEnableChecking(bool Enable);
	void OverlapCheckerOneTarget(class AActor* OtherActor);
};


// Class ShadowTrackerExtra.STExtraBuffRandomApplierComponent
// 0x0008 (0x0180 - 0x0178)
class USTExtraBuffRandomApplierComponent : public USTExtraBuffApplierComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0178(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffRandomApplierComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffStatusType_CanMove
// 0x0000 (0x0028 - 0x0028)
class USTExtraBuffStatusType_CanMove : public USTBaseBuffStatusType
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffStatusType_CanMove");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffStatusType_CanAttack
// 0x0000 (0x0028 - 0x0028)
class USTExtraBuffStatusType_CanAttack : public USTBaseBuffStatusType
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffStatusType_CanAttack");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraBuffSystemComponent
// 0x0000 (0x01F8 - 0x01F8)
class USTExtraBuffSystemComponent : public USTBaseBuffSystemComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffSystemComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraDamageActor
// 0x0008 (0x0398 - 0x0390)
class ASTExtraDamageActor : public AActor
{
public:
	bool                                               bCanPlayEff;                                              // 0x0390(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0391(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraDamageActor");
		return pStaticClass;
	}


	void TakeRangeDamage();
	void SetDamageParam(float PlayerInnerHealthDamage, float PlayerOuterHealthDamage, float ZombieInnerHealthDamage, float ZombieOuterHealthDamage, float WallWeakenDamageRatio, float InnerRadius, float OuterRadius);
	void PlayFrontedEffect(const struct FVector& ExplodePos);
	void OnInitialize();
	void OnClientBulleteHitEvent(class AActor* Causer, class AActor* Victim, const struct FVector& HitPos);
	void BroadcastClientEffect(const struct FVector& ExplodePos);
};


// Class ShadowTrackerExtra.STExtraDamageType
// 0x0110 (0x0150 - 0x0040)
class USTExtraDamageType : public UDamageType
{
public:
	TMap<EDamageableGameObjectType, float>             DamageAdditionalRateMap;                                  // 0x0040(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EDamageableGameObjectType, float>             AdditionaAbsoluteDamageMap;                               // 0x0090(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EDamageableGameObjectType, float>             MomentumAbsoluteRateMap;                                  // 0x00E0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TEnumAsByte<EDamageType>                           STExtraDamageType;                                        // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	int                                                STExtraDamageAdditionalParam;                             // 0x0134(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsCanDamageSelf;                                          // 0x0138(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	float                                              DamageScaleOfSelf;                                        // 0x013C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsCanDamageTeammate;                                      // 0x0140(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	float                                              DamageScaleOfTeammate;                                    // 0x0144(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPlayCamersShake;                                         // 0x0148(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0149(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraDamageType");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraDelegateMgr
// 0x00B0 (0x00D8 - 0x0028)
class USTExtraDelegateMgr : public UBlueprintFunctionLibrary
{
public:
	struct FScriptMulticastDelegate                    OnPlayerStateNameChange;                                  // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnHPChange;                                               // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCanRescueOtherChange;                                   // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnRescueingStatusChangeChange;                            // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBreathChange;                                           // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnKilledTips;                                             // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnVehicleHPChange;                                        // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCharacterStateChangeDelegate;                           // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEnterBornIsland;                                        // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCorpsOutGame;                                           // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCorpsJoinGame;                                          // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraDelegateMgr");
		return pStaticClass;
	}


	static class USTExtraDelegateMgr* STExtraDelegateMgrInstance();
};


// Class ShadowTrackerExtra.STExtraDemoNetDriver
// 0x0000 (0x0B68 - 0x0B68)
class USTExtraDemoNetDriver : public UDemoNetDriver
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraDemoNetDriver");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraHouseActor
// 0x0048 (0x04E0 - 0x0498)
class ASTExtraHouseActor : public AUAEHouseActor
{
public:
	TArray<struct FVector>                             itemSpotPosList;                                          // 0x0498(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FBuildingSearchPath>                 searchPathList;                                           // 0x04A8(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FVector>                             cornerPointList;                                          // 0x04B8(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FVector                                     centerPoint;                                              // 0x04C8(0x000C) (Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04D4(0x0004) MISSED OFFSET
	bool                                               isAddInAIList;                                            // 0x04D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraHouseActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraDynamicHouseActor
// 0x0008 (0x04E8 - 0x04E0)
class ASTExtraDynamicHouseActor : public ASTExtraHouseActor
{
public:
	class USceneComponent*                             RootSceneComponent;                                       // 0x04E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraDynamicHouseActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraExplosionEffect
// 0x0028 (0x03B8 - 0x0390)
class ASTExtraExplosionEffect : public AActor
{
public:
	class UParticleSystem*                             FarComplexEffect;                                         // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                             NearSimpleEffect;                                         // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              NearToFarDistance;                                        // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03A4(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               ExplosionSound;                                           // 0x03A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraExplosionEffect");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraExplosiveActor
// 0x0030 (0x03C0 - 0x0390)
class ASTExtraExplosiveActor : public AActor
{
public:
	float                                              BaseDamage;                                               // 0x0390(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinimumDamage;                                            // 0x0394(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageInnerRadius;                                        // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageOuterRadius;                                        // 0x039C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageFreeRadius;                                         // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageFalloff;                                            // 0x03A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DamageTypeClass;                                          // 0x03A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ExplosionEffectTemplate;                                  // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               DrawExplodeVisibleTraceDebugLine;                         // 0x03B8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraExplosiveActor");
		return pStaticClass;
	}


	void Explode(class APawn* InstigatorPawn, class AActor* DamageCauser, TArray<class AActor*> IgnoreActors, const struct FVector& Origin, bool bReplicateToClients);
};


// Class ShadowTrackerExtra.STExtraPetCharacter
// 0x00B0 (0x0C90 - 0x0BE0)
class ASTExtraPetCharacter : public ASTExtraCharacter
{
public:
	TArray<bool>                                       PetStateList;                                             // 0x0BE0(0x0010) (Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<bool>                                       ClientDiffPetStateList;                                   // 0x0BF0(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	float                                              MovementTickInterval;                                     // 0x0C00(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PetStateNum;                                              // 0x0C04(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RelevantCloseTime;                                        // 0x0C08(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPetVisibilityInfo                          PetVisibilityInfo;                                        // 0x0C0C(0x0008) (BlueprintVisible, Net, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FPetLevelInfo                               PetLevelInfo;                                             // 0x0C14(0x0008) (BlueprintVisible, Net, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               PetDrawDebugLine;                                         // 0x0C1C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0C1D(0x0003) MISSED OFFSET
	class ASTExtraBaseCharacter*                       PetOwnerPlayerCharacter;                                  // 0x0C20(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EPetRelevantType>                      PetRelevantType;                                          // 0x0C28(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EPetState>                             CurPetState;                                              // 0x0C29(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0C2A(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPetStateChangeDelegate;                                 // 0x0C30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPetCurExecuteEventDelegate;                             // 0x0C40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPetMontageDelegate;                                     // 0x0C50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPetEventItem*                               CurExecuteEvent;                                          // 0x0C60(0x0008) (BlueprintVisible, ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPetMontageData                             PetCurMontage;                                            // 0x0C68(0x0008) (Edit, BlueprintVisible, Net, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0C70(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPetCharacter");
		return pStaticClass;
	}


	void TriggerPetEvent(class UPetWaitEventInfo* Event);
	void SetPetVisibility(bool visible);
	void SetPetMontage(const struct FPetMontageData& Data);
	void SetCurExecuteEvent(class UPetEventItem* Event);
	bool PetOwnerIsAutonomous();
	void PetOwnerCharacterBecomeValid();
	void PetLeaveState(TEnumAsByte<EPetState> State);
	bool PetHasState(TEnumAsByte<EPetState> State);
	bool PetEnterState(TEnumAsByte<EPetState> ToState);
	void OnRep_PetVisibilityInfo();
	void OnRep_PetStateList();
	void OnRep_PetStateChange();
	void OnRep_PetOwnerCharacter();
	void OnRep_PetCurMontageChange();
	void OnRep_CurExecuteEvent();
	void OnRep_AttachmentReplication();
	void OnOwnerAvatarEquipped(EAvatarSlotType slotType, bool isEquipped, int InItemID);
	void NotifyBpDrawDebugLineChange(bool Draw);
	bool IsAnimLimited(int AnimId);
	TArray<int> GetPetUnlockAnimIds();
	class ASTExtraBaseCharacter* GetPetOwnerCharacter();
	struct FString GetPetAnimLimitePlayerState(int AnimId);
	bool ClientPredictEnterState(TEnumAsByte<EPetState> ToState);
	void BroadcastPetLeaveDisappear();
	void BindDelegateInCpp();
};


// Class ShadowTrackerExtra.STExtraFightPetCharacter
// 0x0020 (0x0CB0 - 0x0C90)
class ASTExtraFightPetCharacter : public ASTExtraPetCharacter
{
public:
	float                                              CurrentTraceDeltaTime;                                    // 0x0C90(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0C94(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<ECollisionChannel>>             TraceTypeConfig;                                          // 0x0C98(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class USimulateSyncSmoothComponent*                PetSimulateSyncSmooth;                                    // 0x0CA8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraFightPetCharacter");
		return pStaticClass;
	}


	void TraceForward();
	class USimulateSyncSmoothComponent* GetSyncSmoothComponent();
};


// Class ShadowTrackerExtra.STExtraPetComponent
// 0x0000 (0x02C0 - 0x02C0)
class USTExtraPetComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPetComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraFightPetComponent
// 0x0010 (0x02D0 - 0x02C0)
class USTExtraFightPetComponent : public USTExtraPetComponent
{
public:
	class ASTExtraBaseCharacter*                       PetOwnerPlayerPawn;                                       // 0x02C0(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraPetCharacter*                        PetPawn;                                                  // 0x02C8(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraFightPetComponent");
		return pStaticClass;
	}


	void OnRep_PetPawn();
	void OnRep_PetOwnerPlayerPawn();
};


// Class ShadowTrackerExtra.STExtraPetController
// 0x0000 (0x0488 - 0x0488)
class ASTExtraPetController : public AAIController
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPetController");
		return pStaticClass;
	}


	void ChangeBehaviorTree(class UBehaviorTree* BTAsset);
};


// Class ShadowTrackerExtra.STExtraFightPetController
// 0x0008 (0x0490 - 0x0488)
class ASTExtraFightPetController : public ASTExtraPetController
{
public:
	float                                              PetBlockDetectionInterval;                                // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PetBlockDetectionSampleCount;                             // 0x048C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraFightPetController");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.FireBalloonMovementComponent
// 0x0040 (0x01E8 - 0x01A8)
class UFireBalloonMovementComponent : public UFloatingPawnMovement
{
public:
	float                                              InitialMaxTarceDist;                                      // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     InitialLocation;                                          // 0x01AC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScriptMulticastDelegate                    OnFireBalloonImpactDelegate;                              // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class AActor*                                      ActorOwner;                                               // 0x01C8(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x18];                                      // 0x01D0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.FireBalloonMovementComponent");
		return pStaticClass;
	}


	void SetSkipUpdate(bool bNewValue);
	void ReceiveOnImpact(const struct FHitResult& Hit, float TimeSlice, const struct FVector& MoveDelta);
	void OnFireBalloonImpactDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	float GetMaxFlyHeight();
};


// Class ShadowTrackerExtra.STExtraFireBalloon
// 0x00C0 (0x0450 - 0x0390)
class ASTExtraFireBalloon : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0390(0x0010) MISSED OFFSET
	class UBoxComponent*                               RootCollision;                                            // 0x03A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                        BalloonMesh;                                              // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFireBalloonMovementComponent*               Movement;                                                 // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MapMarkTypeID;                                            // 0x03B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAddMarkFlag                                       MapMarkFlag;                                              // 0x03BC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0xB];                                       // 0x03BD(0x000B) MISSED OFFSET
	class APawn*                                       Driver;                                                   // 0x03C8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MoveUpValue;                                              // 0x03D0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3C];                                      // 0x03D4(0x003C) MISSED OFFSET
	TEnumAsByte<ELerpInterpolationMode>                MovementSmoothMode;                                       // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	float                                              MovementSmoothAlpha;                                      // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              MoveUpScale;                                              // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bAutoFallOff;                                             // 0x041C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x3];                                       // 0x041D(0x0003) MISSED OFFSET
	float                                              AutoFallOffSpeed;                                         // 0x0420(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                     ControlInputVector;                                       // 0x0424(0x000C) (Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LastControlInputVector;                                   // 0x0430(0x000C) (Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TickInterval;                                             // 0x043C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0440(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraFireBalloon");
		return pStaticClass;
	}


	void SetParachuteServerAuthorized(class APawn* InPawn);
	void SetMoveUpValue(float InMoveUpValue);
	void SetDriver(class APawn* InPawn);
	void OnRep_Driver(class APawn* PrevDriver);
	class APawn* GetDriver();
	bool CanBeDriver(class APawn* InPawn);
	bool BlueprintIsNetRelevantFor(class AActor* RealViewer, class AActor* ViewTarget, const struct FVector& SrcLocation);
};


// Class ShadowTrackerExtra.STExtraFlareGunBullet
// 0x0090 (0x0420 - 0x0390)
class ASTExtraFlareGunBullet : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x0390(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBulletMovementComponent*                    PMComp;                                                   // 0x0398(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*                    ParticleComp;                                             // 0x03A0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CallSuperAirDropHeight;                                   // 0x03A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LifeTime;                                                 // 0x03AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LaunchGravityScale;                                       // 0x03B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Phase1LastTime;                                           // 0x03B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Phase2FallZSpeed;                                         // 0x03B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CallSuperAirSropRadius;                                   // 0x03BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ParticleScaleParamByDistanceToCamera;                     // 0x03C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CallSuccessMsgTipID;                                      // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                TeammateCallSuccessMsgTipID;                              // 0x03C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCallAirDrop;                                            // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ASTExtraShootWeapon*                         OwningShootWeapon;                                        // 0x03E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScriptMulticastDelegate                    OnLaunchBullet;                                           // 0x03E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x28];                                      // 0x03F8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraFlareGunBullet");
		return pStaticClass;
	}


	void SetPhase1ParticleSystemInActive();
	void RPC_Multicast_StartLaunch(const struct FVector& Velocity, float Gravity);
	void RPC_Multicast_EnterPhase2();
	void RPC_Multicast_CanAirDrop();
	void OnBounce(const struct FHitResult& _ImpactResult, const struct FVector& _ImpactVelocity);
	void LaunchBulletDelegate__DelegateSignature();
	void CallAirDropDelegate__DelegateSignature();
};


// Class ShadowTrackerExtra.STExtraFlareGunShootWeapon
// 0x0010 (0x0D30 - 0x0D20)
class ASTExtraFlareGunShootWeapon : public ASTExtraShootWeapon
{
public:
	class UClass*                                      BulletTemplate;                                           // 0x0D20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0D28(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraFlareGunShootWeapon");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraFPPAnimInstance
// 0x0080 (0x0D20 - 0x0CA0)
class USTExtraFPPAnimInstance : public USTExtraAnimInstance
{
public:
	struct FTransform                                  C_FPPWeaponOffset;                                        // 0x0CA0(0x0030) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     C_FPPStandMeshOffset;                                     // 0x0CD0(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_FPPAimOffsetRotateRate;                                 // 0x0CDC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_HoldingGrenade;                                         // 0x0CE0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0CE1(0x0003) MISSED OFFSET
	struct FVector                                     C_FPPWeaponOffset_Location;                               // 0x0CE4(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShouldRotateSpine;                                        // 0x0CF0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_PickupFPPIKFalse;                                       // 0x0CF1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_GripIKTrue_PoseChangeIKTure_ForeGripAnimValid;          // 0x0CF2(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0CF3(0x0001) MISSED OFFSET
	struct FRotator                                    r_C_OwnerRotation_Sub_C_ControlRotation;                  // 0x0CF4(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    r_C_OwnerRotation_Sub_C_ControlRotation_Roll;             // 0x0D00(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               b_Vel500_OR_Vel350Crouch;                                 // 0x0D0C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_CrouchOrProneOrWeaponChargeGUN;                         // 0x0D0D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_WeaponType_NEQ_None_AND_Knife;                          // 0x0D0E(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_WeaponType_NEQ_None_AND_Knife_AND_ChargeGun;            // 0x0D0F(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              f_C_CharacterYawRotateRate_91;                            // 0x0D10(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_MoveVelocityX_Bigger_291;                             // 0x0D14(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_HandleFolderFactor_NEQ_1;                               // 0x0D15(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_JumpAndSprint;                                          // 0x0D16(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_NoAimOffset_Or_JumpAndSprint;                           // 0x0D17(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0D18(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraFPPAnimInstance");
		return pStaticClass;
	}


	struct FAnimParamList CacheParamList(float DeltaSeconds);
};


// Class ShadowTrackerExtra.STExtraGameInstance
// 0x0290 (0x0640 - 0x03B0)
class USTExtraGameInstance : public UUAEGameInstance
{
public:
	struct FScriptMulticastDelegate                    OnUserQualitySettingChanged;                              // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRenderQualitySettings                      renderQualitySettingsLastSet;                             // 0x03C0(0x0003) (NoDestructor, NativeAccessSpecifierPublic)
	struct FRenderQualitySettings                      renderQualitySettingsApplying;                            // 0x03C3(0x0003) (NoDestructor, NativeAccessSpecifierPublic)
	struct FRenderQualitySettings                      renderQualitySettingsInit;                                // 0x03C6(0x0003) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	struct FUserDetailSetting                          UserDetailSetting;                                        // 0x03CC(0x0054) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0420(0x0028) MISSED OFFSET
	bool                                               ExeCmdSwitch;                                             // 0x0448(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               LobbyRenderSwitch;                                        // 0x0449(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               LobbyRenderSwitchLow;                                     // 0x044A(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               LobbyRenderSwitchMid;                                     // 0x044B(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               LobbyRenderSwitchHigh;                                    // 0x044C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x044D(0x0003) MISSED OFFSET
	int                                                iEnableRegionID;                                          // 0x0450(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	TArray<struct FSwitchesInMaps>                     SwitchesInMaps;                                           // 0x0458(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         LobbyBackupRenderSettings;                                // 0x0468(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         LobbyRenderSettingsHigh;                                  // 0x0478(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         LobbyRenderSettingsMid;                                   // 0x0488(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         LobbyRenderSettingsLow;                                   // 0x0498(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         LowFPSBackupRenderSettings;                               // 0x04A8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         LowFPSRenderSettingProfileHigh;                           // 0x04B8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         LowFPSRenderSettingProfileMid;                            // 0x04C8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         MobileHDROpenConfig;                                      // 0x04D8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         MobileHDRCloseConfig;                                     // 0x04E8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         MobileMSAAOpenConfig;                                     // 0x04F8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         Mobile2xMSAAOpenConfig;                                   // 0x0508(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         MobileMSAACloseConfig;                                    // 0x0518(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         MobilePPOpenConfig;                                       // 0x0528(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderItem>                         MobilePPCloseConfig;                                      // 0x0538(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FString>                             RePairDeleteDir;                                          // 0x0548(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRenderStyleParameterInMaps>         RenderStyleParamsInMaps;                                  // 0x0558(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                     ResidentAssets;                                           // 0x0568(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int                                                ModeId;                                                   // 0x0578(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AutoTestTriggle;                                          // 0x057C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x057D(0x0003) MISSED OFFSET
	struct FString                                     AutoTestMissionType;                                      // 0x0580(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     CustomLineStr;                                            // 0x0590(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGamePlayMode                                      GamePlayMode;                                             // 0x05A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x05A0(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FVector2D                                   FOVRange;                                                 // 0x05A4(0x0008) (Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   FOVScreenSizeCullingFactorRange;                          // 0x05AC(0x0008) (Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFOVChanged;                                              // 0x05B4(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               PVENightChangeCullDistance;                               // 0x05B5(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x2];                                       // 0x05B6(0x0002) MISSED OFFSET
	float                                              SwimRotateX;                                              // 0x05B8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      IsCutdownForHighTemp : 1;                                 // 0x05BC(0x0001) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x2B];                                      // 0x05BD(0x002B) MISSED OFFSET
	class UWonderfulRecordingCut*                      WonderfulRecordingCut;                                    // 0x05E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDeathPlayback*                              DeathPlayback;                                            // 0x05F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCompletePlayback*                           CompletePlayback;                                         // 0x05F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObservingReplay*                            ObservingReplay;                                          // 0x0600(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UReplayUIManager*                            ReplayUIManager;                                          // 0x0608(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0610(0x0008) MISSED OFFSET
	class UMaterialInstanceDynamic*                    m_CustomTexMat;                                           // 0x0618(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAntiCheatConfig*                            ACConfig;                                                 // 0x0620(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x10];                                      // 0x0628(0x0010) MISSED OFFSET
	class UFeatureSetCollection*                       FeatureSetCollection;                                     // 0x0638(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraGameInstance");
		return pStaticClass;
	}


	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);
	void UpdateWorldCullDistanceVolumes();
	void TestAyncLoad();
	void SuperBattle();
	void SetWorldDoorCullDistance(int Distance);
	void SetWorldCullDistanceVolumeEnable(const struct FString& Name, int Enable);
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);
	void SetUserSetingShadowQuality(bool bShadow);
	void SetSoundEffectQuality(int Type);
	void SetRenderQuality(const struct FRenderQualitySettings& RenderQualitySettings);
	void SetHZBMobileState();
	void SetFOVScreenSizeCullingFactor(float FOV);
	void SetEnableCullDistanceVolumeOffset(const struct FString& Name, bool Enable);
	void SetEnableCullDistanceVolumeMovable(const struct FString& Name, bool Enable);
	static void SetCustomRouteLine();
	static void SetAutoMissionType();
	void ReSetFOVScreenSizeCullingFactor();
	void RenderForLowFPS();
	void RefuseRenderForLowFPS();
	void QuitGame();
	void PreSetRenderQuality(const struct FRenderQualitySettings& RenderQualitySettings, bool* renderLevelChanged);
	void ModifyAllLandscapeStreamingDistance(int Distance);
	void MakeLevelStreamingDistanceShorterWhenLanded();
	bool isUsingAssumedNameInReplay();
	bool IsSupportTagCulling();
	bool IsSupportSwitchSoundEffectQuality();
	bool IsSupportSwitchRenderLevelRuntime();
	bool IsSupportMSAA();
	bool IsSupportLDR();
	static bool IsSecAutoRunTest();
	bool IsPVENightChangeCullDistance();
	bool IsOpenHDR();
	bool IsIOSOneGigabyteDevice();
	static bool IsGAutomatorTest();
	static bool IsAutoRunTestGamePVEProfile();
	static bool IsAutoRunTestGamePVE();
	static bool IsAutoRunTestGame();
	void GMStandalone(const struct FString& Map);
	class UWonderfulRecordingCut* GetWonderfulRecordingCut();
	bool GetUserSetingShadowQuality();
	int GetUserQualitySettingLevel();
	int GetSoundEffectQuality();
	class UReplayUIManager* GetReplayUIManager();
	struct FRenderQualitySettings GetRenderQualityLastSet();
	struct FRenderQualitySettings GetRenderQualityApplying();
	class UObservingReplay* GetObservingReplay();
	static class USTExtraGameInstance* GetInstance();
	int GetFPSLevel();
	int GetExactDeviceLevel();
	int GetDeviceUpdateVersionFlag();
	struct FString GetDeviceProfilerLevel();
	TEnumAsByte<ESoundEffect> GetDeviceMaxSupportSoundEffect();
	TEnumAsByte<ERenderQuality> GetDeviceMaxSupportLevel();
	int GetDeviceLimit();
	int GetDeviceLevel();
	bool GetDefaultSoundEffectQuality();
	class UDeathPlayback* GetDeathPlayback();
	class UCompletePlayback* GetCompletePlayback();
	static int GetAutoRunTestServerIdx();
	static struct FString GetAutoRunPassWD();
	static struct FString GetAutoRunLuaTest();
	static struct FString GetAutoRunAccount();
	bool GetApplyingShadowQuality();
	struct FString GetActiveDeviceProfile();
	void ExecuteCMD(const struct FString& CMDkey, const struct FString& CMDvalue);
	void EnableStreamingLevelLOD(bool bEnable);
	void DrawMateritalToTexRenderTarget(class UTextureRenderTarget2D* TextureRenderTarget, class UTexture2D* tex1, class UTexture2D* tex2);
	bool DeleteSavedFiles(bool allfilesSaved);
	class UTextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);
	class UTextureRenderTarget2D* CreateCustomTex(class UTexture2D* TexResFirst, class UTexture2D* TexResSecond);
	void AutoActiveLDR();
	void ActiveStyle_PPForDynamicRender(TEnumAsByte<ERenderDynamicStyle> Type);
	void ActiveStyle_PP(TEnumAsByte<ERenderStyle> Level);
	void ActiveStyle_ACESForDynamicRender(TEnumAsByte<ERenderDynamicStyle> Type);
	void ActiveStyle(TEnumAsByte<ERenderStyle> Level);
	void ActiveNightVision(bool bSet);
	void ActiveMSAA(bool bOpenMSAA);
	void ActiveDynamicStyle(bool bSet, TEnumAsByte<ERenderDynamicStyle> Type);
};


// Class ShadowTrackerExtra.STExtraGameMode
// 0x0058 (0x10A0 - 0x1048)
class ASTExtraGameMode : public AUAEGameMode
{
public:
	float                                              PlaneFlyHeight;                                           // 0x1048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlaneStartDistance;                                       // 0x104C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlaneFlySpeed;                                            // 0x1050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlaneFlyPathRandomRadius;                                 // 0x1054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HaveToJumpDistance;                                       // 0x1058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PrachuteHaveToOpeningHeight;                              // 0x105C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ParachuteHaveToLandHeight;                                // 0x1060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x1064(0x0004) MISSED OFFSET
	struct FString                                     MapName;                                                  // 0x1068(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x28];                                      // 0x1078(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraGameMode");
		return pStaticClass;
	}


	void OnGameEnd();
};


// Class ShadowTrackerExtra.STExtraGameplayStatics
// 0x0000 (0x0028 - 0x0028)
class USTExtraGameplayStatics : public UGameplayStatics
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraGameplayStatics");
		return pStaticClass;
	}


	static void UnloadWeatherStreamLevel(class UObject* WorldContextObject);
	static void StopSyncSound(class AActor* pSouceActor);
	static void StopAkEvent(int AkEventID, class UObject* WorldContextObject);
	static float STApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);
	static void SetWetness(float Wetness);
	static void SetScreenSizeModifier(bool bActive, const struct FVector2D& Center, float Radius, float ScreenSizeFactor);
	static void PostSyncAkEvent(int AkEventID, class AActor* pSouceActor, const struct FVector& AkLocation, bool IsFireSound);
	static bool IsShipping();
	static bool IsActorInWater(class AActor* Actor, float* OutWaterHeight);
	static void ClientFlushDebugStrings();
	static void ClientDrawDebugString(const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	static void ClientDrawDebugSphere(const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void ClientDrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
	static void ClientDrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void ClientDrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void ClientDrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness);
	static void ClientDrawDebugConeInDegrees(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void ClientDrawDebugCone(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void ClientDrawDebugCircle(const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);
	static void ClientDrawDebugCapsule(const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void ClientDrawDebugBox(const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness);
	static void ClientDrawDebugArrow(const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness);
};


// Class ShadowTrackerExtra.STExtraGameSession
// 0x0170 (0x0518 - 0x03A8)
class ASTExtraGameSession : public AGameSession
{
public:
	unsigned char                                      UnknownData00[0x170];                                     // 0x03A8(0x0170) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraGameSession");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraGlobalData
// 0x0010 (0x0038 - 0x0028)
class USTExtraGlobalData : public UBlueprintFunctionLibrary
{
public:
	struct FGM                                         GMData;                                                   // 0x0028(0x0004) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TEnumAsByte<EGameMap>                              GameMap;                                                  // 0x002C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsUpdateRCityWeather;                                    // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002E(0x0002) MISSED OFFSET
	float                                              FPPDeafultFov;                                            // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               HadPlayedSplash;                                          // 0x0034(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0035(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraGlobalData");
		return pStaticClass;
	}


	static class USTExtraGlobalData* STExtraGlobalDataInstance();
	struct FString CurVersionNumber();
};


// Class ShadowTrackerExtra.STExtraGMDelegatesMgr
// 0x0080 (0x00A8 - 0x0028)
class USTExtraGMDelegatesMgr : public UBlueprintFunctionLibrary
{
public:
	struct FScriptMulticastDelegate                    NotifyGameEnterFightDelegate;                             // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    NotifyGameEnterFinishDelegate;                            // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    InitGameModeProbeDelegate;                                // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    UninitGameModeProbeDelegate;                              // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerEscapeDelegate;                                   // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnReceivedAICAddDelegate;                                 // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerRespawnedDelegate;                                // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnPlayerRealExitDelegate;                                 // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraGMDelegatesMgr");
		return pStaticClass;
	}


	static class USTExtraGMDelegatesMgr* GetInstance();
};


// Class ShadowTrackerExtra.STExtraGrenadeBase
// 0x00B0 (0x0480 - 0x03D0)
class ASTExtraGrenadeBase : public AUAEProjectile
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x03D0(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.STExtraGrenadeBase.ExplosionTemplate
	unsigned char                                      UnknownData01[0x28];                                      // 0x03F8(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.STExtraGrenadeBase.ExplosionTemplateInAir
	unsigned char                                      UnknownData02[0x28];                                      // 0x0420(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.STExtraGrenadeBase.ExplosionTemplateInWater
	struct FItemDefineID                               ItemDefineID;                                             // 0x0448(0x0018) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      ExplosionTemplateClass;                                   // 0x0460(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                      ExplosionTemplateInAirClass;                              // 0x0468(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                      ExplosionTemplateInWaterClass;                            // 0x0470(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0478(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraGrenadeBase");
		return pStaticClass;
	}


	void SpawnExplosionEffect(const struct FVector& Location);
	void MulticastSpawnExplosionEffect(const struct FVector& Location);
	bool IsInWater();
	bool IsFoor();
	bool IsAttachToMovementPlatform();
	void HandleLoadExplosionEffectFinished();
	void CheckUAVNofitySoundTips(const struct FVector& Location);
	void AttachToMovementPlatform();
};


// Class ShadowTrackerExtra.STExtraHelicopterVehicle
// 0x02D0 (0x1310 - 0x1040)
class ASTExtraHelicopterVehicle : public ASTExtraVehicleBase
{
public:
	class UCameraComponent*                            CameraComponent;                                          // 0x1040(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHelicopterTorqueCurveFloat>         ForWardTorqueCurveList;                                   // 0x1048(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x1058(0x0008) MISSED OFFSET
	TArray<struct FHelicopterTorqueCurveFloat>         RightTorqueCurveList;                                     // 0x1060(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x1070(0x0008) MISSED OFFSET
	class UCurveFloat*                                 IdleForwardTorqueCurveFloat;                              // 0x1078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IdleForwardCountTime;                                     // 0x1080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x1084(0x0004) MISSED OFFSET
	class UCurveFloat*                                 IdleRightTorqueCurveFloat;                                // 0x1088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IdleRightCountTime;                                       // 0x1090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0xC];                                       // 0x1094(0x000C) MISSED OFFSET
	class UParticleSystemComponent*                    TopWingsEfeect;                                           // 0x10A0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    BackWingsEfeect;                                          // 0x10A8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    DustEffect;                                               // 0x10B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    WaterDustEffect;                                          // 0x10B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    SandDustEffect;                                           // 0x10C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    GrassDustEffect;                                          // 0x10C8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    SnowDustEffect;                                           // 0x10D0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*                    WaterPlaneEffect;                                         // 0x10D8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       TopWingsBoneName;                                         // 0x10E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FName                                       BackWingsBoneName;                                        // 0x10E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              CrashHeight;                                              // 0x10F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              OnLandHeight;                                             // 0x10F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              IdleSpeed;                                                // 0x10F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              WingAccelerateMaxTime;                                    // 0x10FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              showWaterPlaneffectHeight;                                // 0x1100(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              WaterPlaneffectHeigh;                                     // 0x1104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x10];                                      // 0x1108(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData05[0x28];                                      // 0x1108(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.STExtraHelicopterVehicle.HelicopterDestoryMeshAssetRef
	unsigned char                                      UnknownData06[0x88];                                      // 0x1140(0x0088) MISSED OFFSET
	class UAkAudioEvent*                               Sfx_Start_Local;                                          // 0x11C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_Stop_Local;                                           // 0x11D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_Start_Remote;                                         // 0x11D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_Stop_Remote;                                          // 0x11E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x70];                                      // 0x11E8(0x0070) MISSED OFFSET
	class UAkAudioEvent*                               Sfx_Helicopter_Topsloop_local;                            // 0x1258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_Helicopter_Topsloop_Remote;                           // 0x1260(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_Helicopter_TopsloopStop_local;                        // 0x1268(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_Helicopter_TopsloopStop_Remote;                       // 0x1270(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_Helicopter_burning;                                   // 0x1278(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_Helicopter_burningStop;                               // 0x1280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x70];                                      // 0x1288(0x0070) MISSED OFFSET
	float                                              CrashMinSin;                                              // 0x12F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoFuelJumpHeight;                                         // 0x12FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x10];                                      // 0x1300(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraHelicopterVehicle");
		return pStaticClass;
	}


	void UpdateEngineStateByFuel(bool isStart);
	void SetParticleSystem(class UParticleSystemComponent* topwings, class UParticleSystemComponent* backwings, class UParticleSystemComponent* nowdusteffect, class UParticleSystemComponent* nowwaterdusteffect, class UParticleSystemComponent* nowsanddusteffect, class UParticleSystemComponent* nowgrassdusteffect, class UParticleSystemComponent* nowsnowdusteffect, class UParticleSystemComponent* nowWaterPlaneffect);
	void SendToServerChangeCameraMode(bool isFreeMode);
	void SendToAllChangeCameraMode(bool isFreeMode);
	void HelicopterEngineUpdate(bool isStart);
	struct FVector GetRotationInputDir();
	float GetDisToLand();
};


// Class ShadowTrackerExtra.STExtraHelicopterVehicleMovementComponent
// 0x0130 (0x02C0 - 0x0190)
class USTExtraHelicopterVehicleMovementComponent : public UPawnMovementComponent
{
public:
	float                                              NewtonFixedRate;                                          // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TorqueFixedRate;                                          // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxbodyPitchAngle;                                        // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxBodyPitchTorqueVaule;                                  // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForwardMaxAcceleration;                                   // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxForwardMaxAccelerationPitchAngle;                      // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StartOffForwardTorqueBySpeedVaule;                        // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StartOffForwardTorqueBySpeedAngle;                        // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OffForwardTorqueBySpeedVaule;                             // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxbodRollAngle;                                          // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxBodyRollTorqueVaule;                                   // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RightMaxAcceleration;                                     // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxRightMaxAccelerationRollAngle;                         // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxBackWingTorqueVaule;                                   // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxBackWingPowerAngle;                                    // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PowerSmokeScale;                                          // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PowerburnningScale;                                       // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	class UCurveFloat*                                 VerticalAccelerationCurve;                                // 0x01D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OffGravityRate;                                           // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              freelyfallingRate;                                        // 0x01E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnterAdaptiveStateSpeed;                                  // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BeyondMaxHeightAddaptiveExtra;                            // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 VerticalAdaptiveAccelerationCurve;                        // 0x01F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDistanceToLand;                                        // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDistanceToLandRange;                                   // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              EnterFlyStateHeight;                                      // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LandTraceMaxHeight;                                       // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloseDustEffectHeight;                                    // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OpenParachuteHeight;                                      // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CanOpenParachuteHeightInHelicopter;                       // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForceOpenParachuteHeightInHelicopter;                     // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CloseParachuteHeightInHelicopter;                         // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkipOpenParachuteHeight;                                  // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               isSecondControlMode;                                      // 0x0220(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	float                                              SecondMaxBackWingTorqueVaule;                             // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SecondRightMaxAcceleration;                               // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ZVauleCheckTime;                                          // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ZVauleCheckScale;                                         // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CaveProtectTestLength;                                    // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CaveMoveOffset;                                           // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AddGForceHeight;                                          // 0x023C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpwanCloseGrivitiyTime;                                   // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpwanCheckLandDis;                                        // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              upInputRate;                                              // 0x0248(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              forWardInputRate;                                         // 0x024C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              rightInputRate;                                           // 0x0250(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              cameraRationYaw;                                          // 0x0254(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              verticalUpDis;                                            // 0x0258(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              STUpInputRate;                                            // 0x025C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              STForWardInputRate;                                       // 0x0260(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              STRightInputRate;                                         // 0x0264(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              STcameraRationYaw;                                        // 0x0268(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              STverticalUpDis;                                          // 0x026C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0270(0x0028) MISSED OFFSET
	class ASTExtraHelicopterVehicle*                   ownerHelicopter;                                          // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleSpringArmComponent*                  vehicleSpringArm;                                         // 0x02A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x18];                                      // 0x02A8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraHelicopterVehicleMovementComponent");
		return pStaticClass;
	}


	void ServerUpdateInput(float FowardInput, float RightInput, float UpInput, float nowcameraRationYaw, float nowverticalUpDis);
};


// Class ShadowTrackerExtra.STExtraHoverVehicle
// 0x0010 (0x1050 - 0x1040)
class ASTExtraHoverVehicle : public ASTExtraVehicleBase
{
public:
	class USTExtraHoverVehicleMovementComponent*       HoverVehicleMovement;                                     // 0x1040(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x1048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraHoverVehicle");
		return pStaticClass;
	}


	void HandleOnMeshAwake(class UPrimitiveComponent* WakingComponent, const struct FName& BoneName);
	struct FVector GetRotationInputDir();
};


// Class ShadowTrackerExtra.STExtraHoverVehicleMovementComponent
// 0x0088 (0x0218 - 0x0190)
class USTExtraHoverVehicleMovementComponent : public UPawnMovementComponent
{
public:
	TArray<struct FHoverSimulateData>                  HoverSimulateDatas;                                       // 0x0190(0x0010) (Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                              MovementRoughness;                                        // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MainTraceLenght;                                          // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MainHoverDistance;                                        // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForceSpring;                                              // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForceDampening;                                           // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TickInterval;                                             // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDisableGravity;                                          // 0x01B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bStickToSurface;                                          // 0x01B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bInAir;                                                   // 0x01BA(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bGravityIncrease;                                         // 0x01BB(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAcceleration;                                          // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StartAccelerationRate;                                    // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StopAccelerationRate;                                     // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxRotationYawAngle;                                      // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RotationYawRate;                                          // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BackwardForceScale;                                       // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Acceleration;                                             // 0x01D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RotationYawAngle;                                         // 0x01D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01DC(0x0004) MISSED OFFSET
	struct FName                                       ApplyForceSocketName;                                     // 0x01E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 SlideCompensationCurve;                                   // 0x01E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x01F0(0x0008) MISSED OFFSET
	float                                              STThrottleInput;                                          // 0x01F8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              STSteeringInput;                                          // 0x01FC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0200(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraHoverVehicleMovementComponent");
		return pStaticClass;
	}


	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);
	float GetThrottleInput();
	float GetSteeringInput();
};


// Class ShadowTrackerExtra.STExtraInputInterface
// 0x0000 (0x0028 - 0x0028)
class USTExtraInputInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraInputInterface");
		return pStaticClass;
	}


	void MoveUp(float Rate);
	void MoveRight(float Rate);
	void MoveForward(float Rate);
};


// Class ShadowTrackerExtra.STExtraLobbyCharacter
// 0x0210 (0x09E0 - 0x07D0)
class ASTExtraLobbyCharacter : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x07D0(0x0008) MISSED OFFSET
	bool                                               UseAvatarComponent2;                                      // 0x07D8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x07D9(0x0007) MISSED OFFSET
	struct FString                                     LobbyPlayerKey;                                           // 0x07E0(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    lobbyCharacterSceneTypeChangeEvent;                       // 0x07F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TEnumAsByte<ECharacterShowSceneType>               charSceneType;                                            // 0x0800(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<ELobbyCharacterPosIndex>               lobbyPosIdx;                                              // 0x0801(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0802(0x0002) MISSED OFFSET
	int                                                localLobbyPos;                                            // 0x0804(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0808(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.STExtraLobbyCharacter.LobbyMaleAnimClass
	unsigned char                                      UnknownData04[0x28];                                      // 0x0830(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.STExtraLobbyCharacter.LobbyFemaleAnimClass
	class ASTExtraWeapon*                              curEquipWeapon;                                           // 0x0858(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWeaponOwnerProxy*                           WeaponOwnerProxy;                                         // 0x0860(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                resultAvatarPoseIndex;                                    // 0x0868(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData05[0x4];                                       // 0x086C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    lobbyAnimMontagePlayDelegate;                             // 0x0870(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    lobbyAnimWeaponChangeDelegate;                            // 0x0880(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    lobbyCharPosChangeDelegate;                               // 0x0890(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x18];                                      // 0x08A0(0x0018) MISSED OFFSET
	TArray<struct FSoftObjectPath>                     CurEmotePathList;                                         // 0x08B8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x10];                                      // 0x08C8(0x0010) UNKNOWN PROPERTY: ArrayProperty ShadowTrackerExtra.STExtraLobbyCharacter.CurEmoteAnimList
	TMap<struct FString, class UAnimMontage*>          loadedEmoteMontageMap;                                    // 0x08D8(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                CurrentEmoteIndex;                                        // 0x0928(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x4];                                       // 0x092C(0x0004) MISSED OFFSET
	class UAnimMontage*                                CurrentLoadedEmoteMontage;                                // 0x0930(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBackpackEmoteHandle*                        curHandle;                                                // 0x0938(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBackpackEmoteHandle*                        lastHandle;                                               // 0x0940(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    EmoteMontageStartEvent;                                   // 0x0948(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    EmoteMontageFinishedEvent;                                // 0x0958(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAkComponent*                                emoteSound_Comp;                                          // 0x0968(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    SimulateHurtEvent;                                        // 0x0970(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0980(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData10[0x28];                                      // 0x0980(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.STExtraLobbyCharacter.GodEffectComponentPath
	bool                                               IsMale;                                                   // 0x09B0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x7];                                       // 0x09B1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    LobbyPoseWithFriend;                                      // 0x09B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    LobbyCancelPoseWithFriend;                                // 0x09C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x8];                                       // 0x09D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraLobbyCharacter");
		return pStaticClass;
	}


	void UnequipWeapon(class ASTExtraWeapon* Weapon);
	void SimulateHurt(bool bHurt);
	void SetStatueInfo(const struct FCharacterStatueInfo& Info);
	void SetResultAvatarPosIndex(int posIndex);
	void SetMaleAnimClass();
	void SetLobbyPosIndexInAvatarScene(int Pos);
	void SetLobbyPosIndex(TEnumAsByte<ELobbyCharacterPosIndex> Pos);
	void SetFemaleAnimClass();
	void SetCharSceneType(TEnumAsByte<ECharacterShowSceneType> sceneType);
	void PlayGodEffect(int Level);
	void PlayEmoteSound();
	void PlayEmoteInterruptSound();
	bool OnStopEmote();
	bool OnPlayEmote(int EmoteId);
	void OnAsyncLoadEmoteAnimList();
	void OnAsyncLoadEmoteAnim();
	void LoadAnimSoftPtrListFromIndex();
	void LoadAnimSoftPtrFromIndex(int Index);
	void HandleOnCharAnimLoadingFinished();
	class UAELobbyCharAnimListComp* GetWeaponAnimComponent();
	class UAnimationAsset* GetWeaponAnimByAnimTypeAndPosType(TEnumAsByte<ECharacterAnimType> AnimType, TEnumAsByte<ECharacterPoseType> PoseType);
	TEnumAsByte<ELobbyCharacterPosIndex> GetLobbyPosIndex();
	class UBackpackEmoteHandle* GetEmoteHandle(int ItemID);
	class ASTExtraWeapon* GetCurrentWeapon();
	int GetCurrentEmoteId();
	TEnumAsByte<ECharacterShowSceneType> GetCharSceneType();
	class UAnimationAsset* GetCharacterAnimByAnimTypeAndPosType(TEnumAsByte<ECharacterAnimType> AnimType, TEnumAsByte<ECharacterPoseType> PoseType);
	void EquipWeapon(class ASTExtraWeapon* Weapon);
	bool EmoteAnimFinishedSuccessfully();
	void CallGlobalLuaFunction(const struct FString& FunctionName);
};


// Class ShadowTrackerExtra.STExtraLobbyVehicle
// 0x0018 (0x03A8 - 0x0390)
class ASTExtraLobbyVehicle : public AActor
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleAvatarComponent*                     VehicleAvatar;                                            // 0x0398(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleAdvanceAvatarComponent*              VehicleAdvanceAvatar;                                     // 0x03A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraLobbyVehicle");
		return pStaticClass;
	}


	bool PutOnVehicleStyleID(int InStyleID);
	bool PutOnVehicleItem(int InModelID, int ColorID, int PatternID, int ParticleID);
	bool PutOffVehicleStyleID(int InStyleID);
	bool PutOffVehicleSlot(EVehicleSlotType InSlotType);
	bool PutOffVehicleItem(int InModelID);
	bool PreChangeVehicleFPPAvatar();
	bool PreChangeVehicleBrokenMat();
	bool PreChangeVehicleAvatar_Old(int InAvatarID, int InAdvanceAvatarID);
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);
	class UVehicleAvatarComponent* GetVehicleAvatar();
	class UVehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();
	int GetDefaultAvatarID(int InAvatarID);
	bool ClearAllVehicleStyleID();
	bool ClearAllVehicleItems();
};


// Class ShadowTrackerExtra.STExtraMapFunctionLibrary
// 0x0020 (0x0048 - 0x0028)
class USTExtraMapFunctionLibrary : public UBlueprintFunctionLibrary
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraMapFunctionLibrary");
		return pStaticClass;
	}


	static void UpdateTeamMateLocAndRot(TArray<class ASTExtraPlayerState*> TeamMateStateArray, TArray<class UPanelWidget*> TeamMateInfoGridArray, const struct FVector& LevelLandScapeCenter, float CorrectMapScale, float RotateAngle, class ASTExtraPlayerState* myPS, TArray<class UImage*> ArrowImageArray, const struct FVector2D& MapAdjustOffset, float MapWindowHalfExtent, bool isEntireMap, TArray<int>* OutOfRangeTeammateIndex);
	static void UpdatePlayersLocAndRot(TArray<class ASTExtraPlayerState*> TeamMateStateArray, TArray<class UWidget*> PlayerInfoWidgetArray, const struct FVector& LevelLandScapeCenter, float CorrectMapScale, float RotateAngle, class ASTExtraPlayerState* myPS, TArray<class UWidget*> PlayerRotWidgetArray, const struct FVector2D& MapAdjustOffset, float MapWindowHalfExtent, bool isEntireMap, TArray<int>* OutOfRangeTeammateIndex);
	static void SetLeftRouteLength(class UCanvasPanelSlot* LeftRouteSlot, class UCanvasPanelSlot* PassedRouteSlot, float FlyingProcess, float RouteTotalLengthInMap, float MapScale, float TopOffset, float BottomOffset, bool bIsWar);
	static void RnederThreadSetBigCore(bool isbig);
	static class USTExtraMapFunctionLibrary* MapFuncLibInstance();
	static struct FVector MapCenterToPointVector(const struct FVector& PointLocationInLevel, const struct FVector& LevelLandScapeCenter, float LevelToMapScale);
	static bool IsPlayerOutSafeZone(class APlayerController* PC, class ASTExtraGameStateBase* GS);
	bool IsNeedDrawGuideLine(float WhiteCircleRadius, const struct FVector2D& PlayerCoord, const struct FVector2D& WhiteCircleCoord);
	static struct FVector2D GetRotatedVector2D(const struct FVector2D& InputVector, float RotateAngle);
	static class AMiniMapStandardPoint* GetMapStandardPoint(class UObject* WorldContextObject);
	struct FMapRealTimeInfo GetMapRealTimeInfo(class ASTExtraPlayerController* PC, class ASTExtraGameStateBase* GS, const struct FVector& LevelLandScapeCenter, float LevelToMapScale, float RotateAngle, const struct FMapRealTimeInfo& CacheMapInfo, bool isEntireMap, struct FVector* OutPlayerLoc);
	static float GetLevelLandscapeBoundsWithoutFakeTile(class UObject* WorldContextObject);
	static float GetLevelLandscapeBounds(class UObject* WorldContextObject);
	static struct FVector2D GetLandscapeMidPoint(class UObject* WorldContextObject);
	struct FVector2D GetCircleMapLocation(const struct FVector& CirclePositionInWorld, const struct FVector& LevelLandScapeCenter, float LevelToMapScale, float RotateAngle);
	static int GetAlivePlayerNumber();
	static void GameThreadSetBigCore(bool isbig);
	static struct FVector2D FindPointInWhichLandscape(const struct FVector& TargetPoint, class UObject* ContextObject);
	static void DrawPlayerMarkerInGrid(class ASTExtraPlayerController* PC, class UGridSlot* PlayerMarkerPanelSlot, const struct FVector2D& PlayerCoord, class UPanelWidget* PlayerMarkerImagePanel, TEnumAsByte<EPlayerOperation> PlayerOperation, float RotateAngle);
	static void DrawPlayerMarker(class ASTExtraPlayerController* PC, class UPanelWidget* PlayerMarkerPanel, const struct FVector2D& PlayerCoord, TEnumAsByte<EPlayerOperation> PlayerOperation, float RotateAngle, class UPanelWidget* selfArrow, bool isEntireMap);
	void DrawPlayerItineraryInMap(const struct FPaintContext& InContext, TArray<struct FVector> PlayerPosList, const struct FVector2D& MapSize, const struct FVector& LevelLandScapeCenter, float LevelToMapScale, const struct FLinearColor& LineColor);
	void DrawGuideLineMiniMap(const struct FPaintContext& InContext, float DashSize, const struct FLinearColor& DashColor, float MapWindowExtent, float MapImageExtent, const struct FVector2D& WhiteCircleCenter, const struct FVector2D& PlayerCoord, float LineThickness, bool bAntiAlias);
	void DrawGuideLineEntireMap(const struct FPaintContext& InContext, float DashSize, const struct FLinearColor& DashColor, float MapWindowExtent, float MapImageExtent, const struct FVector2D& WhiteCircleCenter, const struct FVector2D& PlayerCoord, float LineThickness, bool bAntiAlias);
	void DrawGuideLine(const struct FPaintContext& InContext, float DashSize, const struct FLinearColor& DashColor, float MapWindowExtent, float MapImageExtent, const struct FVector2D& WhiteCircleCenter, const struct FVector2D& PlayerCoord, TEnumAsByte<EMapType> MapType, float LineThickness, bool bAntiAlias);
	void DrawCircle(const struct FPaintContext& InContext, const struct FVector2D& CircleCenter, const struct FLinearColor& CircleColor, float CircleRadius, float MapWindowExtent, const struct FVector2D& PlayerCoord, TEnumAsByte<EMapType> MapType, bool bAntiAlias, float LevelToMapScaleC, const struct FVector& LevelLandScapeCenterC);
	void DrawAirplaneRouteInMiniMap(const struct FPaintContext& InContext, float DashSize, const struct FLinearColor& DashColor, float MapWindowExtent, float MapImageExtent, const struct FVector& MapCenterToPlayer, const struct FVector2D& EndCoord, const struct FVector2D& PlayerCoord, const struct FVector2D& RouteVelocity, float LineThickness, bool bAntiAlias);
	void DrawAirplaneRouteInEntiremap(const struct FPaintContext& InContext, float DashSize, const struct FLinearColor& DashColor, float MapWindowExtent, float MapImageExtent, float MiniMapWindowExtent, float MiniMapImageExtent, const struct FVector& MapCenterToPlayer, const struct FVector2D& StartCoord, const struct FVector2D& EndCoord, float LineThickness, bool bAntiAlias);
	static float CalPlayerToMarkerDist(class APlayerController* PC, float LevelLandscapeExtent, const struct FVector2D& MarkerInMap, const struct FVector& LevelLandScapeCenter);
	static void CalPlayerToMarkerDelYawAndDist(class APlayerController* PC, const struct FVector& MarkerAlign, float LevelLandscapeExtent, const struct FVector& LandscapeCenter, float* DelYaw, float* Dist);
	float CalPlayerRotationToPointDelYaw(class APlayerController* PC, const struct FVector& TargetPoint);
	static struct FVector2D AdjustMapPosition(class UCanvasPanelSlot* MapCanvas, const struct FVector2D& MapCenterToPlayer, float RotateAngle, float MiniMapWindowHalfSize, float MapImageSize);
};


// Class ShadowTrackerExtra.STExtraMonsterAnimInstance
// 0x0130 (0x04F0 - 0x03C0)
class USTExtraMonsterAnimInstance : public UAnimInstance
{
public:
	bool                                               bIsLoaded;                                                // 0x03C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03C1(0x0007) MISSED OFFSET
	class UAnimSequence*                               C_Birth_01;                                               // 0x03C8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Birth_02;                                               // 0x03D0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_Birth_01_Montage;                                       // 0x03D8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_Birth_02_Montage;                                       // 0x03E0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Idle;                                                   // 0x03E8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Combat_Idle;                                            // 0x03F0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                               C_Run;                                                    // 0x03F8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                               C_Combat_Run;                                             // 0x0400(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Attack_01;                                              // 0x0408(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Attack_02;                                              // 0x0410(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Attack_03;                                              // 0x0418(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Hit_Hard;                                               // 0x0420(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 C_Hit_BlendSpace;                                         // 0x0428(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Stiff;                                                  // 0x0430(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Jump_Start;                                             // 0x0438(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                               C_Fall;                                                   // 0x0440(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Fall_Stand;                                             // 0x0448(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Fall_Hard_Stand;                                        // 0x0450(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_Death_Front;                                            // 0x0458(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_Death_HeadShot;                                         // 0x0460(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_Death_Explosion;                                        // 0x0468(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_Death_Stand;                                            // 0x0470(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                C_Death_VehicleHit;                                       // 0x0478(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Climb;                                                  // 0x0480(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Climb_Window;                                           // 0x0488(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Climbing;                                               // 0x0490(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Stun;                                                   // 0x0498(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_Striding;                                               // 0x04A0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Born_State;                                             // 0x04A8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Birth_01_IsValid;                                       // 0x04A9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Birth_02_IsValid;                                       // 0x04AA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Idle_IsValid;                                           // 0x04AB(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Combat_Idle_IsValid;                                    // 0x04AC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Run_IsValid;                                            // 0x04AD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Combat_Run_IsValid;                                     // 0x04AE(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Attack_01_IsValid;                                      // 0x04AF(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Attack_02_IsValid;                                      // 0x04B0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Attack_03_IsValid;                                      // 0x04B1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Hurting;                                                // 0x04B2(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Hit_BlendSpace_IsValid;                                 // 0x04B3(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     C_HurtDir;                                                // 0x04B4(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Stiff_IsValid;                                          // 0x04C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Fall_IsValid;                                           // 0x04C1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Jump_IsValid;                                           // 0x04C2(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Light_Fall_Stand_IsValid;                               // 0x04C3(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Hard_Fall_Stand_IsValid;                                // 0x04C4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Death_Front_IsValid;                                    // 0x04C5(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Death_HeadShot_IsValid;                                 // 0x04C6(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Death_VehicleHit_IsValid;                               // 0x04C7(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Death_Explosion_IsValid;                                // 0x04C8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Death_Stand_IsValid;                                    // 0x04C9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Climb_IsValid;                                          // 0x04CA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Climb_Window_IsValid;                                   // 0x04CB(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Stun_IsValid;                                           // 0x04CC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04CD(0x0003) MISSED OFFSET
	float                                              fPlayMoveAnimThreshold;                                   // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_FallingSpeed;                                           // 0x04D4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_MoveSpeed;                                              // 0x04D8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                C_ClimbState;                                             // 0x04DC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                C_StrideState;                                            // 0x04E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                C_RandomAnimID;                                           // 0x04E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_ClimbOnCeiling_IsValid;                                 // 0x04E8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04E9(0x0003) MISSED OFFSET
	float                                              C_SpeedScale;                                             // 0x04EC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraMonsterAnimInstance");
		return pStaticClass;
	}


	void TryUpdateAnimVarList();
	void RefreshAnimParam();
	void OnPawnLeaveState(ESTEAIState NewState);
	void OnPawnEnterState(ESTEAIState NewState);
	void OnMobClimbStateChange();
	class UAnimationAsset* GetMonsterAnimByPoseType(TEnumAsByte<EMonsterPoseType> PoseType);
	void CacheParamList(float DeltaSeconds);
	void CacheAnimVarList();
};


// Class ShadowTrackerExtra.STExtraMonsterInterface
// 0x0000 (0x0028 - 0x0028)
class USTExtraMonsterInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraMonsterInterface");
		return pStaticClass;
	}


	void GotoEarthAndDie();
	struct FString GetMonsterName();
	class UClass* GetDropTomb();
	bool CheckHasFunc(EMonsterFuncType Func);
	TArray<struct FRoadPointInfo> BleCallGetRoadPoints();
};


// Class ShadowTrackerExtra.STExtraMotorcycleAnimInstance
// 0x0030 (0x0980 - 0x0950)
class USTExtraMotorcycleAnimInstance : public USTVehicleAnimInstance
{
public:
	class UVehicleMotorbikeComponent*                  MotorcycleComp;                                           // 0x0950(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SteerRoll;                                                // 0x0958(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    KickstandRot;                                             // 0x095C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    SteeringRotFinal;                                         // 0x0968(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0974(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraMotorcycleAnimInstance");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraNewBuffApplierComponent
// 0x0068 (0x0178 - 0x0110)
class USTExtraNewBuffApplierComponent : public UActorComponent
{
public:
	struct FString                                     OverlapCheckComponnentName;                               // 0x0110(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxTargetNum;                                             // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<struct FNewBuffApplierConditionPair>        BuffConditionArray;                                       // 0x0128(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class ASTExtraCharacter*>                   AddedBuffTargets;                                         // 0x0138(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                              CheckPeriod;                                              // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	class UShapeComponent*                             OverlapCheckComponnent;                                   // 0x0150(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0158(0x0001) MISSED OFFSET
	bool                                               IsCheckingBlock;                                          // 0x0159(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               IsIgnoreThrower;                                          // 0x015A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               IsRemoveBuffWhenOutRange;                                 // 0x015B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bNeedRefreshBuffInRange;                                  // 0x015C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	struct FVector                                     ServerIsHeadVisibleOffsetForProne;                        // 0x0160(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0xC];                                       // 0x016C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraNewBuffApplierComponent");
		return pStaticClass;
	}


	void SetIsEnableChecking(bool Enable);
	void OverlapCheckerOneTarget(class AActor* OtherActor);
};


// Class ShadowTrackerExtra.STExtraOBState
// 0x0010 (0x0428 - 0x0418)
class ASTExtraOBState : public AUAEOBState
{
public:
	TArray<struct FPlayerStaticInfoInOB>               TotalPlayers;                                             // 0x0418(0x0010) (Net, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraOBState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraOnlineSession
// 0x0000 (0x0028 - 0x0028)
class USTExtraOnlineSession : public UOnlineSession
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraOnlineSession");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraPetAnimInstance
// 0x0090 (0x0450 - 0x03C0)
class USTExtraPetAnimInstance : public UAnimInstance
{
public:
	class ASTExtraBaseCharacter*                       C_PetOwnerCharacter;                                      // 0x03C0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                C_DeviceLevel;                                            // 0x03C8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_PetOwnerHasSprintState;                                 // 0x03CC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_PetOwnerIsAutonomous;                                   // 0x03CD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03CE(0x0002) MISSED OFFSET
	float                                              C_PetMoveSpeed;                                           // 0x03D0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsPetParachute;                                         // 0x03D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsPetFastFalling;                                       // 0x03D5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsPetDisappear;                                         // 0x03D6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsPetFollow;                                            // 0x03D7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsPetFlyAround;                                         // 0x03D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsPetSwimming;                                          // 0x03D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03DA(0x0002) MISSED OFFSET
	float                                              C_PetSwimmingAnimRate;                                    // 0x03DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_PetSwimmingMaxAnimRate;                                 // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_PetSwimmingMinAnimRate;                                 // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_PetSwimmingAnimRateFactor;                              // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_PetFastFallSpeed;                                       // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_PetFlyAroundDisappearTime;                              // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_PetMoveThreshold;                                       // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                           C_AppearAnim;                                             // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                           C_DisppearAnim;                                           // 0x0400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                           C_IdleAnim;                                               // 0x0408(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                           C_FreeFallAnim;                                           // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                           C_FastFreeFallAnim;                                       // 0x0418(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                           C_FollowAnim;                                             // 0x0420(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                           C_FlyAroundAnim;                                          // 0x0428(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                           C_SwimmingAnim;                                           // 0x0430(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                             C_SwimmingBS;                                             // 0x0438(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                             C_MovementBS;                                             // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0448(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPetAnimInstance");
		return pStaticClass;
	}


	class ASTExtraBaseCharacter* SafeGetPetOwnerCharacter();
	void OnPetStateChanged(TEnumAsByte<EPetState> State, bool IsEnter);
	void OnPetMontage(const struct FPetMontageData& Data);
	void OnDisappearAnimEnd();
};


// Class ShadowTrackerExtra.STExtraPetMovementComponent
// 0x0010 (0x0740 - 0x0730)
class USTExtraPetMovementComponent : public UCharacterMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0730(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPetMovementComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraPlayerCharacter
// 0x0310 (0x2990 - 0x2680)
class ASTExtraPlayerCharacter : public ASTExtraBaseCharacter
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x2680(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.STExtraPlayerCharacter.SettleAccountUI
	struct FScriptMulticastDelegate                    OnHasPickupPropsAvailableChanged;                         // 0x26A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnHasTombBoxesAvailableChanged;                           // 0x26B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSkillFinishedDelegate;                                  // 0x26C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnScopeOutDelegate;                                       // 0x26D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnScopeInDelegate;                                        // 0x26E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWeaponAutoAimingComponent*                  AutoAimComp;                                              // 0x26F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTScreenAppearanceComponent*                ScreenAppearaceComp;                                      // 0x2700(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                               BoxEar;                                                   // 0x2708(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNightVisionComponent*                       NightVisionComponent;                                     // 0x2710(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      NightVisionComponentClass;                                // 0x2718(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IndoorCheckDistance;                                      // 0x2720(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IndoorCheckTime;                                          // 0x2724(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BodyIndoorUpdateCheckTime;                                // 0x2728(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IndoorLowerCameraHeight;                                  // 0x272C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsIndoorBodyAreaCheck;                                    // 0x2730(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x2731(0x0003) MISSED OFFSET
	float                                              IndoorBodyAreaDistance;                                   // 0x2734(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              mfTickDuration;                                           // 0x2738(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x273C(0x0004) MISSED OFFSET
	struct FSoftClassPath                              PlayerGunCollisionComponentClassPath;                     // 0x2740(0x0018) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FColor                                      DyeingColor;                                              // 0x2758(0x0004) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                DyeingSlot;                                               // 0x275C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x2760(0x0004) MISSED OFFSET
	TEnumAsByte<EParachuteState>                       ParachuteState;                                           // 0x2764(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x1];                                       // 0x2765(0x0001) MISSED OFFSET
	TEnumAsByte<EParachuteState>                       LastParachuteState;                                       // 0x2766(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x1];                                       // 0x2767(0x0001) MISSED OFFSET
	float                                              HaveToOpenHeightToGround;                                 // 0x2768(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsPlaneJumpParachute;                                     // 0x276C(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x276D(0x0003) MISSED OFFSET
	float                                              SwimZDir;                                                 // 0x2770(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               Indoor;                                                   // 0x2774(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsBodyIndoor;                                             // 0x2775(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x2];                                       // 0x2776(0x0002) MISSED OFFSET
	float                                              SwimRotateX_Ex;                                           // 0x2778(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x4];                                       // 0x277C(0x0004) MISSED OFFSET
	class UCustomParticleSystemComponent*              PS_CloudFast;                                             // 0x2780(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomParticleSystemComponent*              PS_CloudSlow;                                             // 0x2788(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             PS_CloudFastAsset;                                        // 0x2790(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             PS_CloudSlowAsset;                                        // 0x2798(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               AK_StartFallingLocal;                                     // 0x27A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               AK_ParachuteLocal;                                        // 0x27A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               AK_ParachuteRemote;                                       // 0x27B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               AK_LandingLocal;                                          // 0x27B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               AK_LandingRemotel;                                        // 0x27C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpringArmParams                            FreeFallSpringArmParam;                                   // 0x27C8(0x0050) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSpringArmParams                            OpeningSpringArmParam;                                    // 0x2818(0x0050) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSpringArmParams                            TPPSpringArmParam;                                        // 0x2868(0x0050) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x18];                                      // 0x28B8(0x0018) MISSED OFFSET
	class UClass*                                      FreeFallCamShake;                                         // 0x28D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VehicleForwardInputRate;                                  // 0x28D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VehicleRightInputRate;                                    // 0x28DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawBoxEarBulletOverlapRay;                              // 0x28E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x7];                                       // 0x28E1(0x0007) MISSED OFFSET
	class ASTExtraPlayerController*                    STPlayerController;                                       // 0x28E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x8];                                       // 0x28F0(0x0008) MISSED OFFSET
	class UAirAttackLocatorComponent*                  AirAttackLocatorComponent;                                // 0x28F8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x68];                                      // 0x2900(0x0068) MISSED OFFSET
	struct FName                                       FeatureActorName;                                         // 0x2968(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActivityActorBase*>                  ActivityActorList;                                        // 0x2970(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               IsLocalActuallyAngledSight;                               // 0x2980(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsLocalActuallyScopeIn;                                   // 0x2981(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0xE];                                       // 0x2982(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPlayerCharacter");
		return pStaticClass;
	}


	void UpdateParachuteState(const struct FRotator& Rotation, float FallingSpeed);
	void UpdateParachuteFallingCameraDistance(float alpha);
	void UpdateIndoorState(bool IsInDoor);
	void UpdateBodyIndoorState(bool BodyIndoor);
	void TriggerAutoAimCheck(float DeltaTime);
	void TouchCancelSkillLock();
	void SyncDeadTombBoxToController(class APlayerTombBox* _DeadTombBox);
	void SwitchCameraToParachuteOpening();
	void SwitchCameraToParachuteFalling();
	void SwitchCameraToNormal();
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float alpha);
	void SwitchCameraFromParachuteOpeningToTPPStop();
	void SwitchCameraFromParachuteOpeningToTPPFinish();
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();
	void StopCamShake();
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);
	void StartCamShake();
	void ShowNightVisionFrame();
	void ShowConfirmDialogOfMisKill();
	bool ShouldTriggerEntryEvent(EUTSkillEntry EntryEvent);
	bool ShouldDropBagItem(const struct FItemDefineID& SkillItemID);
	void SetSwimRotateX_Ex(float NewSwimRotateX);
	void SetRainyEffectParam(TEnumAsByte<EScreenParticleEffectType> EffectType, float InRainyEffectParam);
	void SetRainyEffectEnable(TEnumAsByte<EScreenParticleEffectType> EffectType, bool InEnable, float InRainyEffectParam);
	void SetPitchViewAngle(float MinPitch, float MaxPitch);
	void SetParachuteState(TEnumAsByte<EParachuteState> State);
	void SetFPPDeafultFov(float InFov);
	void SetBodyIndoor(bool IsInDoor);
	void ServerUpdateParachuteState(const struct FRotator& Rotation, float FallingSpeed);
	void ServerSetBulletFlySoundData(class ASTExtraPlayerCharacter* PlayerCharacter, class ASTExtraShootWeapon* InstigateWeapon, const struct FVector& FlySoundPos);
	void ResetCharacter();
	void ReqSetShoulderCameraMode(bool bShoulderMode);
	void ReleaseTrigger(EControllerHand Hand);
	void PushTrigger(EControllerHand Hand);
	void ProneWithTerrain(const struct FRotator& CharacterRotation, bool isMoving, float Offset, float deap);
	void ParachutePlaySound(class UAkAudioEvent* LocalAkEvent, class UAkAudioEvent* RemoteAkEvent);
	void OnStateEnter(EPawnState EnteredState);
	void OnSkillFinishedDelegate__DelegateSignature(EUTSkillStopReason StopReason, int SkillID, bool HasThrownGrenade);
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);
	void OnRep_STPlayerController();
	void OnRep_ParachuteState(TEnumAsByte<EParachuteState> State);
	void OnRank(int Kills, int Rank);
	void OnMiniTreeTriggerServerLogicCPP();
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);
	void OnAvatarEquippedSucc(EAvatarSlotType slotType, bool isEquipped, int InItemID);
	void OnAllAvatarEquippedSucc();
	void MulticastSetShoulderCameraMode(bool bShoulderMode);
	void MiniTreeTriggerServerLogic();
	bool IsInLaunchSeat();
	bool IsGrenadeEmpty();
	bool IsBodyIndoorFuc();
	bool IsBodyIndoorCheck();
	void InitAirAttackLocatorComponent();
	void HideNightVisionFrame();
	void HandleParachuteStateChanged(TEnumAsByte<EParachuteState> NewState);
	void HandleBulletOverlap(class AActor* BulletActor, const struct FHitResult& HitResult, TArray<struct FHitResult> HitResults);
	void HandleAIInstigateBulletOverlap(class ASTExtraBaseCharacter* InstigatorCharacter, const struct FHitResult& HitResult, TArray<struct FHitResult> HitResults);
	class USpringArmComponent* GetThirdPersonSpringArm();
	class UCameraComponent* GetThirdPersonCamera();
	float GetSwimRotateX_Ex();
	class USpringArmComponent* GetScopeSpringArm();
	class UCameraComponent* GetScopeCamera();
	class ASTExtraPlayerController* GetPlayerControllerSafety();
	bool GetIsInDoor();
	bool GetIsGunADS();
	class USpringArmComponent* GetFPPSpringArm();
	float GetFPPDeafultFov();
	class UCameraComponent* GetFPPCamera();
	class USpringArmComponent* GetFirstPersonSpringArm();
	class UCameraComponent* GetFirstPersonCamera();
	struct FVector GetBonePos(const struct FName& BoneName);
	void FreeFallShakeCam();
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);
	void EnablePet(bool Enable);
	void DynamicCreateComponents();
	void ClientPlayEarSound(class ASTExtraShootWeapon* InstigateWeapon, const struct FVector& FlySoundPos);
	void ClearHPUI();
};


// Class ShadowTrackerExtra.STExtraPlayerStart
// 0x0020 (0x03E0 - 0x03C0)
class ASTExtraPlayerStart : public APlayerStart
{
public:
	bool                                               bAutoResetOccupiedMark;                                   // 0x03C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03C1(0x0003) MISSED OFFSET
	float                                              ResetOccupiedMarkTime;                                    // 0x03C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseAsStandAlone;                                         // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	int                                                PlayerBornPointID;                                        // 0x03CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMarkOccupied;                                            // 0x03D0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	int                                                TeamID;                                                   // 0x03D4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x8];                                       // 0x03D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPlayerStart");
		return pStaticClass;
	}


	void SetMarkOccupied();
	bool IsMarkOccupied();
};


// Class ShadowTrackerExtra.STExtraPlayerStartGroup
// 0x0008 (0x0398 - 0x0390)
class ASTExtraPlayerStartGroup : public AActor
{
public:
	bool                                               bUseAsStandAlone;                                         // 0x0390(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMarkOccupied;                                            // 0x0391(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0392(0x0002) MISSED OFFSET
	int                                                TeamID;                                                   // 0x0394(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPlayerStartGroup");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraPlayerStartWithVehicle
// 0x0000 (0x03E0 - 0x03E0)
class ASTExtraPlayerStartWithVehicle : public ASTExtraPlayerStart
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPlayerStartWithVehicle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraPulseRangeActor
// 0x0020 (0x03C0 - 0x03A0)
class ASTExtraPulseRangeActor : public AASTExtraRangeActor
{
public:
	struct FPropSkillCureRangeParam                    CureRangeParamCfg;                                        // 0x03A0(0x0010) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPulseRangeActor");
		return pStaticClass;
	}


	void MakeEffectToAllOverlappedActors(TMap<class AActor*, struct FRangeCheckRetParam> OverlapComponentMap);
	void InitRangeParam(class AActor* Creator, const struct FPropSkillCureRangeParam& CureRangeParam);
};


// Class ShadowTrackerExtra.STExtraPVEPlayerStart
// 0x0000 (0x03E0 - 0x03E0)
class ASTExtraPVEPlayerStart : public ASTExtraPlayerStart
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraPVEPlayerStart");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STExtraSimpleCharacter
// 0x05F0 (0x11D0 - 0x0BE0)
class ASTExtraSimpleCharacter : public ASTExtraCharacter
{
public:
	unsigned char                                      UnknownData00[0xA4];                                      // 0x0BE0(0x00A4) MISSED OFFSET
	int                                                iRegionSimpleCharacter;                                   // 0x0C84(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ForceLifePeriodTime;                                      // 0x0C88(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDamageTeamate;                                           // 0x0C8C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsPreClientDamage;                                       // 0x0C8D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0C8E(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDeath;                                                  // 0x0C90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                              DelayHideDuration;                                        // 0x0CA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimDeathLifeSpan;                                        // 0x0CA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayHideDurationByHeadShoot;                             // 0x0CA8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimDeathLifeSpanByHeadShoot;                             // 0x0CAC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayHideDurationByVehicleHit;                            // 0x0CB0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimDeathLifeSpanByVehicleHit;                            // 0x0CB4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             HeadShootFX_Red;                                          // 0x0CB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                             HeadShootFX_Green;                                        // 0x0CC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DropTomb;                                                 // 0x0CC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMonsterSingleDropIds>               DropIds;                                                  // 0x0CD0(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMonsterSingleBulletDropIds>         BulletDropIds;                                            // 0x0CE0(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bPumkinAvailable;                                         // 0x0CF0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsEnabledDrop;                                            // 0x0CF1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsExiting;                                                // 0x0CF2(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0CF3(0x0001) MISSED OFFSET
	int                                                MonsterSpawnTime;                                         // 0x0CF4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MonsterDeathTime;                                         // 0x0CF8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimBornLifeSpan;                                         // 0x0CFC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               BornOnCeiling;                                            // 0x0D00(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0D01(0x0003) MISSED OFFSET
	float                                              AnimLand_Hard_VelocitySquared_Threshold;                  // 0x0D04(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimLand_Hard_LifeSpan;                                   // 0x0D08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AnimLand_Light_LifeSpan;                                  // 0x0D0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x14];                                      // 0x0D10(0x0014) MISSED OFFSET
	struct FSimpleCharAnimParamList                    CurAnimParamList;                                         // 0x0D24(0x004C) (BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                              MaxRememberEnemyTimeInSeconds;                            // 0x0D70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTimeLockTarget;                                        // 0x0D74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTimeWhenCannotSeeTarget;                               // 0x0D78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SensedRadius;                                             // 0x0D7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinTimeLockHeardEnemy;                                    // 0x0D80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HeardRadius;                                              // 0x0D84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USimulateSyncSmoothComponent*                SimulateSyncSmooth;                                       // 0x0D88(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMobAdvancedMovement*                        MobAdvancedMovement;                                      // 0x0D90(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMobPerceptionController*                    MobPerceptionController;                                  // 0x0D98(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USTExtraSimpleCharacterPhysics*              SimpleCharacterPhysics;                                   // 0x0DA0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnitAttrComponent*                          UnitAttrComp;                                             // 0x0DA8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData05[0x18];                                      // 0x0DB0(0x0018) MISSED OFFSET
	int                                                SyncAIState;                                              // 0x0DC8(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0DCC(0x0008) MISSED OFFSET
	int                                                AIState;                                                  // 0x0DD4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HurtAnimTime;                                             // 0x0DD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BackAnimPerc;                                             // 0x0DDC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnEnterAIState;                                           // 0x0DE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnLeaveAIState;                                           // 0x0DF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBPEnterAIState;                                         // 0x0E00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnBPLeaveAIState;                                         // 0x0E10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnChangeAnimParam;                                        // 0x0E20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAnimInstanceAssetLoaded;                                // 0x0E30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAnimListComponentAssetLoaded;                           // 0x0E40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x28];                                      // 0x0E50(0x0028) MISSED OFFSET
	float                                              SpeedScale;                                               // 0x0E78(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanSkillSpeedScale;                                      // 0x0E7C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0E7D(0x0003) MISSED OFFSET
	float                                              SpeedValue;                                               // 0x0E80(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MonsterChapterID;                                         // 0x0E84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MonsterLevelID;                                           // 0x0E88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MonsterWaveId;                                            // 0x0E8C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MonsterID;                                                // 0x0E90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BornWeatherPhase;                                         // 0x0E94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                FlowId;                                                   // 0x0E98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0E9C(0x0004) MISSED OFFSET
	struct FString                                     MonsterName;                                              // 0x0EA0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     MonsterNameID;                                            // 0x0EB0(0x0010) (BlueprintVisible, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MonsterSyncID;                                            // 0x0EC0(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableAvatar;                                            // 0x0EC4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0EC5(0x0003) MISSED OFFSET
	struct FVector                                     BornPos;                                                  // 0x0EC8(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0ED4(0x0004) MISSED OFFSET
	TArray<struct FRoadPointInfo>                      RoadPoints;                                               // 0x0ED8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                BornRandomRadius;                                         // 0x0EE8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ReBornTimes;                                              // 0x0EEC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ReBornDelay;                                              // 0x0EF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MonsterType;                                              // 0x0EF4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MonsterFuncType;                                          // 0x0EF8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Gold;                                                     // 0x0EFC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SuperGold;                                                // 0x0F00(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0F04(0x0004) MISSED OFFSET
	TArray<int>                                        BornSkill;                                                // 0x0F08(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        AloneSkillIdList;                                         // 0x0F18(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                HealthBarCount;                                           // 0x0F28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsCrawlChar;                                             // 0x0F2C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0F2D(0x0003) MISSED OFFSET
	int                                                NeedSendAttackFlow;                                       // 0x0F30(0x0004) (Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                       AttackTarget;                                             // 0x0F34(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APawn>                        CallPawn;                                                 // 0x0F3C(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32_t                                           CallPawnKey;                                              // 0x0F44(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CallType;                                                 // 0x0F48(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EMonsterSpawnSourceType>               SourceType;                                               // 0x0F4C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0F4D(0x0003) MISSED OFFSET
	TArray<uint32_t>                                   DecalIndexArray;                                          // 0x0F50(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TEnumAsByte<EHitPartJugementType>                  HitPartJudgment;                                          // 0x0F60(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x7];                                       // 0x0F61(0x0007) MISSED OFFSET
	TMap<struct FString, EAvatarDamagePosition>        NewHitBodyPosMap;                                         // 0x0F68(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FBodyTypeDef                                StandBodyDef;                                             // 0x0FB8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UPVELagCompensationComponent*                PVELagCompensationComponent;                              // 0x0FC0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                           ProneCapsuleComponent;                                    // 0x0FC8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IdleWalkSpeedRatio;                                       // 0x0FD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AttackWalkSpeedRatio;                                     // 0x0FD4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                      CircleDamageRate;                                         // 0x0FD8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                ObjectPoolSize;                                           // 0x0FE8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                LifePeriodTime;                                           // 0x0FEC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              KilledDisCircleEdge;                                      // 0x0FF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxHPStageForBroadcast;                                   // 0x0FF4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableMaxAllowedDistanceCheck;                           // 0x0FF8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0FF9(0x0003) MISSED OFFSET
	float                                              MaxAllowedDistanceFromSpawnPoint;                         // 0x0FFC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMaxAllowedDistanceCheckIn2D;                             // 0x1000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData17[0x7];                                       // 0x1001(0x0007) MISSED OFFSET
	bool                                               IsHeadShootDead;                                          // 0x1008(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData18[0x23];                                      // 0x1009(0x0023) MISSED OFFSET
	int                                                RageLevel;                                                // 0x102C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData19[0x8];                                       // 0x1030(0x0008) MISSED OFFSET
	float                                              AloneRageTimerRate;                                       // 0x1038(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpluseScale;                                             // 0x103C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpluseZScale;                                            // 0x1040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableOverlapImpulse;                                     // 0x1044(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               EnableOverlapDamage;                                      // 0x1045(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData20[0x2];                                       // 0x1046(0x0002) MISSED OFFSET
	float                                              OverlapVehicleDamageRate;                                 // 0x1048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OverlapAgainstVehicleDamageRate;                          // 0x104C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinDamageInterval;                                        // 0x1050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MovementTickInterval;                                     // 0x1054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DsActorTickInterval;                                      // 0x1058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsNavWalkMode;                                            // 0x105C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData21[0xB];                                       // 0x105D(0x000B) MISSED OFFSET
	class UAkAudioEvent*                               MonsterBornSound;                                         // 0x1068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               MonsterDeadSound;                                         // 0x1070(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               MonsterIdleSound;                                         // 0x1078(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               MonsterRunSound;                                          // 0x1080(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NoPathToTargetTimer;                                      // 0x1088(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterAnimGroupMask                              AnimGroupMask;                                            // 0x108C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData22[0xB];                                       // 0x108D(0x000B) MISSED OFFSET
	bool                                               ExplodeBeforeDieEnabled;                                  // 0x1098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData23[0x3];                                       // 0x1099(0x0003) MISSED OFFSET
	int                                                ExplodeSkillID;                                           // 0x109C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExplodeSkillDuration;                                     // 0x10A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData24[0xD0];                                      // 0x10A4(0x00D0) MISSED OFFSET
	float                                              LagCompensationRecordInterval;                            // 0x1174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData25[0x58];                                      // 0x1178(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraSimpleCharacter");
		return pStaticClass;
	}


	bool TestPathSyncToLocation(const struct FVector& Location);
	bool TestPathSyncToActor(class AActor* Actor);
	void StopMovementMode();
	void StartMovementMode();
	void ShowHeadShootDeadEffect();
	void SetCopyBoneSimpleChar(class ASTExtraSimpleCharacter* InSimpleChar);
	void ResetCharAnimParam();
	void OnRep_SyncAIState();
	void OnRep_ReplicatedMovement();
	void OnRep_RageLevel();
	void OnRep_MonsterSyncID();
	void OnRep_MonsterNameID();
	void NotifyInitial();
	void LeaveAIState(ESTEAIState NewState, bool bIsNotify);
	bool IsSameTeam(class APawn* Other);
	bool IsEnableBroadcastDamage(const struct FDamageEvent& DamageEvent, float Damage);
	bool IsCanCopyBone();
	bool IsBoss();
	bool IsBigBoss();
	void InitHitBox();
	void InitCharAnimParam();
	bool HasAIState(ESTEAIState NewState);
	void HandleHitByBullet(class AActor* Causer);
	void GotoEarthAndDie();
	struct FVector GetServerHeadLocation();
	class ASTExtraPlayerController* GetPlayerControllerSafety();
	int GetMonsterType();
	float GetHitBoxRadius();
	EAvatarDamagePosition GetHitBodyTypeByHitPos(const struct FVector& InHitPos);
	EAvatarDamagePosition GetHitBodyTypeByBoneName(const struct FString& InBoneName);
	EAvatarDamagePosition GetHitBodyType(const struct FVector& InHitPos, const struct FVector& InImpactVec, const struct FString& InBoneName);
	TEnumAsByte<EHitPartJugementType> GetCurHitPartJugementType();
	class ASTExtraSimpleCharacter* GetCopyBoneSimpleChar();
	struct FSimpleCharAnimParamList GetAnimParam();
	int GetAliveTimeSeconds();
	void ExplodeBeforeDie(class AController* EventInstigator, class AActor* DamageCauser, const struct FDamageEvent& DamageEvent, float _finalDamage, const struct FVector& _hitImpulseDir, const struct FHitResult& _hitInfo, bool bIsHeadshot);
	void EnterAIState(ESTEAIState NewState, bool bIsNotify);
	void DisappearOnDeath();
	void DieAfterExplode();
	void DelayHidden();
	void ClearOnDeath(class AController* EventInstigater, const struct FDamageEvent& DamageEvent);
	bool CheckPlayerNeedUpdateAnimation();
	bool CheckHasFunc(EMonsterFuncType Func);
	void CharacterMovementUpdatedCallback(float DeltaTime, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	EAvatarDamagePosition CalcHitBodyType(const struct FVector& HitPos, const struct FVector& Projvec, const struct FVector& CenterPos, const struct FBodyTypeDef& bodyDef);
	void BroadcastReliableLeaveAIState(ESTEAIState NewState, bool bIsNotify);
	void BroadcastReliableEnterAIState(ESTEAIState NewState, bool bIsNotify);
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const struct FVehicleDamageEvent& VehicleDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const struct FRadialDamageEvent& PointDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const struct FPoisonDamageEvent& PoisonDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const struct FSTPointDamageEvent& PointDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const struct FMeleeDamageEvent& MeleeDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const struct FSTPointDamageEvent& PointDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const struct FFallingDamageEvent& FallingDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const struct FDrowningDamageEvent& DrowningDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const struct FSTBurningDamageEvent& BurningDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const struct FSTAirAttackRadialDamageEvent& AirAttackDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, unsigned char HitPart);
	void BroadcastClientsDebugSpeed(float Speed);
	void BroadcastClientsDebugOutputDamage(float OutputDmg);
	void BPSetEyeEffect(float Switch, const struct FLinearColor& Color);
	void BPNotifyStartDying(class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType);
	void BPNotifyInitial();
	void BPNotifyDeathEnd(class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType);
	void BPMonsterInitTableDone();
	void BPDie(float KillingDamage, class AController* EventInstigator, class AActor* DamageCauser, const struct FDamageEvent& DamageEvent);
	bool BP_HasAIState(EBPAIState NewState);
	bool AllowAIState(ESTEAIState NewState);
	void AddWeaponDamageAddition(unsigned char WeaponType);
	bool AddHealthSafety(float AddVal, class AController* DamageInstigator, const struct FDamageEvent& DamageEvente, class AActor* DamageCauser, bool bHeadShot);
};


// Class ShadowTrackerExtra.STExtraSimpleCharacterPhysics
// 0x0048 (0x0158 - 0x0110)
class USTExtraSimpleCharacterPhysics : public UActorComponent
{
public:
	float                                              VelocityDampingOnGround;                                  // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VelocityDampingInMidAir;                                  // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StepHeight;                                               // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ResetSimulatePreventPenetrationTime;                      // 0x011C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPreventPenetration;                                      // 0x0120(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x37];                                      // 0x0121(0x0037) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraSimpleCharacterPhysics");
		return pStaticClass;
	}


	void AddVelocity(const struct FVector& InVelocity);
};


// Class ShadowTrackerExtra.STExtraSimulatedSlidingVehicle
// 0x0220 (0x14A0 - 0x1280)
class ASTExtraSimulatedSlidingVehicle : public ASTExtraWheeledVehicle
{
public:
	class UAkAudioEvent*                               Sfx_JumpHeavy;                                            // 0x1280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_LandingLight;                                         // 0x1288(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_LandingHeavy;                                         // 0x1290(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_SlideEnemy;                                           // 0x1298(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_SlideTeammate;                                        // 0x12A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_JumpLight;                                            // 0x12A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               Sfx_Brake;                                                // 0x12B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SlideSoundSpeedThreshold;                                 // 0x12B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x12BC(0x0004) MISSED OFFSET
	class UClass*                                      SpecialAttachActorClass;                                  // 0x12C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SpecialAttachActorSocket;                                 // 0x12C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDefineID                               SpecialAttachActorItemDefineID;                           // 0x12D0(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                      CachedSpecialAttachActor;                                 // 0x12E8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x12F0(0x0004) MISSED OFFSET
	float                                              PlayerEnterVelocityRate;                                  // 0x12F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PlayerEnterVelocityDelay;                                 // 0x12F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinAddEnterVelocity;                                      // 0x12FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     PlayerEnterVelocity;                                      // 0x1300(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxStayAtDropGroundSecond;                                // 0x130C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x1310(0x0004) MISSED OFFSET
	TEnumAsByte<EPhysicalSurface>                      InAirSurfaceType;                                         // 0x1314(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EPhysicalSurface>                      LastJumpLandSurfaceType;                                  // 0x1315(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x1A];                                      // 0x1316(0x001A) MISSED OFFSET
	bool                                               RepUseSyncatClient;                                       // 0x1330(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               SnowBoardUnuseable;                                       // 0x1331(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UseServerCtr;                                             // 0x1332(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x5];                                       // 0x1333(0x0005) MISSED OFFSET
	class USimulatedSlidingMovementComponent*          SlidingMovementComp;                                      // 0x1338(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData05[0x10];                                      // 0x1340(0x0010) MISSED OFFSET
	struct FSTExtraVehicleSfxLoop                      SlideSfxLoop;                                             // 0x1350(0x0070) (ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FSTExtraVehicleSfxLoop                      BrakeSfxLoop;                                             // 0x13C0(0x0070) (ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FScriptMulticastDelegate                    OnSlidingVehicleLanding;                                  // 0x1430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<int, float>                                   DeviceUpdateTrailIntervalMap;                             // 0x1440(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x10];                                      // 0x1490(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraSimulatedSlidingVehicle");
		return pStaticClass;
	}


	void SpawnOrDelSpecialAttachActor(bool IsSpawn);
	void SetSyncatClient(bool SyncatClient);
	void SetPlayerEnterVelocity();
	void ServerEquipSpecialAttachActor();
	void ServerCloseCollision();
	void ServerCheckPlayEnterAnim();
	void SendToServerClientInitOK();
	void RecordJumpAction();
	void PlaySfxSpeedUp();
	void PlaySfxSlide(float DeltaTime, bool bIsSliding);
	void PlaySfxJumpStart(bool bIsHeavy);
	void PlaySfxJumpEnd(bool bIsHeavy);
	void PlaySfxBrake(float DeltaTime, bool bIsBraking);
	void PlayFXJumpStart();
	void OnRep_UseSyncatClient();
	void OnRep_SpecialAttachActor();
	class USimulatedSlidingMovementComponent* GetSimulateSlidingMovementComp();
	void ExitVehicle();
	void EnterVehicle(bool IsSucc);
	void ClientPlayerAttachedToVehicle(class ASTExtraVehicleBase* InVehicle);
	void ClientEnterVehicle(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType);
	bool CheckHaveSpecialAttachActor();
	void BroadcastClientExitVehicle();
	void BroadcastClientEnterVehicle(bool InPlayTakeOut, bool InVelocityInhert, const struct FVector& InHertVelocity);
	void AfterExitVehicleAnimPlay();
	void ActiveFXBrake(bool Inactive);
};


// Class ShadowTrackerExtra.STExtraSnowMan
// 0x0000 (0x03A0 - 0x03A0)
class ASTExtraSnowMan : public AUAERegionActor
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraSnowMan");
		return pStaticClass;
	}


	void UpdateSnowManStatusBlueprint(ESnowManStatus Status);
	void UpdateSnowManStatus(ESnowManStatus Status);
};


// Class ShadowTrackerExtra.STExtraUIUtils
// 0x0000 (0x0028 - 0x0028)
class USTExtraUIUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraUIUtils");
		return pStaticClass;
	}


	static void PrintGameLog(const struct FString& LogContent);
	static bool IsPlayerNameTeammate(class UUAEUserWidget* UAEUserWidget, const struct FString& PlayerName);
	static struct FString GetTeammateUIDList(class UUAEUserWidget* UAEUserWidget);
	static struct FString GetPlayerUIDByName(class UUAEUserWidget* UAEUserWidget, const struct FString& InPlayerName);
	static struct FString GetPlayerOpenIDByName(class UUAEUserWidget* UAEUserWidget, const struct FString& InPlayerName);
	static struct FString GetOwningPlayerRoleID(class UUAEUserWidget* UAEUserWidget);
	static class ASTExtraPlayerCharacter* GetOwningPlayerPawnOrVehicleDriver(class UUAEUserWidget* UAEUserWidget);
	static struct FString GetOwningPlayerOpenID(class UUAEUserWidget* UAEUserWidget);
	static class ASTExtraPlayerController* GetOwningPlayerNoDefault(class UUAEUserWidget* UAEUserWidget);
	static class ASTExtraPlayerController* GetOwningPlayer(class UUAEUserWidget* UAEUserWidget);
	static struct FText GetMinuteAndSecondTextByTime(int Second);
	static struct FText GetFloatAsStringWithPrecision(float TheFloat, int Precision, bool IncludeLeadingZero);
	static class ASTExtraPlayerState* GetCurPlayerState(class UUAEUserWidget* UAEUserWidget);
	static struct FString GetBattleID(class UUAEUserWidget* UAEUserWidget);
};


// Class ShadowTrackerExtra.STExtraUnderWaterEffectComp
// 0x0090 (0x0350 - 0x02C0)
class USTExtraUnderWaterEffectComp : public USceneComponent
{
public:
	struct FName                                       UnderWaterFogTagName;                                     // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      UnderWaterCamEffectClass;                                 // 0x02C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                                  UnderWaterCamEffectTransform;                             // 0x02D0(0x0030) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               SfxInWater;                                               // 0x0300(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                               SfxOutWater;                                              // 0x0308(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FoggyWeatherUnderWaterFogMaxOpacity;                      // 0x0310(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              NormalWeatherUnderWaterFogMaxOpacity;                     // 0x0314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*              UnderWaterFogComp;                                        // 0x0318(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AWaterSwimActor*>                     WaterSwimObjs;                                            // 0x0320(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UExponentialHeightFogComponent*>      SceneFogComps;                                            // 0x0330(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UCameraComponent*                            LastActiveCamComp;                                        // 0x0340(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraUnderWaterEffectComp");
		return pStaticClass;
	}


	void AddWaterSwimActor(class AWaterSwimActor* Actor);
};


// Class ShadowTrackerExtra.STExtraVehicleAnimInstance
// 0x03D0 (0x1070 - 0x0CA0)
class USTExtraVehicleAnimInstance : public USTExtraAnimInstance
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0CA0(0x00D0) MISSED OFFSET
	class UBlendSpace*                                 BackUpAnimBlendSpace;                                     // 0x0D70(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               BackUpAnimAnimSequence;                                   // 0x0D78(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 IdleAnim;                                                 // 0x0D80(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                               LeanInAnim;                                               // 0x0D88(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                               LeanOutAnim;                                              // 0x0D90(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 AimAnim;                                                  // 0x0D98(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                               AimAnim1D;                                                // 0x0DA0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimVehParamList                           VehAnimParam;                                             // 0x0DA8(0x0030) (BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimationAsset*                             DriverAnim;                                               // 0x0DD8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 DriverAnimBS;                                             // 0x0DE0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               DriverAnimAsSeq;                                          // 0x0DE8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 DriverAnimAsBS;                                           // 0x0DF0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               DriverMotorbikeIdleAnim;                                  // 0x0DF8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 DriverMotorbikeVacateAnim;                                // 0x0E00(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               PassengerMotorbikeIdleAnim;                               // 0x0E08(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 PassengerMotorbikeVacateAnim;                             // 0x0E10(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 MotorbikeDriverAnim;                                      // 0x0E18(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               SurfBoard_IdleAnim;                                       // 0x0E20(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 SurfBoard_MoveAnim;                                       // 0x0E28(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               SurfBoard_JumpAnim;                                       // 0x0E30(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               SurfBoard_LandAnim;                                       // 0x0E38(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               SurfBoard_JumpLeftTurnAnim;                               // 0x0E40(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               SurfBoard_JumpRightTurnAnim;                              // 0x0E48(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SpeedThresholds;                                          // 0x0E50(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0E54(0x0004) MISSED OFFSET
	class UAnimSequence*                               Ski_JumpStationary;                                       // 0x0E58(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_DownTurnLR;                                           // 0x0E60(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_DownTurnRL;                                           // 0x0E68(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_DownTurnFD;                                           // 0x0E70(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                               Ski_Falling;                                              // 0x0E78(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_DownFallLandingAdditive;                              // 0x0E80(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_DownFallLandingHard;                                  // 0x0E88(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               VehicleWeaponReload;                                      // 0x0E90(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               AimAdd;                                                   // 0x0E98(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               SeatIdle;                                                 // 0x0EA0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsVehicleAnimLoading;                                     // 0x0EA8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsDriver;                                                 // 0x0EA9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsAimAdd;                                                 // 0x0EAA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsSeatIdle;                                               // 0x0EAB(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               HasLeanAnim;                                              // 0x0EAC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0EAD(0x0003) MISSED OFFSET
	class UAnimSequence*                               Reload;                                                   // 0x0EB0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsReload;                                                 // 0x0EB8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsFPPAimValid;                                            // 0x0EB9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsFPPVehicleAnimInstace;                                  // 0x0EBA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0EBB(0x0001) MISSED OFFSET
	float                                              DriverMoveDir;                                            // 0x0EBC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UseNewAimBS;                                              // 0x0EC0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0EC1(0x0003) MISSED OFFSET
	float                                              NewAimVehViewYaw;                                         // 0x0EC4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsMotorcycleDriver;                                       // 0x0EC8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0EC9(0x0003) MISSED OFFSET
	float                                              MotorcycleDriverStopAnimBlendWeights;                     // 0x0ECC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShouldBlendForegripAnim;                                  // 0x0ED0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseVehicleWeapon;                                        // 0x0ED1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReloadVehicleWeapon;                                     // 0x0ED2(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x1];                                       // 0x0ED3(0x0001) MISSED OFFSET
	struct FRotator                                    VehicleWeaponRotator;                                     // 0x0ED4(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UBlendSpace*                                 VehicleWeaponAimOffsetBlendSpace;                         // 0x0EE0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVehicleWeaponAimOffset;                                  // 0x0EE8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_bVehicleWeaponUseHandIK;                                // 0x0EE9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x6];                                       // 0x0EEA(0x0006) MISSED OFFSET
	struct FTransform                                  C_VehicleWeaponGripTransformR;                            // 0x0EF0(0x0030) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                                  C_VehicleWeaponGripTransformL;                            // 0x0F20(0x0030) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     UseVehicleIdleBlendSpaceXY;                               // 0x0F50(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EVehAnimAssetType>                     DriverAnimType;                                           // 0x0F5C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0F5D(0x0003) MISSED OFFSET
	float                                              AddtiveNormalSeatAlpha;                                   // 0x0F60(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AddtiveNormalSeatIdleAlpha;                               // 0x0F64(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    IdleAnimBSParam;                                          // 0x0F68(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              LeanOutAnimBSXParam;                                      // 0x0F74(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsReloadingOnNarrowSeat;                                  // 0x0F78(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0F79(0x0003) MISSED OFFSET
	struct FRotator                                    AimAnimBSParam;                                           // 0x0F7C(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               ShouldTransIdleToAim;                                     // 0x0F88(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShouldTransIdleToLeanOut;                                 // 0x0F89(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShouldTransLeanOutToAim;                                  // 0x0F8A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShouldTransLeanInToIdle;                                  // 0x0F8B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShouldTransAimToIdle;                                     // 0x0F8C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShouldTransAimToLeanIn;                                   // 0x0F8D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0x6];                                       // 0x0F8E(0x0006) MISSED OFFSET
	bool                                               IsVehicleMotorbike;                                       // 0x0F94(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsVehicleMotorbikeAnimLoaded;                             // 0x0F95(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x2];                                       // 0x0F96(0x0002) MISSED OFFSET
	float                                              VacateHight;                                              // 0x0F98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    LastRotator;                                              // 0x0F9C(0x000C) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     VehicleMoveVelocity;                                      // 0x0FA8(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0FB4(0x0004) MISSED OFFSET
	class UAnimMontage*                                JumpMontage;                                              // 0x0FB8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                EnterMontage;                                             // 0x0FC0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                VehicleWeaponFireMontage;                                 // 0x0FC8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       NowbaseCharacter;                                         // 0x0FD0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraVehicleBase*                         CurrentVehicle;                                           // 0x0FD8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSnowBoard;                                             // 0x0FE0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0FE1(0x0003) MISSED OFFSET
	float                                              CharacterSpeed;                                           // 0x0FE4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_CurrentPlayingLandAnim;                               // 0x0FE8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               Ski_CurrentPlayingJumpAnim;                               // 0x0FF0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiJumping;                                            // 0x0FF8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiLowJumping;                                         // 0x0FF9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiFalling;                                            // 0x0FFA(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiLanding;                                            // 0x0FFB(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiPlayingLandAnimEnd;                                 // 0x0FFC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsSkiPlayingJumpAnimEnd;                                 // 0x0FFD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x2];                                       // 0x0FFE(0x0002) MISSED OFFSET
	class UCurveFloat*                                 SkiSpeedToMaxTurnCurve;                                   // 0x1000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 SkiSpeedToMaxCrouchCurve;                                 // 0x1008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 SkiSpeedToFallingCurve;                                   // 0x1010(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiBlendSpaceXInput;                                      // 0x1018(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiBlendSpaceYInput;                                      // 0x101C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiFallingBSInput;                                        // 0x1020(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiPlayJumpAnimRate;                                      // 0x1024(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiPlayJumpAnimRateMin;                                   // 0x1028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiPlayJumpAnimRateMax;                                   // 0x102C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiJumpStationaryRiseRate;                                // 0x1030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiDownTurnLRRate;                                        // 0x1034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiDownTurnRLRate;                                        // 0x1038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiDownTurnFDRate;                                        // 0x103C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsDisableSkiSlopAdapt;                                   // 0x1040(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x3];                                       // 0x1041(0x0003) MISSED OFFSET
	float                                              DisableSkiSlopeAdaptReMainTime;                           // 0x1044(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdaptSkiSlopeSpeed;                                       // 0x1048(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiIKSlopBlendRate;                                       // 0x104C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiIKSlopBlendRateSpeed;                                  // 0x1050(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiStandRotatingAlphaSpeed;                               // 0x1054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SkiStandRotatingAlpha;                                    // 0x1058(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0x4];                                       // 0x105C(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      SkiSkeletalMeshComp;                                      // 0x1060(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_VehicleMotorbike_And_VehicleMotorbikeAnimLoaded;      // 0x1068(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               b_C_VehicleMotorbike_And_VehicleMotorbikeAnimLoaded_And_IsDriver;// 0x1069(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData17[0x2];                                       // 0x106A(0x0002) MISSED OFFSET
	float                                              C_DriverAnimTimer;                                        // 0x106C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraVehicleAnimInstance");
		return pStaticClass;
	}


	void PlayEnterMontage();
	void OnOwnerDetachFromVehicle(class ASTExtraVehicleBase* InVehicle);
	void OnOwnerAttachedToVehicle(class ASTExtraVehicleBase* InVehicle);
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt);
	void HandleVehicleWeaponStateChanged(TEnumAsByte<EFreshWeaponStateType> NewState);
	void HandleOwnerAnimEvent(const struct FName& EventMsg);
};


// Class ShadowTrackerExtra.STExtraVehicleUtils
// 0x0000 (0x0028 - 0x0028)
class USTExtraVehicleUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraVehicleUtils");
		return pStaticClass;
	}


	static bool IsPassenger(class ASTExtraBaseCharacter* Character);
	static bool IsDriver(class ASTExtraBaseCharacter* Character);
	static class UWorld* GetWorldFromActor(class AActor* Actor);
	static class UVehicleUserComponent* GetVehicleUserComp(class ASTExtraBaseCharacter* Character);
	static struct FString GetVehicleSpawnPath(int VehicleID);
	static EAvatarDamagePosition GetVehiclePartByBoneName(class ASTExtraVehicleBase* Vehicle, const struct FName& BoneName);
	static struct FString GetVehicleInfo(class ASTExtraVehicleBase* VH);
	static class UVehicleUserComponent* GetFirstVehicleUserComp(class UWorld* World);
	static class ASTExtraBaseCharacter* GetDriver(class ASTExtraVehicleBase* Vehicle);
	static class ASTExtraPlayerController* GetController(class ASTExtraBaseCharacter* Character);
	static struct FString GetCharacterInfo(class ASTExtraBaseCharacter* CH);
	static class ASTExtraBaseCharacter* GetCharacter(class ASTExtraPlayerController* PC);
	static class ASTExtraVehicleBase* AirDropVehicle(class UWorld* World, const struct FVector& SpawnLoc, const struct FVehicleGenerateRandomInfo& GenerateInfo);
};


// Class ShadowTrackerExtra.STExtraVehicleWheel
// 0x0028 (0x0118 - 0x00F0)
class USTExtraVehicleWheel : public UVehicleWheel
{
public:
	struct FVector                                     SuspensionTravelDir;                                      // 0x00F0(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     TireForceOffset;                                          // 0x00FC(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ECollisionChannel>                     QueryChannel;                                             // 0x0108(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	float                                              LongSlipEffectThreshold;                                  // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LatSlipEffectThreshold;                                   // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0114(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STExtraVehicleWheel");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STHairAnimInstance
// 0x0030 (0x03F0 - 0x03C0)
class USTHairAnimInstance : public UAnimInstance
{
public:
	class ASTExtraBaseCharacter*                       C_OwnerCharacter;                                         // 0x03C0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_IsFPPMode;                                              // 0x03C8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	struct FVector                                     C_MoveVelocityInWorldSpace;                               // 0x03CC(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     C_MoveVelocityInWorldSpaceReverse;                        // 0x03D8(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0xC];                                       // 0x03E4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STHairAnimInstance");
		return pStaticClass;
	}


	class USkeletalMeshComponent* TryGetParentMeshComponent();
};


// Class ShadowTrackerExtra.UAESkeletalMeshComponent
// 0x0000 (0x0CF0 - 0x0CF0)
class UUAESkeletalMeshComponent : public USkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkeletalMeshComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STMonsterMeshComponent
// 0x0000 (0x0CF0 - 0x0CF0)
class USTMonsterMeshComponent : public UUAESkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STMonsterMeshComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STPetMeshComponent
// 0x0000 (0x0CF0 - 0x0CF0)
class USTPetMeshComponent : public UUAESkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STPetMeshComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STPlayerCameraManager
// 0x0010 (0x1AE0 - 0x1AD0)
class ASTPlayerCameraManager : public APlayerCameraManager
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x1AD0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STPlayerCameraManager");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STReplicationGraph
// 0x0140 (0x0430 - 0x02F0)
class USTReplicationGraph : public UReplicationGraph
{
public:
	TArray<struct FRepGraphConfig>                     StaticGraph;                                              // 0x02F0(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FRepGraphConfig>                     DynamicGraph;                                             // 0x0300(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<class UClass*>                              SpatializedClasses;                                       // 0x0310(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                              NonSpatializedClasses;                                    // 0x0320(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                              AlwaysRelevantClasses;                                    // 0x0330(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                              IgnoredClasses;                                           // 0x0340(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                              ActorsWithoutNetConnection;                               // 0x0350(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSTConnectionAlwaysRelevantNodePair> AlwaysRelevantForConnectionList;                          // 0x0360(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_GridSpatialization2D*  GridNode;                                                 // 0x0370(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_ActorList*             AlwaysRelevantNode;                                       // 0x0378(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0380(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STReplicationGraph");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STReplicationGraphNode_PlayerStateFrequencyLimiter
// 0x0028 (0x0078 - 0x0050)
class USTReplicationGraphNode_PlayerStateFrequencyLimiter : public UReplicationGraphNode
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0050(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STReplicationGraphNode_PlayerStateFrequencyLimiter");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STReplicationGraphNode_AR_FC
// 0x0218 (0x0348 - 0x0130)
class USTReplicationGraphNode_AR_FC : public UReplicationGraphNode_AlwaysRelevant_ForConnection
{
public:
	unsigned char                                      UnknownData00[0x218];                                     // 0x0130(0x0218) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STReplicationGraphNode_AR_FC");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.Stronghold
// 0x0158 (0x04E8 - 0x0390)
class AStronghold : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0390(0x0008) MISSED OFFSET
	class USceneComponent*                             Root;                                                     // 0x0398(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStrongholdMiniMapData                      StrongholdMiniMapData;                                    // 0x03A0(0x0078) (Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                              DelayActiveStrongholdCD;                                  // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	struct FString                                     RevivalTowerPath;                                         // 0x0420(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FStrongholdWeaponBoxConfig>          WeaponBoxConfigs;                                         // 0x0430(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<struct FString, int>                          VehicleTypes;                                             // 0x0440(0x0050) (Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                              DelaySpawnVehicleCD;                                      // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                FuelPercentMax;                                           // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               ActiveByStartVolume;                                      // 0x0498(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bFreezeVehicle;                                           // 0x0499(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x2];                                       // 0x049A(0x0002) MISSED OFFSET
	int                                                UnfreezeVehicleTime;                                      // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bRegisterGameMode;                                        // 0x04A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x3];                                       // 0x04A1(0x0003) MISSED OFFSET
	float                                              CircleContainMaxFloatLength;                              // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCircleMgrComponent*                         CacheCircleMgrComponent;                                  // 0x04A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x38];                                      // 0x04B0(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.Stronghold");
		return pStaticClass;
	}


	void SetTimes(float SpawnVehicleCD, float ActiveTimeToSet, float UnfreezeTimeToSet);
	void OnWeaponBoxOpened();
	void ActiveStrongHold();
};


// Class ShadowTrackerExtra.StrongHoldPlatformActor
// 0x0010 (0x03A0 - 0x0390)
class AStrongHoldPlatformActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0390(0x0008) MISSED OFFSET
	float                                              SecondsToRaiseCpp;                                        // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x039C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.StrongHoldPlatformActor");
		return pStaticClass;
	}


	bool HandleTimerStopped();
};


// Class ShadowTrackerExtra.STScreenAppearanceComponent
// 0x00C0 (0x01D0 - 0x0110)
class USTScreenAppearanceComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	class UStaticMesh*                                 AppearanceMeshTemplate;                                   // 0x0118(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAppearanceMatData>                  AppearancePresentList;                                    // 0x0120(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                                  AppearanceMeshRelativeTransform;                          // 0x0130(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                        OwnerAppearanceMesh;                                      // 0x0160(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAppearanceMeshData>                 AppearanceMeshDataList;                                   // 0x0168(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FScreenParticleEffectData>           ScreenParticleEffectList;                                 // 0x0178(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FName                                       ScreenPlane;                                              // 0x0188(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMltAppearanceMatData>               MultiAppearancePresentList;                               // 0x0190(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAppearanceMatData>                  CurAppearanceList;                                        // 0x01A0(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UCameraComponent*                            CurActiveCameraCache;                                     // 0x01B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x18];                                      // 0x01B8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STScreenAppearanceComponent");
		return pStaticClass;
	}


	void UpdateMultiAppearancePresentList(float DeltaTime);
	void StopScreenParticleEffect(TEnumAsByte<EScreenParticleEffectType> EffectType);
	void StopScreenAppearance(const struct FString& AppearanceName, bool StopFromPlayFunc);
	void StopAllScreenParticleEffect();
	void StopAllScreenAppearance();
	void SetScreenParticleParam(TEnumAsByte<EScreenParticleEffectType> EffectType, float InEffectValue);
	void SetAppearanceActive(const struct FName& AppearanceName, bool bNewActive, bool bReset);
	void SetAllAppearancesActive(bool bNewActive, bool bReset);
	void PlayScreenParticleEffect(TEnumAsByte<EScreenParticleEffectType> EffectType, float InEffectValue);
	class UMaterialInstanceDynamic* PlayPresentScreenAppearance(const struct FString& AppearanceName);
	void PlayGraduallyShowOut(const struct FString& AppearanceKey, float Frag, float DelayTime);
	void PlayGraduallyShowIn(const struct FString& AppearanceKey, float Frag, float DelayTime, float BeginAlpha);
	class UMaterialInstanceDynamic* PlayCustomScreenAppearance(const struct FString& AppearanceName, class UMaterialInterface* MatToPlay, float LifeSpan, bool HideUI);
	void OnAsyncLoadingFinished(int AppearancePresentIndex);
	bool IsScreenAppearancePlaying(const struct FString& AppearanceName);
	void HandleEffectLoadFinish(TEnumAsByte<EScreenParticleEffectType> EffectType);
};


// Class ShadowTrackerExtra.STScreenAppearanceComponentAdditional
// 0x0060 (0x0230 - 0x01D0)
class USTScreenAppearanceComponentAdditional : public USTScreenAppearanceComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x01D0(0x0050) MISSED OFFSET
	class UMaterialInstanceDynamic*                    currentMatInstanceDynamic;                                // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0228(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STScreenAppearanceComponentAdditional");
		return pStaticClass;
	}


	void StopScreenAppearanceWithTag(const struct FString& AppearanceName, const struct FString& TagString);
	class UMaterialInstanceDynamic* PlayCustomScreenAppearanceWithTag(const struct FString& AppearanceName, const struct FString& TagString, const struct FName& paramShaderUniformName, class UMaterialInterface* MatToPlay, float LifeSpan);
};


// Class ShadowTrackerExtra.STSimpleCharacterMovementComponent
// 0x0000 (0x0730 - 0x0730)
class USTSimpleCharacterMovementComponent : public UCharacterMovementComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STSimpleCharacterMovementComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.STSpectatorPawn
// 0x0010 (0x0428 - 0x0418)
class ASTSpectatorPawn : public ASpectatorPawn
{
public:
	float                                              WalkSpeedScale;                                           // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsRunning;                                               // 0x041C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsWalking;                                               // 0x041D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x2];                                       // 0x041E(0x0002) MISSED OFFSET
	class USpringArmComponent*                         CameraSpringArm;                                          // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STSpectatorPawn");
		return pStaticClass;
	}


	void OnStopWalking();
	void OnStopRunning();
	void OnStartWalking();
	void OnStartRunning();
	void MoveUp(float AxisValue);
};


// Class ShadowTrackerExtra.SupplySpot
// 0x0020 (0x03B0 - 0x0390)
class ASupplySpot : public AActor
{
public:
	int                                                TotalSupplyTimes;                                         // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                RemainSupplyTimes;                                        // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SupplyBulletNum;                                          // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ValidDistance;                                            // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    SupplySpotTimesChange;                                    // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SupplySpot");
		return pStaticClass;
	}


	void ReqUseSupplySpot(class ASTExtraPlayerController* InController);
};


// Class ShadowTrackerExtra.SupplySpotComponent
// 0x0028 (0x0138 - 0x0110)
class USupplySpotComponent : public UActorComponent
{
public:
	TArray<struct FSupplySpotConfig>                   SSConfigList;                                             // 0x0110(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UClass*                                      SpotClass;                                                // 0x0120(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASupplySpot*>                         SpotList;                                                 // 0x0128(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SupplySpotComponent");
		return pStaticClass;
	}


	void RemoveAllSupplySpot();
	void RandomSpawnSupplySpot(int Number);
};


// Class ShadowTrackerExtra.SufBoardLogic
// 0x0008 (0x0040 - 0x0038)
class USufBoardLogic : public UFloatLogic
{
public:
	class USurfBoardComp*                              MySurfBoardMove;                                          // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SufBoardLogic");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.SurfBoardComp
// 0x0078 (0x0188 - 0x0110)
class USurfBoardComp : public UActorComponent
{
public:
	float                                              SpeedThresholds;                                          // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpImpulse;                                              // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpImpulseBig;                                           // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxStateTime_Jump;                                        // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RealStateTime_Jump;                                       // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FloorInWaterLow;                                          // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HalfInWaterLow;                                           // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RealInWaterLow;                                           // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxHalfInWaterLowTime;                                    // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              JumpCeilingHeight;                                        // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HalfJumpHeight;                                           // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RealJumpHeight;                                           // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxInHalfJumpHeightTime;                                  // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSpeed;                                                 // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RealMaxSpeed;                                             // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InWaterTolerance;                                         // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0150(0x000C) MISSED OFFSET
	int                                                LeaveFlyPointNum;                                         // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                PersistanceFrameThreshold;                                // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AutoExitHeightThreshold;                                  // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitTestToSeaLevelBias;                                    // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfBoardState                                    SurfBoardState;                                           // 0x016C(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1B];                                      // 0x016D(0x001B) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SurfBoardComp");
		return pStaticClass;
	}


	void ServerSetSurfBoardState(ESurfBoardState InState);
	void OnRep_SurfBoardState();
	void ClientSetSurfBoardState(ESurfBoardState InState);
};


// Class ShadowTrackerExtra.SurviveHUD
// 0x0240 (0x06B8 - 0x0478)
class ASurviveHUD : public AHUD
{
public:
	unsigned char                                      bIsWorldMapVisible : 1;                                   // 0x0478(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0479(0x0003) MISSED OFFSET
	struct FVector                                     MarkerPosition;                                           // 0x047C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShowCrosshair;                                           // 0x0488(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShowHitPerform;                                           // 0x0489(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x048A(0x0006) MISSED OFFSET
	struct FHitPerformData                             HitPerform;                                               // 0x0490(0x0088) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                                  HUDMainTexture;                                           // 0x0518(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  CrossHairDisableTexture;                                  // 0x0520(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                                  CrossHairDisablePaintingTexture;                          // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               PlayHudHitSound;                                          // 0x0530(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0531(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData03[0x10];                                      // 0x0531(0x0010) UNKNOWN PROPERTY: ArrayProperty ShadowTrackerExtra.SurviveHUD.HUDWidgetClassList
	TArray<class UHUDWidgetBase*>                      HudWidgets;                                               // 0x0548(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0558(0x0010) MISSED OFFSET
	class UTexture2D*                                  HUDPlayerTexture;                                         // 0x0568(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCanvasIcon                                 Crosshair[0x5];                                           // 0x0570(0x0018) (NoDestructor, NativeAccessSpecifierPrivate)
	struct FCanvasIcon                                 ProgreesBar;                                              // 0x05E8(0x0018) (NoDestructor, NativeAccessSpecifierPrivate)
	struct FCanvasIcon                                 BKProgreesBar;                                            // 0x0600(0x0018) (NoDestructor, NativeAccessSpecifierPrivate)
	struct FCanvasIcon                                 ProgressBarPlayer[0x2];                                   // 0x0618(0x0018) (NoDestructor, NativeAccessSpecifierPrivate)
	struct FCanvasIcon                                 Marker;                                                   // 0x0648(0x0018) (NoDestructor, NativeAccessSpecifierPrivate)
	class UTexture2D*                                  HUDWorldMapTexture;                                       // 0x0660(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCanvasIcon                                 WORLDMAP;                                                 // 0x0668(0x0018) (NoDestructor, NativeAccessSpecifierPrivate)
	class UTexture2D*                                  AimCrosshairTextrue;                                      // 0x0680(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData05[0x30];                                      // 0x0688(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SurviveHUD");
		return pStaticClass;
	}


	void OnAsyncLoadingFinished();
	void EnableCrosshair(bool bEnable);
};


// Class ShadowTrackerExtra.SwimRingActor
// 0x0028 (0x03B8 - 0x0390)
class ASwimRingActor : public AActor
{
public:
	class UAnimSequence*                               IdleAnimSeq;                                              // 0x0390(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               SpringAnimSeq;                                            // 0x0398(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DSTriggerCoolDownTime;                                    // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xC];                                       // 0x03A4(0x000C) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComToPlay;                                    // 0x03B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SwimRingActor");
		return pStaticClass;
	}


	void TriggerPlaySpringAnim();
	void RPC_Broadcast_PlaySpringAnim();
	void ResetPlaySprintAnim();
	void InitWithSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshCom);
};


// Class ShadowTrackerExtra.TargetKeyOperation
// 0x0068 (0x0090 - 0x0028)
class UTargetKeyOperation : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0028(0x0058) MISSED OFFSET
	class ASTExtraBaseCharacter*                       PawnOwner;                                                // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraBaseCharacter*                       Target;                                                   // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TargetKeyOperation");
		return pStaticClass;
	}


	TEnumAsByte<EOperationRunResult> Update(float DeltaTime);
	struct FString ToString();
	void TaskRemoved();
	TEnumAsByte<EOperationRunResult> Start();
	bool IsValidate();
	bool IsReachable();
	TEnumAsByte<EOperationRunResult> Finish();
	void DebugDraw(const struct FColor& DebugColor, bool isPersist);
	void Awake();
};


// Class ShadowTrackerExtra.TargetMoveOperation
// 0x0030 (0x00C0 - 0x0090)
class UTargetMoveOperation : public UTargetKeyOperation
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0090(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TargetMoveOperation");
		return pStaticClass;
	}


	TEnumAsByte<EOperationRunResult> Update(float DeltaTime);
	TEnumAsByte<EOperationRunResult> Start();
	TEnumAsByte<EOperationRunResult> MoveCloseToTargetWithSprint(float DeltaTime);
	TEnumAsByte<EOperationRunResult> MoveCloseToTarget(float DletaTime);
	bool IsValidate();
	bool IsReachable();
	TEnumAsByte<EOperationRunResult> Finish();
};


// Class ShadowTrackerExtra.TargetSprintOperation
// 0x0008 (0x0098 - 0x0090)
class UTargetSprintOperation : public UTargetKeyOperation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TargetSprintOperation");
		return pStaticClass;
	}


	TEnumAsByte<EOperationRunResult> Start();
	bool IsValidate();
};


// Class ShadowTrackerExtra.TargetJumpOperation
// 0x0030 (0x00C0 - 0x0090)
class UTargetJumpOperation : public UTargetKeyOperation
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0090(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TargetJumpOperation");
		return pStaticClass;
	}


	void TaskRemoved();
	TEnumAsByte<EOperationRunResult> Start();
	bool IsValidate();
	void DebugDraw(const struct FColor& DebugColor, bool isPersist);
	void Awake();
};


// Class ShadowTrackerExtra.TargetCrouchOperation
// 0x0008 (0x0098 - 0x0090)
class UTargetCrouchOperation : public UTargetKeyOperation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TargetCrouchOperation");
		return pStaticClass;
	}


	TEnumAsByte<EOperationRunResult> Update(float DeltaTime);
	TEnumAsByte<EOperationRunResult> Start();
	bool IsValidate();
};


// Class ShadowTrackerExtra.TargetVehicleOperation
// 0x0020 (0x00B0 - 0x0090)
class UTargetVehicleOperation : public UTargetKeyOperation
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0090(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TargetVehicleOperation");
		return pStaticClass;
	}


	TEnumAsByte<EOperationRunResult> Update(float DeltaTime);
	TEnumAsByte<EOperationRunResult> Start();
	bool IsValidate();
};


// Class ShadowTrackerExtra.TaskAreaDefineActor
// 0x0048 (0x03D8 - 0x0390)
class ATaskAreaDefineActor : public AActor
{
public:
	TArray<struct FTaskAreaData>                       TaskAreaDatas;                                            // 0x0390(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TEnumAsByte<ETaskTriggerAreaType>                  TaskAreaType;                                             // 0x03A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A1(0x0007) MISSED OFFSET
	TArray<struct FVector>                             TaskAreaAnchors;                                          // 0x03A8(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                     PlayerLocation;                                           // 0x03B8(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	TArray<struct FVector>                             Points;                                                   // 0x03C8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TaskAreaDefineActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TeamMassActor
// 0x0010 (0x03A0 - 0x0390)
class ATeamMassActor : public AActor
{
public:
	TArray<struct FTeamMassPoint>                      MassList;                                                 // 0x0390(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TeamMassActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TeamModeComponent
// 0x0120 (0x0230 - 0x0110)
class UTeamModeComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x100];                                     // 0x0110(0x0100) MISSED OFFSET
	class ABattleRoyaleGameModeTeam*                   OwnerGameMode;                                            // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                RealTeamNum;                                              // 0x0218(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x14];                                      // 0x021C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TeamModeComponent");
		return pStaticClass;
	}


	void RemoveToTeamMap(class ASTExtraPlayerState* PlayerState);
	void RemoveTeam(int TeamID);
	void RemoveAllTeam();
	void RefreshWatchTeammates(class AUAEPlayerController* InController, int InTeamID);
	bool IsTeamIDValid(int TeamID);
	TArray<int> GetTeamIDsByCampID(int CampID);
	TArray<int> GetTeamIDs();
	TArray<TWeakObjectPtr<class ASTExtraPlayerState>> GetTeamates(int TeamID);
	int GetRealTeamNum();
	TArray<TWeakObjectPtr<class ASTExtraPlayerState>> GetCampmates(int CampID);
	TArray<int> GetCampIDs();
	TArray<TWeakObjectPtr<class ASTExtraPlayerState>> GetAllTeamates();
	void AddToTeamMap(class ASTExtraPlayerState* PlayerState);
	void AddToCampMap(class ASTExtraPlayerState* PlayerState);
	void AddTeamCount(int TeamCount, bool bReset);
};


// Class ShadowTrackerExtra.TestAIController
// 0x0010 (0x07C8 - 0x07B8)
class ATestAIController : public ABaseAIController
{
public:
	class UClass*                                      EquipedWeaponClass;                                       // 0x07B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      CharacterClass;                                           // 0x07C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TestAIController");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TimeLineSyncComponent
// 0x04F0 (0x0600 - 0x0110)
class UTimeLineSyncComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x4F0];                                     // 0x0110(0x04F0) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TimeLineSyncComponent");
		return pStaticClass;
	}


	void RPC_SrvSyncTimeLine_UnReliable(unsigned char InIndex, uint16_t InSrvInf, double InClientTime);
	void RPC_SrvSyncTimeLine(double InSrvSendTime, double InClientTime);
	void RPC_GetClientTimeRespond(int Index, float serverLevelTime, int64_t serverSystemTime, double serverBootTime);
	void RPC_GetClientTimeRequest(int Index);
	void RPC_ClientSyncTimeLine_UnReliable(unsigned char InIndex, uint16_t InSrvInf);
	void RPC_ClientSyncTimeLine(double InServerTime);
	void ReportDebugInfo(int RporetedId);
	void OnServerAboutToReconnect();
	void GetClientTimeInterval();
	void CheckTimeLine();
};


// Class ShadowTrackerExtra.TimeWatchDogComponent
// 0x00E0 (0x01F0 - 0x0110)
class UTimeWatchDogComponent : public UActorComponent
{
public:
	bool                                               bUseTimeSync;                                             // 0x0110(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              TimeStartDelay;                                           // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SyncInterval;                                             // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0xD4];                                      // 0x011C(0x00D4) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TimeWatchDogComponent");
		return pStaticClass;
	}


	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);
	void RPC_ClientSyncTimeLine(float InServerTime);
	void OnTimeInspectorColdMove_Vehicle();
	void OnTimeInspectorColdMove_Own();
	void OnServerAboutToReconnect();
	void CheckTimeLine();
};


// Class ShadowTrackerExtra.TirggerItem_TriggerBox
// 0x0010 (0x03A8 - 0x0398)
class ATirggerItem_TriggerBox : public ATriggerBox
{
public:
	struct FString                                     ExtraMsgInfo;                                             // 0x0398(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TirggerItem_TriggerBox");
		return pStaticClass;
	}


	void OnTriggerExit(class AActor* OverlappedActor, class AActor* Other);
	void OnTriggerEnter(class AActor* OverlappedActor, class AActor* Other);
};


// Class ShadowTrackerExtra.TrailMarkActor
// 0x0090 (0x0420 - 0x0390)
class ATrailMarkActor : public AActor
{
public:
	int                                                MaxQuadNum;                                               // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxQuadLength;                                            // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              QuadDirectionAcceptAngle;                                 // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	class UMaterialInterface*                          TrailMarkMaterial;                                        // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DefaultTrailWidth;                                        // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseTrailLength;                                          // 0x03AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03AD(0x0003) MISSED OFFSET
	float                                              DefaultTrailLength;                                       // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TextureLength;                                            // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                USegmentNum;                                              // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CoordU;                                                   // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SlippingCoordU;                                           // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BrokenCoordU;                                             // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseAdditionalType;                                       // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	float                                              AdditionalTrailWidth;                                     // 0x03CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdditionalTextureLength;                                  // 0x03D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AdditionalCoordU;                                         // 0x03D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AdditionalSlippingCoordU;                                 // 0x03D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AdditionalBrokenCoordU;                                   // 0x03DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDeferUpdateTrailMark;                                    // 0x03E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET
	class URuntimeMeshComponent*                       TrailMesh;                                                // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData04[0x30];                                      // 0x03F0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TrailMarkActor");
		return pStaticClass;
	}


	void UpdateInput(TArray<struct FTrailMarkInputData> NewInput);
	void StopUpdate();
	bool IsUpdating();
};


// Class ShadowTrackerExtra.TreasureBox
// 0x0028 (0x03B8 - 0x0390)
class ATreasureBox : public AActor
{
public:
	struct FString                                     GeneratorGroupName;                                       // 0x0390(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DeadInventoryBoxTemplate;                                 // 0x03A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       WrapperBoxName;                                           // 0x03A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                        Mesh;                                                     // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TreasureBox");
		return pStaticClass;
	}


	void OnPickUpDataEmptyOnServer();
	void GenerateWrappersBox(TArray<struct FAirDropBoxGenerateWrapperItemData> DataList, const struct FVector& BoxLoc);
};


// Class ShadowTrackerExtra.TreasureBoxPointActor
// 0x0008 (0x0398 - 0x0390)
class ATreasureBoxPointActor : public AActor
{
public:
	int                                                TreasureBoxPointID;                                       // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TreasureBoxPointActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ActiveInfectArea
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ActiveInfectArea : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ActiveInfectArea");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ActiveLevelNearBornPoint
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ActiveLevelNearBornPoint : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ActiveLevelNearBornPoint");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ActiveLevelNearBornPointNumLimit
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ActiveLevelNearBornPointNumLimit : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ActiveLevelNearBornPointNumLimit");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ActiveRelifePoint
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ActiveRelifePoint : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ActiveRelifePoint");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_AllUnitSetRageLevel
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_AllUnitSetRageLevel : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_AllUnitSetRageLevel");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_BroadcastVoice
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_BroadcastVoice : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_BroadcastVoice");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_CastUIMsg
// 0x0010 (0x00A0 - 0x0090)
class UTriggerAction_CastUIMsg : public UTriggerAction
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0090(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_CastUIMsg");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ChangeMonsterSpotByTrigger
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ChangeMonsterSpotByTrigger : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ChangeMonsterSpotByTrigger");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ChangeTimerEvent
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ChangeTimerEvent : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ChangeTimerEvent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_CircleEnd
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_CircleEnd : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_CircleEnd");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_CircleStartFromBegin
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_CircleStartFromBegin : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_CircleStartFromBegin");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_Task
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_Task : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_Task");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_CollectItem
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_CollectItem : public UTriggerAction_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_CollectItem");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_CreateTimerEvent
// 0x0018 (0x00A8 - 0x0090)
class UTriggerAction_CreateTimerEvent : public UTriggerAction
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0090(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_CreateTimerEvent");
		return pStaticClass;
	}


	void ChangeTime(float Time);
};


// Class ShadowTrackerExtra.TriggerAction_DestroyActor
// 0x0058 (0x00E8 - 0x0090)
class UTriggerAction_DestroyActor : public UTriggerAction
{
public:
	TArray<struct FAction_DestroyActorTag>             TagForRemoveActorList;                                    // 0x0090(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int                                                DestroyNumPerFrame;                                       // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bDestoryByHealth;                                         // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	TArray<struct FActorHealthSegment>                 ActorHealthSegmentList;                                   // 0x00A8(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00B8(0x0004) MISSED OFFSET
	float                                              DestoryByHealthActorsCD;                                  // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C0(0x0008) MISSED OFFSET
	TArray<struct FAction_PendDestroyActor>            AllPendingActors;                                         // 0x00C8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FAction_PendDestroyActor>            DestoryByHealthActors;                                    // 0x00D8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_DestroyActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_DirectorEnable
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_DirectorEnable : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_DirectorEnable");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_EnableGuidActor
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_EnableGuidActor : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_EnableGuidActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_EnterLevelAndStartMonsterWave
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_EnterLevelAndStartMonsterWave : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_EnterLevelAndStartMonsterWave");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_EnterRevival
// 0x0008 (0x0098 - 0x0090)
class UTriggerAction_EnterRevival : public UTriggerAction
{
public:
	class ABattleRoyaleGameModeTeam*                   GameModeTeam;                                             // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_EnterRevival");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ExitAllMonster
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ExitAllMonster : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ExitAllMonster");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ExitMonsterByFuncType
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ExitMonsterByFuncType : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ExitMonsterByFuncType");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ExitMonsterSpotByTrigger
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ExitMonsterSpotByTrigger : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ExitMonsterSpotByTrigger");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_FinishMatch
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_FinishMatch : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_FinishMatch");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_GenerateEnhanceSpot
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_GenerateEnhanceSpot : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_GenerateEnhanceSpot");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_KillPlayer
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_KillPlayer : public UTriggerAction_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_KillPlayer");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_KillUnit
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_KillUnit : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_KillUnit");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_LeaveRevival
// 0x0008 (0x0098 - 0x0090)
class UTriggerAction_LeaveRevival : public UTriggerAction
{
public:
	class ABattleRoyaleGameModeTeam*                   GameModeTeam;                                             // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_LeaveRevival");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_MonsterAutoExit
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_MonsterAutoExit : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_MonsterAutoExit");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_MsgToLevel
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_MsgToLevel : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_MsgToLevel");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_NodeActive
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_NodeActive : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_NodeActive");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_NodeDeactive
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_NodeDeactive : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_NodeDeactive");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_PlayerAddBuffBySkill
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_PlayerAddBuffBySkill : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_PlayerAddBuffBySkill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_PlayerBattleResult
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_PlayerBattleResult : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_PlayerBattleResult");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_PlayerRemoveBuffBySkill
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_PlayerRemoveBuffBySkill : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_PlayerRemoveBuffBySkill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_PlayMatinee
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_PlayMatinee : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_PlayMatinee");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_PostEventSound
// 0x0018 (0x00A8 - 0x0090)
class UTriggerAction_PostEventSound : public UTriggerAction
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0090(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_PostEventSound");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_PostGlobalAkEvent
// 0x0010 (0x00A0 - 0x0090)
class UTriggerAction_PostGlobalAkEvent : public UTriggerAction
{
public:
	TArray<class UAkAudioEvent*>                       AkEvents;                                                 // 0x0090(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_PostGlobalAkEvent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_PrintMsg
// 0x0008 (0x0098 - 0x0090)
class UTriggerAction_PrintMsg : public UTriggerAction
{
public:
	float                                              DelayTime;                                                // 0x0090(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_PrintMsg");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_PVPCallABoss
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_PVPCallABoss : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_PVPCallABoss");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_RandomAction
// 0x0020 (0x00B0 - 0x0090)
class UTriggerAction_RandomAction : public UTriggerAction
{
public:
	TArray<class UTriggerAction*>                      ChildActions;                                             // 0x0090(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        RandomSeeds;                                              // 0x00A0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_RandomAction");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_RedoCollectItem
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_RedoCollectItem : public UTriggerAction_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_RedoCollectItem");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_RemoveAllSupplySpot
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_RemoveAllSupplySpot : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_RemoveAllSupplySpot");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ResetAreaTrigger
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ResetAreaTrigger : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ResetAreaTrigger");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ResetEnhanceSpots
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ResetEnhanceSpots : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ResetEnhanceSpots");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SetUnitVisible
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_SetUnitVisible : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SetUnitVisible");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ShowCountDown
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ShowCountDown : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ShowCountDown");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ShowGameTips
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ShowGameTips : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ShowGameTips");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ShowPlayerCommonCountTips
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ShowPlayerCommonCountTips : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ShowPlayerCommonCountTips");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_ShowZombieWaveState
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_ShowZombieWaveState : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_ShowZombieWaveState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnAirplane
// 0x00B8 (0x0148 - 0x0090)
class UTriggerAction_SpawnAirplane : public UTriggerAction
{
public:
	struct FAirplaneParam                              PlaneParam;                                               // 0x0090(0x0040) (Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FAirplaneData                               CurPlaneData;                                             // 0x00D0(0x0078) (Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnAirplane");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnHeavyWeaponBox
// 0x0008 (0x0098 - 0x0090)
class UTriggerAction_SpawnHeavyWeaponBox : public UTriggerAction
{
public:
	float                                              DelayTimeScale;                                           // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnHeavyWeaponBox");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnItemCooked
// 0x03B0 (0x0440 - 0x0090)
class UTriggerAction_SpawnItemCooked : public UTriggerAction
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0090(0x0020) MISSED OFFSET
	struct FSpawnItemCfg                               SpawnItemCfg;                                             // 0x00B0(0x01B0) (Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UTriggerAction_SpawnItemUtils*               SpawnItemUtils;                                           // 0x0260(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FUAESpotDataSerialize                       SpotDataSerialize;                                        // 0x0268(0x01B0) (Transient, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0418(0x0010) MISSED OFFSET
	TArray<struct FRepeatSpawnItemCD>                  RepeatSpawnItemCDList;                                    // 0x0428(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0438(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnItemCooked");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnItemDrop
// 0x0220 (0x02B0 - 0x0090)
class UTriggerAction_SpawnItemDrop : public UTriggerAction
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0090(0x0030) MISSED OFFSET
	struct FSpawnItemCfg                               SpawnItemCfg;                                             // 0x00C0(0x01B0) (Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UTriggerAction_SpawnItemUtils*               SpawnItemUtils;                                           // 0x0270(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0278(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnItemDrop");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnItemForPlayer
// 0x0008 (0x02B8 - 0x02B0)
class UTriggerAction_SpawnItemForPlayer : public UTriggerAction_SpawnItemDrop
{
public:
	class ASTExtraPlayerController*                    TargetPC;                                                 // 0x02B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnItemForPlayer");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnItemInterface
// 0x0000 (0x0028 - 0x0028)
class UTriggerAction_SpawnItemInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnItemInterface");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnItemSecretRoom
// 0x0200 (0x0290 - 0x0090)
class UTriggerAction_SpawnItemSecretRoom : public UTriggerAction
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0090(0x0028) MISSED OFFSET
	struct FSpawnItemCfg                               SpawnItemCfg;                                             // 0x00B8(0x01B0) (Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FString                                     ActionTag;                                                // 0x0268(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bTraceGround;                                             // 0x0278(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0279(0x0007) MISSED OFFSET
	class UTriggerAction_SpawnItemUtils*               SpawnItemUtils;                                           // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0288(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnItemSecretRoom");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnItemSpotFile
// 0x0448 (0x04D8 - 0x0090)
class UTriggerAction_SpawnItemSpotFile : public UTriggerAction
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0090(0x0018) MISSED OFFSET
	struct FSpawnItemCfg                               SpawnItemCfg;                                             // 0x00A8(0x01B0) (Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UTriggerAction_SpawnItemUtils*               SpawnItemUtils;                                           // 0x0258(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FUAESpotDataSerialize                       SpotDataSerialize;                                        // 0x0260(0x01B0) (Transient, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0xC8];                                      // 0x0410(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnItemSpotFile");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnItemTrigger
// 0x0258 (0x02E8 - 0x0090)
class UTriggerAction_SpawnItemTrigger : public UTriggerAction
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0090(0x0040) MISSED OFFSET
	struct FSpawnItemCfg                               SpawnItemCfg;                                             // 0x00D0(0x01B0) (Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                               UseCfgLocation;                                           // 0x0280(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0281(0x0003) MISSED OFFSET
	struct FVector                                     CfgLocation;                                              // 0x0284(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               UseCfgRot;                                                // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0291(0x0003) MISSED OFFSET
	struct FRotator                                    CfgRotator;                                               // 0x0294(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UTriggerAction_SpawnItemUtils*               SpawnItemUtils;                                           // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x40];                                      // 0x02A8(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnItemTrigger");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnItemUtils
// 0x0368 (0x0390 - 0x0028)
class UTriggerAction_SpawnItemUtils : public UObject
{
public:
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0028(0x00C0) MISSED OFFSET
	TArray<struct FItemGenerateSpawnClass>             AllItemSpotDataToTick;                                    // 0x00E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x210];                                     // 0x00F8(0x0210) MISSED OFFSET
	class UWorld*                                      MyWorld;                                                  // 0x0308(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLocation2HostActor>                 HostActorList;                                            // 0x0310(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	class UObject*                                     TriggerAction;                                            // 0x0320(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0328(0x0030) MISSED OFFSET
	class UUAESpawnActorComponent*                     pSpawnMonsterHelper;                                      // 0x0358(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0360(0x0018) MISSED OFFSET
	struct FString                                     UseDebug;                                                 // 0x0378(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0388(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnItemUtils");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnMonsterOutBossArea
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_SpawnMonsterOutBossArea : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnMonsterOutBossArea");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnSupplySpot
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_SpawnSupplySpot : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnSupplySpot");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnUnit
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_SpawnUnit : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnUnit");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SpawnZombie
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_SpawnZombie : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SpawnZombie");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_StartMonsterWave
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_StartMonsterWave : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_StartMonsterWave");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_StartWeakGuid
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_StartWeakGuid : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_StartWeakGuid");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_StopWeakGuid
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_StopWeakGuid : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_StopWeakGuid");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SwitchWeather
// 0x0008 (0x0098 - 0x0090)
class UTriggerAction_SwitchWeather : public UTriggerAction
{
public:
	int                                                WeatherIdx;                                               // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SwitchWeather");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_SwitchWeatherLevel
// 0x0028 (0x00B8 - 0x0090)
class UTriggerAction_SwitchWeatherLevel : public UTriggerAction
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0090(0x0020) MISSED OFFSET
	class ADynamicWeatherExMgr*                        DynamicWeatherExMgr;                                      // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_SwitchWeatherLevel");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_TeamBattleResult
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_TeamBattleResult : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_TeamBattleResult");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_TeamMass
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_TeamMass : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_TeamMass");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_TeamTerminated
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_TeamTerminated : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_TeamTerminated");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_TeleportLevelPosi
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_TeleportLevelPosi : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_TeleportLevelPosi");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_TriggerActive
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_TriggerActive : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_TriggerActive");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_TriggerDeactive
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_TriggerDeactive : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_TriggerDeactive");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_UnitSetRageLevel
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_UnitSetRageLevel : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_UnitSetRageLevel");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerAction_UnitUseSkill
// 0x0000 (0x0090 - 0x0090)
class UTriggerAction_UnitUseSkill : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_UnitUseSkill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_AllTeamRevival
// 0x0000 (0x0058 - 0x0058)
class UTriggerCondition_AllTeamRevival : public UTriggerCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_AllTeamRevival");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_AND
// 0x0000 (0x0058 - 0x0058)
class UTriggerCondition_AND : public UTriggerCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_AND");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_Bool
// 0x0000 (0x0058 - 0x0058)
class UTriggerCondition_Bool : public UTriggerCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_Bool");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_BoolCompare
// 0x0000 (0x0058 - 0x0058)
class UTriggerCondition_BoolCompare : public UTriggerCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_BoolCompare");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_Task
// 0x0008 (0x0060 - 0x0058)
class UTriggerCondition_Task : public UTriggerCondition
{
public:
	TEnumAsByte<ETaskConditionType>                    TaskConditionType;                                        // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bActive;                                                  // 0x0059(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsConfigurable;                                          // 0x005A(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x5];                                       // 0x005B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_Task");
		return pStaticClass;
	}


	void SetTargetParam(int Value);
	void SetConditionParam(int Value);
	bool IsSatisfy(class UTriggerEvent* Event);
	bool IsSameCondition(TEnumAsByte<ETaskConditionType> InTaskConditionType);
	bool FillDataSource(class UVariableSet* InDataSource);
	bool DeactiveCondition(class UVariableSet* InDataSource);
	bool CompareParam(class UVariableSet* InDataSource);
	bool ActiveCondition(class UVariableSet* InDataSource);
};


// Class ShadowTrackerExtra.TriggerCondition_CollectItem
// 0x0008 (0x0068 - 0x0060)
class UTriggerCondition_CollectItem : public UTriggerCondition_Task
{
public:
	int                                                NeedToCollect;                                            // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                Collected;                                                // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_CollectItem");
		return pStaticClass;
	}


	void SetCollectConditionParam(const struct FString& InParams);
	bool GetItemIDFromData(class UVariableSet* InDataSource, int* OutItemID);
	bool GetItemCountFromData(class UVariableSet* InDataSource, int* outItemCount);
	int GetCollectProcess();
};


// Class ShadowTrackerExtra.TriggerCondition_GameMode
// 0x0000 (0x0060 - 0x0060)
class UTriggerCondition_GameMode : public UTriggerCondition_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_GameMode");
		return pStaticClass;
	}


	void SetGameModeType(EGameModeType GameModeType);
};


// Class ShadowTrackerExtra.TriggerCondition_InfectAreaInBlueCircle
// 0x0000 (0x0058 - 0x0058)
class UTriggerCondition_InfectAreaInBlueCircle : public UTriggerCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_InfectAreaInBlueCircle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_IntegerCompare
// 0x0000 (0x0058 - 0x0058)
class UTriggerCondition_IntegerCompare : public UTriggerCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_IntegerCompare");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_KillPlayer
// 0x0008 (0x0068 - 0x0060)
class UTriggerCondition_KillPlayer : public UTriggerCondition_Task
{
public:
	int                                                TargetKillingCount;                                       // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                InitProcess;                                              // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_KillPlayer");
		return pStaticClass;
	}


	void UpdateTaskProcess();
	bool GetKillCountFromData(class UVariableSet* InDataSource, int* outKillCount);
};


// Class ShadowTrackerExtra.TriggerCondition_No
// 0x0000 (0x0058 - 0x0058)
class UTriggerCondition_No : public UTriggerCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_No");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_ObjectEqual
// 0x0020 (0x0078 - 0x0058)
class UTriggerCondition_ObjectEqual : public UTriggerCondition
{
public:
	struct FString                                     CompareKeyName;                                           // 0x0058(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     ExtraMsg;                                                 // 0x0068(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_ObjectEqual");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_Operator
// 0x0000 (0x0060 - 0x0060)
class UTriggerCondition_Operator : public UTriggerCondition_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_Operator");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_OperatorAND
// 0x0000 (0x0060 - 0x0060)
class UTriggerCondition_OperatorAND : public UTriggerCondition_Operator
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_OperatorAND");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_OperatorOR
// 0x0000 (0x0060 - 0x0060)
class UTriggerCondition_OperatorOR : public UTriggerCondition_Operator
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_OperatorOR");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_OR
// 0x0000 (0x0058 - 0x0058)
class UTriggerCondition_OR : public UTriggerCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_OR");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_SpecifiedArea
// 0x0000 (0x0060 - 0x0060)
class UTriggerCondition_SpecifiedArea : public UTriggerCondition_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_SpecifiedArea");
		return pStaticClass;
	}


	void SetTriggerAreaType(TEnumAsByte<ETaskTriggerAreaType> TriggerAreaType);
	bool GetTriggerAreaTypeFromData(class UVariableSet* InDataSource, TEnumAsByte<ETaskTriggerAreaType>* outTriggerAreaType);
};


// Class ShadowTrackerExtra.TriggerCondition_SpecifiedItem
// 0x0000 (0x0060 - 0x0060)
class UTriggerCondition_SpecifiedItem : public UTriggerCondition_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_SpecifiedItem");
		return pStaticClass;
	}


	void SetSpecifiedItemID(int ItemID);
	bool GetItemIDFromData(class UVariableSet* InDataSource, int* OutItemID);
};


// Class ShadowTrackerExtra.TriggerCondition_SpecifiedPlace
// 0x0000 (0x0060 - 0x0060)
class UTriggerCondition_SpecifiedPlace : public UTriggerCondition_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_SpecifiedPlace");
		return pStaticClass;
	}


	void SetTriggerItemType(TEnumAsByte<ETaskTriggerItemType> TriggerItemType);
	bool GetTriggerItemTypeFromData(class UVariableSet* InDataSource, TEnumAsByte<ETaskTriggerItemType>* outTriggerItemType);
};


// Class ShadowTrackerExtra.TriggerEvent_Task
// 0x0008 (0x00B0 - 0x00A8)
class UTriggerEvent_Task : public UTriggerEvent
{
public:
	TEnumAsByte<ETaskEventType>                        EventType;                                                // 0x00A8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerEvent_Task");
		return pStaticClass;
	}


	void BroadCast(int Param);
};


// Class ShadowTrackerExtra.TriggerEvent_DoEmote
// 0x0000 (0x00B0 - 0x00B0)
class UTriggerEvent_DoEmote : public UTriggerEvent_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerEvent_DoEmote");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerEvent_DropItem
// 0x0000 (0x00B0 - 0x00B0)
class UTriggerEvent_DropItem : public UTriggerEvent_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerEvent_DropItem");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerEvent_KillPlayer
// 0x0000 (0x00B0 - 0x00B0)
class UTriggerEvent_KillPlayer : public UTriggerEvent_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerEvent_KillPlayer");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerEvent_LevelObjectMsg
// 0x0000 (0x00A8 - 0x00A8)
class UTriggerEvent_LevelObjectMsg : public UTriggerEvent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerEvent_LevelObjectMsg");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerEvent_PickupItem
// 0x0000 (0x00B0 - 0x00B0)
class UTriggerEvent_PickupItem : public UTriggerEvent_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerEvent_PickupItem");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerEvent_PlayerDead
// 0x0000 (0x00A8 - 0x00A8)
class UTriggerEvent_PlayerDead : public UTriggerEvent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerEvent_PlayerDead");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerEvent_UseItem
// 0x0000 (0x00A8 - 0x00A8)
class UTriggerEvent_UseItem : public UTriggerEvent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerEvent_UseItem");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerItem_DrivingCheckPoint
// 0x0020 (0x03B8 - 0x0398)
class ATriggerItem_DrivingCheckPoint : public ATriggerBox
{
public:
	struct FString                                     ExtraMsgInfo;                                             // 0x0398(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EDrivingCheckPointState>               CheckPointState;                                          // 0x03A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsActive;                                                // 0x03A9(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xE];                                       // 0x03AA(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerItem_DrivingCheckPoint");
		return pStaticClass;
	}


	void OnTriggerExit(class AActor* OverlappedActor, class AActor* Other);
	void OnTriggerEnter(class AActor* OverlappedActor, class AActor* Other);
	void OnRep_ChangeShow();
	bool IsActive();
	void Deactivate();
	void Activate();
};


// Class ShadowTrackerExtra.TriggerItem_Task
// 0x0018 (0x03B0 - 0x0398)
class ATriggerItem_Task : public ATriggerSphere
{
public:
	int                                                OwningTeamID;                                             // 0x0398(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ETaskTriggerItemType>                  TriggerItemType;                                          // 0x039C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x3];                                       // 0x039D(0x0003) MISSED OFFSET
	class UParticleSystem*                             TriggerVisualEffect;                                      // 0x03A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                LifeSpan;                                                 // 0x03A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerItem_Task");
		return pStaticClass;
	}


	void OnTriggerExit(class AActor* OverlappedActor, class AActor* Other);
	void OnTriggerEnter(class AActor* OverlappedActor, class AActor* Other);
};


// Class ShadowTrackerExtra.TriggerItem_PicnicMat
// 0x0000 (0x03B0 - 0x03B0)
class ATriggerItem_PicnicMat : public ATriggerItem_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerItem_PicnicMat");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TriggerItem_TriggerClock
// 0x0040 (0x03D8 - 0x0398)
class ATriggerItem_TriggerClock : public ATriggerBase
{
public:
	struct FString                                     ClockTag;                                                 // 0x0398(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsStartOnBegin;                                           // 0x03A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET
	TArray<float>                                      TriggerSecondsArray;                                      // 0x03B0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                                TimerHandle_Trigger;                                      // 0x03C0(0x0008) (NoDestructor, Protected, NativeAccessSpecifierProtected)
	int                                                CurSecondsArrayIndex;                                     // 0x03C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0xC];                                       // 0x03CC(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TriggerItem_TriggerClock");
		return pStaticClass;
	}


	void Stop();
	void Start();
	void OnTime();
};


// Class ShadowTrackerExtra.TssHookEx
// 0x0000 (0x0390 - 0x0390)
class ATssHookEx : public AActor
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TssHookEx");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.TurnAroundViewComponent
// 0x0090 (0x01A0 - 0x0110)
class UTurnAroundViewComponent : public UActorComponent
{
public:
	struct FFocusTargetItem                            FocusTurnData;                                            // 0x0110(0x0038) (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	bool                                               bTurnOnlyOnServer;                                        // 0x0148(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2F];                                      // 0x0149(0x002F) MISSED OFFSET
	class ACharacter*                                  MyChar;                                                   // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0180(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.TurnAroundViewComponent");
		return pStaticClass;
	}


	void OnRep_FocusTurnTargetChange();
};


// Class ShadowTrackerExtra.UAEAIOcclusionBoundsVolume
// 0x0000 (0x03C8 - 0x03C8)
class AUAEAIOcclusionBoundsVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEAIOcclusionBoundsVolume");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAEBaseSkill
// 0x0010 (0x0530 - 0x0520)
class AUAEBaseSkill : public AUTSkill
{
public:
	struct FScriptMulticastDelegate                    OnSkillCustomEvent;                                       // 0x0520(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEBaseSkill");
		return pStaticClass;
	}


	bool OnEvent(class UUTSkillManagerComponent* Comp, TEnumAsByte<EUTSkillEventType> TheEventType, int PhaseIndex);
};


// Class ShadowTrackerExtra.UAEAISkill
// 0x0010 (0x0540 - 0x0530)
class AUAEAISkill : public AUAEBaseSkill
{
public:
	float                                              MaxCastDistance;                                          // 0x0530(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinCastDistance;                                          // 0x0534(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0538(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEAISkill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAEAvatarDisplayDirector
// 0x0050 (0x03E0 - 0x0390)
class AUAEAvatarDisplayDirector : public AActor
{
public:
	int                                                poseNum;                                                  // 0x0390(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	class ACameraActor*                                avatarCamera;                                             // 0x0398(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAvatarDisplayPoseComponent*>         avatarPoseList;                                           // 0x03A0(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                           ScreenPos;                                                // 0x03B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector4                                    Limit;                                                    // 0x03C0(0x0010) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnCoordCalculated;                                        // 0x03D0(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEAvatarDisplayDirector");
		return pStaticClass;
	}


	void UnloadWeatherLevel();
	void SpawnAvatar();
	void SetMainCamera(class ACameraActor* Camera);
	void SendScreenPosEvent();
	void CalcCharacterScreenPos(int Pos, class UCharacterAvatarComponent2* CharComp);
};


// Class ShadowTrackerExtra.UAESkillManagerComponent
// 0x0098 (0x04D8 - 0x0440)
class UUAESkillManagerComponent : public UUTSkillManagerComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0440(0x0050) MISSED OFFSET
	TArray<struct FUTSkillEntryConfig>                 SkillEntryConfigs;                                        // 0x0490(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FString                                     SkillTableName;                                           // 0x04A0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     SkillBuffTableName;                                       // 0x04B0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PropSkillMapTableName;                                    // 0x04C0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillManagerComponent");
		return pStaticClass;
	}


	bool TriggerEvent(int SkillID, TEnumAsByte<EUTSkillEventType> EventType);
	void TriggerCurSkillEvent(TEnumAsByte<EUAESkillEvent> UAEEvent, int SkillIndex);
	void ServerTriggerCurSkillEvent(TEnumAsByte<EUAESkillEvent> UAEEvent, int SkillIndex);
	struct FString GetSkillIconBySkillID(int SkillID);
	class AUTSkill* GetSkillByEntry(EUTSkillEntry Entry);
	int GetPropMappedSkillID(int PropID, int PropSkillLevel);
	struct FPropSkillMapTableRow GetPropMappedRow(int PropSkillID, int PropSkillLevel);
	int GetPropMappedAuxSkillID(int PropID, int PropSkillLevel);
	bool CheckPropSkillFilterGun(int PropSkillID, int PropSkillLevel, int GunID);
};


// Class ShadowTrackerExtra.UAECharacterSkillManagerComponent
// 0x0008 (0x04E0 - 0x04D8)
class UUAECharacterSkillManagerComponent : public UUAESkillManagerComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAECharacterSkillManagerComponent");
		return pStaticClass;
	}


	bool TriggerEvent(int SkillID, TEnumAsByte<EUTSkillEventType> EventType);
	void TriggerCurSkillEvent(TEnumAsByte<EUAESkillEvent> UAEEvent, int SkillIndex);
	void SetSkillOwner(class AActor* Pawn);
};


// Class ShadowTrackerExtra.UAECustomizePanel
// 0x00C8 (0x01F8 - 0x0130)
class UUAECustomizePanel : public UCanvasPanel
{
public:
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0130(0x002C) MISSED OFFSET
	struct FUIElemLayoutDetail                         DefaultLayoutData;                                        // 0x015C(0x0030) (NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	class UBorder*                                     Border_Opacity;                                           // 0x0190(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     Border_OtherName;                                         // 0x0198(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OpacticyMin;                                              // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OpacityMax;                                               // 0x01AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BackgroundBrushMin;                                       // 0x01B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LinerColor0;                                              // 0x01B4(0x0010) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                                LinerColor1;                                              // 0x01C4(0x0010) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	TArray<struct FDynamicMatImageInfo>                DynamicMatImageInfoList;                                  // 0x01D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                               bUseDynamicMatImageFeature;                               // 0x01E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x01E9(0x0003) MISSED OFFSET
	int                                                EnableDynamicMatImageFeature;                             // 0x01EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Threshold;                                                // 0x01F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x01F4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAECustomizePanel");
		return pStaticClass;
	}


	void SetLayoutData(const struct FUIElemLayoutDetail& InData);
	void InitLayoutData(const struct FUIElemLayoutDetail& InData);
	struct FUIElemLayoutDetail GetLayoutDataFromSG(int FireMode, int SlotIdx);
	struct FUIElemLayoutDetail GetLayoutData();
	class UBorder* GetFirstBorder(class UWidget* Widget);
	bool GetDetailInfoFromSG(class USaveGame* pSaveGame, int CrtUseIndex, struct FUIElemLayoutDetail* LayoutDetail);
	struct FUIElemLayoutDetail GetDefaultLayoutData();
	void ApplyLayoutFromSG(int FireMode, int SlotIdx);
	void ApplyLayoutData(const struct FUIElemLayoutDetail& InData);
	void ApplyDefaultLayout();
	void ApplyCustomizeData(class USaveGame* pSaveGame, int CrtUseIndex);
};


// Class ShadowTrackerExtra.UAEMonsterAnimListComponentBase
// 0x0048 (0x0220 - 0x01D8)
class UUAEMonsterAnimListComponentBase : public UUAEAnimListComponentBase
{
public:
	TArray<struct FMonsterAnimPhaseData>               MonsterAnimDatas;                                         // 0x01D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMonsterAnimPhaseData>               MonsterAnimDatasRandom1;                                  // 0x01E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMonsterAnimPhaseData>               MonsterAnimDatasRandom2;                                  // 0x01F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnAnimLoadedFinished;                                     // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int                                                RandomAnimID;                                             // 0x0218(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x021C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEMonsterAnimListComponentBase");
		return pStaticClass;
	}


	void OnAsyncLoadingFinished(const struct FMonsterAsyncloadAnimParams& loadAnimParams);
	struct FMonsterAnimPhaseData GetMonsterAnimPhaseDataByType(TEnumAsByte<EMonsterPoseType> PoseType);
	class UAnimationAsset* GetMonsterAnimByType(TEnumAsByte<EMonsterPoseType> PoseType);
};


// Class ShadowTrackerExtra.UAEMonsterAnimListComponent
// 0x0000 (0x0220 - 0x0220)
class UUAEMonsterAnimListComponent : public UUAEMonsterAnimListComponentBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEMonsterAnimListComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAERecastNavMesh
// 0x0058 (0x0650 - 0x05F8)
class AUAERecastNavMesh : public ARecastNavMesh
{
public:
	struct FString                                     NavDataPath;                                              // 0x05F8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     NewNavDataPath;                                           // 0x0608(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FString>                             PVENavDataPath;                                           // 0x0618(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FString>                             PVENavLinkPath;                                           // 0x0628(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPVELinkLevelData>                   PVELinkLevels;                                            // 0x0638(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               LoadInPIE;                                                // 0x0648(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               LoadInDS;                                                 // 0x0649(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               LoadInClient;                                             // 0x064A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               LoadInEditor;                                             // 0x064B(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x064C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAERecastNavMesh");
		return pStaticClass;
	}


	void LoadPVELinkLevels(int Index);
};


// Class ShadowTrackerExtra.UAESkillCondition
// 0x0000 (0x0158 - 0x0158)
class UUAESkillCondition : public UUAEBaseSkillCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESKCond_CheckItemUpgrade
// 0x0010 (0x0168 - 0x0158)
class UUAESKCond_CheckItemUpgrade : public UUAESkillCondition
{
public:
	TEnumAsByte<EOperatorType>                         OperatorType;                                             // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	int                                                NeedItemNum;                                              // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CheckItemType;                                            // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0164(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESKCond_CheckItemUpgrade");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkill
// 0x0030 (0x0560 - 0x0530)
class AUAESkill : public AUAEBaseSkill
{
public:
	bool                                               TriggerFromServer;                                        // 0x0530(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPawnState                                         PawnState;                                                // 0x0531(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AutoEnterState;                                           // 0x0532(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsAddHealTimes;                                           // 0x0533(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                CastFailTipsID;                                           // 0x0534(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IgnoreCanBePlayedCheck;                                   // 0x0538(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               InteractiveSkill;                                         // 0x0539(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x26];                                      // 0x053A(0x0026) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkill");
		return pStaticClass;
	}


	void DelayLeaveStateForMelee(class UUTSkillManagerComponent* SkillManagerComponent);
};


// Class ShadowTrackerExtra.UAESkillAction_ActionWithConditions
// 0x0018 (0x01A8 - 0x0190)
class UUAESkillAction_ActionWithConditions : public UUAESkillAction
{
public:
	TArray<class UUAESkillCondition*>                  Conditions;                                               // 0x0190(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UUTSkillAction*                              Action;                                                   // 0x01A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ActionWithConditions");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ActivityInteractiveFinished
// 0x0000 (0x0190 - 0x0190)
class UUAESkillAction_ActivityInteractiveFinished : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ActivityInteractiveFinished");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ActivityInteractiveReset
// 0x0000 (0x0190 - 0x0190)
class UUAESkillAction_ActivityInteractiveReset : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ActivityInteractiveReset");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ActivityInteractiveStarted
// 0x0000 (0x0190 - 0x0190)
class UUAESkillAction_ActivityInteractiveStarted : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ActivityInteractiveStarted");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ActorFall
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillAction_ActorFall : public UUAESkillAction
{
public:
	bool                                               bDisableGravity;                                          // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	struct FVector                                     MoveVelocity;                                             // 0x0194(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ActorFall");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ActorJump
// 0x0020 (0x01B0 - 0x0190)
class UUAESkillAction_ActorJump : public UUAESkillAction
{
public:
	class UUAESkillPicker*                             DamagePicker;                                             // 0x0190(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Speed;                                                    // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldFollowTarget;                                      // 0x019C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x019D(0x0003) MISSED OFFSET
	int                                                JumpStartOffsetZ;                                         // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                JumpHighThreshold;                                        // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldCheckOverlap;                                      // 0x01A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01A9(0x0003) MISSED OFFSET
	float                                              MinDistanceFromTarget;                                    // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ActorJump");
		return pStaticClass;
	}


	void OnActorLanded(const struct FHitResult& InHitResult);
	void HandleOnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
};


// Class ShadowTrackerExtra.UAESkillAction_ActorMove
// 0x0048 (0x01D8 - 0x0190)
class UUAESkillAction_ActorMove : public UUAESkillAction
{
public:
	class UUAESkillPicker*                             DamagePicker;                                             // 0x0190(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Speed;                                                    // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Acceleration;                                             // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxSpeed;                                                 // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldFollowTarget;                                      // 0x01A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldCheckOverlap;                                      // 0x01A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01A6(0x0002) MISSED OFFSET
	float                                              MinDistanceFromTarget;                                    // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              OverlapObjectTypes;                                       // 0x01B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class APawn*                                       OwnerPawn;                                                // 0x01C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x10];                                      // 0x01C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ActorMove");
		return pStaticClass;
	}


	void HandleOnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
};


// Class ShadowTrackerExtra.UAESkillAction_AddCmptToPicker
// 0x0020 (0x01B0 - 0x0190)
class UUAESkillAction_AddCmptToPicker : public UUAESkillAction
{
public:
	class UUAESkillPicker*                             DamagePicker;                                             // 0x0190(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheckDuplicated;                                         // 0x0198(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bKeepComponent;                                           // 0x0199(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x019A(0x0006) MISSED OFFSET
	TArray<class UClass*>                              Components;                                               // 0x01A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_AddCmptToPicker");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_AddRecoveryPrompt
// 0x0018 (0x01A8 - 0x0190)
class UUAESkillAction_AddRecoveryPrompt : public UUAESkillAction
{
public:
	struct FString                                     ShowDataKey;                                              // 0x0190(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Value;                                                    // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_AddRecoveryPrompt");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_AddRemoveBuff
// 0x0038 (0x01C8 - 0x0190)
class UUAESkillAction_AddRemoveBuff : public UUAESkillAction
{
public:
	bool                                               IsAddBuff;                                                // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0191(0x0007) MISSED OFFSET
	struct FName                                       BuffName;                                                 // 0x0198(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                BuffID;                                                   // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SkillID;                                                  // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                AddLayerCount;                                            // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	class UUAESkillPicker*                             TargetPicker;                                             // 0x01B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClass*>                              IgnoredActorClasses;                                      // 0x01B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_AddRemoveBuff");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ApplyRadiusDamage
// 0x0030 (0x01C0 - 0x0190)
class UUAESkillAction_ApplyRadiusDamage : public USTExtraBuffAction
{
public:
	bool                                               bAirAttackDamage;                                         // 0x0190(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	float                                              BaseDamage;                                               // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MiniDamage;                                               // 0x0198(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Momentum;                                                 // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InnerRadius;                                              // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              OuterRadius;                                              // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FalloffParam;                                             // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AdditionalDamagForVehicle;                                // 0x01AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DamageTypeClass;                                          // 0x01B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CollitionFreeRadius;                                      // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsVehicleExplode;                                         // 0x01BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsDrawDebugLine;                                          // 0x01BD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x01BE(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ApplyRadiusDamage");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ApplyVehicleWeaponBoard
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillAction_ApplyVehicleWeaponBoard : public UUAESkillAction
{
public:
	TArray<struct FVehicleWeaponBoardDataConfigItem>   DataConfigList;                                           // 0x0190(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ApplyVehicleWeaponBoard");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_AttachActor
// 0x0040 (0x01D0 - 0x0190)
class UUAESkillAction_AttachActor : public UUAESkillAction
{
public:
	struct FSkillAction_AttachActorCreateData          AttachActorData;                                          // 0x0190(0x0030) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                      AttachedActor;                                            // 0x01C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_AttachActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_BreakGlass
// 0x0008 (0x0198 - 0x0190)
class UUAESkillAction_BreakGlass : public UUAESkillAction
{
public:
	class UUAESkillPicker*                             DamagePicker;                                             // 0x0190(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_BreakGlass");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_CallAirAttack
// 0x0020 (0x01B0 - 0x0190)
class UUAESkillAction_CallAirAttack : public UUAESkillAction
{
public:
	float                                              FlightHeight;                                             // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SeaLevelHeight;                                           // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAirAttackConfig                            AirAttackConfig;                                          // 0x0198(0x0018) (Edit, NoDestructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_CallAirAttack");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_CameraShake
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillAction_CameraShake : public UUAESkillAction
{
public:
	class UClass*                                      CameraShakeTemplate;                                      // 0x0190(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShakeScale;                                               // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDistance;                                              // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_CameraShake");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ChangePoseState
// 0x0008 (0x0198 - 0x0190)
class UUAESkillAction_ChangePoseState : public UUAESkillAction
{
public:
	TEnumAsByte<ESTEPoseState>                         TargetPoseState;                                          // 0x0190(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0191(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ChangePoseState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ChangeWearing
// 0x0000 (0x0190 - 0x0190)
class UUAESkillAction_ChangeWearing : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ChangeWearing");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ConsumeHandleItem
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillAction_ConsumeHandleItem : public UUAESkillAction
{
public:
	int                                                ItemID;                                                   // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Type;                                                     // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                count;                                                    // 0x0198(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsGrenade;                                                // 0x019C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsNeedNotifyLobbyServer;                                  // 0x019D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x019E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ConsumeHandleItem");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ConsumeHandleItems
// 0x0020 (0x01C0 - 0x01A0)
class UUAESkillAction_ConsumeHandleItems : public UUAESkillAction_ConsumeHandleItem
{
public:
	TArray<int>                                        PreferItemIDs;                                            // 0x01A0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                       PreferItemToLobby;                                        // 0x01B0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ConsumeHandleItems");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_CustomEvent
// 0x0008 (0x0198 - 0x0190)
class UUAESkillAction_CustomEvent : public UUAESkillAction
{
public:
	TEnumAsByte<EUAESkillEvent>                        CustomEvent;                                              // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EUTSkillEventType>                     UTCustomEvent;                                            // 0x0191(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0192(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_CustomEvent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_DoBatteryChipUse
// 0x0000 (0x0190 - 0x0190)
class UUAESkillAction_DoBatteryChipUse : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_DoBatteryChipUse");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_FaceTarget
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillAction_FaceTarget : public UUAESkillAction
{
public:
	float                                              AcceptableAngle;                                          // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              TurnSpeed;                                                // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUAESkillPicker*                             DamagePicker;                                             // 0x0198(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_FaceTarget");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_FireWeapon
// 0x0008 (0x0198 - 0x0190)
class UUAESkillAction_FireWeapon : public UUAESkillAction
{
public:
	TEnumAsByte<ESkillActionFireType>                  FireType;                                                 // 0x0190(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0191(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_FireWeapon");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_GasCan
// 0x0008 (0x0198 - 0x0190)
class UUAESkillAction_GasCan : public UUAESkillAction
{
public:
	bool                                               RunOnServer;                                              // 0x0190(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	float                                              GasValue;                                                 // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_GasCan");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_GrenadeSwitchBackToWeapon
// 0x0000 (0x0190 - 0x0190)
class UUAESkillAction_GrenadeSwitchBackToWeapon : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_GrenadeSwitchBackToWeapon");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_JumpPhase
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillAction_JumpPhase : public UUAESkillAction
{
public:
	int                                                NewPhaseID;                                               // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0194(0x0004) MISSED OFFSET
	class UUAESkillCondition*                          JumpCondtion;                                             // 0x0198(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_JumpPhase");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_JumpToRandomPhase
// 0x0018 (0x01A8 - 0x0190)
class UUAESkillAction_JumpToRandomPhase : public UUAESkillAction
{
public:
	int                                                StartIndex;                                               // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                EndIndex;                                                 // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsCanBeCurIndex;                                          // 0x0198(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0199(0x0007) MISSED OFFSET
	class UUAESkillCondition*                          JumpCondtion;                                             // 0x01A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_JumpToRandomPhase");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_LaunchToxicGrnd
// 0x0070 (0x0200 - 0x0190)
class UUAESkillAction_LaunchToxicGrnd : public UUAESkillAction
{
public:
	class UClass*                                      ProjectileActorTemplate;                                  // 0x0190(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUAESkillPicker*                             DamagePicker;                                             // 0x0198(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseCharacterHeadLocation;                                // 0x01A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01A1(0x0003) MISSED OFFSET
	struct FVector                                     ProjectileLineOffset;                                     // 0x01A4(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     TargetActorOffset;                                        // 0x01B0(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ProjectileGravityScale;                                   // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Speed;                                                    // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDistance;                                              // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       AttachSocketName;                                         // 0x01C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayFlyTime;                                             // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxLifeSpan;                                              // 0x01D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseHighArc;                                              // 0x01D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01D9(0x0007) MISSED OFFSET
	TArray<struct FHighArcParam>                       HighArcGravityScales;                                     // 0x01E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bIsHoming;                                                // 0x01F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01F1(0x0003) MISSED OFFSET
	float                                              HomingAccelerationMagnitude;                              // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsRay;                                                   // 0x01F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsHorizontal;                                            // 0x01F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseCachedTargetLocation;                                 // 0x01FA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x5];                                       // 0x01FB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_LaunchToxicGrnd");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ListenTakeDamage
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillAction_ListenTakeDamage : public UUAESkillAction
{
public:
	EAvatarDamagePosition                              DamagePosition;                                           // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	float                                              MaxDamageValue;                                           // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EUTSkillEventType>                     TriggerEventType;                                         // 0x0198(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0199(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ListenTakeDamage");
		return pStaticClass;
	}


	void UndoAction_Internal();
	bool RealDoAction_Internal();
	void NofityTakeDamage(float BaseDamage, bool IsHeadShot, const struct FDamageEvent& DamageEvent, const struct FHitResult& HitResult, class AActor* Victim);
};


// Class ShadowTrackerExtra.UAESkillAction_LockItem
// 0x0000 (0x0190 - 0x0190)
class UUAESkillAction_LockItem : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_LockItem");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_Log
// 0x0018 (0x01A8 - 0x0190)
class UUAESkillAction_Log : public UUAESkillAction
{
public:
	struct FString                                     LogString;                                                // 0x0190(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPrintEnd;                                                // 0x01A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_Log");
		return pStaticClass;
	}


	void UndoAction_Internal();
};


// Class ShadowTrackerExtra.AESkillAction_MaintenanceVehicle
// 0x0010 (0x01A0 - 0x0190)
class UAESkillAction_MaintenanceVehicle : public UUAESkillAction
{
public:
	bool                                               RunOnServer;                                              // 0x0190(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	float                                              PercentValue;                                             // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               FixTire;                                                  // 0x0198(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0199(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AESkillAction_MaintenanceVehicle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_MobHide
// 0x0000 (0x0190 - 0x0190)
class UUAESkillAction_MobHide : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_MobHide");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_PauseAnims
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillAction_PauseAnims : public UUAESkillAction
{
public:
	float                                              Duration;                                                 // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0194(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PauseAnims");
		return pStaticClass;
	}


	void ResetAnimationFrame();
};


// Class ShadowTrackerExtra.UAESkillAction_PeriodAction
// 0x0030 (0x01C0 - 0x0190)
class UUAESkillAction_PeriodAction : public UUAESkillAction
{
public:
	class UUTSkillAction*                              Action;                                                   // 0x0190(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Interval;                                                 // 0x0198(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurrentTickDeltaTime;                                     // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RotationOffsetStart;                                      // 0x01A0(0x000C) (Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    RotationOffsetEnd;                                        // 0x01AC(0x000C) (Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              TotalActionTime;                                          // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PeriodAction");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_PlayMontage
// 0x0060 (0x01F0 - 0x0190)
class UUAESkillAction_PlayMontage : public UUAESkillAction
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0190(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.UAESkillAction_PlayMontage.AnimMontage
	bool                                               AnimStopAfterPhase;                                       // 0x01B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ModifyWithActivityAcotr;                                  // 0x01B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x01BA(0x0006) MISSED OFFSET
	struct FString                                     AnimPlayRateAdjustAttr;                                   // 0x01C0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bKeepAnimation;                                           // 0x01D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x01D1(0x0007) MISSED OFFSET
	struct FName                                       StartSectionName;                                         // 0x01D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x10];                                      // 0x01E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PlayMontage");
		return pStaticClass;
	}


	void OnAsyncLoadAnimResFinished(const struct FPlayMontageAsyncloadParams& LoadParams);
};


// Class ShadowTrackerExtra.UAESkillAction_PlayMontage_IsArmed
// 0x0048 (0x01D8 - 0x0190)
class UUAESkillAction_PlayMontage_IsArmed : public USTExtraBuffAction
{
public:
	float                                              CheckDurationConfig;                                      // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0194(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x0194(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.UAESkillAction_PlayMontage_IsArmed.AnimMontage
	bool                                               ModifyWithActivityAcotr;                                  // 0x01C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AnimStopAfterPhase;                                       // 0x01C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x16];                                      // 0x01C2(0x0016) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PlayMontage_IsArmed");
		return pStaticClass;
	}


	void OnAsyncLoadAnimResFinished(const struct FPlayMontageAsyncloadParams& LoadParams);
};


// Class ShadowTrackerExtra.UAESkillAction_PlayMontage_Pose
// 0x0178 (0x0368 - 0x01F0)
class UUAESkillAction_PlayMontage_Pose : public UUAESkillAction_PlayMontage
{
public:
	struct FSkillPoseMontageData                       PoseMontageData;                                          // 0x01F0(0x00A8) (Edit, NativeAccessSpecifierPublic)
	struct FSkillPoseMontageData                       FPPPoseMontageData;                                       // 0x0298(0x00A8) (Edit, NativeAccessSpecifierPublic)
	struct FString                                     MutexMontageGroupName;                                    // 0x0340(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               NeedStopMontage;                                          // 0x0350(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0351(0x0007) MISSED OFFSET
	struct FString                                     AkAudioStopEventName;                                     // 0x0358(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PlayMontage_Pose");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_PlayMontage_Jump
// 0x0008 (0x0370 - 0x0368)
class UUAESkillAction_PlayMontage_Jump : public UUAESkillAction_PlayMontage_Pose
{
public:
	class UAnimMontage*                                AnimMontage_Jump;                                         // 0x0368(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PlayMontage_Jump");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_PlayMontage_Pose_IsArmed
// 0x02C0 (0x0450 - 0x0190)
class UUAESkillAction_PlayMontage_Pose_IsArmed : public USTExtraBuffAction
{
public:
	struct FSkillPoseMontageData                       PoseMontageDataArmed;                                     // 0x0190(0x00A8) (Edit, NativeAccessSpecifierPublic)
	struct FSkillPoseMontageData                       FPPPoseMontageDataArmed;                                  // 0x0238(0x00A8) (Edit, NativeAccessSpecifierPublic)
	struct FSkillPoseMontageData                       PoseMontageData;                                          // 0x02E0(0x00A8) (Edit, NativeAccessSpecifierPublic)
	struct FSkillPoseMontageData                       FPPPoseMontageData;                                       // 0x0388(0x00A8) (Edit, NativeAccessSpecifierPublic)
	float                                              CheckDurationConfig;                                      // 0x0430(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsEntertainmentEnable;                                    // 0x0434(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0435(0x0003) MISSED OFFSET
	float                                              EntertainmentRatio;                                       // 0x0438(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x14];                                      // 0x043C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PlayMontage_Pose_IsArmed");
		return pStaticClass;
	}


	void OnAsyncLoadAnimResFinished(const struct FPlayMontageAsyncloadParams& LoadParams);
};


// Class ShadowTrackerExtra.UAESkillAction_PlayMontageWithPrepare
// 0x0000 (0x01F0 - 0x01F0)
class UUAESkillAction_PlayMontageWithPrepare : public UUAESkillAction_PlayMontage
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PlayMontageWithPrepare");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_PlayMontageWithSection
// 0x0018 (0x01A8 - 0x0190)
class UUAESkillAction_PlayMontageWithSection : public UUAESkillAction
{
public:
	class UAnimMontage*                                AnimMontage;                                              // 0x0190(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       SectionName;                                              // 0x0198(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AnimStopAfterPhase;                                       // 0x01A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bConsiderPing;                                            // 0x01A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x01A2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PlayMontageWithSection");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_PostEventAtLoc
// 0x0008 (0x0198 - 0x0190)
class UUAESkillAction_PostEventAtLoc : public USTExtraBuffAction
{
public:
	class UAkAudioEvent*                               in_pAkEvent;                                              // 0x0190(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PostEventAtLoc");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_RandomAction
// 0x0018 (0x01A8 - 0x0190)
class UUAESkillAction_RandomAction : public UUAESkillAction
{
public:
	TArray<struct FRandomActionGroup>                  SkillCandidates;                                          // 0x0190(0x0010) (Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int                                                RandomeIndex;                                             // 0x01A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_RandomAction");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_Recovery
// 0x0020 (0x01B0 - 0x0190)
class UUAESkillAction_Recovery : public UUAESkillAction
{
public:
	struct FString                                     PropertyName;                                             // 0x0190(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ERecoveryType>                         RecoveryType;                                             // 0x01A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01A1(0x0003) MISSED OFFSET
	float                                              RecoveryValue;                                            // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RecoveryLimit;                                            // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               RunOnServer;                                              // 0x01AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ERecoveryReasonType>                   ReasonType;                                               // 0x01AD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x01AE(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_Recovery");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ReplaceCharAnim
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillAction_ReplaceCharAnim : public UUAESkillAction
{
public:
	TArray<struct FSkillReplaceCharAnimData>           AnimDataList;                                             // 0x0190(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ReplaceCharAnim");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SetAntidoteTime
// 0x0008 (0x0198 - 0x0190)
class UUAESkillAction_SetAntidoteTime : public UUAESkillAction
{
public:
	float                                              AntidoteTime;                                             // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0194(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SetAntidoteTime");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SetPlayerState
// 0x0008 (0x0198 - 0x0190)
class UUAESkillAction_SetPlayerState : public UUAESkillAction
{
public:
	EPawnState                                         PawnState;                                                // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               SetEnter;                                                 // 0x0191(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0192(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SetPlayerState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SetRecoveryPrompt
// 0x0058 (0x01E8 - 0x0190)
class UUAESkillAction_SetRecoveryPrompt : public UUAESkillAction
{
public:
	struct FHealthPredictShowData                      ShowData;                                                 // 0x0190(0x0020) (Edit, NativeAccessSpecifierPublic)
	struct FHealthPredictShowData                      CacShowData;                                              // 0x01B0(0x0020) (NativeAccessSpecifierPublic)
	struct FString                                     RemovePrePromptKey;                                       // 0x01D0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               RemoveByAddBuff;                                          // 0x01E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SetRecoveryPrompt");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ShowSkillPrompt
// 0x0028 (0x01B8 - 0x0190)
class UUAESkillAction_ShowSkillPrompt : public UUAESkillAction
{
public:
	float                                              LastTime;                                                 // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0194(0x0004) MISSED OFFSET
	struct FString                                     TimeAdjustAttr;                                           // 0x0198(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     PromptText;                                               // 0x01A8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ShowSkillPrompt");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ShowWeapon
// 0x0018 (0x01A8 - 0x0190)
class UUAESkillAction_ShowWeapon : public UUAESkillAction
{
public:
	bool                                               bShowWeapon;                                              // 0x0190(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUndoClear;                                               // 0x0191(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPhaseFinishClear;                                        // 0x0192(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0193(0x0005) MISSED OFFSET
	struct FName                                       WeaponName;                                               // 0x0198(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x01A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ShowWeapon");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SpawnActor
// 0x0060 (0x01F0 - 0x0190)
class UUAESkillAction_SpawnActor : public UUAESkillAction
{
public:
	struct FSkillAction_SpawnActorCreateData           SpawnActorData;                                           // 0x0190(0x0058) (Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TEnumAsByte<ECharacterPoseType>                    PreviousPoseType;                                         // 0x01E8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SpawnActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SpawnLocalActor
// 0x0020 (0x01B0 - 0x0190)
class UUAESkillAction_SpawnLocalActor : public UUAESkillAction
{
public:
	class UClass*                                      ActorTemplate;                                            // 0x0190(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     Offset;                                                   // 0x0198(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET
	class AActor*                                      SpawnedActor;                                             // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SpawnLocalActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SpawnMonster
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillAction_SpawnMonster : public UUAESkillAction
{
public:
	TArray<struct FSpawnMonsterConfig>                 SpawnMonsterList;                                         // 0x0190(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SpawnMonster");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SpawnProjectile
// 0x0020 (0x01B0 - 0x0190)
class UUAESkillAction_SpawnProjectile : public UUAESkillAction
{
public:
	struct FSkillAction_SpawnProjectileCreateData      SpawnProjectileData;                                      // 0x0190(0x0020) (Edit, NoDestructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SpawnProjectile");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_StopSkill
// 0x0000 (0x0190 - 0x0190)
class UUAESkillAction_StopSkill : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_StopSkill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SwitchWeapon
// 0x0008 (0x0198 - 0x0190)
class UUAESkillAction_SwitchWeapon : public UUAESkillAction
{
public:
	TEnumAsByte<ESurviveWeaponPropSlot>                WeaponSlot;                                               // 0x0190(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               SwitchBackWhenFinish;                                     // 0x0191(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0192(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SwitchWeapon");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SwitchWeaponToGrenade
// 0x0028 (0x01B8 - 0x0190)
class UUAESkillAction_SwitchWeaponToGrenade : public UUAESkillAction
{
public:
	struct FString                                     WeaponSlotName;                                           // 0x0190(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDefineID                               ItemDefineID;                                             // 0x01A0(0x0018) (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SwitchWeaponToGrenade");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.DamageType_TakeDamageType
// 0x0000 (0x0150 - 0x0150)
class UDamageType_TakeDamageType : public USTExtraDamageType
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.DamageType_TakeDamageType");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_TakeDamage
// 0x0040 (0x01D0 - 0x0190)
class UUAESkillAction_TakeDamage : public UUAESkillAction
{
public:
	float                                              DamageAmount;                                             // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageAmountHeadshot;                                     // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageToVehicle;                                          // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SpecificItemID;                                           // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                itemType;                                                 // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseWeaponDamageType;                                     // 0x01A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EMeleeDamageSubType>                   SubDamageType;                                            // 0x01A5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01A6(0x0002) MISSED OFFSET
	class UUAESkillPicker*                             DamagePicker;                                             // 0x01A8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               OnlyApplyOnce;                                            // 0x01B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x17];                                      // 0x01B1(0x0017) MISSED OFFSET
	class UClass*                                      DamageTypeClass;                                          // 0x01C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_TakeDamage");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_TriggerSkill
// 0x0030 (0x01C0 - 0x0190)
class UUAESkillAction_TriggerSkill : public UUAESkillAction
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0190(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.UAESkillAction_TriggerSkill.SkillClass
	bool                                               TriggerOnServer;                                          // 0x01B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_TriggerSkill");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_UIMessage
// 0x0030 (0x01C0 - 0x0190)
class UUAESkillAction_UIMessage : public UUAESkillAction
{
public:
	struct FString                                     DoUIMsg;                                                  // 0x0190(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     UndoUIMsg;                                                // 0x01A0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FString                                     UIModule;                                                 // 0x01B0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_UIMessage");
		return pStaticClass;
	}


	void UndoAction_Internal();
	bool RealDoAction_Internal();
	class ASTExtraPlayerController* GetOwernPawnController();
};


// Class ShadowTrackerExtra.UAESkillCondition_AllowPawnState
// 0x0010 (0x0168 - 0x0158)
class UUAESkillCondition_AllowPawnState : public UUAESkillCondition
{
public:
	TArray<EPawnState>                                 ArrAllowPawnState;                                        // 0x0158(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_AllowPawnState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_And
// 0x0010 (0x0168 - 0x0158)
class UUAESkillCondition_And : public UUAESkillCondition
{
public:
	TArray<class UUAESkillCondition*>                  Conditions;                                               // 0x0158(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_And");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_CheckActivityActor
// 0x0000 (0x0158 - 0x0158)
class UUAESkillCondition_CheckActivityActor : public UUAESkillCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_CheckActivityActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_FallingMode
// 0x0000 (0x0158 - 0x0158)
class UUAESkillCondition_FallingMode : public UUAESkillCondition
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_FallingMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_GrenadeMode
// 0x0008 (0x0160 - 0x0158)
class UUAESkillCondition_GrenadeMode : public UUAESkillCondition
{
public:
	TEnumAsByte<EThrowGrenadeMode>                     GrenadeMode;                                              // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0159(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_GrenadeMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_HandleItemLimit
// 0x0018 (0x0170 - 0x0158)
class UUAESkillCondition_HandleItemLimit : public UUAESkillCondition
{
public:
	TEnumAsByte<EOperatorType>                         OperatorType;                                             // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	int                                                NeedItemNum;                                              // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                ItemID;                                                   // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                Type;                                                     // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheckBothSide;                                           // 0x0168(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0169(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_HandleItemLimit");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_KeyEvent
// 0x0008 (0x0160 - 0x0158)
class UUAESkillCondition_KeyEvent : public UUAESkillCondition
{
public:
	TEnumAsByte<EUTSkillEventType>                     KeyEvent;                                                 // 0x0158(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0159(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_KeyEvent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_LocationPickSuc
// 0x0010 (0x0168 - 0x0158)
class UUAESkillCondition_LocationPickSuc : public UUAESkillCondition
{
public:
	class UUTSkillLocationPicker*                      LocationPicker;                                           // 0x0158(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShowPrompt;                                               // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	int                                                PromptID;                                                 // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_LocationPickSuc");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_MoveDist
// 0x0010 (0x0168 - 0x0158)
class UUAESkillCondition_MoveDist : public UUAESkillCondition
{
public:
	TEnumAsByte<EOperatorType>                         OperatorType;                                             // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	float                                              DistValue;                                                // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIgnoreWithNotProne;                                      // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0161(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_MoveDist");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_MoveSpeed
// 0x0010 (0x0168 - 0x0158)
class UUAESkillCondition_MoveSpeed : public UUAESkillCondition
{
public:
	TEnumAsByte<EOperatorType>                         OperatorType;                                             // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	float                                              SpeedValue;                                               // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillConditionCheckType                           CheckType;                                                // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0161(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_MoveSpeed");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_Not
// 0x0008 (0x0160 - 0x0158)
class UUAESkillCondition_Not : public UUAESkillCondition
{
public:
	class UUAESkillCondition*                          Condition;                                                // 0x0158(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_Not");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_Or
// 0x0010 (0x0168 - 0x0158)
class UUAESkillCondition_Or : public UUAESkillCondition
{
public:
	TArray<class UUAESkillCondition*>                  Conditions;                                               // 0x0158(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_Or");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_PlayerHasTag
// 0x0008 (0x0160 - 0x0158)
class UUAESkillCondition_PlayerHasTag : public UUAESkillCondition
{
public:
	struct FName                                       NeededTag;                                                // 0x0158(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_PlayerHasTag");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_PlayerState
// 0x0018 (0x0170 - 0x0158)
class UUAESkillCondition_PlayerState : public UUAESkillCondition
{
public:
	TEnumAsByte<EOperatorType>                         OperatorType;                                             // 0x0158(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0159(0x0007) MISSED OFFSET
	TArray<EPawnState>                                 ArrPlayerState;                                           // 0x0160(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_PlayerState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_PropertyLimit
// 0x0020 (0x0178 - 0x0158)
class UUAESkillCondition_PropertyLimit : public UUAESkillCondition
{
public:
	struct FString                                     PropertyName;                                             // 0x0158(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EOperatorType>                         OperatorType;                                             // 0x0168(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EValueType>                            ValueType;                                                // 0x0169(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x016A(0x0002) MISSED OFFSET
	float                                              PropertyValue;                                            // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               ShowPrompt;                                               // 0x0170(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0171(0x0003) MISSED OFFSET
	int                                                PromptID;                                                 // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_PropertyLimit");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_VelocityChange
// 0x0008 (0x0160 - 0x0158)
class UUAESkillCondition_VelocityChange : public UUAESkillCondition
{
public:
	EVelocityChangeType                                CheckType;                                                // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	float                                              SpeedChangeValue;                                         // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_VelocityChange");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillConditionAction
// 0x0010 (0x01A0 - 0x0190)
class UUAESkillConditionAction : public UUAESkillAction
{
public:
	class UUAESkillCondition*                          Condition;                                                // 0x0190(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUAESkillAction*                             Action;                                                   // 0x0198(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillConditionAction");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillEventEffectMapForEditor
// 0x0008 (0x0180 - 0x0178)
class UUAESkillEventEffectMapForEditor : public UUTSkillEventEffectMapForEditor
{
public:
	TEnumAsByte<EUAESkillEvent>                        UAESkillEventType;                                        // 0x0178(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0179(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillEventEffectMapForEditor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillInterface
// 0x0000 (0x0028 - 0x0028)
class UUAESkillInterface : public UUTSkillInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillInterface");
		return pStaticClass;
	}


	bool TriggerEntryEvent(EUTSkillEntry EntryEvent);
	void TriggerCustomEvent(TEnumAsByte<EUAESkillEvent> EventType);
	void InitFromSkill(class AUAEBaseSkill* SkillOwner);
};


// Class ShadowTrackerExtra.UAESkillPhase
// 0x0000 (0x0208 - 0x0208)
class UUAESkillPhase : public UUTSkillPhase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPhase");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillPicker
// 0x0000 (0x01A0 - 0x01A0)
class UUAESkillPicker : public UUTSkillPicker
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPicker");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillPicker_Capsule
// 0x0040 (0x01E0 - 0x01A0)
class UUAESkillPicker_Capsule : public UUAESkillPicker
{
public:
	struct FUTSkillPicker_CapsuleCreateData            CapsuleData;                                              // 0x01A0(0x0040) (Edit, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPicker_Capsule");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillPicker_Fan
// 0x0040 (0x01E0 - 0x01A0)
class UUAESkillPicker_Fan : public UUAESkillPicker
{
public:
	struct FUTSkillPicker_FanCreateData                FanData;                                                  // 0x01A0(0x0030) (Edit, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x10];                                      // 0x01D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPicker_Fan");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillPicker_FanForClient
// 0x0000 (0x01E0 - 0x01E0)
class UUAESkillPicker_FanForClient : public UUAESkillPicker_Fan
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPicker_FanForClient");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillPicker_FromBlackboard
// 0x0020 (0x01C0 - 0x01A0)
class UUAESkillPicker_FromBlackboard : public UUAESkillPicker
{
public:
	TArray<struct FName>                               ObjectNames;                                              // 0x01A0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bNeedCheckRange;                                          // 0x01B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01B1(0x0003) MISSED OFFSET
	float                                              Radius;                                                   // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Angle;                                                    // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPicker_FromBlackboard");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillPicker_SkillOwner
// 0x0000 (0x01A0 - 0x01A0)
class UUAESkillPicker_SkillOwner : public UUAESkillPicker
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPicker_SkillOwner");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.AESkillPool
// 0x00B8 (0x00E0 - 0x0028)
class UAESkillPool : public UObject
{
public:
	class UGameInstance*                               GameInstanceRef;                                          // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0030(0x00A8) MISSED OFFSET
	class UUAESkillPoolManager*                        SkillManager;                                             // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.AESkillPool");
		return pStaticClass;
	}


	void OnAsyncLoadingFinished(const struct FSkillPoolAysncLoadParams& LoadParams);
};


// Class ShadowTrackerExtra.UAESkillPoolManager
// 0x0110 (0x0138 - 0x0028)
class UUAESkillPoolManager : public UObject
{
public:
	class UAESkillPool*                                Pool;                                                     // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                               IsCurAsyncLoading;                                        // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<class UAESkillPool*>                        DirtyPools;                                               // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	class UGameInstance*                               GameInstanceRef;                                          // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0xE8];                                      // 0x0050(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPoolManager");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAESkillManagerUtils
// 0x0000 (0x0028 - 0x0028)
class UUAESkillManagerUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAESkillManagerUtils");
		return pStaticClass;
	}


	static TMap<struct FName, TEnumAsByte<EGrenadeType>> GetWeaponSlotNameToGrenadeType();
	static class UClass* GetWeaponClassFromPath(const struct FString& PathName);
	static bool GetSkillHideCancleFlag(int SkillID);
	static TMap<int, TEnumAsByte<EGrenadeType>> GetItemIDGrenadeTypeMap();
	static TMap<int, struct FSkillIconConfig> GetItemIDBrushMapConfig();
	static TMap<TEnumAsByte<EGrenadeType>, int> GetGrenadeTypeToID();
	static TMap<TEnumAsByte<EGrenadeType>, struct FSkillIconConfig> GetGrenadeTypeIconMapConfig();
	static TMap<TEnumAsByte<EGrenadeType>, struct FString> GetGrenadeToSlotIndexDict();
	static TMap<struct FName, struct FString> GetGrenadeLogicSocketToWeaponPathMap();
	static TMap<struct FName, class UClass*> GetGrenadeLogicSocketToWeaponClassMap();
	static TMap<int, struct FName> GetGrenadeIDToNameDict();
	static TArray<int> GetGrenadeIDsOrder();
	static bool EnableLoadWeaponClassMapOptimize();
};


// Class ShadowTrackerExtra.UAEStateGM
// 0x0000 (0x0028 - 0x0028)
class UUAEStateGM : public UUAEState
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEStateGM");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAEStateGM_Active
// 0x0000 (0x0028 - 0x0028)
class UUAEStateGM_Active : public UUAEStateGM
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEStateGM_Active");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAEStateGM_Fighting
// 0x0000 (0x0028 - 0x0028)
class UUAEStateGM_Fighting : public UUAEStateGM
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEStateGM_Fighting");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAEStateGM_Finished
// 0x0008 (0x0030 - 0x0028)
class UUAEStateGM_Finished : public UUAEStateGM
{
public:
	bool                                               IsSendTeamBattleResult;                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEStateGM_Finished");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UAEStateGM_Ready
// 0x0038 (0x0060 - 0x0028)
class UUAEStateGM_Ready : public UUAEStateGM
{
public:
	float                                              StopJoinTime;                                             // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ForceStartCountDownTime;                                  // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET
	float                                              StateTime;                                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAEStateGM_Ready");
		return pStaticClass;
	}


	void StopJoin();
};


// Class ShadowTrackerExtra.UAETriggerParamLibrary
// 0x0000 (0x0040 - 0x0040)
class UUAETriggerParamLibrary : public UUAETriggerParamFuncLib
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAETriggerParamLibrary");
		return pStaticClass;
	}


	static void RestartPlayer(int PlayerKey);
	static bool IsNotEqualString(const struct FString& Param1, const struct FString& Param2);
	static bool IsNotEqualInt(int Param1, int Param2);
	static bool IsNotEqualBool(bool Param1, bool Param2);
	static bool IsLessInt(int Param1, int Param2);
	static bool IsLessEqualInt(int Param1, int Param2);
	static bool IsGreaterInt(int Param1, int Param2);
	static bool IsGreaterEqualInt(int Param1, int Param2);
	static bool IsEqualString(const struct FString& Param1, const struct FString& Param2);
	static bool IsEqualInt(int Param1, int Param2);
	static bool IsEqualBool(bool Param1, bool Param2);
	static bool GetTriggerClassParam(const struct FString& ClassTag, struct FTriggerClassItem* TargetClassItem);
	static int GetPVEWeatherStage();
	static int GetInt32_3(int Param1, int Param2);
	static int GetInt32_2(int Param1);
	static float GetFloat_3(float Param1, float Param2);
	static float GetFloat_2(float Param1);
	static struct FString GetClassPathByTag(const struct FString& ClassTag);
	static class AActor* GetActorTest();
};


// Class ShadowTrackerExtra.UAETriggerEventLibrary
// 0x0000 (0x0040 - 0x0040)
class UUAETriggerEventLibrary : public UUAETriggerEventFuncLib
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAETriggerEventLibrary");
		return pStaticClass;
	}


	void EventFunc_UseItem(int ID, const struct FVector& InVec, const struct FString& UserPlayerKey);
	void EventFunc_UnitUseSkill(int BotCat, int BotType, int SkillID);
	void EventFunc_TriggerSelfEnable();
	void EventFunc_TimerEvent(const struct FString& EventTag);
	void EventFunc_TestEvent2(const struct FString& P1, float P2);
	void EventFunc_TerminateShrinkCircle(const struct FString& TerminatorTag);
	void EventFunc_TeamTerminated(int TeamID);
	void EventFunc_TeamBattleResult(class ABattleRoyaleGameModeTeam* GameMode, int TeamID);
	void EventFunc_TakePlane(uint32_t PlayerKey);
	void EventFunc_SurviveModeEnd();
	void EventFunc_StartMonsterWave(int WaveID);
	void EventFunc_SpawnMonster(int MonsterID, int MonsterNum, int MonsterRebornTimes, int MonsterWaveId, const struct FVector& SpawnLoc, int SpawnRadius);
	void EventFunc_SpawnItemSecretRoom(class AActor* Actor, const struct FString& Tag);
	void EventFunc_SpawnAirplane(TArray<uint32_t> PlayerKeys, const struct FVector& RespawnLocation);
	void EventFunc_SpawnActorAtLocation(const struct FString& ClassTag, const struct FVector& TargetLocation, const struct FString& ExtraInfoTag);
	void EventFunc_SpawnActor(class AActor* SpawnedActor);
	void EventFunc_ShrinkStartTimer(float TimeToWait, float BaseTime);
	void EventFunc_ShrinkCircleTimer(float TimeToWait, float BaseTime);
	void EventFunc_ShrinkCircle(float ShrinkTime, float BaseTime);
	void EventFunc_ReviveTeammate(class AActor* TeammatePC, const struct FVector& RespawnLocation, int RespawnStartID, bool bJump);
	void EventFunc_RemoveDynamicRank(uint32_t PlayerKey);
	void EventFunc_PVEWeatherChange(int WeatherPhase);
	void EventFunc_PVESwitchLevel(int LevelId);
	void EventFunc_PVELevelEnd(int ChapterID, int LevelId);
	void EventFunc_PVEGameStart();
	void EventFunc_PVEForceResult();
	void EventFunc_PVECircleMoveEnd(int NodeID);
	void EventFunc_PlayerEscape(uint32_t PlayerKey);
	void EventFunc_PawnGenerate(int SpawnClassID, int SpawnGroupID, const struct FVector& SpawnLoc, int SpawnRange, const struct FString& MakerName, int SpawnType, class AActor* Owner);
	void EventFunc_MonsterWaveEnd(int WaveID, int CurChapterID, int CurLevelID);
	void EventFunc_MonsterBeginPlay(class AActor* Monster);
	void EventFunc_LeaveRevival(uint32_t PlayerKey, uint32_t SaviorKey);
	void EventFunc_InfectedAreaActived(int AreaID, int HardLevel);
	void EventFunc_GameModeStateChange(const struct FString& State);
	void EventFunc_FinishMatch(class ABattleRoyaleGameModeTeam* GameMode);
	void EventFunc_ExitTriggerWithPoints(int AreaID, int AreaPlayerNum, class AActor* thisActor, class AActor* OtherActor);
	void EventFunc_ExitAreaTrigger(int AreaID, int AreaPlayerNum, class AActor* thisActor, class AActor* OtherActor);
	void EventFunc_EnterTriggerWithPoints(int AreaID, int AreaPlayerNum, class AActor* thisActor, class AActor* OtherActor);
	void EventFunc_EnterRevival(uint32_t PlayerKey, uint32_t KillerKey);
	void EventFunc_EnterAreaTrigger(int AreaID, int AreaPlayerNum, class AActor* thisActor, class AActor* OtherActor);
	void EventFunc_BotDied(int MonsterID, int MonsterType);
	void EventFunc_BotBorn(int MonsterID, int MonsterType);
	void EventFunc_AddDynamicRank(uint32_t PlayerKey, bool bIsWinner);
};


// Class ShadowTrackerExtra.UAETriggerObject_Task
// 0x0030 (0x01E8 - 0x01B8)
class UUAETriggerObject_Task : public UUAETriggerObject
{
public:
	class UTriggerCondition*                           RootCondition;                                            // 0x01B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TEnumAsByte<ETaskEventType>>                TaskEventTypes;                                           // 0x01C0(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UTriggerAction*>                      RedoTriggerActions;                                       // 0x01D0(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	int                                                TaskID;                                                   // 0x01E0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TEnumAsByte<ETaskType>                             TaskType;                                                 // 0x01E4(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAETriggerObject_Task");
		return pStaticClass;
	}


	void SetTaskProcess(int process, const struct FString& ext_info);
	void RedoAction();
	void NofityTriggerComplete();
	bool IsConditionsSatisfy(class UTriggerEvent* Event);
	void InitConfigurableCondition(int InTaskSubType, const struct FString& InMainConditionParamStr, int InTargetProcess);
	void DeactiveCondition(TEnumAsByte<ETaskConditionType> InTaskConditionType, class UVariableSet* InDataSource);
	class UTriggerCondition* CreateSpecifiedSpaceCondition(TEnumAsByte<ETaskTriggerItemType> SpecifiedSpace);
	class UTriggerCondition* CreateSpecifiedItemCondition(int ItemID);
	class UTriggerCondition* CreateSpecifiedAreaCondition(TEnumAsByte<ETaskTriggerAreaType> SpecifiedArea);
	class UTriggerAction* CreateRedoAction(TEnumAsByte<ETaskActionType> ActionType);
	class UTriggerCondition* CreateORCondition(TArray<class UTriggerCondition*> ChildConditions);
	class UTriggerCondition* CreateOperatorCondition(class UClass* OperatorClass, TArray<class UTriggerCondition*> ChildConditions);
	class UTriggerCondition* CreateKillPlayerCondition();
	class UTriggerCondition* CreateGameModeCondition(EGameModeType GameModeType);
	class UTriggerAction* CreateDoAction(TEnumAsByte<ETaskActionType> ActionType);
	class UTriggerCondition* CreateCondition(class UClass* ConditionClass);
	class UTriggerCondition* CreateCollectItemCondition(int ItemID, int CollectCount);
	class UTriggerCondition* CreateANDCondition(TArray<class UTriggerCondition*> ChildConditions);
	class UTriggerAction* CreateAction(TEnumAsByte<ETaskActionType> ActionType);
	bool ConstructTask(int InTaskID, int InTaskSubType, const struct FString& InMainConditionParamStr, int InTargetProcess);
	TArray<TEnumAsByte<ETaskActionType>> ConstructRedoActions();
	TArray<TEnumAsByte<ETaskEventType>> ConstructEvents();
	class UTriggerCondition* ConstructConditions();
	TArray<TEnumAsByte<ETaskActionType>> ConstructActions();
	void AddEventTypes(TArray<TEnumAsByte<ETaskEventType>> EventTypes);
	bool ActiveCondition(TEnumAsByte<ETaskConditionType> InTaskConditionType, class UVariableSet* InDataSource);
};


// Class ShadowTrackerExtra.UAETriggerObject_CollectItem
// 0x0000 (0x01E8 - 0x01E8)
class UUAETriggerObject_CollectItem : public UUAETriggerObject_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAETriggerObject_CollectItem");
		return pStaticClass;
	}


	void ReportTaskCollectionProcess();
	int GetTaskCollectionProcess();
};


// Class ShadowTrackerExtra.UAETriggerObject_KillPlayer
// 0x0000 (0x01E8 - 0x01E8)
class UUAETriggerObject_KillPlayer : public UUAETriggerObject_Task
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UAETriggerObject_KillPlayer");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UIBPFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UUIBPFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UIBPFunctionLibrary");
		return pStaticClass;
	}


	static struct FString TimeSecondsToStringSec(float InSeconds);
	static struct FString TimeSecondsToString(float InSeconds);
	static bool GetWorldToUIShowLocationRect_VehicleWar(class UObject* WorldContextObject, const struct FVector& WorldLocation, const struct FVector4& Limit, const struct FVector2D& UIOffset, struct FVector2D* OutPosition, float* Angle);
	static class AGameStateBase* GetGameStateByObj(class UObject* Obj);
	static bool GetBulletNumForVehicleWar(class UObject* WorldCtx, int* OutBulletNumInClip);
};


// Class ShadowTrackerExtra.UIDataProcessingFunctionLibrary
// 0x0008 (0x0030 - 0x0028)
class UUIDataProcessingFunctionLibrary : public UBlueprintFunctionLibrary
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UIDataProcessingFunctionLibrary");
		return pStaticClass;
	}


	void UpdatePlayerPredictHealthUI(class ASTExtraPlayerController* PC);
	void UpdatePlayerHealthUI(class ASTExtraPlayerController* PC);
	void UpdatePlayerEnergyUI(class ASTExtraPlayerController* PC);
	void UpdatePlayerDyingHealth(class ASTExtraPlayerController* PC);
	void UpdatePlayerBreathAmmount(class ASTExtraPlayerController* PC);
	static class UUIDataProcessingFunctionLibrary* UILibraryInstance();
	TArray<struct FComparableGrenadeItemType> SortGrenadeItemArray(TArray<struct FComparableGrenadeItemType> GrenadeArray, class ASTExtraBaseCharacter* PlayerCharacter, TEnumAsByte<EGrenadeType> CurListFirstType, bool SetFirstByCurFistTypeForce);
	TArray<struct FCompatableComsumableItemType> SortConsumableItemArray(TArray<struct FCompatableComsumableItemType> ConsumableArray, bool IgnoreFirst, TEnumAsByte<EConsumeItemType> FirstItemType);
	static void SetUnitPosAndOpacityAndSize(class UPanelWidget* GPanel, class UBorder* BBorder, const struct FVector2D& Scale, float Opacity, const struct FVector2D& OffsetVector);
	static void SetUnitAnchor(class UWidget* GPanel, const struct FAnchors& Anchor);
	static struct FCompatableComsumableItemType SetItemPriorityBySortModeNew(const struct FCompatableComsumableItemType& Data, bool IntelligentDrugs, TEnumAsByte<EConsumableListSortMode> SortMode);
	static struct FCompatableComsumableItemType SetItemPriorityBySortMode(const struct FCompatableComsumableItemType& Data, bool IntelligentDrugs, TEnumAsByte<EConsumableListSortMode> SortMode);
	void SetInGameUIUserWidget(class UUAEUserWidget* UserWidget);
	static bool IsPlayerCanDoSprintOperation(class ASTExtraPlayerCharacter* Player);
	static bool IsNeedAntidoteFirst(TEnumAsByte<EConsumableListSortMode> SortMode);
	bool IsHitPointValidInCircularHitTestPolicy(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent, float HitAreaRadius);
	static bool IsConsumableItem(const struct FItemDefineID& DefineID);
	void HandleCharacterAttrChange(const struct FString& AttrName, class ASTExtraBaseCharacter* Character);
	TEnumAsByte<EGrenadeType> GrenadeSpecificSlotNameToENumAdapter(const struct FName& GrenadeSpecificSlotName);
	static float GetServerWorldSecond(class UObject* WorldContextObject);
	static float GetCurrToTargetValue(float CurrRadio, float TargetRadio, float deltaRadio, bool* change);
	int GetCurPlatformType();
	static TEnumAsByte<EConsumeItemType> GetConsumItemTypeBySpecificID(struct FItemDefineID* DefineID);
	static TArray<struct FCompatableComsumableItemType> GetCompatableComsumableArray(TArray<struct FBattleItemData> BattleItemDatas, bool IntelligentDrugs, TEnumAsByte<EConsumableListSortMode> SortMode);
	float GetCharacterEnergyValue(class APawn* CharaterPawn);
};


// Class ShadowTrackerExtra.UIDuplicatedItemPool
// 0x0050 (0x0078 - 0x0028)
class UUIDuplicatedItemPool : public UObject
{
public:
	TArray<struct FString>                             TagArray;                                                 // 0x0028(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FString                                     ItemBPClassPath;                                          // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UClass*                                      ItemClass;                                                // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UUserWidget>>          UsedItemList;                                             // 0x0050(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UUserWidget>>          IdleItemList;                                             // 0x0060(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UIDuplicatedItemPool");
		return pStaticClass;
	}


	void RemoveTagFromItemPool(const struct FString& TagName);
	void RemoveAllTagFromItemPool();
	void RecycleUnusedItem();
	bool ItemPoolHasTag(const struct FString& TagName);
	bool ItemPoolHasOneTagAtLeast(TArray<struct FString> TagNameList);
	bool ItemPoolHasAllTag(TArray<struct FString> TagNameList);
	void InitItemPool(const struct FString& ClassPath, int DefaultItemCounts);
	class UUserWidget* GetOneItem();
	void GetAllUsedItem(TArray<class UUserWidget*>* ItemList);
	void GetAllTagFromItemPool(TArray<struct FString>* tagList);
	void FreeOneItem(class UUserWidget* IdleItem);
	void AddTagToItemPool(const struct FString& TagName);
	void AddMultiTagToItemPool(TArray<struct FString> TagNameList);
};


// Class ShadowTrackerExtra.SJKAssetUtils
// 0x0000 (0x0028 - 0x0028)
class USJKAssetUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.SJKAssetUtils");
		return pStaticClass;
	}


	static class UParticleSystem* GetAssetByStr(const struct FString& Name);
};


// Class ShadowTrackerExtra.UJKAssetsUtil
// 0x0000 (0x0028 - 0x0028)
class UUJKAssetsUtil : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UJKAssetsUtil");
		return pStaticClass;
	}


	class UParticleSystem* GetAssetByStr(const struct FString& Name);
};


// Class ShadowTrackerExtra.UNGCondition_CanGetInVehicle
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_CanGetInVehicle : public USTNewbieGuideConditionBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_CanGetInVehicle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_CanJumpOutPlane
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_CanJumpOutPlane : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_CanJumpOutPlane");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_CanOpenParachute
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_CanOpenParachute : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_CanOpenParachute");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_DeadBoxCollapsed
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_DeadBoxCollapsed : public USTNewbieGuideConditionBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_DeadBoxCollapsed");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_HaveDeadBoxInRange
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_HaveDeadBoxInRange : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_HaveDeadBoxInRange");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_HaveSpecifiedStuff
// 0x0020 (0x0050 - 0x0030)
class UUNGCondition_HaveSpecifiedStuff : public USTNewbieGuideConditionBase
{
public:
	TArray<int>                                        CheckTypeArray;                                           // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_HaveSpecifiedStuff");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_HaveStuffCanPickUp
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_HaveStuffCanPickUp : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_HaveStuffCanPickUp");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_HaveStuffInBackpack
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_HaveStuffInBackpack : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_HaveStuffInBackpack");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsBackpackPanelOpen
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_IsBackpackPanelOpen : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsBackpackPanelOpen");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsBeenLandingXsec
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_IsBeenLandingXsec : public USTNewbieGuideConditionBase
{
public:
	float                                              ActiveTime;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsBeenLandingXsec");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsChangeWearingOpened
// 0x0008 (0x0038 - 0x0030)
class UNGCondition_IsChangeWearingOpened : public USTNewbieGuideConditionBase
{
public:
	bool                                               bNeedOpenChangingWearing;                                 // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	int                                                UnlockWearCount;                                          // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsChangeWearingOpened");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsFinishNewbieGuide
// 0x0008 (0x0038 - 0x0030)
class UNGCondition_IsFinishNewbieGuide : public USTNewbieGuideConditionBase
{
public:
	int                                                NewbieGuideID;                                            // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                NeedCount;                                                // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsFinishNewbieGuide");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsHealthInRange
// 0x0010 (0x0040 - 0x0030)
class UUNGCondition_IsHealthInRange : public USTNewbieGuideConditionBase
{
public:
	float                                              HealthUpperLimit;                                         // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              HealthLowerLimit;                                         // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ASTExtraBaseCharacter>        PlayerCharacter;                                          // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsHealthInRange");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsHurtByWeapon
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_IsHurtByWeapon : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsHurtByWeapon");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsInKillZoneLastXs
// 0x0010 (0x0040 - 0x0030)
class UUNGCondition_IsInKillZoneLastXs : public USTNewbieGuideConditionBase
{
public:
	float                                              ActiveTime;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0034(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsInKillZoneLastXs");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsInReadyState
// 0x0000 (0x0030 - 0x0030)
class UNGCondition_IsInReadyState : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsInReadyState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsInReadyStateOrTrainingMode
// 0x0000 (0x0030 - 0x0030)
class UNGCondition_IsInReadyStateOrTrainingMode : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsInReadyStateOrTrainingMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsInSafeZone
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_IsInSafeZone : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsInSafeZone");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsInSomePoseForXSec
// 0x0010 (0x0040 - 0x0030)
class UUNGCondition_IsInSomePoseForXSec : public USTNewbieGuideConditionBase
{
public:
	float                                              ActiveTime;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TEnumAsByte<ESTEPoseState>                         CheckState;                                               // 0x0034(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0xB];                                       // 0x0035(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsInSomePoseForXSec");
		return pStaticClass;
	}


	void OnPlayerStateChange(TEnumAsByte<ESTEPoseState> LastPose, TEnumAsByte<ESTEPoseState> NewPose);
};


// Class ShadowTrackerExtra.UNGCondition_IsNoEnemyInRange
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_IsNoEnemyInRange : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsNoEnemyInRange");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsNotDeathMatchMode
// 0x0000 (0x0030 - 0x0030)
class UNGCondition_IsNotDeathMatchMode : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsNotDeathMatchMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsOnTagVehicle
// 0x0018 (0x0048 - 0x0030)
class UUNGCondition_IsOnTagVehicle : public USTNewbieGuideConditionBase
{
public:
	bool                                               bIsDriver;                                                // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FName>                               TagVehicleClass;                                          // 0x0038(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsOnTagVehicle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsPropSlotHaveGun
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_IsPropSlotHaveGun : public USTNewbieGuideConditionBase
{
public:
	TEnumAsByte<ESurviveWeaponPropSlot>                CheckSlotType;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsPropSlotHaveGun");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_KillSomeOne
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_KillSomeOne : public USTNewbieGuideConditionBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_KillSomeOne");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_PickUpCollapsed
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_PickUpCollapsed : public USTNewbieGuideConditionBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_PickUpCollapsed");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_PickupListCollapsed
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_PickupListCollapsed : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_PickupListCollapsed");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_SafeZoneFirstAppear
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_SafeZoneFirstAppear : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_SafeZoneFirstAppear");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_SitOnSpecifiedSeat
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_SitOnSpecifiedSeat : public USTNewbieGuideConditionBase
{
public:
	ESTExtraVehicleUserState                           CheckSeatType;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_SitOnSpecifiedSeat");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_TeammateIDCardExist
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_TeammateIDCardExist : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_TeammateIDCardExist");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UNGCondition_TeammateIDCardPicked
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_TeammateIDCardPicked : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_TeammateIDCardPicked");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UnitAttrComponent
// 0x0008 (0x0118 - 0x0110)
class UUnitAttrComponent : public UActorComponent
{
public:
	TEnumAsByte<EBotCategray>                          Category;                                                 // 0x0110(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EBotType>                              Type;                                                     // 0x0111(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0112(0x0002) MISSED OFFSET
	int                                                TypeID;                                                   // 0x0114(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UnitAttrComponent");
		return pStaticClass;
	}


	void SetActorVisible(bool bEnable);
};


// Class ShadowTrackerExtra.URevivalPointWidget
// 0x0088 (0x0430 - 0x03A8)
class UURevivalPointWidget : public UUAEUserWidget
{
public:
	class UTextBlock*                                  DisText;                                                  // 0x03A8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                                ArrowImage;                                               // 0x03B0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                     Border_SideDistanceNative;                                // 0x03B8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                                CanvasPanel;                                              // 0x03C0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                FilterDistance;                                           // 0x03C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                MinShowPanelDistance;                                     // 0x03CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector4                                    Limit;                                                    // 0x03D0(0x0010) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                                   UIOffset;                                                 // 0x03E0(0x0008) (Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarkSyncData>                       AllRevivalPointSyncData;                                  // 0x03E8(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRevivalPointIconChangeFactor>       ChangeFactors;                                            // 0x03F8(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0408(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.URevivalPointWidget");
		return pStaticClass;
	}


	void ShowHideAllRevivalUI(bool isFreeCameraInOB);
};


// Class ShadowTrackerExtra.UserInputCache
// 0x0000 (0x0028 - 0x0028)
class UUserInputCache : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UserInputCache");
		return pStaticClass;
	}


	static void ResetReportComplaintNames();
	static bool CheckIsNameReport(const struct FString& ReportName);
	static void CacheReportComplaintName(const struct FString& ReportName, bool IsReport);
};


// Class ShadowTrackerExtra.UTSkillAppearance_AddParticle
// 0x00C0 (0x0250 - 0x0190)
class UUTSkillAppearance_AddParticle : public UUAESkillAction
{
public:
	class UParticleSystem*                             TemplateParticle_Effect;                                  // 0x0190(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       HangMeshTagName;                                          // 0x0198(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       ParticleCompTagName;                                      // 0x01A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocationPosition;                                         // 0x01A8(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    LocationRotation;                                         // 0x01B4(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     LocationScale;                                            // 0x01C0(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     FPPScale;                                                 // 0x01CC(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     FPPLocationPosition;                                      // 0x01D8(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPhaseFinishRemove;                                       // 0x01E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUndoRemove;                                              // 0x01E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01E6(0x0002) MISSED OFFSET
	TMap<struct FString, class UParticleSystem*>       DecentParticles;                                          // 0x01E8(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0238(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_AddParticle");
		return pStaticClass;
	}


	void UndoAction_Internal();
	void Reset_Internal();
	void OnParticleSystemFinished(class UParticleSystemComponent* PSC);
};


// Class ShadowTrackerExtra.UTSkillAppearance_AnimHurtingState
// 0x0018 (0x01A8 - 0x0190)
class UUTSkillAppearance_AnimHurtingState : public UUAESkillAction
{
public:
	EAnimHurtingTarget                                 Target;                                                   // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x17];                                      // 0x0191(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_AnimHurtingState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UTSkillAppearance_ParticleSystem
// 0x00E0 (0x0270 - 0x0190)
class UUTSkillAppearance_ParticleSystem : public UUTSkillAction
{
public:
	struct FUTSkillAppearance_ParticleSystem_Item      Item;                                                     // 0x0190(0x0078) (Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0208(0x0008) MISSED OFFSET
	TMap<struct FString, class UParticleSystem*>       DecentParticles;                                          // 0x0210(0x0050) (ZeroConstructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0260(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_ParticleSystem");
		return pStaticClass;
	}


	void StopParticleSystem(class UUTSkillManagerComponent* SkillManagerComponent);
	void RealDoHurtAppearance(class UUTSkillManagerComponent* SkillManagerComponent);
	void RealDoActionWrapper(class UUTSkillManagerComponent* SkillManagerComponent);
	void OnHurtAppearanceParticleSystemFinished(class UParticleSystemComponent* PSC);
	void OnAppearanceParticleSystemFinished(class UParticleSystemComponent* PSC);
};


// Class ShadowTrackerExtra.UTSkillAppearance_RemoveWarning
// 0x0000 (0x0190 - 0x0190)
class UUTSkillAppearance_RemoveWarning : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_RemoveWarning");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UTSkillAppearance_RomoveParticle
// 0x0010 (0x01A0 - 0x0190)
class UUTSkillAppearance_RomoveParticle : public UUAESkillAction
{
public:
	struct FName                                       ParticleCompTagName;                                      // 0x0190(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPhaseFinishRemove;                                       // 0x0198(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUndoRemove;                                              // 0x0199(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x6];                                       // 0x019A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_RomoveParticle");
		return pStaticClass;
	}


	void UndoAction_Internal();
	void Reset_Internal();
	bool RealDoAction_Internal();
};


// Class ShadowTrackerExtra.UTSkillAppearance_ScreenParticle
// 0x0060 (0x01F0 - 0x0190)
class UUTSkillAppearance_ScreenParticle : public UUTSkillAction
{
public:
	TArray<class UParticleSystem*>                     ParticleTemplates;                                        // 0x0190(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UParticleSystem*>                     ParticleTemplate_Ints;                                    // 0x01A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                                  TransformOffset;                                          // 0x01B0(0x0030) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                              RotationOffset;                                           // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xC];                                       // 0x01E4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_ScreenParticle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UTSkillAppearance_SimpleParticleSystem
// 0x0028 (0x01B8 - 0x0190)
class UUTSkillAppearance_SimpleParticleSystem : public UUTSkillAction
{
public:
	class UParticleSystem*                             Template_Effect;                                          // 0x0190(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     OffsetLoc;                                                // 0x0198(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               NeedAttach;                                               // 0x01A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAutoDestroy;                                             // 0x01A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01A6(0x0002) MISSED OFFSET
	struct FName                                       AttachedCompTag;                                          // 0x01A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       AttachedSocketName;                                       // 0x01B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_SimpleParticleSystem");
		return pStaticClass;
	}


	void RealDoActionWrapper(class UUTSkillManagerComponent* SkillManagerComponent);
};


// Class ShadowTrackerExtra.UTSkillAppearance_SkillWarning
// 0x0038 (0x01C8 - 0x0190)
class UUTSkillAppearance_SkillWarning : public UUAESkillAction
{
public:
	class UMaterialInstance*                           WarningDecalMaterial;                                     // 0x0190(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     LocationOffset;                                           // 0x0198(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    RotationOffset;                                           // 0x01A4(0x000C) (Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                     Scale;                                                    // 0x01B0(0x000C) (Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AutoDisappearTime;                                        // 0x01BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSkillEndRemove;                                          // 0x01C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_SkillWarning");
		return pStaticClass;
	}


	void UndoAction_Internal();
};


// Class ShadowTrackerExtra.UTSkillAppearance_SoundCue
// 0x00E0 (0x0270 - 0x0190)
class UUTSkillAppearance_SoundCue : public UUTSkillAction
{
public:
	struct FUTSkillAppearance_SoundCue_Item            Item;                                                     // 0x0190(0x0018) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*> PhysSoundMapForLocal;                                     // 0x01A8(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               IsPlayingCollideSound;                                    // 0x01F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01F9(0x0007) MISSED OFFSET
	TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*> PhysSoundMap;                                             // 0x0200(0x0050) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bUseWeaponAvatarPhysSound;                                // 0x0250(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ESurviveWeaponPropSlot>                WeaponPropSlot;                                           // 0x0251(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseWeaponAvatarItemSound;                                // 0x0252(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1D];                                      // 0x0253(0x001D) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_SoundCue");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UTSkillLocationPicker_GroundLoc
// 0x0008 (0x0150 - 0x0148)
class UUTSkillLocationPicker_GroundLoc : public UUTSkillLocationPicker
{
public:
	float                                              OffsetFromCenter;                                         // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseOwnerAsCenter;                                        // 0x014C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x014D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillLocationPicker_GroundLoc");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UTSkillLocationPicker_ImpactPos
// 0x0000 (0x0148 - 0x0148)
class UUTSkillLocationPicker_ImpactPos : public UUTSkillLocationPicker
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UTSkillLocationPicker_ImpactPos");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.UUNGCondition_HeavyWBoxAppear
// 0x0000 (0x0030 - 0x0030)
class UUUNGCondition_HeavyWBoxAppear : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.UUNGCondition_HeavyWBoxAppear");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VehicleAntiCheatTask
// 0x0000 (0x0028 - 0x0028)
class UVehicleAntiCheatTask : public UObject
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleAntiCheatTask");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTask_AccelerationControl
// 0x0050 (0x0078 - 0x0028)
class UVACTask_AccelerationControl : public UVehicleAntiCheatTask
{
public:
	float                                              StartCheckSpeed;                                          // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAccelerationSpeed;                                     // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckInterval;                                            // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x24];                                      // 0x0034(0x0024) MISSED OFFSET
	class ASTExtraVehicleBase*                         MyVehicleOwner;                                           // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	class USTExtraVehicleMovementComponent4W*          MyVehicleOwnerMovement4W;                                 // 0x0068(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0070(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_AccelerationControl");
		return pStaticClass;
	}


	void OnDriverChanged(class ASTExtraPlayerCharacter* OldChara, class ASTExtraPlayerCharacter* NewChara);
	void OnClientMove(float InClientTime, const struct FVector& InClientPos);
};


// Class ShadowTrackerExtra.VACTask_ClientAbsSpeed
// 0x0058 (0x0080 - 0x0028)
class UVACTask_ClientAbsSpeed : public UVehicleAntiCheatTask
{
public:
	float                                              MaxHorizonSpeed;                                          // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CheckInterval;                                            // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseConvertedTimeSpeedCheck;                              // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               IsIncludeZDir;                                            // 0x0031(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4E];                                      // 0x0032(0x004E) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_ClientAbsSpeed");
		return pStaticClass;
	}


	void OnDriverChanged(class ASTExtraPlayerCharacter* OldChara, class ASTExtraPlayerCharacter* NewChara);
	void OnClientMove(float InClientTime, const struct FVector& InClientPos);
};


// Class ShadowTrackerExtra.VehAttachmentAnimInstanceBase
// 0x0010 (0x03D0 - 0x03C0)
class UVehAttachmentAnimInstanceBase : public UAnimInstance
{
public:
	struct FVector                                     RotationInputDir;                                         // 0x03C0(0x000C) (BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehAttachmentAnimInstanceBase");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VehicleAdvanceAvatarComponent
// 0x0128 (0x0770 - 0x0648)
class UVehicleAdvanceAvatarComponent : public USlotViewAvatarComponent
{
public:
	unsigned char                                      UnknownData00[0x59];                                      // 0x0648(0x0059) MISSED OFFSET
	bool                                               bAvatarFPPMode;                                           // 0x06A1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bAvatarBroken;                                            // 0x06A2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x1];                                       // 0x06A3(0x0001) MISSED OFFSET
	int                                                MasterCompLODLevel;                                       // 0x06A4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                VehicleSkinID;                                            // 0x06A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bMasterBaseMeshLoaded;                                    // 0x06AC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x06AD(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData03[0x28];                                      // 0x06AD(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.VehicleAdvanceAvatarComponent.MasterBaseMesh
	unsigned char                                      UnknownData04[0x28];                                      // 0x06D8(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.VehicleAdvanceAvatarComponent.BaseAnimBP
	TArray<struct FVehicleStyleData>                   LogicStyleData;                                           // 0x0700(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStyleEquippedEvent;                                     // 0x0710(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnStyleUnequippedEvent;                                   // 0x0720(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<EVehicleSlotType>                           AccessoryPartSlotTypes;                                   // 0x0730(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FName                                       FrontMatSlotName;                                         // 0x0740(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       TailMatSlotName;                                          // 0x0748(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       FPPMatSlotName;                                           // 0x0750(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    FrontLightDIM;                                            // 0x0758(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    TailLightDIM;                                             // 0x0760(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*                    FPPLightDIM;                                              // 0x0768(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleAdvanceAvatarComponent");
		return pStaticClass;
	}


	void UpdateStaticMeshLOD(int MasterLODLevel);
	void Streamable_RequestAsyncLoadMeshes(TArray<struct FSoftObjectPath>* InAssetPathList);
	void SetVehicleAvatarNormalMode();
	void SetVehicleAvatarFPPMode();
	void SetVehicleAvatarBroken();
	void SetMasterBaseMeshPath(const struct FString& InPath);
	void SetMasterBaseMeshAnimBP(const struct FString& InPath);
	void ResetAdvanceVehicleSkinID();
	void RemoveAllEquippedStyle();
	bool ProcessHandleUnequip(EVehicleSlotType InSlotType);
	bool ProcessHandleEquip(EVehicleSlotType InSlotType);
	void PreProcessBeforeLoadMesh();
	void PostProcessAfterLoadMesh();
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);
	void PerChangeVehicleAvatar(int InVehicleSkinID);
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);
	void OnRep_BodySlotStateChanged();
	struct FVehicleStyleData MakeVehicleStyleData(int InStyleID);
	bool IsValidAvatar();
	int IsStyleHasModelConfig(const struct FVehicleStyleData& InStyleData);
	bool IsAvatarFPPMode();
	bool IsAvatarBroken();
	bool IsAdvanceVehicleInsideSlot(int SlotID);
	bool IsAdvanceVehicleBodySlot(int SlotID);
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);
	bool InitVehicleAvatar_Old(const struct FVehicleAvatarData& InVehicleAvatarData);
	bool InitVehicleAvatar(const struct FVehicleAvatarData& InVehicleAvatarData, bool bUpdateFlag);
	void InitMasterComponent();
	void Initialize();
	void InitialAvatarParam();
	int HasStyleEquipped(int InStyleID);
	int HasEquippedSameStyle(int InStyleID);
	bool HandleUnequipStyle(int InStyleID);
	void HandleMaterialDiff(int InSlotID, class UItemHandleBase* InItemHandle);
	bool HandleEquipStyle(int InStyleID);
	class USkeletalMeshComponent* GetVehicleWheelMeshComp();
	class UMeshComponent* GetVehicleBodyMeshComp();
	EMeshType GetSlotMeshType(int InSlotID, int InSubSlotID, class UItemHandleBase* InItemHandle);
	bool CanBeMeshMerge(int SlotID);
};


// Class ShadowTrackerExtra.VACTContinuous
// 0x0008 (0x0030 - 0x0028)
class UVACTContinuous : public UVehicleAntiCheatTask
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTContinuous");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTBytimes
// 0x0008 (0x0030 - 0x0028)
class UVACTBytimes : public UVehicleAntiCheatTask
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTBytimes");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTask_FlyingVehicle
// 0x0008 (0x0038 - 0x0030)
class UVACTask_FlyingVehicle : public UVACTContinuous
{
public:
	bool                                               bTestBool;                                                // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_FlyingVehicle");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTask_FlyingVehicleVelocity
// 0x0020 (0x0050 - 0x0030)
class UVACTask_FlyingVehicleVelocity : public UVACTContinuous
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_FlyingVehicleVelocity");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTask_FlyingVehicleVelocityChange
// 0x0000 (0x0030 - 0x0030)
class UVACTask_FlyingVehicleVelocityChange : public UVACTContinuous
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_FlyingVehicleVelocityChange");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTask_FlyingVehicleZ
// 0x0000 (0x0030 - 0x0030)
class UVACTask_FlyingVehicleZ : public UVACTContinuous
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_FlyingVehicleZ");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTask_FlyingVehicleTimeLimit
// 0x0000 (0x0030 - 0x0030)
class UVACTask_FlyingVehicleTimeLimit : public UVACTContinuous
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_FlyingVehicleTimeLimit");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTask_DrivingUnderwater
// 0x0008 (0x0038 - 0x0030)
class UVACTask_DrivingUnderwater : public UVACTBytimes
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_DrivingUnderwater");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTask_DrivingUnderwaterAllDir
// 0x0000 (0x0038 - 0x0038)
class UVACTask_DrivingUnderwaterAllDir : public UVACTask_DrivingUnderwater
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_DrivingUnderwaterAllDir");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTask_SuperSpeed
// 0x0008 (0x0038 - 0x0030)
class UVACTask_SuperSpeed : public UVACTContinuous
{
public:
	float                                              MaxAllowedSyncSpeedDiff;                                  // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_SuperSpeed");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VACTask_SuperSpeedAllDir
// 0x0000 (0x0038 - 0x0038)
class UVACTask_SuperSpeedAllDir : public UVACTask_SuperSpeed
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VACTask_SuperSpeedAllDir");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VehicleAttachmentBase
// 0x0030 (0x03C0 - 0x0390)
class AVehicleAttachmentBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0390(0x0010) MISSED OFFSET
	bool                                               bEnableModifyHitDamage;                                   // 0x03A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03A1(0x0003) MISSED OFFSET
	float                                              HitSelfModifier;                                          // 0x03A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitSelfImpactReduce;                                      // 0x03A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitOthersModifier;                                        // 0x03AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitOthersImpactRaise;                                     // 0x03B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitCharacterModifier;                                     // 0x03B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleAttachmentBase");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VehicleAvatarComponent
// 0x0098 (0x03C8 - 0x0330)
class UVehicleAvatarComponent : public UItemAvatarComponentBase
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0330(0x0060) MISSED OFFSET
	struct FScriptMulticastDelegate                    VehicleAvatarEqiuped;                                     // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    VehicleLoadedBrokenMat;                                   // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               bFPPMeshLoading;                                          // 0x03B0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bFPPMeshLoaded;                                           // 0x03B1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03B2(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    VehicleLoadedFPPMesh;                                     // 0x03B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleAvatarComponent");
		return pStaticClass;
	}


	void PreChangeVehicleFPPMode();
	void PreChangeVehicleBrokenMataterial();
	void PreChangeVehicleAvatar(int InItemID);
	void PreChangeItemAvatar(int InItemID);
	void PostChangeItemAvatar(bool bProcessRenderPipeline);
	struct FSoftObjectPath GetVehicleFPPStaticMeshPath();
	struct FSoftObjectPath GetVehicleFPPSkeletalMeshPath();
	TArray<struct FItemAvatarMatPath> GetVehicleFPPMatPath();
	TArray<struct FItemAvatarMatPath> GetVehicleBrokenMatPath();
	struct FString GetItemAvatarHandlePath(int ItemID);
	class UBackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);
	void ExitFPPVehicle();
	void EnterFPPVehicle();
	bool CheckIsNeedEnterFPPVehicle();
};


// Class ShadowTrackerExtra.VehicleAvatarHandle
// 0x0430 (0x04E0 - 0x00B0)
class UVehicleAvatarHandle : public UAvatarHandleBase
{
public:
	EVehicleSlotType                                   slotType;                                                 // 0x00B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	TArray<EVehicleSlotType>                           RelativeChildSlots;                                       // 0x00B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EVehicleSlotType                                   RelativeParentSlot;                                       // 0x00C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
	struct FVehicleMeshPackage                         MeshPackage;                                              // 0x00D0(0x0100) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVehicleMeshPackage                         FPPMeshPackage;                                           // 0x01D0(0x0100) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVehicleMeshPackage                         ReplaceMeshPackage;                                       // 0x02D0(0x0100) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FVehicleMeshPackage>                 MutilReplaceMeshPackage;                                  // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x100];                                     // 0x03E0(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleAvatarHandle");
		return pStaticClass;
	}


	bool HandleRealShowMeshpack(const struct FAvatarSlotDesc& InSlotDesc, class UObject* Outer);
	bool HandleMutilReplaceMeshPack(const struct FAvatarSlotDesc& InSlotDesc, class UObject* Outer, struct FVehicleMeshPackage* OutMeshPack);
};


// Class ShadowTrackerExtra.VehicleComponent
// 0x0000 (0x0110 - 0x0110)
class UVehicleComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VehicleCommonComponent
// 0x0070 (0x0180 - 0x0110)
class UVehicleCommonComponent : public UVehicleComponent
{
public:
	struct FScriptMulticastDelegate                    VehicleHPChangedDelegate;                                 // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    VehicleFuelChangedDelegate;                               // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    VehicleWheelsHPChangedDelegate;                           // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               DontDamage;                                               // 0x0140(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	float                                              HPMax;                                                    // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HP;                                                       // 0x0148(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	TArray<float>                                      WheelsCurrentHP;                                          // 0x0150(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	bool                                               DontConsumeFuel;                                          // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	float                                              FuelMax;                                                  // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Fuel;                                                     // 0x0168(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FuelConsumeFactor;                                        // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSTExtraVehicleWheelHP>              WheelsHP;                                                 // 0x0170(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleCommonComponent");
		return pStaticClass;
	}


	void VehicleTakeDamage(float Damage, class AController* Instigator, const struct FDamageEvent& DamageEvent, class AActor* DamageCauser);
	void TakeDamageByHitPart(float Damage, unsigned char HitPart, bool IgnoreWheels, class AController* Instigator, const struct FDamageEvent& DamageEvent, class AActor* DamageCauser);
	void TakeDamageByBoneName(float Damage, bool IgnoreWheels, class AController* Instigator, const struct FDamageEvent& DamageEvent, class AActor* DamageCauser, struct FName* BoneName);
	void RefreshWheelState();
	void OnRep_WheelsCurrentHP();
	void OnRep_HP();
	void OnRep_Fuel();
	bool NoFuel();
	void Maintenance(float addpercenthp, bool FixTire);
	bool IsDontDamage();
	bool IsDontConsumeFuel();
	bool IsDestroyed();
	int GetWheelsHPNum();
	float GetWheelHPMax(int WheelIdx);
	float GetWheelHP(int WheelIdx);
	float GetVehicleHPMax();
	float GetVehicleHP();
	float GetFuelMax();
	float GetFuelConsumeFactor();
	float GetFuel();
};


// Class ShadowTrackerExtra.VehicleDamageComponent
// 0x0110 (0x0220 - 0x0110)
class UVehicleDamageComponent : public UVehicleComponent
{
public:
	class UCurveFloat*                                 VehicleHitCharacterDamageCurve;                           // 0x0110(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LaunchVelocityFactorOnHitCharacter;                       // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactModifier;                                           // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactAbsorption;                                         // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactAbsorptionPassenger;                                // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactModifierUpsideDown;                                 // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactAbsorptionUpsideDown;                               // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactAbsorptionPassengerUpsideDown;                      // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitIgnoreImpulseThreshold;                                // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageCharacterCD;                                        // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x013C(0x0004) MISSED OFFSET
	float                                              DamageSelfCD;                                             // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	float                                              HitDamageSelfMaxFactor;                                   // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              HitDamagePassengerMaxHP;                                  // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bApplyDamageToCharacter;                                  // 0x0150(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0151(0x0003) MISSED OFFSET
	float                                              AllowedMaxHitDistanceSqAtServer;                          // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DamageReduce;                                             // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExplosionBaseDamage;                                      // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExplosionMinimumDamage;                                   // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExplosionRadiusInner;                                     // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExplosionRadiusOuter;                                     // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExplosionDamageFalloff;                                   // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ExplosionBaseMomentumMag;                                 // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0174(0x0004) MISSED OFFSET
	class UClass*                                      ExplosionDamageType;                                      // 0x0178(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               OnlyBreakWindowThroughDriver;                             // 0x0180(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	float                                              HitStoneVelocityDamp;                                     // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0188(0x0008) MISSED OFFSET
	struct FRigidBodyState                             CachedRigidBodyState;                                     // 0x0190(0x0040) (NoDestructor, NativeAccessSpecifierPrivate)
	bool                                               bEnableVehicleHitVehicle;                                 // 0x01D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x7];                                       // 0x01D1(0x0007) MISSED OFFSET
	class UCurveFloat*                                 VehicleHitVehicleDamageCurve;                             // 0x01D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ImpactModifierVehicle;                                    // 0x01E0(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   ImpactModifierOtherVehicle;                               // 0x01E8(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactAbsorptionVehicle;                                  // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactAbsorptionAmplitude;                                // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DotProductFrontThreshold;                                 // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DotProductRearThreshold;                                  // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactModifierFront;                                      // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactModifierRear;                                       // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactModifierFrontSide;                                  // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ImpactModifierRearSide;                                   // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   DamageCorrection;                                         // 0x0210(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SameCampDamangeAttenuationCoefficient;                    // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SameCampDamangeLimit;                                     // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleDamageComponent");
		return pStaticClass;
	}


	void SendHitCaveStoneToServer(class AActor* OtherActor, const struct FRigidBodyState& InHitBodyState);
	void HandleOnVehicleHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
};


// Class ShadowTrackerExtra.VehicleDataMgr
// 0x00E8 (0x0478 - 0x0390)
class AVehicleDataMgr : public AActor
{
public:
	TArray<TWeakObjectPtr<class ASTExtraVehicleBase>>  VehiclesDataMap;                                          // 0x0390(0x0010) (ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ASTExtraVehicleBase>>  uavDataMap;                                               // 0x03A0(0x0010) (ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x50];                                      // 0x03B0(0x0050) MISSED OFFSET
	class UUAEDataTable*                               VehicleSpawnTable;                                        // 0x0400(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUAEDataTable*                               VehicleMaxHPTable;                                        // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0410(0x0050) MISSED OFFSET
	class UUAEDataTable*                               CarMusicTable;                                            // 0x0460(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0468(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleDataMgr");
		return pStaticClass;
	}


	void UnRegisterVehicle(class ASTExtraVehicleBase* Vehicle);
	void UnRegisterUAV(class ASTExtraVehicleBase* uav);
	void RemoveNoFreezeOn(class USceneComponent* Actor);
	void RegisterVehicle(class ASTExtraVehicleBase* Vehicle);
	void RegisterUAV(class ASTExtraVehicleBase* uav);
	static class AVehicleDataMgr* GetInstance(class UWorld* World);
	void AddNoFreezeOn(class USceneComponent* Actor);
};


// Class ShadowTrackerExtra.STVehicleWheelDustConfig
// 0x0010 (0x0040 - 0x0030)
class USTVehicleWheelDustConfig : public UDataAsset
{
public:
	TArray<struct FSTVehicleWheelDust>                 WheelDusts;                                               // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.STVehicleWheelDustConfig");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VehicleLagCompensationComponent
// 0x1270 (0x1570 - 0x0300)
class UVehicleLagCompensationComponent : public ULagCompensationComponentBase
{
public:
	unsigned char                                      UnknownData00[0x1270];                                    // 0x0300(0x1270) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleLagCompensationComponent");
		return pStaticClass;
	}


	TEnumAsByte<EShootVertifyRes> VerifyWeaponOwnerPos(const struct FBulletHitInfoUploadData& ShootData, class ASTExtraShootWeapon* Weapon);
	TEnumAsByte<EShootVertifyRes> VerifyWeaponOwnerAndMuzzleDis(const struct FBulletHitInfoUploadData& ShootData, class ASTExtraShootWeapon* Weapon);
	TEnumAsByte<EShootVertifyRes> VerifyShootPointByNetDelay(class ASTExtraCharacter* Victim, const struct FVector& MuzzlePos, class APawn* AttackPawn);
	float SimulatedCharacterServerTime();
	void OnDriverChanged(class ASTExtraPlayerCharacter* OldChara, class ASTExtraPlayerCharacter* NewChara);
	TEnumAsByte<EShootVertifyRes> Do_VerifyShoot(class ASTExtraShootWeapon* Weapon, class ASTExtraCharacter* shooter, class AActor* Victim, const struct FBulletHitInfoUploadData& ShootData);
	TEnumAsByte<EShootVertifyRes> _VerifyClientHitAndBullet(class ASTExtraCharacter* shooter, const struct FVector& InBulletPos, const struct FVector& InHittedActorPos);
};


// Class ShadowTrackerExtra.VehicleMotorbikeComponent
// 0x0168 (0x0278 - 0x0110)
class UVehicleMotorbikeComponent : public UVehicleComponent
{
public:
	struct FScriptMulticastDelegate                    OnContactChanged;                                         // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_Roll;                                               // 0x0120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_ReturnClamp;                                        // 0x0128(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_Steer;                                              // 0x0130(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_Yaw;                                                // 0x0138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_TorqueStab;                                         // 0x0140(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_Roll_Cart;                                          // 0x0148(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_ReturnClamp_Cart;                                   // 0x0150(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_Steer_Cart;                                         // 0x0158(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_Yaw_Cart;                                           // 0x0160(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 Curve_TorqueStab_Cart;                                    // 0x0168(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bHasSidecart;                                             // 0x0170(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0171(0x0007) MISSED OFFSET
	struct FName                                       LowStabBoneName;                                          // 0x0178(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       HighStabBoneName;                                         // 0x0180(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     SideCartHighStabCOM;                                      // 0x0188(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinSuspensionOffsetForContact;                            // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     StabStaticVector;                                         // 0x0198(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabXVelocityIn;                                          // 0x01A4(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabXVelocityOut;                                         // 0x01AC(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabXPitchIn;                                             // 0x01B4(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabXPitchOut;                                            // 0x01BC(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabZVelocityIn;                                          // 0x01C4(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabZVelocityOut;                                         // 0x01CC(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabZRollIn;                                              // 0x01D4(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabZRollOut;                                             // 0x01DC(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabZPitchIn;                                             // 0x01E4(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabZPitchOut;                                            // 0x01EC(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabTorqueIn;                                             // 0x01F4(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabTorqueOut;                                            // 0x01FC(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StabTorqueForceScalar;                                    // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabTorquePitchIn;                                        // 0x0208(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   StabTorquePitchOut;                                       // 0x0210(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseNewCOMCal;                                            // 0x0218(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0219(0x0003) MISSED OFFSET
	float                                              ScaleTorque;                                              // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ScaleCenterOfMass;                                        // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     CurrentTorque;                                            // 0x0224(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     CurrentCenterOfMass;                                      // 0x0230(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bKickstandStabilizeEnabled;                               // 0x023C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x023D(0x0003) MISSED OFFSET
	float                                              KickstandAngularDamping;                                  // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              KickstandMaxAngVelocity;                                  // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              KickstandEnableMaxSpeed;                                  // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   AirControlFVelMap;                                        // 0x024C(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                                   AirControlBVelMap;                                        // 0x0254(0x0008) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirControlFBTorque;                                       // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldResetRotation;                                     // 0x0260(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bContact;                                                 // 0x0261(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0xA];                                       // 0x0262(0x000A) MISSED OFFSET
	float                                              COMOffsetSteer;                                           // 0x026C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RotSteeringFinal;                                         // 0x0270(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0274(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleMotorbikeComponent");
		return pStaticClass;
	}


	void HandleOnVehicleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
};


// Class ShadowTrackerExtra.VehicleSeatComponent
// 0x0120 (0x0230 - 0x0110)
class UVehicleSeatComponent : public UVehicleComponent
{
public:
	TArray<struct FSTExtraVehicleSeat>                 Seats;                                                    // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class ASTExtraPlayerCharacter*>             SeatOccupiers;                                            // 0x0120(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FSTExtraVehicleWeaponsOnSeat>        VehicleWeapons;                                           // 0x0130(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FSTExtraVehicleAttachment>           VehicleAttachmentsConfig;                                 // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class AVehicleAttachmentBase*>              VehicleAttachments;                                       // 0x0150(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<struct FName>                               AlternativeLeaveVehicleSockets;                           // 0x0160(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FName>                               AlternativeEnterVehicleSockets;                           // 0x0170(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                              LeaveVehicleVelocityScale;                                // 0x0180(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCheckValidLeaveLocationBySweep;                          // 0x0184(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableForceLeave;                                        // 0x0185(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0xA];                                       // 0x0186(0x000A) MISSED OFFSET
	TArray<TEnumAsByte<EVHSeatGUIType>>                SeatGUITypes;                                             // 0x0190(0x0010) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FScriptMulticastDelegate                    OnSeatAttached;                                           // 0x01A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSeatDetached;                                           // 0x01B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnSeatChanged;                                            // 0x01C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnUpdateSeatGUI;                                          // 0x01D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FString                                     LatestDriverPlayerName;                                   // 0x01E0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnDriverChange;                                           // 0x01F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FString                                     LatestDriverPlayerUID;                                    // 0x0200(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                MaxInUseSeatGUIIndex;                                     // 0x0210(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0214(0x0004) MISSED OFFSET
	class ASTExtraPlayerController*                    RemoteController;                                         // 0x0218(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDelayOnRepOccupiersInReConnect;                          // 0x0220(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0221(0x0007) MISSED OFFSET
	class ASTExtraPlayerCharacter*                     mp_CurDriver;                                             // 0x0228(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleSeatComponent");
		return pStaticClass;
	}


	void ProcessPawnUseVehWeaponRotation(class ASTExtraBaseCharacter* InChar, const struct FName& AttachSocketName);
	void OnRep_VehicleWeapons();
	void OnRep_Occupiers();
	void OnRep_Attachments();
	bool IsSeatIndexAvailable(int SeatIndex);
	bool IsSeatAvailableTeam(class ASTExtraBaseCharacter* InCharacter);
	bool IsSeatAvailable(ESTExtraVehicleSeatType SeatType);
	bool GetPlayerSeatInfo(class ASTExtraPlayerCharacter* InPlayer, struct FSTExtraVehicleSeat* SeatInfo);
	class ASTExtraPlayerCharacter* GetFirstPassenger();
	class ASTExtraPlayerCharacter* GetDriver();
	void ClientSetLocalWeaponWillCtr(class ASTExtraPlayerCharacter* Character, class AVehicleShootWeapon* VehShootWeapon);
	void ClientSetLeaveVehicleLocation(class ASTExtraPlayerCharacter* Character, const struct FVector& LeaveLocation);
	void ClientChangeSeatCameraData(class ASTExtraPlayerCharacter* Character, int OldIndex, int newIndex);
};


// Class ShadowTrackerExtra.VehicleShootWeapon
// 0x0130 (0x0E50 - 0x0D20)
class AVehicleShootWeapon : public ASTExtraShootWeapon
{
public:
	bool                                               bUseVehWeaponDisableCameraLag;                            // 0x0D20(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseVehWeaponView;                                        // 0x0D21(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bAddTargetOffset;                                         // 0x0D22(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0D23(0x0005) MISSED OFFSET
	struct FName                                       VehWeaponBindSocket;                                      // 0x0D28(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraOffsetData                           VehWeaponViewCameraData;                                  // 0x0D30(0x001C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bNeedCalcMuzzleSocket;                                    // 0x0D4C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0D4D(0x0003) MISSED OFFSET
	struct FName                                       OnBlockMuzzleSocket;                                      // 0x0D50(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               VehicleWeaponIdle;                                        // 0x0D58(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               VehicleWeaponReload;                                      // 0x0D60(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               VehicleWeaponUnuseIdle;                                   // 0x0D68(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VehicleWeaponReloadRate;                                  // 0x0D70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0D74(0x0004) MISSED OFFSET
	class UAnimMontage*                                VehicleWeaponFireMontage;                                 // 0x0D78(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVehicleWeaponUseHandIK;                                  // 0x0D80(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0D81(0x0007) MISSED OFFSET
	struct FName                                       VehicleWeaponGripSocketR;                                 // 0x0D88(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       VehicleWeaponGripSocketL;                                 // 0x0D90(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bControlled;                                              // 0x0D98(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableControlled;                                        // 0x0D99(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableAutoReload;                                        // 0x0D9A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableFreeCameraWhenReload;                              // 0x0D9B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableExitWeaponViewWhenReload;                          // 0x0D9C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0xF];                                       // 0x0D9D(0x000F) MISSED OFFSET
	bool                                               bEnableReturnBullets;                                     // 0x0DAC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableRotateCharacter;                                   // 0x0DAD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableScopeAfterReload;                                  // 0x0DAE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0DAF(0x0002) MISSED OFFSET
	bool                                               bAnimFollowCameraOnlyInADS;                               // 0x0DB1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x6];                                       // 0x0DB2(0x0006) MISSED OFFSET
	struct FName                                       CharacterSocket;                                          // 0x0DB8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableShowVehicleWeaponUI;                               // 0x0DC0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableShowControlButton;                                 // 0x0DC1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableShowSlotUI;                                        // 0x0DC2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableShowInterferenceLine;                              // 0x0DC3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEnableShowCompass;                                       // 0x0DC4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUsePredictLine;                                          // 0x0DC5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x2];                                       // 0x0DC6(0x0002) MISSED OFFSET
	class UClass*                                      GrenadePredictLineClass;                                  // 0x0DC8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       GrenadePredictLineSocket;                                 // 0x0DD0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGrenadePredictLine*                         GrenadePredictLine;                                       // 0x0DD8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanConsumeFuel;                                          // 0x0DE0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0DE1(0x0003) MISSED OFFSET
	float                                              FuelConsumptionRate;                                      // 0x0DE4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData09[0x18];                                      // 0x0DE8(0x0018) MISSED OFFSET
	float                                              StartReloadDelayTime;                                     // 0x0E00(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData10[0xC];                                       // 0x0E04(0x000C) MISSED OFFSET
	float                                              EndReloadDelayTime;                                       // 0x0E10(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0E14(0x0004) MISSED OFFSET
	class ASTExtraPlayerCharacter*                     RefSeatPlayer;                                            // 0x0E18(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bLocalUseWeapon;                                          // 0x0E20(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData12[0x7];                                       // 0x0E21(0x0007) MISSED OFFSET
	class AActor*                                      OwnerActor;                                               // 0x0E28(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraVehicleBase*                         OwnerVehicle;                                             // 0x0E30(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0E38(0x0004) MISSED OFFSET
	int                                                BulletTypeTipMsgID;                                       // 0x0E3C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                NotEnoughEnergyTipMsgID;                                  // 0x0E40(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int                                                CantUseFireWeaponTipMsgID;                                // 0x0E44(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0E48(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleShootWeapon");
		return pStaticClass;
	}


	void StartReloadAnim();
	void SetUsePawnControlRotation(class ASTExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);
	void OnVehicleExplode();
	void OnRep_OwnerActor();
	void NetMulticastReturnBullets();
	void MulUsedOrNot(class ASTExtraPlayerCharacter* Character, bool bUsed, const struct FWeaponSyncData& SyncData);
	void K2_SetSpecialMeshHide(bool isHide);
	void K2_OnUsedOrNot(class ASTExtraPlayerCharacter* Character, bool bUsed);
	void K2_OnReturnBullets();
	class UMeshComponent* K2_GetWeaponMeshComp();
	void HnadleScopeInAfterReload();
	void HandleWeaponStateChanged(TEnumAsByte<EFreshWeaponStateType> LastState, TEnumAsByte<EFreshWeaponStateType> NewState);
	void HandleWeaponStartReload();
	void HandleWeaponEndReload();
	void HandleEndTouchScreenInReloading(TEnumAsByte<ETouchIndex> FingerIndex);
	void HandleBeginTouchScreenInReloading(const struct FVector2D& Loc);
	class ASTExtraPlayerCharacter* GetPlayerCharacter();
	class ASTExtraVehicleBase* GetOwnerVehicle();
	struct FRotator GetOwnerCameraRotator();
	struct FTransform GetCharacterSocketTransform();
	void DoAutoReloadVehicleWeapon(class ASTExtraShootWeapon* ShootWeapon);
	bool CheckIsAutonomousOrObTarget();
	void AfterReloadEnd();
};


// Class ShadowTrackerExtra.VehicleSpringArmComponent
// 0x0090 (0x0400 - 0x0370)
class UVehicleSpringArmComponent : public USpringArmComponent
{
public:
	float                                              StayTimeBeforeReturning;                                  // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bNeverAutoReturnSmartCamera;                              // 0x0374(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0375(0x0003) MISSED OFFSET
	struct FRotator                                    RelativeToOwnerRotator;                                   // 0x0378(0x000C) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x14];                                      // 0x0384(0x0014) MISSED OFFSET
	bool                                               bDrawDebugLineAndShap;                                    // 0x0398(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0399(0x0003) MISSED OFFSET
	float                                              MinPitch;                                                 // 0x039C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxPitch;                                                 // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDontFollowParent;                                        // 0x03A4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03A5(0x0003) MISSED OFFSET
	float                                              RevoerTimefromFreeTime;                                   // 0x03A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x40];                                      // 0x03AC(0x0040) MISSED OFFSET
	float                                              ResultMinPitch;                                           // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              ResultMaxPitch;                                           // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              FreeCamRotationReturnRate;                                // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData05[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleSpringArmComponent");
		return pStaticClass;
	}


	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);
	void DelayRotationLagEnabledEnd();
	void DelayRotationLagEnabled(bool bEnabled, float Time, const struct FRotator& _RelativeRotator);
};


// Class ShadowTrackerExtra.VehicleStatComponent
// 0x0050 (0x0160 - 0x0110)
class UVehicleStatComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0110(0x0020) MISSED OFFSET
	int                                                RollCount;                                                // 0x0130(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RollDegrees;                                              // 0x0134(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              InAirTime;                                                // 0x0138(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirControlFTime;                                          // 0x013C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AirControlBTime;                                          // 0x0140(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsRecording;                                             // 0x0144(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0145(0x0003) MISSED OFFSET
	float                                              ReachGroundTime;                                          // 0x0148(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x14];                                      // 0x014C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleStatComponent");
		return pStaticClass;
	}


	void StopRecord();
	void ClearStats();
	void BeginRecord();
};


// Class ShadowTrackerExtra.VehicleStatesDataTable
// 0x0010 (0x0040 - 0x0030)
class UVehicleStatesDataTable : public UDataAsset
{
public:
	TArray<struct FVehicleStatesDataRecord>            arr;                                                      // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleStatesDataTable");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VehicleSyncComponent
// 0x0210 (0x0320 - 0x0110)
class UVehicleSyncComponent : public UVehicleComponent
{
public:
	struct FScriptMulticastDelegate                    OnActorHit;                                               // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                              MinCorrectionInterval;                                    // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinSendingStateChangedIntervalAtClient;                   // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinDeltaTimeSinceLastPhysicStateAtClient;                 // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxDeltaTimeSinceLastPhysicStateAtClient;                 // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SendingToServerIntervalAtClient;                          // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SendingReliableHitToServerInterval;                       // 0x0134(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AllowMaxDiatanceSqAtServer;                               // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StationaryCorrectIntervalAtClient;                        // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StationaryCorrectSpeedThresholdSq;                        // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StationaryCorrectThresholdDistanceSq;                     // 0x0144(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinCorrectionDistanceSqAtClient;                          // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinCorrectionVelocitySqAtClient;                          // 0x014C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MinCorrectionAngleVelocitySqAtClient;                     // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IdleForceUpdateThreshold;                                 // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              IdleForceSyncInterval;                                    // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bUseStaticRotFix;                                         // 0x015C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	float                                              StaticFixLocation;                                        // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StaticFixAngel;                                           // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              StaticStopFixTorelence;                                   // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxCalculatedStartZVeolcity;                              // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bVehicleNeedFlyVelCheck;                                  // 0x0170(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0171(0x0001) MISSED OFFSET
	bool                                               SendClientMoveToServerOverLapUseRoot;                     // 0x0172(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               AutonomousPullUpWhilePassWall;                            // 0x0173(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AutonomousPullUpWhilePassWallZThres;                      // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SimulatedFloorUpDistance;                                 // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x104];                                     // 0x017C(0x0104) MISSED OFFSET
	struct FVehicleSyncPostPhysxTick                   PostPhysxComponentTick;                                   // 0x0280(0x0058) (NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData03[0x48];                                      // 0x02D8(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleSyncComponent");
		return pStaticClass;
	}


	bool VerifyClientTimeStamp(float TimeStamp);
	void SendServerMoveToClient(int InCorrectionId, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity, bool bIsSnap);
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity);
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity);
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, bool InShouldDelay);
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity);
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity);
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, class AActor* OtherActor, const struct FVector_NetQuantize100& NormalImpulse, const struct FHitResult& Hit);
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, class AActor* OtherActor, const struct FVector_NetQuantize100& NormalImpulse, const struct FHitResult& Hit);
	void OnHitAtServer(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnHitAtClient(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDriverRide();
	void HandleOnSeatDetached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void HandleOnSeatChanged(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType LastSeatType, int LastSeatIdx, ESTExtraVehicleSeatType NewSeatType, int NewSeatIdx);
	void HandleOnSeatAttached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	TArray<class ASTExtraBaseCharacter*> GetRiders();
	float GetLanscapeHeight(const struct FVector& ClientLocation);
	bool GetFloorPosition(const struct FVector& Location, struct FVector* OutFloorLocation);
	void DragUnderGround();
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);
	void ClientHitActor(class AActor* OtherActor, const struct FVector_NetQuantize100& NormalImpulse, const struct FHitResult& Hit);
	bool CheckAndLoadLandscape(float DeltaTime);
	void ApplyRigidBodyState(struct FRigidBodyState* NewState);
	bool AdjustFloorPosition(const struct FVector& ClientLocation, TArray<class ASTExtraBaseCharacter*> Riders, struct FVector* OutLocation);
};


// Class ShadowTrackerExtra.VehicleTriggerComponent
// 0x0020 (0x02E0 - 0x02C0)
class UVehicleTriggerComponent : public USceneComponent
{
public:
	float                                              TriggerInterval;                                          // 0x02C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxAllowedValidationDiff;                                 // 0x02C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x18];                                      // 0x02C8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleTriggerComponent");
		return pStaticClass;
	}


	void OnTriggered();
};


// Class ShadowTrackerExtra.VehicleUserComponent
// 0x0200 (0x0310 - 0x0110)
class UVehicleUserComponent : public UActorComponent
{
public:
	bool                                               bGameModeHasMobs;                                         // 0x0110(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	struct FItemDefineID                               LastUsedItemDefineID;                                     // 0x0118(0x0018) (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              LastFinishCD;                                             // 0x0130(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0134(0x0002) MISSED OFFSET
	bool                                               bIsRemoteControlling;                                     // 0x0136(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0137(0x0001) MISSED OFFSET
	class ASTExtraVehicleBase*                         Vehicle;                                                  // 0x0138(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraVehicleBase*                         UnmannedVehicle;                                          // 0x0140(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraPlayerCharacter*                     Character;                                                // 0x0148(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESTExtraVehicleUserState                           VehicleUserState;                                         // 0x0150(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0151(0x0007) MISSED OFFSET
	class ASTExtraVehicleBase*                         LastDriveVehicle;                                         // 0x0158(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              UpdateVehicleSpeedGUIInterval;                            // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	float                                              UpdateClosestVehicleInterval;                             // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData05[0xC];                                       // 0x016C(0x000C) MISSED OFFSET
	TArray<class ASTExtraVehicleBase*>                 OverlappingVehicles;                                      // 0x0178(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class ASTExtraVehicleBase*>                 CullWaterRangeVehicles;                                   // 0x0188(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class ASTExtraVehicleBase*                         CurrentClosestVehicle;                                    // 0x0198(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData06[0x10];                                      // 0x01A0(0x0010) MISSED OFFSET
	bool                                               EnableVehicleShoot;                                       // 0x01B0(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData07[0x3];                                       // 0x01B1(0x0003) MISSED OFFSET
	float                                              MaxAllowedExitSpeedDiff;                                  // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData08[0xC];                                       // 0x01B8(0x000C) MISSED OFFSET
	bool                                               bRotateToViewOnExitVehicle;                               // 0x01C4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData09[0x3];                                       // 0x01C5(0x0003) MISSED OFFSET
	float                                              NoFuelTipsDisplayCooldown;                                // 0x01C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData10[0x8];                                       // 0x01CC(0x0008) MISSED OFFSET
	bool                                               bExitVehicleCheckEnabled;                                 // 0x01D4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData11[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	float                                              ExitVehicleCheckInterval;                                 // 0x01D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData12[0xC];                                       // 0x01DC(0x000C) MISSED OFFSET
	float                                              CurrentMoveForwardRate;                                   // 0x01E8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurrentMoveRightRate;                                     // 0x01EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurrentMoveUpRate;                                        // 0x01F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxCanAimAngle;                                           // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bPlayMusicEnabled;                                        // 0x01F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData13[0x3];                                       // 0x01F9(0x0003) MISSED OFFSET
	float                                              BaseVehicleLockTime;                                      // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BaseVehicleServerAuTime;                                  // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxVehicleLockTime;                                       // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxVehicleServerAuTime;                                   // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               UAVFreeCamera;                                            // 0x020C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData14[0x3];                                       // 0x020D(0x0003) MISSED OFFSET
	float                                              UAVSpeedPercent;                                          // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0214(0x0008) MISSED OFFSET
	bool                                               bTestModeOn;                                              // 0x021C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData16[0x3];                                       // 0x021D(0x0003) MISSED OFFSET
	class ASTExtraVehicleBase*                         CullWaterVehicle;                                         // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASTExtraVehicleBase*                         LastCullWaterVehicle;                                     // 0x0228(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                                    InputExtraRot;                                            // 0x0230(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                                    CharRotVsVehiRot;                                         // 0x023C(0x000C) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData17[0x4];                                       // 0x0248(0x0004) MISSED OFFSET
	float                                              ResetInputExtraRotTime;                                   // 0x024C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData18[0x5];                                       // 0x0250(0x0005) MISSED OFFSET
	bool                                               isHelicopterFreeCamera;                                   // 0x0255(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData19[0x26];                                      // 0x0256(0x0026) MISSED OFFSET
	float                                              DelayLeanOutTimeAfterChangeSeat;                          // 0x027C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData20[0x4];                                       // 0x0280(0x0004) MISSED OFFSET
	float                                              DelayScopeInTimeAfterChangeSeat;                          // 0x0284(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData21[0x4];                                       // 0x0288(0x0004) MISSED OFFSET
	float                                              ControllerYawClampMin;                                    // 0x028C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ControllerYawClampMax;                                    // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESTExtraVehicleSeatType                            CurrentSeatType;                                          // 0x0294(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0295(0x0003) MISSED OFFSET
	float                                              ForbidNightVehicleTipsCooldown;                           // 0x0298(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData23[0x40];                                      // 0x029C(0x0040) MISSED OFFSET
	bool                                               bBornInVehicle;                                           // 0x02DC(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData24[0x3];                                       // 0x02DD(0x0003) MISSED OFFSET
	class ASTExtraVehicleBase*                         BornLandSpawnedVehicle;                                   // 0x02E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FastestAllowDistance;                                     // 0x02E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              NearVehicleTickRate;                                      // 0x02EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                VehicleIconID;                                            // 0x02F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData25[0x1C];                                      // 0x02F4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleUserComponent");
		return pStaticClass;
	}


	void UseVehicleWeaponOrNot();
	void UpdateVehWeaponPassengerViewLimit();
	void UpdatePassengerViewPitchLimit();
	void TurnVehicle(float Rate);
	void TryUseHorn(bool bUse);
	bool TryLeanOutOrIn(bool bAutoLeanOut);
	void TryExitVehicle();
	void TryEnterVehicle(class ASTExtraVehicleBase* InVehicle, ESTExtraVehicleSeatType SeatType);
	void TryChangeVehicleSeat();
	bool TryChangeToVehicleSeat(int SeatIndex);
	bool TryChangeFreeFireSeatAndScopeIn();
	bool TryChangeFreeFireSeatAndLeanOut();
	void TickVehicleCullWater(class ASTExtraVehicleBase* InCullWaterVehicle);
	void TestForceTurnVehicle(const struct FRotator& Rotation, bool bIsAdd);
	void StopFireVehicleWeapon();
	bool ShowVehicleWeaponUI();
	void SetBrake(float Rate);
	void SetBoosting(bool bEnabled);
	void SetAirControlF(float Rate);
	void SetAirControlB(float Rate);
	void ServerUseVehicleWeaponOrNot(int SeatID, bool bUse);
	void ServerStopFireVehicleWeapon();
	bool ServerForceEnterVehicle(class ASTExtraVehicleBase* InVehicle, int SeatIdx);
	void Server_JoystickCenterClickHandler();
	void SendToServerUnmannedVehicleUse();
	void SendToServerUnmannedVehicleRecall();
	void SendToServerUnmannedVehiclePause();
	void RspLeanOut(bool bOut);
	void RspExitVehicle(bool bSuccess);
	void RspEnterVehicle(class ASTExtraVehicleBase* InVehicle, bool bSuccess, ESTExtraVehicleSeatType SeatType, int SeatInd);
	void RspChangeVehicleSeat(bool bSuccess, ESTExtraVehicleSeatType SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn);
	void ReqSyncViewTargetLastDriveInfo(class ASTExtraPlayerController* ObserverController, class ASTExtraBaseCharacter* ViewTargetCharacter);
	void ReqMarkLastestVehicle(class ASTExtraPlayerController* STEPC, class ASTExtraVehicleBase* InVehicle);
	void ReqLeanOut(bool IsLeanOut);
	void ReqExitVehicle(const struct FVector& ClientVehicleVelocity);
	void ReqEraseLastDriveVehicle();
	void ReqEnterVehicle(class ASTExtraVehicleBase* InVehicle, ESTExtraVehicleSeatType SeatType);
	void ReqChangeVehicleSeat(int InSeatIndex);
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);
	void OnUnmannedVehicleDriverDead(EPawnState EnteredState);
	void OnServerReconnected();
	void OnScopeInAfterChangeSeat();
	void OnRep_DefineID();
	void OnRep_BornInVehicle();
	void OnPauseUnmannedVehicleCompleted();
	void OnLeanOutAfterChangeSeat();
	void OnInputAxisMoveRight(float Rate);
	void OnInputAxisMoveForward(float Rate);
	void OnExitVehicleCompleted();
	void OnEnterVehicleCompleted(ESTExtraVehicleSeatType SeatType);
	void OnCurrrentClosestVehicleChanged();
	void OnClientReconnected();
	void OnChangeVehicleSeatCompleted(ESTExtraVehicleSeatType SeatType);
	void NotifyLeaveVehicleFailed();
	void MoveVehicleUp(float Rate);
	void MoveVehicleRight(float Rate);
	void MoveVehicleForward(float Rate);
	void MaintenanceVehicle(float addpercenthp, bool FixTire);
	bool HasChangeMoveRightRate(float Before, float After);
	void HandleVehicleWeaponToLastWeapon(TEnumAsByte<ESurviveWeaponPropSlot> TargetChangeSlot);
	void HandleLocalEquipWeaponFromBackpackFinished();
	void HandleLocalBackpackCurrentWeaponFinished();
	bool HandleClientReconnecting();
	ESTExtraVehicleUserState GetVehicleUserState();
	class ASTExtraVehicleBase* GetCurrentClosestVehicle();
	class ASTExtraShootWeapon* GetCharacterVehicleWeapon();
	void FobidRspEnterVehicle(class ASTExtraVehicleBase* InVehicle, bool bSuccess, ESTExtraVehicleSeatType SeatType, int SeatInd);
	void FireVehicleWeapon();
	void Client_UnbindTouchEvents();
	void Client_ShouldBindTouchEvents();
	bool CheckCanLeanOutVehicle();
	bool CanVehicleShoot(class ASTExtraPlayerCharacter* PlayerCharacter);
	bool CanUseVehicleHorn();
	void AddVehicleFuel(float Amount);
};


// Class ShadowTrackerExtra.VehicleWeaponACComp
// 0x0030 (0x0340 - 0x0310)
class UVehicleWeaponACComp : public UWeaponAntiCheatComp
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0310(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehicleWeaponACComp");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VehWeaponAnimInstanceBase
// 0x0040 (0x0400 - 0x03C0)
class UVehWeaponAnimInstanceBase : public UAnimInstance
{
public:
	class ASTExtraVehicleBase*                         C_OwnerVehicle;                                           // 0x03C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                                    C_CameraRotator;                                          // 0x03C8(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                               bReload;                                                  // 0x03D4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	class UAnimSequence*                               C_VehicleWeaponIdle;                                      // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_VehicleWeaponReload;                                    // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                               C_VehicleWeaponUnuseIdle;                                 // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_VehicleWeaponReloadRate;                                // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	class UAnimMontage*                                C_VehicleWeaponFireMontage;                               // 0x03F8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VehWeaponAnimInstanceBase");
		return pStaticClass;
	}


	void HandlePlayerWeaponStateChanged(TEnumAsByte<EFreshWeaponStateType> NewState);
};


// Class ShadowTrackerExtra.VisualFieldComponent
// 0x00A0 (0x01C0 - 0x0120)
class UVisualFieldComponent : public UGameModeBaseComponent
{
public:
	struct FVisualFieldFeatureParam                    VisualFieldFeatureParam;                                  // 0x0120(0x0030) (Edit, Protected, NativeAccessSpecifierProtected)
	float                                              VisualFieldServerRepInterval;                             // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0154(0x0014) MISSED OFFSET
	struct FTimerHandle                                VisualFieldTickTimerHandle;                               // 0x0168(0x0008) (NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVisualFieldFrame                           VisualFieldFrame;                                         // 0x0170(0x0050) (Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VisualFieldComponent");
		return pStaticClass;
	}


	void OnClientReportPeerVisualFieldActorList(int CampID, TArray<class AActor*> PeerVisualFieldActorList);
	void ListenPeerVisualFieldReport(class APlayerController* InTargetPlayer);
};


// Class ShadowTrackerExtra.VisualFieldFeature
// 0x00E0 (0x0108 - 0x0028)
class UVisualFieldFeature : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0028(0x0030) MISSED OFFSET
	struct FTimerHandle                                VisualFieldTickTimerHandle;                               // 0x0058(0x0008) (NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVisualFieldFrame                           VisualFieldFrame;                                         // 0x0060(0x0050) (Protected, NativeAccessSpecifierProtected)
	TMap<int, float>                                   VisualAngleLimitMap;                                      // 0x00B0(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ASTExtraPlayerController>     CachedLocalController;                                    // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VisualFieldFeature");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VNInfectableArea
// 0x0020 (0x03B0 - 0x0390)
class AVNInfectableArea : public AActor
{
public:
	class UBoxComponent*                               BoxComponent;                                             // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClass*>                              InfactableActors;                                         // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UClass*                                      InfactableComponent;                                      // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VNInfectableArea");
		return pStaticClass;
	}


	void OnBeginOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class ShadowTrackerExtra.VNInstigatorInterface
// 0x0000 (0x0028 - 0x0028)
class UVNInstigatorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VNInstigatorInterface");
		return pStaticClass;
	}


	class AController* GetVNInstigator();
};


// Class ShadowTrackerExtra.VNPainCausingVolComponent
// 0x0060 (0x06D0 - 0x0670)
class UVNPainCausingVolComponent : public UBoxComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0670(0x0010) MISSED OFFSET
	unsigned char                                      bPainCausing : 1;                                         // 0x0680(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0681(0x0003) MISSED OFFSET
	float                                              DamagePerSec;                                             // 0x0684(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                      DamageType;                                               // 0x0688(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              PainInterval;                                             // 0x0690(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bEntryPain : 1;                                           // 0x0694(0x0001) (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      BACKUP_bPainCausing : 1;                                  // 0x0694(0x0001) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      bShouldUseTraceMethod : 1;                                // 0x0694(0x0001) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bToOwnerOnly;                                             // 0x0695(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0696(0x0002) MISSED OFFSET
	float                                              Duration;                                                 // 0x0698(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSingleInstanceOnly;                                      // 0x069C(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x3];                                       // 0x069D(0x0003) MISSED OFFSET
	class AController*                                 DamageInstigator;                                         // 0x06A0(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                SpecificItemID;                                           // 0x06A8(0x0004) (Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                itemType;                                                 // 0x06AC(0x0004) (Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bInstantDamage;                                           // 0x06B0(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bSelfDamaging;                                            // 0x06B1(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EMeleeDamageSubType>                   SubDamageType;                                            // 0x06B2(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x1D];                                      // 0x06B3(0x001D) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VNPainCausingVolComponent");
		return pStaticClass;
	}


	void OnDamagePulse(float Damage);
	void OnBeginOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	class AController* GetVNInstigator();
};


// Class ShadowTrackerExtra.VNSplineActor
// 0x0008 (0x0398 - 0x0390)
class AVNSplineActor : public AActor
{
public:
	class USplineComponent*                            Spline;                                                   // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VNSplineActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VNTargetedProjectileActor
// 0x0068 (0x03F8 - 0x0390)
class AVNTargetedProjectileActor : public AActor
{
public:
	struct FVector                                     TargetActorLocation;                                      // 0x0390(0x000C) (Edit, BlueprintVisible, Net, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     TargetActorOffset;                                        // 0x039C(0x000C) (Edit, BlueprintVisible, Net, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     InitLocation;                                             // 0x03A8(0x000C) (Edit, BlueprintVisible, Net, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              Speed;                                                    // 0x03B4(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldRotateAlongWithSpline;                             // 0x03B8(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bShouldAutoTraceToGround;                                 // 0x03B9(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03BA(0x0002) MISSED OFFSET
	float                                              TraceGroundDepth;                                         // 0x03BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsRay;                                                   // 0x03C0(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bIsHorizontal;                                            // 0x03C1(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03C2(0x0002) MISSED OFFSET
	float                                              RayFlyDistance;                                           // 0x03C4(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bReadyForLaunch;                                          // 0x03C8(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawDebugDots;                                           // 0x03C9(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x6];                                       // 0x03CA(0x0006) MISSED OFFSET
	class USplineComponent*                            SplineComponent;                                          // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVNSplineActor*                              SplineActor;                                              // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                         SpriteComponent;                                          // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                DebugLineSegments;                                        // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 Curve;                                                    // 0x03F0(0x0008) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VNTargetedProjectileActor");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.VNToxicGrenade
// 0x00A8 (0x0438 - 0x0390)
class AVNToxicGrenade : public AActor
{
public:
	int                                                HitDamage;                                                // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	TArray<class UClass*>                              IgnoredTemplates;                                         // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                               bDestroyAfterOverlap;                                     // 0x03A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET
	class AUTSkill*                                    OwnerSkill;                                               // 0x03B0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x50];                                      // 0x03B8(0x0050) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0410(0x0008) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypes;                                              // 0x0418(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                               bIgnoreOwner;                                             // 0x0428(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0xF];                                       // 0x0429(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VNToxicGrenade");
		return pStaticClass;
	}


	void ServerStopAndDestroy();
	void OnHitCallback(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnBeginOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnActorOverlapped(class AActor* OverlappedActor, class AActor* Other);
	void Kill();
};


// Class ShadowTrackerExtra.VoiceCheckObject
// 0x0050 (0x0078 - 0x0028)
class UVoiceCheckObject : public UObject
{
public:
	int                                                MaxCount;                                                 // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int                                                maxShowCount;                                             // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              maxShowAlpha;                                             // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              nowViewDis;                                               // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MoveMaxShowDis;                                           // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WeaponMaxShowDis;                                         // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              VehicleMaxShowDis;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              glassMaxShowDis;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoiceCheckObjectNode>               imageList;                                                // 0x0048(0x0010) (BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ASTExtraPlayerController*                    PlayerController;                                         // 0x0058(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              ShootRpcCoolDownCfg;                                      // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurShootRpcCoolDown;                                      // 0x0064(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanRpcShootEvent;                                        // 0x0068(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              StepRpcCoolDownCfg;                                       // 0x006C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurStepRpcCoolDown;                                       // 0x0070(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bCanRpcStepEvent;                                         // 0x0074(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0075(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.VoiceCheckObject");
		return pStaticClass;
	}


	void VoiceTick(float DeltaTime);
	void AddWeaponShotVoice(class ASTExtraShootWeapon* Weapon, const struct FVector& posVector, float showTime, bool isslience);
	void AddVehicleVoice(class ASTExtraVehicleBase* Vehicle, const struct FVector& posVector, float showTime);
	void AddGlassVoice(const struct FVector& posVector, float showTime);
	void AddCharacterMoveVoice(class ASTExtraBaseCharacter* Character, const struct FVector& posVector, float showTime);
};


// Class ShadowTrackerExtra.WarGameMode
// 0x0020 (0x1938 - 0x1918)
class AWarGameMode : public ABattleRoyaleGameModeTeam
{
public:
	int                                                WinScore;                                                 // 0x1918(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                Score_MakeOtherGotoNearDeath;                             // 0x191C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                Score_RescueOthers;                                       // 0x1920(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                Score_TeamAllDeath;                                       // 0x1924(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                Score_Kill;                                               // 0x1928(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x4];                                       // 0x192C(0x0004) MISSED OFFSET
	class APawn*                                       CurRespawnPlane;                                          // 0x1930(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WarGameMode");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WarGameMode_GrandTheft
// 0x0028 (0x1960 - 0x1938)
class AWarGameMode_GrandTheft : public AWarGameMode
{
public:
	TArray<struct FGrandTheftScoreItem>                ConfigScoreItems;                                         // 0x1938(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 GunsDamageModifierCurve;                                  // 0x1948(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 GrenadeDamageModifierCurve;                               // 0x1950(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                                 MeleeDamageModifierCurve;                                 // 0x1958(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WarGameMode_GrandTheft");
		return pStaticClass;
	}


	void UpdateCharacterAttrModifier(class ASTExtraPlayerController* PC);
	void HandlePlayerPickupItem(int ItemID, int count, class ASTExtraPlayerController* PC);
	class ASTExtraPlayerController* GetLastDamageCauser(uint32_t LastDamageCauserPlayerKey);
	int GetItemScore(int ItemSpecificID);
};


// Class ShadowTrackerExtra.WarGameMode_SuperPower
// 0x0000 (0x1938 - 0x1938)
class AWarGameMode_SuperPower : public AWarGameMode
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WarGameMode_SuperPower");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WarGameState
// 0x0048 (0x0A48 - 0x0A00)
class AWarGameState : public ASTExtraGameStateBase
{
public:
	struct FScoreChangeValue                           ScoreChangeValue;                                         // 0x0A00(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, NativeAccessSpecifierPublic)
	float                                              PersistentOriginRadius;                                   // 0x0A08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MatchLeftTimeRepPeriod;                                   // 0x0A0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int                                                GameModeWinScore;                                         // 0x0A10(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0A14(0x0014) MISSED OFFSET
	int                                                MatchLeftTime;                                            // 0x0A28(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              RespawnLeftTime;                                          // 0x0A2C(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0A30(0x0004) MISSED OFFSET
	bool                                               ResetRespawnLeftTime;                                     // 0x0A34(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0A35(0x0003) MISSED OFFSET
	int                                                TeamCount;                                                // 0x0A38(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                              LastRespawnTimeUpdateTimeSecond;                          // 0x0A3C(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0A40(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WarGameState");
		return pStaticClass;
	}


	void UpdateRespawnCountDownUI();
	void SetLastRespawnTimeUpdateTimeSecond();
	void OnRep_WinScore();
	void OnRep_TeamCount();
	void OnRep_RespawnLeftTime();
	void OnRep_MatchLeftTime();
	void OnRep_LastRespawnTimeUpdateTimeSecond();
	int GetWinScore();
	int GetTeamCount();
	float GetRespawnLeftTime();
	float GetMatchLeftTime();
};


// Class ShadowTrackerExtra.WarGameState_GrandTheft
// 0x0008 (0x0A50 - 0x0A48)
class AWarGameState_GrandTheft : public AWarGameState
{
public:
	class AWarPlayerState*                             ScoreLeaderPlayerState;                                   // 0x0A48(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WarGameState_GrandTheft");
		return pStaticClass;
	}


	int UpdateTeamScore(class ASTExtraPlayerState* InstigatorPlayerState, int ChangedScore, EWarScoreChangeReason Reason);
	void UpdateGlobalRepParam();
	void NotifyTeamScoreChanged(class ASTExtraPlayerState* InstigatorPlayerState, EWarScoreChangeReason Reason);
	int LoseScore(class ASTExtraPlayerState* TargetPlayerState);
	class AWarPlayerState* FindScoreLeader();
};


// Class ShadowTrackerExtra.WarPlayerState
// 0x0048 (0x10F0 - 0x10A8)
class AWarPlayerState : public ASTExtraPlayerState
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x10A8(0x0014) MISSED OFFSET
	struct FWarPlayerStateScore                        DisplayTipsScore;                                         // 0x10BC(0x0018) (BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FWarPlayerStateScore                        CachePlayerStateScore;                                    // 0x10D4(0x0018) (NoDestructor, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData01[0x4];                                       // 0x10EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WarPlayerState");
		return pStaticClass;
	}


	void OnRep_PlayerStateScore();
};


// Class ShadowTrackerExtra.WarPlayerState_GrandTheft
// 0x0020 (0x1110 - 0x10F0)
class AWarPlayerState_GrandTheft : public AWarPlayerState
{
public:
	class AWarPlayerState_GrandTheft*                  ThiefPlayerState;                                         // 0x10F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ThiefLocation;                                            // 0x10F8(0x000C) (Net, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                     ScoreLeaderLocation;                                      // 0x1104(0x000C) (Net, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WarPlayerState_GrandTheft");
		return pStaticClass;
	}


	void OnRep_ThiefLocation();
	void OnRep_ScoreLeaderLocation();
	int LoseScore();
	void AddScore(int NewScore);
};


// Class ShadowTrackerExtra.WaterSwimActor
// 0x0050 (0x03E0 - 0x0390)
class AWaterSwimActor : public AActor
{
public:
	float                                              Damage;                                                   // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              Interval;                                                 // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                      DamageType;                                               // 0x0398(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UClass*>                              DamageFilters;                                            // 0x03A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<int>                                        BuffIDs;                                                  // 0x03B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int>                                        SkillBuffIDs;                                             // 0x03C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UBoxComponent*                               WaterBoxComp;                                             // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WaterSwimActor");
		return pStaticClass;
	}


	bool IsLocationInWater(const struct FVector& Location);
	bool GetWaterZHeight(float* MinHeight, float* MaxHeight);
};


// Class ShadowTrackerExtra.WeaponAnimInstanceBase
// 0x0040 (0x0400 - 0x03C0)
class UWeaponAnimInstanceBase : public UAnimInstance
{
public:
	class ASTExtraShootWeapon*                         C_OwnerWeapon;                                            // 0x03C0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Charge;                                                 // 0x03C8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_Tactical;                                               // 0x03C9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<EFreshWeaponStateType>                 C_WeaponState;                                            // 0x03CA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x1];                                       // 0x03CB(0x0001) MISSED OFFSET
	float                                              C_ReloadAnimRate;                                         // 0x03CC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_CustomScopping;                                         // 0x03D0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_WeaponState_Reload;                                     // 0x03D1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_State_Reload;                                           // 0x03D2(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               C_State_Charge;                                           // 0x03D3(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              C_AlphaForHolder;                                         // 0x03D4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                TacticalReloadMontage;                                    // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                ChargeReloadMontage;                                      // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                BoltMontage;                                              // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                                FireMontage;                                              // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponAnimInstanceBase");
		return pStaticClass;
	}


	void PlayPostReloadWeaponAnimation(int RemainBulletNumToReload);
	void HandlePlayerWeaponStateChanged(TEnumAsByte<EFreshWeaponStateType> NewState);
};


// Class ShadowTrackerExtra.WeaponAutoAimingComponent
// 0x0370 (0x0480 - 0x0110)
class UWeaponAutoAimingComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0110(0x0020) MISSED OFFSET
	struct FAutoAimEnemyInfo                           SelectEnemyInfo;                                          // 0x0130(0x0018) (NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FAutoAimEnemyInfo                           LastSelectInfo;                                           // 0x0148(0x0018) (NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                                   AimTargetScreenPos;                                       // 0x0160(0x0008) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               LastAimSuccess;                                           // 0x0168(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0169(0x0007) MISSED OFFSET
	class APlayerController*                           PlayerController;                                         // 0x0170(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraBaseCharacter*                       PlayerPawn;                                               // 0x0178(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0180(0x0010) MISSED OFFSET
	float                                              AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;                     // 0x0190(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              AIM_HOLD_WHEN_OPEN_FIRE;                                  // 0x0194(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DEFAULT_CD_TIME;                                          // 0x0198(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              SCOPE_AUTO_AIM_TIME;                                      // 0x019C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MIN_FOLLOW_TIME;                                          // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData03[0x2C];                                      // 0x01A4(0x002C) MISSED OFFSET
	TArray<struct FName>                               Bones;                                                    // 0x01D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                               bShowDebug;                                               // 0x01E0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bEquipWeapon;                                             // 0x01E1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bInit;                                                    // 0x01E2(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData04[0x5];                                       // 0x01E3(0x0005) MISSED OFFSET
	class ASTExtraPlayerController*                    extraPlayerController;                                    // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	unsigned char                                      UnknownData05[0x1F8];                                     // 0x01F0(0x01F8) MISSED OFFSET
	bool                                               bIsStartScopeAutoAimCheck;                                // 0x03E8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData06[0x3];                                       // 0x03E9(0x0003) MISSED OFFSET
	float                                              ScopeAutoAimTime;                                         // 0x03EC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData07[0x90];                                      // 0x03F0(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponAutoAimingComponent");
		return pStaticClass;
	}


	void TryDoAiming(float DeltaTime);
	void SetIsStartScopeAutoAimCheck(bool IsOpenScopeCheck);
	void OnUnEquipWeapon();
	void OnShoot(class ASTExtraWeapon* Weapon);
	void OnRefreshAutoAimCfg();
	void OnEquipWeapon();
	bool IsTriggerBeforeFire();
	void Init(class AController* Controller);
	class AActor* GetTryRaycastActor(const struct FVector& startPoint, class ASTExtraPlayerCharacter* Pawn, TEnumAsByte<ETraceTypeQuery> TraceType);
	bool GetIsStartScopeAutoAimCheck();
	bool CheckSmoke(const struct FVector& startPoint, class ASTExtraPlayerCharacter* Pawn);
	bool CheckInAngle(class ASTExtraBaseCharacter* MyPawn, class ASTExtraBaseCharacter* EnemyPawn, float MaxAngle);
	bool CheckBuffStun();
	bool CanEnemeyRaycastReach(const struct FVector& startPoint, class ASTExtraPlayerCharacter* Pawn);
};


// Class ShadowTrackerExtra.WeaponAvatarComponent
// 0x01B8 (0x06D8 - 0x0520)
class UWeaponAvatarComponent : public UAvatarComponent
{
public:
	struct FScriptMulticastDelegate                    OnScopeEquipDelegate;                                     // 0x0520(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnScopeUnequipDelegate;                                   // 0x0530(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponAvatarLoaded;                                     // 0x0540(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponAttachAvatarLoaded;                               // 0x0550(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponAvatarClearSlot;                                  // 0x0560(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UBackpackWeaponHandle*                       AsyncCacheWeaponHandle;                                   // 0x0570(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScriptMulticastDelegate                    OnWeaponPartsEquipped;                                    // 0x0578(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UBattleItemHandleBase*                       handleRecord;                                             // 0x0588(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBattleItemHandleBase*                       MasterWeaponHandle;                                       // 0x0590(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                     AsyncLoadMeshAssetRef;                                    // 0x0598(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	int                                                AsyncLoadMeshAsyncLoadID;                                 // 0x05A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x05AC(0x0004) MISSED OFFSET
	struct FTimerHandle                                AsyncLoadMeshTimerHandle;                                 // 0x05B0(0x0008) (NoDestructor, NativeAccessSpecifierPublic)
	TMap<struct FMiniItem, struct FWeaponAttachmentConfig> attachmentRef;                                            // 0x05B8(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0608(0x0010) MISSED OFFSET
	TArray<struct FMeshSynData>                        defaultSynData;                                           // 0x0618(0x0010) (BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<int, struct FHandleMeshPack>                  DefaultAttachmentMesh;                                    // 0x0628(0x0050) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<int, struct FParticleEffectGroup>             ParticleComponents;                                       // 0x0678(0x0050) (ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x10];                                      // 0x06C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponAvatarComponent");
		return pStaticClass;
	}


	bool ShouldDisplayByQuality(int SlotID);
	void ResetAttachmentParent();
	void RemoveParticleEffect(int SlotID);
	class UBattleItemHandleBase* ReloadItemHandle(class UBattleItemHandleBase* Handle);
	bool PutOnMasterComponentByItemHandle(class UBackpackWeaponHandle* weaponHandle, class USkeletalMesh* skMesh, class UStaticMesh* stMesh, bool bAutonomous);
	bool PutOnEquipmentByResID(int resID);
	bool PutOnEquipmentByItemHandle(class UBattleItemHandleBase* ItemHandle, class USkeletalMesh* skMesh, class UStaticMesh* stMesh, bool bAutonomous);
	bool PutOffEquimentByResID(int resID);
	bool PreFiltHandles(class UBattleItemHandleBase* AvatarHandle, struct FMeshSynData* SyncData);
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool isEquipped);
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, const struct FItemDefineID& NewItemID);
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, const struct FItemDefineID& NewItemID);
	void OnScopeUnequipDelegate__DelegateSignature(EWeaponAttachmentSocketType AttachmentSocketType);
	void OnScopeEquipDelegate__DelegateSignature(EWeaponAttachmentSocketType AttachmentSocketTypeD);
	void OnMeshLoadedFunc();
	void OnMeshLoaded(const struct FSoftObjectPath& AssetList, class UBattleItemHandleBase* itemHandles, bool isReplaced, bool bAutonomous);
	void OnItemHandleLoaded(const struct FItemDefineID& DefineID, class UBattleItemHandleBase* ItemHandle);
	void OnItemHandleListLoaded(TArray<class UBattleItemHandleBase*> ItemHandleList);
	void OnDefaultItemLoaded(const struct FItemDefineID& DefineID, class UBattleItemHandleBase* ItemHandle);
	void OnAttachItemLoaded(const struct FItemDefineID& DefineID, class UBattleItemHandleBase* ItemHandle);
	void OnAsyncLoadMeshList(TArray<struct FSoftObjectPath> AssetRef, int AsyncLoadID);
	void OnAsyncInitDefaultAvatar_Default();
	void OnAsyncInitDefaultAvatar(bool bAutonomous);
	void NetSyncData(int Slot, ESyncOperation Type, class UBattleItemHandleBase* Handle);
	bool LoadMeshsAsync(class UBattleItemHandleBase* handleList, bool needDirectLoad, bool bAutonomous);
	bool LoadMeshListAsync(bool needDirectLoad, TArray<class UBattleItemHandleBase*>* handleList);
	void LoadDefaultAttachmentsAsync();
	bool IsTeammate();
	bool IsAutonomousAvatar();
	void InitMasterComponent(int AGender);
	void InitialAvatarParam(int AGender);
	void InitDefaultMesh(class UBattleItemHandleBase* Handle);
	void InitDefaultAvatar(class UBattleItemHandleBase* Handle);
	void InitDefaultAttachment(class UBackpackWeaponHandle* weaponHandle, bool bAutonomous);
	int GetWeaponParentID(int Slot, const struct FItemDefineID& InItemDefineID);
	class AController* GetWeaponController();
	class UStaticMesh* GetStaticMesh(const struct FWeaponMeshCfg& meshPack, bool bAutonomous);
	struct FName GetSocketName(int SlotID, int subSlotID);
	class USkeletalMesh* GetSkeletalMesh(const struct FWeaponMeshCfg& meshPack, bool bAutonomous);
	bool GetMeshResRef(class UBattleItemHandleBase* Handle, bool bAutonomous, struct FSoftObjectPath* AssetRef, struct FWeaponMeshCfg* OutMeshCfg);
	bool GetMeshPack(class UBattleItemHandleBase* Handle, struct FWeaponMeshCfg* meshCfg);
	class UMeshComponent* GetMeshComponentBySlotID(int SlotID);
	class UMaterialInstance* GetMaterial(struct FWeaponMeshCfg* meshPack);
	class UBackpackWeaponAttachHandle* GetEquippedHandle(int SlotID);
	class UMeshComponent* GetAttachmentSocketTransform(int SlotID);
	class UAnimationAsset* GetAttachmentAnim(EWeaponAttachmentSocketType SlotID, int AnimIdx);
	void ClearMeshBySlot(int Slot, bool putDefault, bool bAutonomous);
	void ClearMeshByItemHandle(class UBattleItemHandleBase* ItemHandle);
	bool CheckSlotIsEquipped(int SlotID);
	bool CheckIsAlreadyEquipped(const struct FItemDefineID& DefineID);
	bool ApplyStaticMeshByID(int Slot, class UStaticMesh* pSM, class UMaterialInstance* Mat, class UBattleItemHandleBase* Handle, bool bAutonomous);
	bool ApplySkeletalMeshByID(int Slot, class USkeletalMesh* Mesh, class UMaterialInstance* Mat, class UBattleItemHandleBase* Handle, bool bAutonomous);
	void ApplyParticleEffect(int Slot, class UBackpackWeaponAttachHandle* Handle, bool bAutonomous);
	void ApplyMaterial(class UBattleItemHandleBase* ItemHandle, class UMeshComponent* meshComp, bool bAutonomous);
	void ApplyAttachment(class UBackpackWeaponAttachHandle* attachHandle, bool bAutonomous);
	void ApplyAnimation(int Slot, class UBackpackWeaponHandle* Handle);
};


// Class ShadowTrackerExtra.WeaponManagerBaseComponent
// 0x0030 (0x0620 - 0x05F0)
class UWeaponManagerBaseComponent : public UWeaponManagerComponent
{
public:
	TArray<struct FWeaponReconnectReplicateDataWrapper> PreWeaponReconnectReplicateDataWrapperList;               // 0x05F0(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FWeaponReconnectReplicateDataWrapper> WeaponReconnectReplicateDataWrapperList;                  // 0x0600(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDefaultWeaponHolderInfo>            WeaponInfoList;                                           // 0x0610(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponManagerBaseComponent");
		return pStaticClass;
	}


	bool StopFireFilter(class ASTExtraShootWeapon* ShootWeapon);
	void StopFire(class ASTExtraShootWeapon* ShootWeapon);
	bool StartFireFilter(class ASTExtraShootWeapon* ShootWeapon);
	void StartFireBySlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot, TEnumAsByte<EShootWeaponShootMode> ShootMode);
	class ASTExtraWeapon* SpawnWeaponOnServer(class UClass* Template, int WeaponType, int WeaponID, const struct FName& LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);
	class ASTExtraWeapon* SpawnAndBackpackWeaponOnServer(class UClass* Template, const struct FItemDefineID& ID, const struct FName& LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);
	bool ReloadWeaponFilter(class ASTExtraShootWeapon* ShootWeapon);
	bool ReloadCurrentWeapon(class ASTExtraShootWeapon* ShootWeapon);
	void OnRep_CurrentWeaponReplicated();
	void OnReconnectOnServer();
	void LocalStopFire(class ASTExtraShootWeapon* ShootWeapon);
	void LocalStartFire(class ASTExtraShootWeapon* ShootWeapon, TEnumAsByte<EShootWeaponShootMode> ShootMode, const struct FVector& SimpleShootTarget, const struct FVector2D& ClientScreenSize);
	void LocalStartBarrel(class ASTExtraShootWeapon* ShootWeapon);
	void LocalHandleWeaponSystemDataOnSimulate(struct FWeaponSystemDataOnSimulateClient* Data);
	void LocalEquipWeapon(class ASTExtraWeapon* Weapon, TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	void DoAutoReloadCurrentWeapon(class ASTExtraShootWeapon* ShootWeapon);
	void DelayFire(float DelayTime, TEnumAsByte<EShootWeaponShootMode> ShootMode);
};


// Class ShadowTrackerExtra.WeaponOwnerInterface
// 0x0000 (0x0028 - 0x0028)
class UWeaponOwnerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponOwnerInterface");
		return pStaticClass;
	}


	void ShootProjectileBullet(class ASTExtraShootWeapon* TargetWeapon, const struct FTransform& Trans, uint32_t ShootID, int Pellet);
	TEnumAsByte<EShootVertifyRes> ShootCharacterVertify(const struct FBulletHitInfoUploadData& ShootData, const struct FLocalShootHitData& LocalShootHitData, class ASTExtraShootWeapon* Weapon);
	void SetWeaponReconnectIdx(int WeaponReconnectOpIndex);
	void SetTemporaryWeapon(class ASTExtraShootWeapon* InVehicleWeapon, bool IsServerCall);
	void SetReloadMethod(TEnumAsByte<EWeaponReloadMethod> reloadMethod, class ASTExtraShootWeapon* ShootWeapon);
	void SetPawnReloadWeaponFinished(bool IsFinished);
	void SetCurReloadWeapon(class ASTExtraWeapon* Weapon);
	void ServerHandleBulletHitData(class ASTExtraWeapon* OwnerWeapon, struct FBulletHitInfoUploadData* Data);
	void ServerChangeWeaponRotation(class ASTExtraWeapon* Weapon, const struct FRotator& InRot);
	void RefreshWeaponOwnerCollision(float CountDown);
	void PawnLeaveState(EPawnState State);
	bool PawnHasState(EPawnState PawnState);
	class AController* PawnGetController();
	bool PawnEnterState(EPawnState State);
	bool PawnAllowState(EPawnState State, bool withLog);
	void OpenBoxHitCollison(float CountTime);
	void NotifyServerProjectileBulletImpact(const struct FExplosionProjectileHitInfo& InExpProjectileInfo, class AProjectileBulletBase* Bullet);
	void LevaveFire(class ASTExtraShootWeapon* OwnerShootWeapon);
	bool IsWeaponOwnerLocallyControlled();
	bool IsLocalViewed();
	bool IsGunADS();
	bool IsEnableBulletFlySound();
	bool IsClient_WeaponOwner();
	bool IsAlive();
	bool IsAI();
	void HandleWeaponShootLost();
	void HandleStartFireDelegate(class ASTExtraShootWeapon* ShootWeapon);
	void HandleShootDelegate(class ASTExtraShootWeapon* ShootWeapon);
	void HandlePlayerWeaponChangeState(TEnumAsByte<EFreshWeaponStateType> WeaponStateType);
	void HandleMoveAntiShootVerifyMiss();
	void HandleBulletHitEvent(class AActor* ImpactActor, const struct FVector& ImpactPoint);
	uint32_t GetWeaponUserPlayerKey();
	class AActor* GetWeaponUserConst();
	class ASTExtraBaseCharacter* GetWeaponUserCharacter();
	class AActor* GetWeaponUser();
	int GetWeaponReconnectIdx();
	uint32_t GetWeaponOwnerPlayerKey();
	float GetWeaponOwnerPawnHealth();
	class UWeaponManagerBaseComponent* GetWeaponManagerBase();
	class UWeaponManagerComponent* GetWeaponManager();
	class ASTExtraWeapon* GetWeaponBySlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	class ASTExtraShootWeapon* GetTemporaryWeapon();
	class ASTExtraShootWeapon* GetShootWeaponBySlot(TEnumAsByte<ESurviveWeaponPropSlot> Slot);
	class USecuryInfoComponent* GetSecuryInfoComp();
	TEnumAsByte<ENetRole> GetRole();
	class ASTExtraPlayerState* GetPlayerState();
	struct FString GetPlayerNameSafety();
	uint32_t GetPlayerIdentifier();
	class ASTExtraPlayerController* GetPlayerControllerSafety();
	class UPartHitComponent* GetPartHitComponent();
	struct FVector GetOwnerActorLocation();
	EObserverType GetObserverType();
	class UMoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();
	class ULagCompensationComponentBase* GetLagCompensationComponent();
	bool GetIsInDoor();
	bool GetIsGunADS();
	int GetHandFolderRatio();
	struct FVector GetGunOwnerHeadLocation();
	class USkeletalMeshComponent* GetEquipWeaponAttachMesh();
	class ASTExtraVehicleBase* GetCurrentVehicle();
	uint64_t GetCurrentStatesInterface();
	class UUAECharAnimListCompBase* GetCharacterAnimComponent();
	class UCapsuleComponent* GetCapsuleComponentInterface();
	void EnterFire();
	bool CheckWeaponIsCurUsingWeapon(class ASTExtraWeapon* CurWeapon);
	bool CheckPickWeaponCanAutoUse();
	void CheckNeedReload(class ASTExtraShootWeapon* OwnerShootWeapon, class AActor* WeaponOwnerActor);
	bool CheckCanAutoUseWeapon(class ASTExtraWeapon* Weapon);
	void CalculateShootPlayerHeadNum(int AddShootTimes, bool IsAI);
	void CalculateShootNum(int AddShootTimes);
	void CalculateShootAndHitPlayerNum(int AddShootTimes, bool IsAI);
	void CalculateBulletCount(int BulletID, int count);
};


// Class ShadowTrackerExtra.WeaponOwnerProxy
// 0x0030 (0x0058 - 0x0028)
class UWeaponOwnerProxy : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class AActor*                                      OwnerActor;                                               // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                       OwnerPawn;                                                // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AController*                                 OwnerController;                                          // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraWeapon*                              BindedWeapon;                                             // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponOwnerProxy");
		return pStaticClass;
	}


	void OnWeaponStopFireDelegate__DelegateSignature();
	void HandlePlayerSwitchCameraMode(TEnumAsByte<EPlayerCameraMode> Mode);
	void HandlePlayerChangePose(TEnumAsByte<ESTEPoseState> LastPose, TEnumAsByte<ESTEPoseState> NewPose);
	class ASTExtraPlayerController* GetOwnerSTExtraPlayerController();
	class ASTExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();
	class APlayerController* GetOwnerPlayerController();
	class APawn* GetOwnerPawn();
	class AController* GetOwnerController();
	class AActor* GetOwnerActor();
};


// Class ShadowTrackerExtra.WeaponOwnerProxyFactory
// 0x0000 (0x0028 - 0x0028)
class UWeaponOwnerProxyFactory : public UInterface
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponOwnerProxyFactory");
		return pStaticClass;
	}


	class UWeaponOwnerProxy* GetWeaponOwnerProxy();
};


// Class ShadowTrackerExtra.WeaponPostFireState
// 0x0010 (0x01C0 - 0x01B0)
class UWeaponPostFireState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponPostFireState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WeaponPostReloadState
// 0x0010 (0x01C0 - 0x01B0)
class UWeaponPostReloadState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponPostReloadState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WeaponPreFireState
// 0x0010 (0x01C0 - 0x01B0)
class UWeaponPreFireState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponPreFireState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WeaponShiled
// 0x0000 (0x0810 - 0x0810)
class AWeaponShiled : public ASTExtraWeapon
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponShiled");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WeaponSpecificHandler
// 0x0038 (0x0170 - 0x0138)
class UWeaponSpecificHandler : public UWeaponLogicBaseComponent
{
public:
	struct FItemDefineID                               ItemDefineID;                                             // 0x0138(0x0018) (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       LogicSocket;                                              // 0x0150(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                       AttachSocket;                                             // 0x0158(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TEnumAsByte<ESurviveWeaponPropSlot>                SurviveWeaponPropSlot;                                    // 0x0160(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	float                                              AIMinAttackDist;                                          // 0x0164(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AIMaxAttackDist;                                          // 0x0168(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                              AIAttackDist;                                             // 0x016C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponSpecificHandler");
		return pStaticClass;
	}


	class UItemHandleBase* GetBackpackItemHandle();
	int GetAvailableBulletsNumInBackpack();
};


// Class ShadowTrackerExtra.WeaponStateDefault
// 0x0000 (0x01B0 - 0x01B0)
class UWeaponStateDefault : public UWeaponStateBase
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponStateDefault");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WeaponWarmUpState
// 0x0050 (0x0200 - 0x01B0)
class UWeaponWarmUpState : public UWeaponStateBase
{
public:
	float                                              BarrelRotateAccSpeed;                                     // 0x01B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BarrelRotateDesSpeed;                                     // 0x01B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              BarrelRotateMaxSpeed;                                     // 0x01B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurBarrelRotateSpeed;                                     // 0x01BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              CurBarrelRotateVal;                                       // 0x01C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              FireWarm;                                                 // 0x01C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              MaxWarm;                                                  // 0x01C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WarmUpSpeed;                                              // 0x01CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              WarmDownSpeed;                                            // 0x01D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWarmUpFinishAndStartFire;                               // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASTExtraBaseCharacter*                       WeaponOwner;                                              // 0x01F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bWarmUpFinished;                                          // 0x01F8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01F9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeaponWarmUpState");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WeatherCountDown
// 0x0050 (0x03F8 - 0x03A8)
class UWeatherCountDown : public UUAEUserWidget
{
public:
	class ADynamicWeatherMgr*                          WeatherMgr;                                               // 0x03A8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWeatherUIType>                      WeatherUIConfig;                                          // 0x03B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTextBlock*                                  textTimeSuperCold;                                        // 0x03C0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                                PanelRoot2;                                               // 0x03C8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                             weatherSwitch2;                                           // 0x03D0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                             typeSwitch;                                               // 0x03D8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData00[0x14];                                      // 0x03E0(0x0014) MISSED OFFSET
	int                                                CurrWeatherConfigIndex;                                   // 0x03F4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WeatherCountDown");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WheelSfxConfig
// 0x0010 (0x0040 - 0x0030)
class UWheelSfxConfig : public UDataAsset
{
public:
	TArray<struct FWheelSfxOnSurface>                  WheelSfxOnSurface;                                        // 0x0030(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WheelSfxConfig");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WonderfulRecordingCut
// 0x0070 (0x0098 - 0x0028)
class UWonderfulRecordingCut : public UObject
{
public:
	TArray<struct FWonderfulCutOutputData>             WonderfulCutOutputDataList;                               // 0x0028(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWonderfulCutContinuousKillOutputData> WonderfulCutContinuousKillOutputDataList;                 // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0048(0x002C) MISSED OFFSET
	bool                                               bIsChickenDinner;                                         // 0x0074(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	float                                              ChickenDinnerTimeSecs;                                    // 0x0078(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                               bIsShowSmallCircle;                                       // 0x007C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData02[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              ShowSmallCircleTimeSecs;                                  // 0x0080(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	TArray<struct FWonderfulCutShootDamageData>        ShootDamageDataList;                                      // 0x0088(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WonderfulRecordingCut");
		return pStaticClass;
	}


	void StopRecord(bool bRankFirst);
	void StartRecord();
	void SortShootDamageData(TArray<struct FWonderfulCutShootDamageSortData>* LargeCircleDataList, TArray<struct FWonderfulCutShootDamageSortData>* SmallCircleDataList);
	void RemoveOutputDataInContinuousKillRange(TArray<struct FWonderfulCutShootDamageSortData>* SortDataList);
	void CaptureRecordCut(TEnumAsByte<EWonderfulCutCaptureType> CaptureType, int DamagePlayerID, bool bAI, TEnumAsByte<EWonderfulCutShootDamageType> ShootDamageType, float ShootDistance, const struct FString& CauserName);
	void BuildOutputData();
	void BuildContinuousKillOutputData();
};


// Class ShadowTrackerExtra.WorldLevelProbeComponent
// 0x0058 (0x0168 - 0x0110)
class UWorldLevelProbeComponent : public UGameModeProbeComponent
{
public:
	bool                                               IsIgnoreLastCircle;                                       // 0x0110(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x57];                                      // 0x0111(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WorldLevelProbeComponent");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.WrapperOverlapManagerComponent
// 0x0030 (0x06A0 - 0x0670)
class UWrapperOverlapManagerComponent : public UBoxComponent
{
public:
	float                                              OverlapCheckInterval;                                     // 0x0670(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                               bDrawSubLevelManageComp;                                  // 0x0674(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0675(0x0003) MISSED OFFSET
	float                                              DrawSubLevelManageCompTime;                               // 0x0678(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x4];                                       // 0x067C(0x0004) MISSED OFFSET
	TArray<class AActor*>                              OverlappedSubLevelActorArray;                             // 0x0680(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0690(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.WrapperOverlapManagerComponent");
		return pStaticClass;
	}


	void HandleOnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void HandleEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
};


// Class ShadowTrackerExtra.XTArea
// 0x0008 (0x0398 - 0x0390)
class AXTArea : public AActor
{
public:
	int                                                AreaID;                                                   // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.XTArea");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.XTAreaBox
// 0x0008 (0x03A0 - 0x0398)
class AXTAreaBox : public AXTArea
{
public:
	class UBoxComponent*                               Area;                                                     // 0x0398(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.XTAreaBox");
		return pStaticClass;
	}


	bool IsInArea(struct FVector* Position);
};


// Class ShadowTrackerExtra.XTAreaSphere
// 0x0008 (0x03A0 - 0x0398)
class AXTAreaSphere : public AXTArea
{
public:
	class USphereComponent*                            SphereArea;                                               // 0x0398(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.XTAreaSphere");
		return pStaticClass;
	}


	bool IsInArea(struct FVector* Position);
};


// Class ShadowTrackerExtra.XTPoint
// 0x0008 (0x0398 - 0x0390)
class AXTPoint : public AActor
{
public:
	int                                                CustomIValue;                                             // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.XTPoint");
		return pStaticClass;
	}


	int GetIntValueTwo();
	int GetIntValueThree();
	int GetIntValueOne();
};


// Class ShadowTrackerExtra.XTriggerLuaRemoteComponent
// 0x0058 (0x0168 - 0x0110)
class UXTriggerLuaRemoteComponent : public UActorComponent
{
public:
	TMap<struct FString, float>                        EventTagCDMap;                                            // 0x0110(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	float                                              EventCDTime;                                              // 0x0160(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0164(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.XTriggerLuaRemoteComponent");
		return pStaticClass;
	}


	bool LuaRemoteEvent(const struct FString& EventTag, const struct FString& CustomParam, class UObject* Object01, class UObject* Object02);
};


// Class ShadowTrackerExtra.ZombieSurviveGameMode
// 0x0008 (0x19A0 - 0x1998)
class AZombieSurviveGameMode : public AZombieBaseGameMode
{
public:
	bool                                               IsResetPlayerStart;                                       // 0x1998(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x7];                                       // 0x1999(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ZombieSurviveGameMode");
		return pStaticClass;
	}


	void SetPlayerStartOccupied(class AActor* PlayerStart);
	void NotifyGameModeInit();
	bool IsNeedRestPlayerStart(class AController* Player);
	void InitPlayerStartObjs();
	void GotoFinishedState();
	void GotoFightingState();
	class AActor* GetUsePlayerStartByGroup(class ASTExtraPlayerStartGroup* Group, bool CanRepeat);
	void DestroyPlayerStartObjs();
	class AActor* ChoosePlayerStartByTeamId(int TeamID);
	bool CheckTeamGameEnd();
	void CheckResetPlayerStartGroup(int TeamID);
	bool CheckGameEnd();
	void ChangeFinishTime(int RestTime);
};


// Class ShadowTrackerExtra.ZombieSurviveGameModeStateFighting
// 0x0010 (0x0068 - 0x0058)
class UZombieSurviveGameModeStateFighting : public UGameModeStateFightingTeam
{
public:
	bool                                               IsShowCountDown;                                          // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              DelayShowCountDownTime;                                   // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ZombieSurviveGameModeStateFighting");
		return pStaticClass;
	}


	void ChangeFinishTime(int RestTime);
};


// Class ShadowTrackerExtra.ZombieSurviveGameModeStateFinished
// 0x0000 (0x0048 - 0x0048)
class UZombieSurviveGameModeStateFinished : public UGameModeStateFinishedTeam
{
public:

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ZombieSurviveGameModeStateFinished");
		return pStaticClass;
	}

};


// Class ShadowTrackerExtra.ZombieSurviveGameStateBase
// 0x0020 (0x0A20 - 0x0A00)
class AZombieSurviveGameStateBase : public ASTExtraGameStateBase
{
public:
	struct FScriptMulticastDelegate                    FightingCountDownMessage;                                 // 0x0A00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                               IsShowFightingStateCountingDown;                          // 0x0A10(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0A11(0x0003) MISSED OFFSET
	float                                              FightingStateTime;                                        // 0x0A14(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              RestFightingStateTime;                                    // 0x0A18(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                              DelayShowFightingStateCDTime;                             // 0x0A1C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static UClass* StaticClass()
	{
        static UClass *pStaticClass = 0;
        if (!pStaticClass)
            pStaticClass = UObject::FindClass("Class ShadowTrackerExtra.ZombieSurviveGameStateBase");
		return pStaticClass;
	}


	void BroadFightingStateTime(bool IsShowCountDown, float StateTime, float RestFStateTime, float DelayTime);
	void BroadFightingLeftTime(float StateTime, float RestFStateTime, float DelayTime);
};


}

